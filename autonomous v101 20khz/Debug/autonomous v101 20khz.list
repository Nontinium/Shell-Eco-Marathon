
autonomous v101 20khz.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aee4  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  0800b0bc  0800b0bc  0000c0bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b374  0800b374  0000d514  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b374  0800b374  0000c374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b37c  0800b37c  0000d514  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b37c  0800b37c  0000c37c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b380  0800b380  0000c380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000514  20000000  0800b384  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001778  20000514  0800b898  0000d514  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c8c  0800b898  0000dc8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d514  2**0
                  CONTENTS, READONLY
 12 .debug_line   00049973  00000000  00000000  0000d544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 000000bd  00000000  00000000  00056eb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0004aacb  00000000  00000000  00056f74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00009049  00000000  00000000  000a1a3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001f70  00000000  00000000  000aaa88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0013cb77  00000000  00000000  000ac9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000036d7  00000000  00000000  001e956f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 0001f231  00000000  00000000  001ecc46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  000352b6  00000000  00000000  0020be77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0024112d  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005478  00000000  00000000  00241170  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000514 	.word	0x20000514
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800b0a4 	.word	0x0800b0a4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000518 	.word	0x20000518
 8000214:	0800b0a4 	.word	0x0800b0a4

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_drsub>:
 800046c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000470:	e002      	b.n	8000478 <__adddf3>
 8000472:	bf00      	nop

08000474 <__aeabi_dsub>:
 8000474:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000478 <__adddf3>:
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	bf1f      	itttt	ne
 800048e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000492:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049e:	f000 80e2 	beq.w	8000666 <__adddf3+0x1ee>
 80004a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004aa:	bfb8      	it	lt
 80004ac:	426d      	neglt	r5, r5
 80004ae:	dd0c      	ble.n	80004ca <__adddf3+0x52>
 80004b0:	442c      	add	r4, r5
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	ea82 0000 	eor.w	r0, r2, r0
 80004be:	ea83 0101 	eor.w	r1, r3, r1
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	2d36      	cmp	r5, #54	@ 0x36
 80004cc:	bf88      	it	hi
 80004ce:	bd30      	pophi	{r4, r5, pc}
 80004d0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x70>
 80004e2:	4240      	negs	r0, r0
 80004e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f4:	d002      	beq.n	80004fc <__adddf3+0x84>
 80004f6:	4252      	negs	r2, r2
 80004f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004fc:	ea94 0f05 	teq	r4, r5
 8000500:	f000 80a7 	beq.w	8000652 <__adddf3+0x1da>
 8000504:	f1a4 0401 	sub.w	r4, r4, #1
 8000508:	f1d5 0e20 	rsbs	lr, r5, #32
 800050c:	db0d      	blt.n	800052a <__adddf3+0xb2>
 800050e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000512:	fa22 f205 	lsr.w	r2, r2, r5
 8000516:	1880      	adds	r0, r0, r2
 8000518:	f141 0100 	adc.w	r1, r1, #0
 800051c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000520:	1880      	adds	r0, r0, r2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	4159      	adcs	r1, r3
 8000528:	e00e      	b.n	8000548 <__adddf3+0xd0>
 800052a:	f1a5 0520 	sub.w	r5, r5, #32
 800052e:	f10e 0e20 	add.w	lr, lr, #32
 8000532:	2a01      	cmp	r2, #1
 8000534:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000538:	bf28      	it	cs
 800053a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	18c0      	adds	r0, r0, r3
 8000544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800054c:	d507      	bpl.n	800055e <__adddf3+0xe6>
 800054e:	f04f 0e00 	mov.w	lr, #0
 8000552:	f1dc 0c00 	rsbs	ip, ip, #0
 8000556:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055a:	eb6e 0101 	sbc.w	r1, lr, r1
 800055e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000562:	d31b      	bcc.n	800059c <__adddf3+0x124>
 8000564:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000568:	d30c      	bcc.n	8000584 <__adddf3+0x10c>
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000570:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000574:	f104 0401 	add.w	r4, r4, #1
 8000578:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800057c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000580:	f080 809a 	bcs.w	80006b8 <__adddf3+0x240>
 8000584:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	ea41 0105 	orr.w	r1, r1, r5
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a0:	4140      	adcs	r0, r0
 80005a2:	eb41 0101 	adc.w	r1, r1, r1
 80005a6:	3c01      	subs	r4, #1
 80005a8:	bf28      	it	cs
 80005aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005ae:	d2e9      	bcs.n	8000584 <__adddf3+0x10c>
 80005b0:	f091 0f00 	teq	r1, #0
 80005b4:	bf04      	itt	eq
 80005b6:	4601      	moveq	r1, r0
 80005b8:	2000      	moveq	r0, #0
 80005ba:	fab1 f381 	clz	r3, r1
 80005be:	bf08      	it	eq
 80005c0:	3320      	addeq	r3, #32
 80005c2:	f1a3 030b 	sub.w	r3, r3, #11
 80005c6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ca:	da0c      	bge.n	80005e6 <__adddf3+0x16e>
 80005cc:	320c      	adds	r2, #12
 80005ce:	dd08      	ble.n	80005e2 <__adddf3+0x16a>
 80005d0:	f102 0c14 	add.w	ip, r2, #20
 80005d4:	f1c2 020c 	rsb	r2, r2, #12
 80005d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005dc:	fa21 f102 	lsr.w	r1, r1, r2
 80005e0:	e00c      	b.n	80005fc <__adddf3+0x184>
 80005e2:	f102 0214 	add.w	r2, r2, #20
 80005e6:	bfd8      	it	le
 80005e8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ec:	fa01 f102 	lsl.w	r1, r1, r2
 80005f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f4:	bfdc      	itt	le
 80005f6:	ea41 010c 	orrle.w	r1, r1, ip
 80005fa:	4090      	lslle	r0, r2
 80005fc:	1ae4      	subs	r4, r4, r3
 80005fe:	bfa2      	ittt	ge
 8000600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000604:	4329      	orrge	r1, r5
 8000606:	bd30      	popge	{r4, r5, pc}
 8000608:	ea6f 0404 	mvn.w	r4, r4
 800060c:	3c1f      	subs	r4, #31
 800060e:	da1c      	bge.n	800064a <__adddf3+0x1d2>
 8000610:	340c      	adds	r4, #12
 8000612:	dc0e      	bgt.n	8000632 <__adddf3+0x1ba>
 8000614:	f104 0414 	add.w	r4, r4, #20
 8000618:	f1c4 0220 	rsb	r2, r4, #32
 800061c:	fa20 f004 	lsr.w	r0, r0, r4
 8000620:	fa01 f302 	lsl.w	r3, r1, r2
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	fa21 f304 	lsr.w	r3, r1, r4
 800062c:	ea45 0103 	orr.w	r1, r5, r3
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	f1c4 040c 	rsb	r4, r4, #12
 8000636:	f1c4 0220 	rsb	r2, r4, #32
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 f304 	lsl.w	r3, r1, r4
 8000642:	ea40 0003 	orr.w	r0, r0, r3
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	fa21 f004 	lsr.w	r0, r1, r4
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f094 0f00 	teq	r4, #0
 8000656:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800065a:	bf06      	itte	eq
 800065c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000660:	3401      	addeq	r4, #1
 8000662:	3d01      	subne	r5, #1
 8000664:	e74e      	b.n	8000504 <__adddf3+0x8c>
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf18      	it	ne
 800066c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000670:	d029      	beq.n	80006c6 <__adddf3+0x24e>
 8000672:	ea94 0f05 	teq	r4, r5
 8000676:	bf08      	it	eq
 8000678:	ea90 0f02 	teqeq	r0, r2
 800067c:	d005      	beq.n	800068a <__adddf3+0x212>
 800067e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000682:	bf04      	itt	eq
 8000684:	4619      	moveq	r1, r3
 8000686:	4610      	moveq	r0, r2
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	ea91 0f03 	teq	r1, r3
 800068e:	bf1e      	ittt	ne
 8000690:	2100      	movne	r1, #0
 8000692:	2000      	movne	r0, #0
 8000694:	bd30      	popne	{r4, r5, pc}
 8000696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069a:	d105      	bne.n	80006a8 <__adddf3+0x230>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	4149      	adcs	r1, r1
 80006a0:	bf28      	it	cs
 80006a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006ac:	bf3c      	itt	cc
 80006ae:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006b2:	bd30      	popcc	{r4, r5, pc}
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006bc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf1a      	itte	ne
 80006cc:	4619      	movne	r1, r3
 80006ce:	4610      	movne	r0, r2
 80006d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d4:	bf1c      	itt	ne
 80006d6:	460b      	movne	r3, r1
 80006d8:	4602      	movne	r2, r0
 80006da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006de:	bf06      	itte	eq
 80006e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e4:	ea91 0f03 	teqeq	r1, r3
 80006e8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop

080006f0 <__aeabi_ui2d>:
 80006f0:	f090 0f00 	teq	r0, #0
 80006f4:	bf04      	itt	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	4770      	bxeq	lr
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000700:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000704:	f04f 0500 	mov.w	r5, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	e750      	b.n	80005b0 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_i2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000724:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000728:	bf48      	it	mi
 800072a:	4240      	negmi	r0, r0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e73e      	b.n	80005b0 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_f2d>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073a:	ea4f 0131 	mov.w	r1, r1, rrx
 800073e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000742:	bf1f      	itttt	ne
 8000744:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000748:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800074c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000750:	4770      	bxne	lr
 8000752:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000756:	bf08      	it	eq
 8000758:	4770      	bxeq	lr
 800075a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800075e:	bf04      	itt	eq
 8000760:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000764:	4770      	bxeq	lr
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	e71c      	b.n	80005b0 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_ul2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f04f 0500 	mov.w	r5, #0
 8000786:	e00a      	b.n	800079e <__aeabi_l2d+0x16>

08000788 <__aeabi_l2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000796:	d502      	bpl.n	800079e <__aeabi_l2d+0x16>
 8000798:	4240      	negs	r0, r0
 800079a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007a2:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007aa:	f43f aed8 	beq.w	800055e <__adddf3+0xe6>
 80007ae:	f04f 0203 	mov.w	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c6:	f1c2 0320 	rsb	r3, r2, #32
 80007ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ce:	fa20 f002 	lsr.w	r0, r0, r2
 80007d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d6:	ea40 000e 	orr.w	r0, r0, lr
 80007da:	fa21 f102 	lsr.w	r1, r1, r2
 80007de:	4414      	add	r4, r2
 80007e0:	e6bd      	b.n	800055e <__adddf3+0xe6>
 80007e2:	bf00      	nop

080007e4 <__gedf2>:
 80007e4:	f04f 3cff 	mov.w	ip, #4294967295
 80007e8:	e006      	b.n	80007f8 <__cmpdf2+0x4>
 80007ea:	bf00      	nop

080007ec <__ledf2>:
 80007ec:	f04f 0c01 	mov.w	ip, #1
 80007f0:	e002      	b.n	80007f8 <__cmpdf2+0x4>
 80007f2:	bf00      	nop

080007f4 <__cmpdf2>:
 80007f4:	f04f 0c01 	mov.w	ip, #1
 80007f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000800:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000804:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800080e:	d01b      	beq.n	8000848 <__cmpdf2+0x54>
 8000810:	b001      	add	sp, #4
 8000812:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000816:	bf0c      	ite	eq
 8000818:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800081c:	ea91 0f03 	teqne	r1, r3
 8000820:	bf02      	ittt	eq
 8000822:	ea90 0f02 	teqeq	r0, r2
 8000826:	2000      	moveq	r0, #0
 8000828:	4770      	bxeq	lr
 800082a:	f110 0f00 	cmn.w	r0, #0
 800082e:	ea91 0f03 	teq	r1, r3
 8000832:	bf58      	it	pl
 8000834:	4299      	cmppl	r1, r3
 8000836:	bf08      	it	eq
 8000838:	4290      	cmpeq	r0, r2
 800083a:	bf2c      	ite	cs
 800083c:	17d8      	asrcs	r0, r3, #31
 800083e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000842:	f040 0001 	orr.w	r0, r0, #1
 8000846:	4770      	bx	lr
 8000848:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800084c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000850:	d102      	bne.n	8000858 <__cmpdf2+0x64>
 8000852:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000856:	d107      	bne.n	8000868 <__cmpdf2+0x74>
 8000858:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800085c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000860:	d1d6      	bne.n	8000810 <__cmpdf2+0x1c>
 8000862:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000866:	d0d3      	beq.n	8000810 <__cmpdf2+0x1c>
 8000868:	f85d 0b04 	ldr.w	r0, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop

08000870 <__aeabi_cdrcmple>:
 8000870:	4684      	mov	ip, r0
 8000872:	4610      	mov	r0, r2
 8000874:	4662      	mov	r2, ip
 8000876:	468c      	mov	ip, r1
 8000878:	4619      	mov	r1, r3
 800087a:	4663      	mov	r3, ip
 800087c:	e000      	b.n	8000880 <__aeabi_cdcmpeq>
 800087e:	bf00      	nop

08000880 <__aeabi_cdcmpeq>:
 8000880:	b501      	push	{r0, lr}
 8000882:	f7ff ffb7 	bl	80007f4 <__cmpdf2>
 8000886:	2800      	cmp	r0, #0
 8000888:	bf48      	it	mi
 800088a:	f110 0f00 	cmnmi.w	r0, #0
 800088e:	bd01      	pop	{r0, pc}

08000890 <__aeabi_dcmpeq>:
 8000890:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000894:	f7ff fff4 	bl	8000880 <__aeabi_cdcmpeq>
 8000898:	bf0c      	ite	eq
 800089a:	2001      	moveq	r0, #1
 800089c:	2000      	movne	r0, #0
 800089e:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a2:	bf00      	nop

080008a4 <__aeabi_dcmplt>:
 80008a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008a8:	f7ff ffea 	bl	8000880 <__aeabi_cdcmpeq>
 80008ac:	bf34      	ite	cc
 80008ae:	2001      	movcc	r0, #1
 80008b0:	2000      	movcs	r0, #0
 80008b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80008b6:	bf00      	nop

080008b8 <__aeabi_dcmple>:
 80008b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008bc:	f7ff ffe0 	bl	8000880 <__aeabi_cdcmpeq>
 80008c0:	bf94      	ite	ls
 80008c2:	2001      	movls	r0, #1
 80008c4:	2000      	movhi	r0, #0
 80008c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ca:	bf00      	nop

080008cc <__aeabi_dcmpge>:
 80008cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008d0:	f7ff ffce 	bl	8000870 <__aeabi_cdrcmple>
 80008d4:	bf94      	ite	ls
 80008d6:	2001      	movls	r0, #1
 80008d8:	2000      	movhi	r0, #0
 80008da:	f85d fb08 	ldr.w	pc, [sp], #8
 80008de:	bf00      	nop

080008e0 <__aeabi_dcmpgt>:
 80008e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008e4:	f7ff ffc4 	bl	8000870 <__aeabi_cdrcmple>
 80008e8:	bf34      	ite	cc
 80008ea:	2001      	movcc	r0, #1
 80008ec:	2000      	movcs	r0, #0
 80008ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80008f2:	bf00      	nop

080008f4 <__aeabi_uldivmod>:
 80008f4:	b953      	cbnz	r3, 800090c <__aeabi_uldivmod+0x18>
 80008f6:	b94a      	cbnz	r2, 800090c <__aeabi_uldivmod+0x18>
 80008f8:	2900      	cmp	r1, #0
 80008fa:	bf08      	it	eq
 80008fc:	2800      	cmpeq	r0, #0
 80008fe:	bf1c      	itt	ne
 8000900:	f04f 31ff 	movne.w	r1, #4294967295
 8000904:	f04f 30ff 	movne.w	r0, #4294967295
 8000908:	f000 b988 	b.w	8000c1c <__aeabi_idiv0>
 800090c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000910:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000914:	f000 f806 	bl	8000924 <__udivmoddi4>
 8000918:	f8dd e004 	ldr.w	lr, [sp, #4]
 800091c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000920:	b004      	add	sp, #16
 8000922:	4770      	bx	lr

08000924 <__udivmoddi4>:
 8000924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000928:	9d08      	ldr	r5, [sp, #32]
 800092a:	468e      	mov	lr, r1
 800092c:	4604      	mov	r4, r0
 800092e:	4688      	mov	r8, r1
 8000930:	2b00      	cmp	r3, #0
 8000932:	d14a      	bne.n	80009ca <__udivmoddi4+0xa6>
 8000934:	428a      	cmp	r2, r1
 8000936:	4617      	mov	r7, r2
 8000938:	d962      	bls.n	8000a00 <__udivmoddi4+0xdc>
 800093a:	fab2 f682 	clz	r6, r2
 800093e:	b14e      	cbz	r6, 8000954 <__udivmoddi4+0x30>
 8000940:	f1c6 0320 	rsb	r3, r6, #32
 8000944:	fa01 f806 	lsl.w	r8, r1, r6
 8000948:	fa20 f303 	lsr.w	r3, r0, r3
 800094c:	40b7      	lsls	r7, r6
 800094e:	ea43 0808 	orr.w	r8, r3, r8
 8000952:	40b4      	lsls	r4, r6
 8000954:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000958:	fa1f fc87 	uxth.w	ip, r7
 800095c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000960:	0c23      	lsrs	r3, r4, #16
 8000962:	fb0e 8811 	mls	r8, lr, r1, r8
 8000966:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800096a:	fb01 f20c 	mul.w	r2, r1, ip
 800096e:	429a      	cmp	r2, r3
 8000970:	d909      	bls.n	8000986 <__udivmoddi4+0x62>
 8000972:	18fb      	adds	r3, r7, r3
 8000974:	f101 30ff 	add.w	r0, r1, #4294967295
 8000978:	f080 80ea 	bcs.w	8000b50 <__udivmoddi4+0x22c>
 800097c:	429a      	cmp	r2, r3
 800097e:	f240 80e7 	bls.w	8000b50 <__udivmoddi4+0x22c>
 8000982:	3902      	subs	r1, #2
 8000984:	443b      	add	r3, r7
 8000986:	1a9a      	subs	r2, r3, r2
 8000988:	b2a3      	uxth	r3, r4
 800098a:	fbb2 f0fe 	udiv	r0, r2, lr
 800098e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000992:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000996:	fb00 fc0c 	mul.w	ip, r0, ip
 800099a:	459c      	cmp	ip, r3
 800099c:	d909      	bls.n	80009b2 <__udivmoddi4+0x8e>
 800099e:	18fb      	adds	r3, r7, r3
 80009a0:	f100 32ff 	add.w	r2, r0, #4294967295
 80009a4:	f080 80d6 	bcs.w	8000b54 <__udivmoddi4+0x230>
 80009a8:	459c      	cmp	ip, r3
 80009aa:	f240 80d3 	bls.w	8000b54 <__udivmoddi4+0x230>
 80009ae:	443b      	add	r3, r7
 80009b0:	3802      	subs	r0, #2
 80009b2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80009b6:	eba3 030c 	sub.w	r3, r3, ip
 80009ba:	2100      	movs	r1, #0
 80009bc:	b11d      	cbz	r5, 80009c6 <__udivmoddi4+0xa2>
 80009be:	40f3      	lsrs	r3, r6
 80009c0:	2200      	movs	r2, #0
 80009c2:	e9c5 3200 	strd	r3, r2, [r5]
 80009c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009ca:	428b      	cmp	r3, r1
 80009cc:	d905      	bls.n	80009da <__udivmoddi4+0xb6>
 80009ce:	b10d      	cbz	r5, 80009d4 <__udivmoddi4+0xb0>
 80009d0:	e9c5 0100 	strd	r0, r1, [r5]
 80009d4:	2100      	movs	r1, #0
 80009d6:	4608      	mov	r0, r1
 80009d8:	e7f5      	b.n	80009c6 <__udivmoddi4+0xa2>
 80009da:	fab3 f183 	clz	r1, r3
 80009de:	2900      	cmp	r1, #0
 80009e0:	d146      	bne.n	8000a70 <__udivmoddi4+0x14c>
 80009e2:	4573      	cmp	r3, lr
 80009e4:	d302      	bcc.n	80009ec <__udivmoddi4+0xc8>
 80009e6:	4282      	cmp	r2, r0
 80009e8:	f200 8105 	bhi.w	8000bf6 <__udivmoddi4+0x2d2>
 80009ec:	1a84      	subs	r4, r0, r2
 80009ee:	eb6e 0203 	sbc.w	r2, lr, r3
 80009f2:	2001      	movs	r0, #1
 80009f4:	4690      	mov	r8, r2
 80009f6:	2d00      	cmp	r5, #0
 80009f8:	d0e5      	beq.n	80009c6 <__udivmoddi4+0xa2>
 80009fa:	e9c5 4800 	strd	r4, r8, [r5]
 80009fe:	e7e2      	b.n	80009c6 <__udivmoddi4+0xa2>
 8000a00:	2a00      	cmp	r2, #0
 8000a02:	f000 8090 	beq.w	8000b26 <__udivmoddi4+0x202>
 8000a06:	fab2 f682 	clz	r6, r2
 8000a0a:	2e00      	cmp	r6, #0
 8000a0c:	f040 80a4 	bne.w	8000b58 <__udivmoddi4+0x234>
 8000a10:	1a8a      	subs	r2, r1, r2
 8000a12:	0c03      	lsrs	r3, r0, #16
 8000a14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a18:	b280      	uxth	r0, r0
 8000a1a:	b2bc      	uxth	r4, r7
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000a22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000a26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000a2e:	429a      	cmp	r2, r3
 8000a30:	d907      	bls.n	8000a42 <__udivmoddi4+0x11e>
 8000a32:	18fb      	adds	r3, r7, r3
 8000a34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000a38:	d202      	bcs.n	8000a40 <__udivmoddi4+0x11c>
 8000a3a:	429a      	cmp	r2, r3
 8000a3c:	f200 80e0 	bhi.w	8000c00 <__udivmoddi4+0x2dc>
 8000a40:	46c4      	mov	ip, r8
 8000a42:	1a9b      	subs	r3, r3, r2
 8000a44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000a48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000a4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000a50:	fb02 f404 	mul.w	r4, r2, r4
 8000a54:	429c      	cmp	r4, r3
 8000a56:	d907      	bls.n	8000a68 <__udivmoddi4+0x144>
 8000a58:	18fb      	adds	r3, r7, r3
 8000a5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000a5e:	d202      	bcs.n	8000a66 <__udivmoddi4+0x142>
 8000a60:	429c      	cmp	r4, r3
 8000a62:	f200 80ca 	bhi.w	8000bfa <__udivmoddi4+0x2d6>
 8000a66:	4602      	mov	r2, r0
 8000a68:	1b1b      	subs	r3, r3, r4
 8000a6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000a6e:	e7a5      	b.n	80009bc <__udivmoddi4+0x98>
 8000a70:	f1c1 0620 	rsb	r6, r1, #32
 8000a74:	408b      	lsls	r3, r1
 8000a76:	fa22 f706 	lsr.w	r7, r2, r6
 8000a7a:	431f      	orrs	r7, r3
 8000a7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000a80:	fa20 f306 	lsr.w	r3, r0, r6
 8000a84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000a88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000a8c:	4323      	orrs	r3, r4
 8000a8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000a92:	fa1f fc87 	uxth.w	ip, r7
 8000a96:	fbbe f0f9 	udiv	r0, lr, r9
 8000a9a:	0c1c      	lsrs	r4, r3, #16
 8000a9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000aa0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000aa4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000aa8:	45a6      	cmp	lr, r4
 8000aaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000aae:	d909      	bls.n	8000ac4 <__udivmoddi4+0x1a0>
 8000ab0:	193c      	adds	r4, r7, r4
 8000ab2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ab6:	f080 809c 	bcs.w	8000bf2 <__udivmoddi4+0x2ce>
 8000aba:	45a6      	cmp	lr, r4
 8000abc:	f240 8099 	bls.w	8000bf2 <__udivmoddi4+0x2ce>
 8000ac0:	3802      	subs	r0, #2
 8000ac2:	443c      	add	r4, r7
 8000ac4:	eba4 040e 	sub.w	r4, r4, lr
 8000ac8:	fa1f fe83 	uxth.w	lr, r3
 8000acc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ad0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ad4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ad8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000adc:	45a4      	cmp	ip, r4
 8000ade:	d908      	bls.n	8000af2 <__udivmoddi4+0x1ce>
 8000ae0:	193c      	adds	r4, r7, r4
 8000ae2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ae6:	f080 8082 	bcs.w	8000bee <__udivmoddi4+0x2ca>
 8000aea:	45a4      	cmp	ip, r4
 8000aec:	d97f      	bls.n	8000bee <__udivmoddi4+0x2ca>
 8000aee:	3b02      	subs	r3, #2
 8000af0:	443c      	add	r4, r7
 8000af2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000af6:	eba4 040c 	sub.w	r4, r4, ip
 8000afa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000afe:	4564      	cmp	r4, ip
 8000b00:	4673      	mov	r3, lr
 8000b02:	46e1      	mov	r9, ip
 8000b04:	d362      	bcc.n	8000bcc <__udivmoddi4+0x2a8>
 8000b06:	d05f      	beq.n	8000bc8 <__udivmoddi4+0x2a4>
 8000b08:	b15d      	cbz	r5, 8000b22 <__udivmoddi4+0x1fe>
 8000b0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000b0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000b12:	fa04 f606 	lsl.w	r6, r4, r6
 8000b16:	fa22 f301 	lsr.w	r3, r2, r1
 8000b1a:	431e      	orrs	r6, r3
 8000b1c:	40cc      	lsrs	r4, r1
 8000b1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000b22:	2100      	movs	r1, #0
 8000b24:	e74f      	b.n	80009c6 <__udivmoddi4+0xa2>
 8000b26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000b2a:	0c01      	lsrs	r1, r0, #16
 8000b2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000b30:	b280      	uxth	r0, r0
 8000b32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000b36:	463b      	mov	r3, r7
 8000b38:	4638      	mov	r0, r7
 8000b3a:	463c      	mov	r4, r7
 8000b3c:	46b8      	mov	r8, r7
 8000b3e:	46be      	mov	lr, r7
 8000b40:	2620      	movs	r6, #32
 8000b42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000b46:	eba2 0208 	sub.w	r2, r2, r8
 8000b4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000b4e:	e766      	b.n	8000a1e <__udivmoddi4+0xfa>
 8000b50:	4601      	mov	r1, r0
 8000b52:	e718      	b.n	8000986 <__udivmoddi4+0x62>
 8000b54:	4610      	mov	r0, r2
 8000b56:	e72c      	b.n	80009b2 <__udivmoddi4+0x8e>
 8000b58:	f1c6 0220 	rsb	r2, r6, #32
 8000b5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000b60:	40b7      	lsls	r7, r6
 8000b62:	40b1      	lsls	r1, r6
 8000b64:	fa20 f202 	lsr.w	r2, r0, r2
 8000b68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b6c:	430a      	orrs	r2, r1
 8000b6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000b72:	b2bc      	uxth	r4, r7
 8000b74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000b78:	0c11      	lsrs	r1, r2, #16
 8000b7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b7e:	fb08 f904 	mul.w	r9, r8, r4
 8000b82:	40b0      	lsls	r0, r6
 8000b84:	4589      	cmp	r9, r1
 8000b86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000b8a:	b280      	uxth	r0, r0
 8000b8c:	d93e      	bls.n	8000c0c <__udivmoddi4+0x2e8>
 8000b8e:	1879      	adds	r1, r7, r1
 8000b90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000b94:	d201      	bcs.n	8000b9a <__udivmoddi4+0x276>
 8000b96:	4589      	cmp	r9, r1
 8000b98:	d81f      	bhi.n	8000bda <__udivmoddi4+0x2b6>
 8000b9a:	eba1 0109 	sub.w	r1, r1, r9
 8000b9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ba2:	fb09 f804 	mul.w	r8, r9, r4
 8000ba6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000baa:	b292      	uxth	r2, r2
 8000bac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000bb0:	4542      	cmp	r2, r8
 8000bb2:	d229      	bcs.n	8000c08 <__udivmoddi4+0x2e4>
 8000bb4:	18ba      	adds	r2, r7, r2
 8000bb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000bba:	d2c4      	bcs.n	8000b46 <__udivmoddi4+0x222>
 8000bbc:	4542      	cmp	r2, r8
 8000bbe:	d2c2      	bcs.n	8000b46 <__udivmoddi4+0x222>
 8000bc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000bc4:	443a      	add	r2, r7
 8000bc6:	e7be      	b.n	8000b46 <__udivmoddi4+0x222>
 8000bc8:	45f0      	cmp	r8, lr
 8000bca:	d29d      	bcs.n	8000b08 <__udivmoddi4+0x1e4>
 8000bcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000bd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000bd4:	3801      	subs	r0, #1
 8000bd6:	46e1      	mov	r9, ip
 8000bd8:	e796      	b.n	8000b08 <__udivmoddi4+0x1e4>
 8000bda:	eba7 0909 	sub.w	r9, r7, r9
 8000bde:	4449      	add	r1, r9
 8000be0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000be4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000be8:	fb09 f804 	mul.w	r8, r9, r4
 8000bec:	e7db      	b.n	8000ba6 <__udivmoddi4+0x282>
 8000bee:	4673      	mov	r3, lr
 8000bf0:	e77f      	b.n	8000af2 <__udivmoddi4+0x1ce>
 8000bf2:	4650      	mov	r0, sl
 8000bf4:	e766      	b.n	8000ac4 <__udivmoddi4+0x1a0>
 8000bf6:	4608      	mov	r0, r1
 8000bf8:	e6fd      	b.n	80009f6 <__udivmoddi4+0xd2>
 8000bfa:	443b      	add	r3, r7
 8000bfc:	3a02      	subs	r2, #2
 8000bfe:	e733      	b.n	8000a68 <__udivmoddi4+0x144>
 8000c00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c04:	443b      	add	r3, r7
 8000c06:	e71c      	b.n	8000a42 <__udivmoddi4+0x11e>
 8000c08:	4649      	mov	r1, r9
 8000c0a:	e79c      	b.n	8000b46 <__udivmoddi4+0x222>
 8000c0c:	eba1 0109 	sub.w	r1, r1, r9
 8000c10:	46c4      	mov	ip, r8
 8000c12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c16:	fb09 f804 	mul.w	r8, r9, r4
 8000c1a:	e7c4      	b.n	8000ba6 <__udivmoddi4+0x282>

08000c1c <__aeabi_idiv0>:
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop

08000c20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c20:	480d      	ldr	r0, [pc, #52]	@ (8000c58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c22:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c24:	f004 fe8e 	bl	8005944 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c28:	480c      	ldr	r0, [pc, #48]	@ (8000c5c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c2a:	490d      	ldr	r1, [pc, #52]	@ (8000c60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c64 <LoopForever+0xe>)
  movs r3, #0
 8000c2e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000c30:	e002      	b.n	8000c38 <LoopCopyDataInit>

08000c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c36:	3304      	adds	r3, #4

08000c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c3c:	d3f9      	bcc.n	8000c32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c40:	4c0a      	ldr	r4, [pc, #40]	@ (8000c6c <LoopForever+0x16>)
  movs r3, #0
 8000c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c44:	e001      	b.n	8000c4a <LoopFillZerobss>

08000c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c48:	3204      	adds	r2, #4

08000c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c4c:	d3fb      	bcc.n	8000c46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c4e:	f00a f9f7 	bl	800b040 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c52:	f001 f821 	bl	8001c98 <main>

08000c56 <LoopForever>:

LoopForever:
    b LoopForever
 8000c56:	e7fe      	b.n	8000c56 <LoopForever>
  ldr   r0, =_estack
 8000c58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c60:	20000514 	.word	0x20000514
  ldr r2, =_sidata
 8000c64:	0800b384 	.word	0x0800b384
  ldr r2, =_sbss
 8000c68:	20000514 	.word	0x20000514
  ldr r4, =_ebss
 8000c6c:	20001c8c 	.word	0x20001c8c

08000c70 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c70:	e7fe      	b.n	8000c70 <ADC3_IRQHandler>
	...

08000c74 <ASPEP_start>:
  * @brief  Starts ASPEP communication by configuring UART.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_start(ASPEP_Handle_t *pHandle)
{
 8000c74:	b570      	push	{r4, r5, r6, lr}
 8000c76:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->fASPEP_HWInit(pHandle->ASPEPIp);
 8000c78:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8000c7a:	6940      	ldr	r0, [r0, #20]
 8000c7c:	4798      	blx	r3
    pHandle->ASPEP_State = ASPEP_IDLE;
 8000c7e:	2300      	movs	r3, #0
    pHandle->ASPEP_TL_State = WAITING_PACKET;
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
    /* Configure UART to receive first packet*/
    pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000c80:	6d65      	ldr	r5, [r4, #84]	@ 0x54
    pHandle->ASPEP_State = ASPEP_IDLE;
 8000c82:	f8a4 3064 	strh.w	r3, [r4, #100]	@ 0x64
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
 8000c86:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
    pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000c8a:	6960      	ldr	r0, [r4, #20]
 8000c8c:	f104 011c 	add.w	r1, r4, #28
 8000c90:	462b      	mov	r3, r5
 8000c92:	2204      	movs	r2, #4
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8000c94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000c98:	4718      	bx	r3
 8000c9a:	bf00      	nop

08000c9c <ASPEP_sendBeacon>:
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  * @param  *capabilities Matched capabilities between controller and performer
  */
void ASPEP_sendBeacon(ASPEP_Handle_t *pHandle, ASPEP_Capabilities_def *capabilities)
{
 8000c9c:	b410      	push	{r4}
  {
#endif
    uint32_t *packet = (uint32_t *)pHandle->ctrlBuffer.buffer; //cstat !MISRAC2012-Rule-11.3
    *packet = (BEACON
             | (((uint32_t)capabilities->version) << 4U)
             | (((uint32_t)capabilities->DATA_CRC) << 7U)
 8000c9e:	780b      	ldrb	r3, [r1, #0]
             | (((uint32_t)capabilities->version) << 4U)
 8000ca0:	790a      	ldrb	r2, [r1, #4]
             | (((uint32_t)capabilities->RX_maxSize) << 8U)
             | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 8000ca2:	f891 c002 	ldrb.w	ip, [r1, #2]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000ca6:	4c1e      	ldr	r4, [pc, #120]	@ (8000d20 <ASPEP_sendBeacon+0x84>)
             | (((uint32_t)capabilities->DATA_CRC) << 7U)
 8000ca8:	01db      	lsls	r3, r3, #7
 8000caa:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
             | (((uint32_t)capabilities->RX_maxSize) << 8U)
 8000cae:	784a      	ldrb	r2, [r1, #1]
 8000cb0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 8000cb4:	78ca      	ldrb	r2, [r1, #3]
             | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 8000cb6:	ea43 338c 	orr.w	r3, r3, ip, lsl #14
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 8000cba:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000cbe:	b2da      	uxtb	r2, r3
 8000cc0:	f042 0205 	orr.w	r2, r2, #5
  header &= 0x0fffffffU;
 8000cc4:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000cc8:	5ca2      	ldrb	r2, [r4, r2]
 8000cca:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 8000cce:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000cd0:	5ca2      	ldrb	r2, [r4, r2]
 8000cd2:	ea82 4211 	eor.w	r2, r2, r1, lsr #16
 8000cd6:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000cd8:	5ca2      	ldrb	r2, [r4, r2]
 8000cda:	4c12      	ldr	r4, [pc, #72]	@ (8000d24 <ASPEP_sendBeacon+0x88>)
 8000cdc:	ea82 6211 	eor.w	r2, r2, r1, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 8000ce0:	5ca2      	ldrb	r2, [r4, r2]
 8000ce2:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8000ce6:	f043 0305 	orr.w	r3, r3, #5
 8000cea:	6203      	str	r3, [r0, #32]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cec:	b672      	cpsid	i
  {
#endif
    /* Insert CRC header in the packet to send */
    ASPEP_ComputeHeaderCRC((uint32_t *)txBuffer); //cstat !MISRAC2012-Rule-11.5
    __disable_irq(); /*TODO: Disable High frequency task is enough */
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000cee:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8000cf0:	b14b      	cbz	r3, 8000d06 <ASPEP_sendBeacon+0x6a>
  __ASM volatile ("cpsie i" : : : "memory");
 8000cf2:	b662      	cpsie	i
          pHandle->syncBuffer.length = bufferLength;
        }
      }
      else if(ASPEP_CTRL == dataType)
      {
        if (pHandle->ctrlBuffer.state != available)
 8000cf4:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8000cf8:	b913      	cbnz	r3, 8000d00 <ASPEP_sendBeacon+0x64>
        {
          result = ASPEP_BUFFER_ERROR;
        }
        else
        {
          pHandle->ctrlBuffer.state = pending;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
}
 8000d00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d04:	4770      	bx	lr
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000d06:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000d10:	6481      	str	r1, [r0, #72]	@ 0x48
 8000d12:	b662      	cpsie	i
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 8000d14:	2204      	movs	r2, #4
 8000d16:	6d83      	ldr	r3, [r0, #88]	@ 0x58
}
 8000d18:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 8000d1c:	6940      	ldr	r0, [r0, #20]
 8000d1e:	4718      	bx	r3
 8000d20:	0800b0cc 	.word	0x0800b0cc
 8000d24:	0800b0bc 	.word	0x0800b0bc

08000d28 <ASPEP_sendPing>:
{
 8000d28:	b430      	push	{r4, r5}
                   | (uint32_t)((uint32_t)cBit << 5U)
 8000d2a:	014b      	lsls	r3, r1, #5
    uint8_t Nbit = pHandle->syncPacketCount & 0x1U; /* Keep only LSB */
 8000d2c:	f890 c060 	ldrb.w	ip, [r0, #96]	@ 0x60
    uint8_t ipID = pHandle->liid & 0xFU;
 8000d30:	f890 4063 	ldrb.w	r4, [r0, #99]	@ 0x63
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000d34:	4d1d      	ldr	r5, [pc, #116]	@ (8000dac <ASPEP_sendPing+0x84>)
                   | (uint32_t)((uint32_t)cBit << 5U)
 8000d36:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000d3a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
                   | (uint32_t)((uint32_t)Nbit << 6U)
 8000d3e:	f00c 0101 	and.w	r1, ip, #1
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000d42:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8000d46:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
                   | (uint32_t)((uint32_t)ipID << 8U)
 8000d4a:	f004 040f 	and.w	r4, r4, #15
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000d4e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000d52:	b2da      	uxtb	r2, r3
 8000d54:	4c16      	ldr	r4, [pc, #88]	@ (8000db0 <ASPEP_sendPing+0x88>)
 8000d56:	f042 0206 	orr.w	r2, r2, #6
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000d5a:	f043 0106 	orr.w	r1, r3, #6
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000d5e:	5ca2      	ldrb	r2, [r4, r2]
 8000d60:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
 8000d64:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000d66:	5ca2      	ldrb	r2, [r4, r2]
 8000d68:	ea82 4213 	eor.w	r2, r2, r3, lsr #16
 8000d6c:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000d6e:	5ca2      	ldrb	r2, [r4, r2]
 8000d70:	ea82 6313 	eor.w	r3, r2, r3, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 8000d74:	5ceb      	ldrb	r3, [r5, r3]
 8000d76:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
 8000d7a:	6203      	str	r3, [r0, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8000d7c:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000d7e:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8000d80:	b143      	cbz	r3, 8000d94 <ASPEP_sendPing+0x6c>
  __ASM volatile ("cpsie i" : : : "memory");
 8000d82:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 8000d84:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8000d88:	b913      	cbnz	r3, 8000d90 <ASPEP_sendPing+0x68>
          pHandle->ctrlBuffer.state = pending;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
}
 8000d90:	bc30      	pop	{r4, r5}
 8000d92:	4770      	bx	lr
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000d94:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000d9e:	6481      	str	r1, [r0, #72]	@ 0x48
 8000da0:	b662      	cpsie	i
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 8000da2:	2204      	movs	r2, #4
 8000da4:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8000da6:	6940      	ldr	r0, [r0, #20]
}
 8000da8:	bc30      	pop	{r4, r5}
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 8000daa:	4718      	bx	r3
 8000dac:	0800b0bc 	.word	0x0800b0bc
 8000db0:	0800b0cc 	.word	0x0800b0cc

08000db4 <ASPEP_getBuffer>:
    if (MCTL_SYNC == syncAsync)
 8000db4:	2a0a      	cmp	r2, #10
 8000db6:	d009      	beq.n	8000dcc <ASPEP_getBuffer+0x18>
      if ((pHandle->asyncBufferA.state > writeLock) && (pHandle->asyncBufferB.state > writeLock))
 8000db8:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d91d      	bls.n	8000dfc <ASPEP_getBuffer+0x48>
 8000dc0:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d90d      	bls.n	8000de4 <ASPEP_getBuffer+0x30>
        result = false;
 8000dc8:	2000      	movs	r0, #0
}
 8000dca:	4770      	bx	lr
      if (pHandle->syncBuffer.state <= writeLock) /* Possible values are free or writeLock*/
 8000dcc:	f890 302e 	ldrb.w	r3, [r0, #46]	@ 0x2e
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d8f9      	bhi.n	8000dc8 <ASPEP_getBuffer+0x14>
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 8000dd4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
        pHandle->syncBuffer.state = writeLock;
 8000dd6:	2201      	movs	r2, #1
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 8000dd8:	3304      	adds	r3, #4
 8000dda:	600b      	str	r3, [r1, #0]
        pHandle->syncBuffer.state = writeLock;
 8000ddc:	f880 202e 	strb.w	r2, [r0, #46]	@ 0x2e
  bool result = true;
 8000de0:	2001      	movs	r0, #1
 8000de2:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 8000de4:	6b83      	ldr	r3, [r0, #56]	@ 0x38
          pHandle->asyncBufferB.state = writeLock;
 8000de6:	f04f 0c01 	mov.w	ip, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 8000dea:	f100 0238 	add.w	r2, r0, #56	@ 0x38
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 8000dee:	3304      	adds	r3, #4
          pHandle->asyncBufferB.state = writeLock;
 8000df0:	f880 c03e 	strb.w	ip, [r0, #62]	@ 0x3e
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 8000df4:	6402      	str	r2, [r0, #64]	@ 0x40
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 8000df6:	600b      	str	r3, [r1, #0]
  bool result = true;
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8000dfc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
          pHandle->asyncBufferA.state = writeLock;
 8000dfe:	f04f 0c01 	mov.w	ip, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 8000e02:	f100 0230 	add.w	r2, r0, #48	@ 0x30
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8000e06:	3304      	adds	r3, #4
          pHandle->asyncBufferA.state = writeLock;
 8000e08:	f880 c036 	strb.w	ip, [r0, #54]	@ 0x36
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 8000e0c:	6402      	str	r2, [r0, #64]	@ 0x40
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8000e0e:	600b      	str	r3, [r1, #0]
 8000e10:	e7f2      	b.n	8000df8 <ASPEP_getBuffer+0x44>
 8000e12:	bf00      	nop

08000e14 <ASPEP_sendPacket>:
{
 8000e14:	4684      	mov	ip, r0
    if (ASPEP_CONNECTED == pHandle-> ASPEP_State)
 8000e16:	f890 0064 	ldrb.w	r0, [r0, #100]	@ 0x64
 8000e1a:	2802      	cmp	r0, #2
 8000e1c:	d001      	beq.n	8000e22 <ASPEP_sendPacket+0xe>
      result = ASPEP_NOT_CONNECTED;
 8000e1e:	2002      	movs	r0, #2
 8000e20:	4770      	bx	lr
      tmpHeader = ((uint32_t)((uint32_t)txDataLengthTemp << (uint32_t)4) | (uint32_t)syncAsync);
 8000e22:	ea43 1002 	orr.w	r0, r3, r2, lsl #4
      *header = tmpHeader;
 8000e26:	f841 0c04 	str.w	r0, [r1, #-4]
      if (1U == pHandle->Capabilities.DATA_CRC)
 8000e2a:	f89c 006c 	ldrb.w	r0, [ip, #108]	@ 0x6c
 8000e2e:	2801      	cmp	r0, #1
 8000e30:	d104      	bne.n	8000e3c <ASPEP_sendPacket+0x28>
        packet[txDataLengthTemp] = (uint8_t)0xCA; /* Dummy CRC */
 8000e32:	f64f 60ca 	movw	r0, #65226	@ 0xfeca
 8000e36:	5288      	strh	r0, [r1, r2]
        txDataLengthTemp += (uint16_t)ASPEP_DATACRC_SIZE;
 8000e38:	3202      	adds	r2, #2
 8000e3a:	b292      	uxth	r2, r2
      if (MCTL_SYNC == syncAsync)
 8000e3c:	2b0a      	cmp	r3, #10
 8000e3e:	d105      	bne.n	8000e4c <ASPEP_sendPacket+0x38>
        if (pSupHandle->MCP_PacketAvailable)
 8000e40:	f89c 0010 	ldrb.w	r0, [ip, #16]
 8000e44:	b348      	cbz	r0, 8000e9a <ASPEP_sendPacket+0x86>
          pSupHandle->MCP_PacketAvailable = false; /* CMD from controller is processed*/
 8000e46:	2000      	movs	r0, #0
 8000e48:	f88c 0010 	strb.w	r0, [ip, #16]
  uint32_t header = *headerPtr;
 8000e4c:	f851 0c04 	ldr.w	r0, [r1, #-4]
{
 8000e50:	b570      	push	{r4, r5, r6, lr}
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000e52:	4d34      	ldr	r5, [pc, #208]	@ (8000f24 <ASPEP_sendPacket+0x110>)
 8000e54:	b2c4      	uxtb	r4, r0
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 8000e56:	3204      	adds	r2, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000e58:	5d2e      	ldrb	r6, [r5, r4]
 8000e5a:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8000e5e:	4074      	eors	r4, r6
      header--; /* Header ues 4*8 bits on top of txBuffer*/
 8000e60:	f1a1 0e04 	sub.w	lr, r1, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000e64:	5d2e      	ldrb	r6, [r5, r4]
 8000e66:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8000e6a:	4074      	eors	r4, r6
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 8000e6c:	b292      	uxth	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000e6e:	5d2c      	ldrb	r4, [r5, r4]
 8000e70:	f3c0 6503 	ubfx	r5, r0, #24, #4
 8000e74:	406c      	eors	r4, r5
 8000e76:	4d2c      	ldr	r5, [pc, #176]	@ (8000f28 <ASPEP_sendPacket+0x114>)
  *headerPtr |= (uint32_t)crc << 28;
 8000e78:	5d2c      	ldrb	r4, [r5, r4]
 8000e7a:	ea40 7004 	orr.w	r0, r0, r4, lsl #28
 8000e7e:	f841 0c04 	str.w	r0, [r1, #-4]
  __ASM volatile ("cpsid i" : : : "memory");
 8000e82:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000e84:	f8dc 1048 	ldr.w	r1, [ip, #72]	@ 0x48
 8000e88:	b1b9      	cbz	r1, 8000eba <ASPEP_sendPacket+0xa6>
  __ASM volatile ("cpsie i" : : : "memory");
 8000e8a:	b662      	cpsie	i
      if (MCTL_ASYNC == dataType)
 8000e8c:	2b09      	cmp	r3, #9
 8000e8e:	d006      	beq.n	8000e9e <ASPEP_sendPacket+0x8a>
      else if (MCTL_SYNC == dataType)
 8000e90:	2b0a      	cmp	r3, #10
 8000e92:	d02a      	beq.n	8000eea <ASPEP_sendPacket+0xd6>
      else if(ASPEP_CTRL == dataType)
 8000e94:	b37b      	cbz	r3, 8000ef6 <ASPEP_sendPacket+0xe2>
  uint8_t result = ASPEP_OK;
 8000e96:	2000      	movs	r0, #0
}
 8000e98:	bd70      	pop	{r4, r5, r6, pc}
          result = MCTL_SYNC_NOT_EXPECTED;
 8000e9a:	2001      	movs	r0, #1
}
 8000e9c:	4770      	bx	lr
        if (txBuffer != (uint8_t *)pHandle->lastRequestedAsyncBuff->buffer)
 8000e9e:	f8dc 3040 	ldr.w	r3, [ip, #64]	@ 0x40
 8000ea2:	6819      	ldr	r1, [r3, #0]
  uint8_t result = ASPEP_OK;
 8000ea4:	458e      	cmp	lr, r1
 8000ea6:	bf14      	ite	ne
 8000ea8:	2003      	movne	r0, #3
 8000eaa:	2000      	moveq	r0, #0
        if (NULL == pHandle->asyncNextBuffer)
 8000eac:	f8dc 1044 	ldr.w	r1, [ip, #68]	@ 0x44
 8000eb0:	b3a1      	cbz	r1, 8000f1c <ASPEP_sendPacket+0x108>
        pHandle->lastRequestedAsyncBuff->state = pending;
 8000eb2:	2102      	movs	r1, #2
 8000eb4:	7199      	strb	r1, [r3, #6]
        pHandle->lastRequestedAsyncBuff->length = bufferLength;
 8000eb6:	809a      	strh	r2, [r3, #4]
}
 8000eb8:	bd70      	pop	{r4, r5, r6, pc}
      if (MCTL_ASYNC == dataType)
 8000eba:	2b09      	cmp	r3, #9
 8000ebc:	d029      	beq.n	8000f12 <ASPEP_sendPacket+0xfe>
      else if (MCTL_SYNC == dataType)
 8000ebe:	2b0a      	cmp	r3, #10
        pHandle->syncBuffer.state = readLock;
 8000ec0:	f04f 0303 	mov.w	r3, #3
 8000ec4:	bf0b      	itete	eq
 8000ec6:	f88c 302e 	strbeq.w	r3, [ip, #46]	@ 0x2e
        pHandle->ctrlBuffer.state = readLock;
 8000eca:	f88c 3024 	strbne.w	r3, [ip, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8000ece:	f10c 0328 	addeq.w	r3, ip, #40	@ 0x28
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000ed2:	f10c 0320 	addne.w	r3, ip, #32
        pHandle->lockBuffer = (void *)pHandle->lastRequestedAsyncBuff;
 8000ed6:	f8cc 3048 	str.w	r3, [ip, #72]	@ 0x48
 8000eda:	b662      	cpsie	i
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 8000edc:	f8dc 3058 	ldr.w	r3, [ip, #88]	@ 0x58
 8000ee0:	f8dc 0014 	ldr.w	r0, [ip, #20]
 8000ee4:	4671      	mov	r1, lr
 8000ee6:	4798      	blx	r3
 8000ee8:	e7d5      	b.n	8000e96 <ASPEP_sendPacket+0x82>
        if (pHandle -> syncBuffer.state != writeLock)
 8000eea:	f89c 302e 	ldrb.w	r3, [ip, #46]	@ 0x2e
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d009      	beq.n	8000f06 <ASPEP_sendPacket+0xf2>
          result = ASPEP_BUFFER_ERROR;
 8000ef2:	2003      	movs	r0, #3
}
 8000ef4:	bd70      	pop	{r4, r5, r6, pc}
        if (pHandle->ctrlBuffer.state != available)
 8000ef6:	f89c 3024 	ldrb.w	r3, [ip, #36]	@ 0x24
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d1f9      	bne.n	8000ef2 <ASPEP_sendPacket+0xde>
          pHandle->ctrlBuffer.state = pending;
 8000efe:	2302      	movs	r3, #2
 8000f00:	f88c 3024 	strb.w	r3, [ip, #36]	@ 0x24
 8000f04:	e7c7      	b.n	8000e96 <ASPEP_sendPacket+0x82>
          pHandle->syncBuffer.state = pending;
 8000f06:	2302      	movs	r3, #2
 8000f08:	f88c 302e 	strb.w	r3, [ip, #46]	@ 0x2e
          pHandle->syncBuffer.length = bufferLength;
 8000f0c:	f8ac 202c 	strh.w	r2, [ip, #44]	@ 0x2c
 8000f10:	e7c1      	b.n	8000e96 <ASPEP_sendPacket+0x82>
        pHandle->lastRequestedAsyncBuff->state = readLock;
 8000f12:	f8dc 3040 	ldr.w	r3, [ip, #64]	@ 0x40
 8000f16:	2103      	movs	r1, #3
 8000f18:	7199      	strb	r1, [r3, #6]
        pHandle->lockBuffer = (void *)pHandle->lastRequestedAsyncBuff;
 8000f1a:	e7dc      	b.n	8000ed6 <ASPEP_sendPacket+0xc2>
          pHandle->asyncNextBuffer = pHandle->lastRequestedAsyncBuff;
 8000f1c:	f8cc 3044 	str.w	r3, [ip, #68]	@ 0x44
 8000f20:	e7c7      	b.n	8000eb2 <ASPEP_sendPacket+0x9e>
 8000f22:	bf00      	nop
 8000f24:	0800b0cc 	.word	0x0800b0cc
 8000f28:	0800b0bc 	.word	0x0800b0bc

08000f2c <ASPEP_HWDataTransmittedIT>:
  * Therefore, there is no need to protect this ISR against another higher priority ISR (HF Task).
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDataTransmittedIT(ASPEP_Handle_t *pHandle)
{
 8000f2c:	b510      	push	{r4, lr}
  }
  else
  {
#endif
    /* First free previous readLock buffer */
    if (pHandle->ctrlBuffer.state == readLock)
 8000f2e:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8000f32:	2b03      	cmp	r3, #3
{
 8000f34:	4604      	mov	r4, r0
    if (pHandle->ctrlBuffer.state == readLock)
 8000f36:	d013      	beq.n	8000f60 <ASPEP_HWDataTransmittedIT+0x34>
      pHandle->ctrlBuffer.state = available;
    }
    else /* if previous buffer was not ASPEP_CTRL, then the buffer locked is a MCTL_Buff_t */
    {
      MCTL_Buff_t *tempBuff = (MCTL_Buff_t *)pHandle->lockBuffer; //cstat !MISRAC2012-Rule-11.5
      tempBuff->state = available;
 8000f38:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	7191      	strb	r1, [r2, #6]
    }
    if (pHandle->syncBuffer.state == pending)
 8000f3e:	f890 202e 	ldrb.w	r2, [r0, #46]	@ 0x2e
 8000f42:	2a02      	cmp	r2, #2
 8000f44:	d013      	beq.n	8000f6e <ASPEP_HWDataTransmittedIT+0x42>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
      pHandle->syncBuffer.state = readLock;
    }
    /* Second prepare transfer of pending buffer */
    else if (pHandle->ctrlBuffer.state == pending)
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d11d      	bne.n	8000f86 <ASPEP_HWDataTransmittedIT+0x5a>
    {
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8000f4a:	f100 0120 	add.w	r1, r0, #32
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 8000f4e:	6d83      	ldr	r3, [r0, #88]	@ 0x58
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8000f50:	6481      	str	r1, [r0, #72]	@ 0x48
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 8000f52:	2204      	movs	r2, #4
 8000f54:	6940      	ldr	r0, [r0, #20]
 8000f56:	4798      	blx	r3
      pHandle->ctrlBuffer.state = readLock;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      __enable_irq();
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8000f5e:	bd10      	pop	{r4, pc}
    if (pHandle->syncBuffer.state == pending)
 8000f60:	f890 302e 	ldrb.w	r3, [r0, #46]	@ 0x2e
      pHandle->ctrlBuffer.state = available;
 8000f64:	2200      	movs	r2, #0
    if (pHandle->syncBuffer.state == pending)
 8000f66:	2b02      	cmp	r3, #2
      pHandle->ctrlBuffer.state = available;
 8000f68:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
    if (pHandle->syncBuffer.state == pending)
 8000f6c:	d10b      	bne.n	8000f86 <ASPEP_HWDataTransmittedIT+0x5a>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8000f6e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 8000f72:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8000f74:	64a0      	str	r0, [r4, #72]	@ 0x48
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 8000f76:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8000f78:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8000f7a:	6960      	ldr	r0, [r4, #20]
 8000f7c:	4798      	blx	r3
      pHandle->syncBuffer.state = readLock;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
}
 8000f84:	bd10      	pop	{r4, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 8000f86:	b672      	cpsid	i
      if (pHandle->asyncNextBuffer != NULL)
 8000f88:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8000f8a:	b1cb      	cbz	r3, 8000fc0 <ASPEP_HWDataTransmittedIT+0x94>
        pHandle->asyncNextBuffer->state = readLock;
 8000f8c:	2203      	movs	r2, #3
        pHandle->lockBuffer = (void *)pHandle->asyncNextBuffer;
 8000f8e:	64a3      	str	r3, [r4, #72]	@ 0x48
        pHandle->asyncNextBuffer->state = readLock;
 8000f90:	719a      	strb	r2, [r3, #6]
        pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->asyncNextBuffer->buffer, pHandle->asyncNextBuffer->length);
 8000f92:	6819      	ldr	r1, [r3, #0]
 8000f94:	889a      	ldrh	r2, [r3, #4]
 8000f96:	6960      	ldr	r0, [r4, #20]
 8000f98:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8000f9a:	4798      	blx	r3
        if ((pHandle->asyncBufferA.state == pending) || (pHandle->asyncBufferB.state == pending))
 8000f9c:	f894 3036 	ldrb.w	r3, [r4, #54]	@ 0x36
 8000fa0:	2b02      	cmp	r3, #2
 8000fa2:	d007      	beq.n	8000fb4 <ASPEP_HWDataTransmittedIT+0x88>
 8000fa4:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8000fa8:	2b02      	cmp	r3, #2
 8000faa:	d003      	beq.n	8000fb4 <ASPEP_HWDataTransmittedIT+0x88>
          pHandle->asyncNextBuffer = NULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	6463      	str	r3, [r4, #68]	@ 0x44
  __ASM volatile ("cpsie i" : : : "memory");
 8000fb0:	b662      	cpsie	i
}
 8000fb2:	bd10      	pop	{r4, pc}
          uint32_t temp = (uint32_t)&pHandle->asyncBufferA + (uint32_t)&pHandle->asyncBufferB
 8000fb4:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8000fb6:	0063      	lsls	r3, r4, #1
 8000fb8:	3368      	adds	r3, #104	@ 0x68
 8000fba:	1a9b      	subs	r3, r3, r2
          pHandle->asyncNextBuffer = (MCTL_Buff_t *) temp; //cstat !MISRAC2012-Rule-11.4
 8000fbc:	6463      	str	r3, [r4, #68]	@ 0x44
        {
 8000fbe:	e7f7      	b.n	8000fb0 <ASPEP_HWDataTransmittedIT+0x84>
        pHandle->lockBuffer = NULL;
 8000fc0:	64a3      	str	r3, [r4, #72]	@ 0x48
 8000fc2:	e7f5      	b.n	8000fb0 <ASPEP_HWDataTransmittedIT+0x84>

08000fc4 <ASPEP_RXframeProcess>:
  * @param  *packetLength Length of the packet to be processed
  *
  * @return Returns the buffer of data transmitted by the MCP controller device
  */
uint8_t *ASPEP_RXframeProcess(MCTL_Handle_t *pSupHandle, uint16_t *packetLength)
{
 8000fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uint16_t packetNumber;
#if VALID_CRC_DATA
    bool validCRCData = true;
#endif
    *packetLength = 0;
    if (pHandle->NewPacketAvailable)
 8000fc8:	f890 5061 	ldrb.w	r5, [r0, #97]	@ 0x61
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
 8000fcc:	69c2      	ldr	r2, [r0, #28]
    *packetLength = 0;
 8000fce:	2300      	movs	r3, #0
{
 8000fd0:	4604      	mov	r4, r0
    *packetLength = 0;
 8000fd2:	800b      	strh	r3, [r1, #0]
    if (pHandle->NewPacketAvailable)
 8000fd4:	b19d      	cbz	r5, 8000ffe <ASPEP_RXframeProcess+0x3a>
    {
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
      switch (pHandle->ASPEP_State)
 8000fd6:	f890 5064 	ldrb.w	r5, [r0, #100]	@ 0x64
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
 8000fda:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
      switch (pHandle->ASPEP_State)
 8000fde:	2d01      	cmp	r5, #1
 8000fe0:	d04e      	beq.n	8001080 <ASPEP_RXframeProcess+0xbc>
 8000fe2:	2d02      	cmp	r5, #2
 8000fe4:	d012      	beq.n	800100c <ASPEP_RXframeProcess+0x48>
 8000fe6:	b9d5      	cbnz	r5, 800101e <ASPEP_RXframeProcess+0x5a>
      {
        case ASPEP_IDLE:
        {
          if (BEACON == pHandle->rxPacketType)
 8000fe8:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8000fea:	2b05      	cmp	r3, #5
 8000fec:	d062      	beq.n	80010b4 <ASPEP_RXframeProcess+0xf0>
              /* Nothing to do, controller has to send back new beacon with matching capabilities */
            }
            /* Beacon Packet must be answered*/
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
          }
          else if (PING == pHandle->rxPacketType)
 8000fee:	2b06      	cmp	r3, #6
 8000ff0:	d115      	bne.n	800101e <ASPEP_RXframeProcess+0x5a>
          {
            /* In Listening for controller performer, */
            packetNumber = (uint16_t)((packetHeader & 0x0FFFF000U) >> (uint16_t)12U);
            ASPEP_sendPing(pHandle, ASPEP_PING_RESET, packetNumber);
 8000ff2:	f3c2 320f 	ubfx	r2, r2, #12, #16
 8000ff6:	4629      	mov	r1, r5
 8000ff8:	f7ff fe96 	bl	8000d28 <ASPEP_sendPing>
 8000ffc:	e00f      	b.n	800101e <ASPEP_RXframeProcess+0x5a>
          break;
      }
      /* The valid received packet is now safely consumes, we are ready to receive a new packet */
      pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
    }
    else if (pHandle->badPacketFlag > ASPEP_OK)
 8000ffe:	f890 3062 	ldrb.w	r3, [r0, #98]	@ 0x62
 8001002:	b9b3      	cbnz	r3, 8001032 <ASPEP_RXframeProcess+0x6e>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 8001004:	2500      	movs	r5, #0
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
  return (result);
}
 8001006:	4628      	mov	r0, r5
 8001008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if (BEACON == pHandle->rxPacketType)
 800100c:	6e85      	ldr	r5, [r0, #104]	@ 0x68
 800100e:	2d05      	cmp	r5, #5
 8001010:	f000 80d9 	beq.w	80011c6 <ASPEP_RXframeProcess+0x202>
          else if (PING == pHandle->rxPacketType)
 8001014:	2d06      	cmp	r5, #6
 8001016:	f000 8125 	beq.w	8001264 <ASPEP_RXframeProcess+0x2a0>
          else if (DATA_PACKET == pHandle->rxPacketType)
 800101a:	2d09      	cmp	r5, #9
 800101c:	d03e      	beq.n	800109c <ASPEP_RXframeProcess+0xd8>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 800101e:	2500      	movs	r5, #0
      pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8001020:	6960      	ldr	r0, [r4, #20]
 8001022:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001024:	2204      	movs	r2, #4
 8001026:	f104 011c 	add.w	r1, r4, #28
 800102a:	4798      	blx	r3
}
 800102c:	4628      	mov	r0, r5
 800102e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 8001032:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 8001036:	021b      	lsls	r3, r3, #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8001038:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800103c:	488c      	ldr	r0, [pc, #560]	@ (8001270 <ASPEP_RXframeProcess+0x2ac>)
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 800103e:	4d8d      	ldr	r5, [pc, #564]	@ (8001274 <ASPEP_RXframeProcess+0x2b0>)
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8001040:	f082 0209 	eor.w	r2, r2, #9
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 8001044:	f043 010f 	orr.w	r1, r3, #15
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8001048:	5c82      	ldrb	r2, [r0, r2]
 800104a:	ea82 4313 	eor.w	r3, r2, r3, lsr #16
 800104e:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8001050:	5cc3      	ldrb	r3, [r0, r3]
  *headerPtr |= (uint32_t)crc << 28;
 8001052:	5ceb      	ldrb	r3, [r5, r3]
 8001054:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
 8001058:	6223      	str	r3, [r4, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800105a:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 800105c:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800105e:	2b00      	cmp	r3, #0
 8001060:	f000 80f4 	beq.w	800124c <ASPEP_RXframeProcess+0x288>
  __ASM volatile ("cpsie i" : : : "memory");
 8001064:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 8001066:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 800106a:	b913      	cbnz	r3, 8001072 <ASPEP_RXframeProcess+0xae>
          pHandle->ctrlBuffer.state = pending;
 800106c:	2302      	movs	r3, #2
 800106e:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      pHandle->badPacketFlag = ASPEP_OK;
 8001072:	2200      	movs	r2, #0
      pHandle->fASPEP_HWSync(pHandle->ASPEPIp);
 8001074:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8001076:	6960      	ldr	r0, [r4, #20]
      pHandle->badPacketFlag = ASPEP_OK;
 8001078:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
      pHandle->fASPEP_HWSync(pHandle->ASPEPIp);
 800107c:	4798      	blx	r3
 800107e:	e7c1      	b.n	8001004 <ASPEP_RXframeProcess+0x40>
          if (BEACON == pHandle->rxPacketType)
 8001080:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 8001082:	2905      	cmp	r1, #5
 8001084:	d064      	beq.n	8001150 <ASPEP_RXframeProcess+0x18c>
          else if (PING == pHandle->rxPacketType)
 8001086:	2906      	cmp	r1, #6
 8001088:	d1c9      	bne.n	800101e <ASPEP_RXframeProcess+0x5a>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 800108a:	f3c2 320f 	ubfx	r2, r2, #12, #16
 800108e:	4629      	mov	r1, r5
 8001090:	f7ff fe4a 	bl	8000d28 <ASPEP_sendPing>
            pHandle->ASPEP_State = ASPEP_CONNECTED;
 8001094:	2302      	movs	r3, #2
 8001096:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
 800109a:	e7c0      	b.n	800101e <ASPEP_RXframeProcess+0x5a>
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 800109c:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
              *packetLength = pHandle->rxLengthASPEP;
 80010a0:	f8b0 205c 	ldrh.w	r2, [r0, #92]	@ 0x5c
              result = pHandle->rxBuffer;
 80010a4:	69a5      	ldr	r5, [r4, #24]
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 80010a6:	3301      	adds	r3, #1
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 80010a8:	2001      	movs	r0, #1
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 80010aa:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 80010ae:	7420      	strb	r0, [r4, #16]
              *packetLength = pHandle->rxLengthASPEP;
 80010b0:	800a      	strh	r2, [r1, #0]
              result = pHandle->rxBuffer;
 80010b2:	e7b5      	b.n	8001020 <ASPEP_RXframeProcess+0x5c>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 80010b4:	f894 c01d 	ldrb.w	ip, [r4, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80010b8:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 80010bc:	7f00      	ldrb	r0, [r0, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80010be:	f894 606c 	ldrb.w	r6, [r4, #108]	@ 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80010c2:	f894 706e 	ldrb.w	r7, [r4, #110]	@ 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80010c6:	f894 906f 	ldrb.w	r9, [r4, #111]	@ 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 80010ca:	f00c 0c3f 	and.w	ip, ip, #63	@ 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 80010ce:	09c0      	lsrs	r0, r0, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80010d0:	4563      	cmp	r3, ip
 80010d2:	bf28      	it	cs
 80010d4:	4663      	movcs	r3, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80010d6:	42b0      	cmp	r0, r6
 80010d8:	4601      	mov	r1, r0
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 80010da:	f3c2 3886 	ubfx	r8, r2, #14, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80010de:	bf28      	it	cs
 80010e0:	4631      	movcs	r1, r6
 80010e2:	f361 0507 	bfi	r5, r1, #0, #8
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 80010e6:	f3c2 5a46 	ubfx	sl, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80010ea:	45b8      	cmp	r8, r7
 80010ec:	4641      	mov	r1, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80010ee:	f363 250f 	bfi	r5, r3, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80010f2:	bf28      	it	cs
 80010f4:	4639      	movcs	r1, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80010f6:	45ca      	cmp	sl, r9
 80010f8:	46d6      	mov	lr, sl
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80010fa:	f361 4517 	bfi	r5, r1, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80010fe:	bf28      	it	cs
 8001100:	46ce      	movcs	lr, r9
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001102:	f36e 651f 	bfi	r5, lr, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8001106:	42b0      	cmp	r0, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001108:	66e5      	str	r5, [r4, #108]	@ 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 800110a:	d81b      	bhi.n	8001144 <ASPEP_RXframeProcess+0x180>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 800110c:	459c      	cmp	ip, r3
 800110e:	d819      	bhi.n	8001144 <ASPEP_RXframeProcess+0x180>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8001110:	45b8      	cmp	r8, r7
 8001112:	d817      	bhi.n	8001144 <ASPEP_RXframeProcess+0x180>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8001114:	45ca      	cmp	sl, r9
 8001116:	d815      	bhi.n	8001144 <ASPEP_RXframeProcess+0x180>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8001118:	f894 0070 	ldrb.w	r0, [r4, #112]	@ 0x70
 800111c:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8001120:	4290      	cmp	r0, r2
 8001122:	d10f      	bne.n	8001144 <ASPEP_RXframeProcess+0x180>
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8001124:	1c4a      	adds	r2, r1, #1
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8001126:	3301      	adds	r3, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8001128:	b2d2      	uxtb	r2, r2
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 800112a:	b2db      	uxtb	r3, r3
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 800112c:	0152      	lsls	r2, r2, #5
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 800112e:	ea4f 1e8e 	mov.w	lr, lr, lsl #6
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8001132:	015b      	lsls	r3, r3, #5
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8001134:	2101      	movs	r1, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8001136:	81a2      	strh	r2, [r4, #12]
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8001138:	f8a4 e00e 	strh.w	lr, [r4, #14]
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 800113c:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8001140:	f884 1064 	strb.w	r1, [r4, #100]	@ 0x64
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8001144:	f104 016c 	add.w	r1, r4, #108	@ 0x6c
 8001148:	4620      	mov	r0, r4
 800114a:	f7ff fda7 	bl	8000c9c <ASPEP_sendBeacon>
 800114e:	e766      	b.n	800101e <ASPEP_RXframeProcess+0x5a>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8001150:	7f45      	ldrb	r5, [r0, #29]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001152:	f890 c06c 	ldrb.w	ip, [r0, #108]	@ 0x6c
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8001156:	7f01      	ldrb	r1, [r0, #28]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8001158:	f890 006d 	ldrb.w	r0, [r0, #109]	@ 0x6d
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 800115c:	f894 606e 	ldrb.w	r6, [r4, #110]	@ 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8001160:	f894 e06f 	ldrb.w	lr, [r4, #111]	@ 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8001164:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8001168:	09c9      	lsrs	r1, r1, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 800116a:	42a8      	cmp	r0, r5
 800116c:	bf28      	it	cs
 800116e:	4628      	movcs	r0, r5
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001170:	4561      	cmp	r1, ip
 8001172:	460f      	mov	r7, r1
 8001174:	bf28      	it	cs
 8001176:	4667      	movcs	r7, ip
 8001178:	f367 0307 	bfi	r3, r7, #0, #8
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 800117c:	f3c2 3786 	ubfx	r7, r2, #14, #7
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8001180:	f3c2 5846 	ubfx	r8, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001184:	42b7      	cmp	r7, r6
 8001186:	46b9      	mov	r9, r7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001188:	f360 230f 	bfi	r3, r0, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 800118c:	bf28      	it	cs
 800118e:	46b1      	movcs	r9, r6
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8001190:	45f0      	cmp	r8, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001192:	f369 4317 	bfi	r3, r9, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8001196:	46c1      	mov	r9, r8
 8001198:	bf28      	it	cs
 800119a:	46f1      	movcs	r9, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800119c:	f369 631f 	bfi	r3, r9, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 80011a0:	4561      	cmp	r1, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80011a2:	66e3      	str	r3, [r4, #108]	@ 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 80011a4:	d80b      	bhi.n	80011be <ASPEP_RXframeProcess+0x1fa>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 80011a6:	4285      	cmp	r5, r0
 80011a8:	d809      	bhi.n	80011be <ASPEP_RXframeProcess+0x1fa>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 80011aa:	42b7      	cmp	r7, r6
 80011ac:	d807      	bhi.n	80011be <ASPEP_RXframeProcess+0x1fa>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 80011ae:	45f0      	cmp	r8, lr
 80011b0:	d805      	bhi.n	80011be <ASPEP_RXframeProcess+0x1fa>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 80011b2:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 80011b6:	f3c2 1202 	ubfx	r2, r2, #4, #3
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d0c2      	beq.n	8001144 <ASPEP_RXframeProcess+0x180>
              pHandle->ASPEP_State = ASPEP_IDLE;
 80011be:	2300      	movs	r3, #0
 80011c0:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
 80011c4:	e7be      	b.n	8001144 <ASPEP_RXframeProcess+0x180>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 80011c6:	f894 c01d 	ldrb.w	ip, [r4, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80011ca:	f894 506d 	ldrb.w	r5, [r4, #109]	@ 0x6d
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 80011ce:	7f00      	ldrb	r0, [r0, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80011d0:	f894 e06c 	ldrb.w	lr, [r4, #108]	@ 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80011d4:	f894 606e 	ldrb.w	r6, [r4, #110]	@ 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80011d8:	f894 806f 	ldrb.w	r8, [r4, #111]	@ 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 80011dc:	f00c 0c3f 	and.w	ip, ip, #63	@ 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 80011e0:	09c0      	lsrs	r0, r0, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80011e2:	4565      	cmp	r5, ip
 80011e4:	bf28      	it	cs
 80011e6:	4665      	movcs	r5, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80011e8:	4570      	cmp	r0, lr
 80011ea:	4607      	mov	r7, r0
 80011ec:	4619      	mov	r1, r3
 80011ee:	bf28      	it	cs
 80011f0:	4677      	movcs	r7, lr
 80011f2:	f367 0107 	bfi	r1, r7, #0, #8
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 80011f6:	f3c2 3786 	ubfx	r7, r2, #14, #7
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 80011fa:	f3c2 5946 	ubfx	r9, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80011fe:	42b7      	cmp	r7, r6
 8001200:	46ba      	mov	sl, r7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001202:	f365 210f 	bfi	r1, r5, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001206:	bf28      	it	cs
 8001208:	46b2      	movcs	sl, r6
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 800120a:	45c1      	cmp	r9, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800120c:	f36a 4117 	bfi	r1, sl, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8001210:	46ca      	mov	sl, r9
 8001212:	bf28      	it	cs
 8001214:	46c2      	movcs	sl, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001216:	f36a 611f 	bfi	r1, sl, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 800121a:	4570      	cmp	r0, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800121c:	66e1      	str	r1, [r4, #108]	@ 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 800121e:	f104 016c 	add.w	r1, r4, #108	@ 0x6c
 8001222:	d80d      	bhi.n	8001240 <ASPEP_RXframeProcess+0x27c>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8001224:	45ac      	cmp	ip, r5
 8001226:	d80b      	bhi.n	8001240 <ASPEP_RXframeProcess+0x27c>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8001228:	42b7      	cmp	r7, r6
 800122a:	d809      	bhi.n	8001240 <ASPEP_RXframeProcess+0x27c>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 800122c:	45c1      	cmp	r9, r8
 800122e:	d807      	bhi.n	8001240 <ASPEP_RXframeProcess+0x27c>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8001230:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8001234:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8001238:	1a9b      	subs	r3, r3, r2
 800123a:	fab3 f383 	clz	r3, r3
 800123e:	095b      	lsrs	r3, r3, #5
 8001240:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8001244:	4620      	mov	r0, r4
 8001246:	f7ff fd29 	bl	8000c9c <ASPEP_sendBeacon>
 800124a:	e6e8      	b.n	800101e <ASPEP_RXframeProcess+0x5a>
  (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 800124c:	f104 0120 	add.w	r1, r4, #32
        pHandle->ctrlBuffer.state = readLock;
 8001250:	2303      	movs	r3, #3
 8001252:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8001256:	64a1      	str	r1, [r4, #72]	@ 0x48
 8001258:	b662      	cpsie	i
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 800125a:	2204      	movs	r2, #4
 800125c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800125e:	6960      	ldr	r0, [r4, #20]
 8001260:	4798      	blx	r3
 8001262:	e706      	b.n	8001072 <ASPEP_RXframeProcess+0xae>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8001264:	f3c2 320f 	ubfx	r2, r2, #12, #16
 8001268:	2101      	movs	r1, #1
 800126a:	f7ff fd5d 	bl	8000d28 <ASPEP_sendPing>
 800126e:	e6d6      	b.n	800101e <ASPEP_RXframeProcess+0x5a>
 8001270:	0800b0cc 	.word	0x0800b0cc
 8001274:	0800b0bc 	.word	0x0800b0bc

08001278 <ASPEP_HWDataReceivedIT>:
  * If the packet received contains an error in the header, the HW IP will be re-synchronised first, and DMA will be configured after.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDataReceivedIT(ASPEP_Handle_t *pHandle)
{
 8001278:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    switch (pHandle->ASPEP_TL_State)
 800127a:	f890 3065 	ldrb.w	r3, [r0, #101]	@ 0x65
{
 800127e:	4604      	mov	r4, r0
    switch (pHandle->ASPEP_TL_State)
 8001280:	b143      	cbz	r3, 8001294 <ASPEP_HWDataReceivedIT+0x1c>
 8001282:	2b01      	cmp	r3, #1
 8001284:	d000      	beq.n	8001288 <ASPEP_HWDataReceivedIT+0x10>
        break;
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8001286:	bd10      	pop	{r4, pc}
        pHandle->ASPEP_TL_State = WAITING_PACKET;
 8001288:	2200      	movs	r2, #0
 800128a:	f880 2065 	strb.w	r2, [r0, #101]	@ 0x65
        pHandle->NewPacketAvailable = true;
 800128e:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
}
 8001292:	bd10      	pop	{r4, pc}
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 8001294:	69c1      	ldr	r1, [r0, #28]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8001296:	4a1f      	ldr	r2, [pc, #124]	@ (8001314 <ASPEP_HWDataReceivedIT+0x9c>)
 8001298:	b2cb      	uxtb	r3, r1
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 800129a:	5cd3      	ldrb	r3, [r2, r3]
 800129c:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 80012a0:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 80012a2:	5cd3      	ldrb	r3, [r2, r3]
 80012a4:	ea83 4311 	eor.w	r3, r3, r1, lsr #16
 80012a8:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 24U) & 0xffU)];
 80012aa:	5cd3      	ldrb	r3, [r2, r3]
 80012ac:	ea83 6311 	eor.w	r3, r3, r1, lsr #24
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 80012b0:	5cd3      	ldrb	r3, [r2, r3]
 80012b2:	b95b      	cbnz	r3, 80012cc <ASPEP_HWDataReceivedIT+0x54>
          pHandle->rxPacketType = (ASPEP_packetType)(((uint32_t)pHandle->rxHeader[0]) & ID_MASK);
 80012b4:	7f03      	ldrb	r3, [r0, #28]
 80012b6:	f003 030f 	and.w	r3, r3, #15
          switch (pHandle->rxPacketType)
 80012ba:	2b06      	cmp	r3, #6
          pHandle->rxPacketType = (ASPEP_packetType)(((uint32_t)pHandle->rxHeader[0]) & ID_MASK);
 80012bc:	6683      	str	r3, [r0, #104]	@ 0x68
          switch (pHandle->rxPacketType)
 80012be:	d809      	bhi.n	80012d4 <ASPEP_HWDataReceivedIT+0x5c>
 80012c0:	2b04      	cmp	r3, #4
 80012c2:	d91f      	bls.n	8001304 <ASPEP_HWDataReceivedIT+0x8c>
              pHandle->NewPacketAvailable = true;
 80012c4:	2301      	movs	r3, #1
 80012c6:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
}
 80012ca:	bd10      	pop	{r4, pc}
          pHandle->badPacketFlag = ASPEP_BAD_CRC_HEADER;
 80012cc:	2304      	movs	r3, #4
 80012ce:	f880 3062 	strb.w	r3, [r0, #98]	@ 0x62
}
 80012d2:	bd10      	pop	{r4, pc}
          switch (pHandle->rxPacketType)
 80012d4:	2b09      	cmp	r3, #9
 80012d6:	d115      	bne.n	8001304 <ASPEP_HWDataReceivedIT+0x8c>
              pHandle->rxLengthASPEP = (uint16_t)((*((uint16_t *)pHandle->rxHeader) & 0x1FFF0U) >> (uint16_t)4);
 80012d8:	8b83      	ldrh	r3, [r0, #28]
 80012da:	091b      	lsrs	r3, r3, #4
 80012dc:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
              if (0U == pHandle->rxLengthASPEP) /* data packet with length 0 is a valid packet */
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d0ef      	beq.n	80012c4 <ASPEP_HWDataReceivedIT+0x4c>
              else if (pHandle->rxLengthASPEP <= pHandle->maxRXPayload)
 80012e4:	f8b0 205e 	ldrh.w	r2, [r0, #94]	@ 0x5e
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d30f      	bcc.n	800130c <ASPEP_HWDataReceivedIT+0x94>
                pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxBuffer,  /* need to read + 2 bytes CRC*/
 80012ec:	f890 206c 	ldrb.w	r2, [r0, #108]	@ 0x6c
 80012f0:	6981      	ldr	r1, [r0, #24]
 80012f2:	6940      	ldr	r0, [r0, #20]
 80012f4:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80012f8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80012fa:	4798      	blx	r3
                pHandle->ASPEP_TL_State = WAITING_PAYLOAD;
 80012fc:	2301      	movs	r3, #1
 80012fe:	f884 3065 	strb.w	r3, [r4, #101]	@ 0x65
}
 8001302:	bd10      	pop	{r4, pc}
              pHandle->badPacketFlag = ASPEP_BAD_PACKET_TYPE;
 8001304:	2301      	movs	r3, #1
 8001306:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
}
 800130a:	bd10      	pop	{r4, pc}
                pHandle->badPacketFlag = ASPEP_BAD_PACKET_SIZE;
 800130c:	2302      	movs	r3, #2
 800130e:	f880 3062 	strb.w	r3, [r0, #98]	@ 0x62
}
 8001312:	bd10      	pop	{r4, pc}
 8001314:	0800b0cc 	.word	0x0800b0cc

08001318 <ASPEP_HWReset>:
  * @brief  Resets DMA after debugger has stopped the MCU.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWReset(ASPEP_Handle_t *pHandle)
{
 8001318:	4601      	mov	r1, r0
  {
#endif
    /* We must reset the RX state machine to be sure to not be in Waiting packet state */
    /* Otherwise the arrival of a new packet will trigger a NewPacketAvailable despite */
    /* the fact that bytes have been lost because of overrun (debugger paused for instance) */
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 800131a:	2200      	movs	r2, #0
 800131c:	f880 2065 	strb.w	r2, [r0, #101]	@ 0x65
    pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8001320:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8001322:	6940      	ldr	r0, [r0, #20]
 8001324:	2204      	movs	r2, #4
 8001326:	311c      	adds	r1, #28
 8001328:	4718      	bx	r3
 800132a:	bf00      	nop

0800132c <HALL_Init>:
  else
  {
#endif
    TIM_TypeDef *TIMx = pHandle->TIMx;

    uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit * pHandle->_Super.bElToMecRatio;
 800132c:	7843      	ldrb	r3, [r0, #1]
 800132e:	f8b0 c016 	ldrh.w	ip, [r0, #22]

    /* Adjustment factor: maximum measurable speed is x time greater than the
    maximum reliable speed */
    hMaxReliableElSpeedUnit *= 2U;

    pHandle->OvfFreq = (uint16_t)(pHandle->TIMClockFreq / 65536U);
 8001332:	6a82      	ldr	r2, [r0, #40]	@ 0x28
{
 8001334:	b530      	push	{r4, r5, lr}
    hMaxReliableElSpeedUnit *= 2U;
 8001336:	8a84      	ldrh	r4, [r0, #20]
    uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit * pHandle->_Super.bElToMecRatio;
 8001338:	fb1c fc03 	smulbb	ip, ip, r3
    hMaxReliableElSpeedUnit *= 2U;
 800133c:	fb14 f403 	smulbb	r4, r4, r3
    uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit * pHandle->_Super.bElToMecRatio;
 8001340:	fa1f fc8c 	uxth.w	ip, ip
    hMaxReliableElSpeedUnit *= 2U;
 8001344:	0064      	lsls	r4, r4, #1
    pHandle->OvfFreq = (uint16_t)(pHandle->TIMClockFreq / 65536U);
 8001346:	0c11      	lsrs	r1, r2, #16

    /* SW Init */
    if (0U == hMinReliableElSpeedUnit)
 8001348:	f1bc 0f03 	cmp.w	ip, #3
    TIM_TypeDef *TIMx = pHandle->TIMx;
 800134c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    pHandle->OvfFreq = (uint16_t)(pHandle->TIMClockFreq / 65536U);
 800134e:	f8a0 10c6 	strh.w	r1, [r0, #198]	@ 0xc6
    hMaxReliableElSpeedUnit *= 2U;
 8001352:	b2a4      	uxth	r4, r4
    if (0U == hMinReliableElSpeedUnit)
 8001354:	d96b      	bls.n	800142e <HALL_Init+0x102>
    else
    {
      /* Set accordingly the min reliable speed */
      /* 1000 comes from mS
      * 6 comes from the fact that sensors are toggling each 60 deg = 360/6 deg */
      pHandle->HallTimeout = (1000U * (uint16_t)SPEED_UNIT) / (6U * hMinReliableElSpeedUnit);
 8001356:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
 800135a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 800135e:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8001362:	f242 7e10 	movw	lr, #10000	@ 0x2710
 8001366:	fbbe fcfc 	udiv	ip, lr, ip
 800136a:	fa1f f58c 	uxth.w	r5, ip
 800136e:	f8a0 50c4 	strh.w	r5, [r0, #196]	@ 0xc4
    }

    /* Compute the prescaler to the closet value of the TimeOut (in mS )*/
    pHandle->HALLMaxRatio = (pHandle->HallTimeout * pHandle->OvfFreq) / 1000U ;
 8001372:	4d31      	ldr	r5, [pc, #196]	@ (8001438 <HALL_Init+0x10c>)
    /* Align MaxPeriod to a multiple of Overflow.*/
    pHandle->MaxPeriod = pHandle->HALLMaxRatio * 65536UL;

    pHandle->SatSpeed = hMaxReliableElSpeedUnit;

    pHandle->PseudoFreqConv = ((pHandle->TIMClockFreq / 6U) / pHandle->_Super.hMeasurementFrequency)
 8001374:	f8b0 e01a 	ldrh.w	lr, [r0, #26]
    pHandle->SatSpeed = hMaxReliableElSpeedUnit;
 8001378:	f8a0 40b6 	strh.w	r4, [r0, #182]	@ 0xb6
    pHandle->HALLMaxRatio = (pHandle->HallTimeout * pHandle->OvfFreq) / 1000U ;
 800137c:	fb0c f101 	mul.w	r1, ip, r1
 8001380:	fba5 5101 	umull	r5, r1, r5, r1
    pHandle->PseudoFreqConv = ((pHandle->TIMClockFreq / 6U) / pHandle->_Super.hMeasurementFrequency)
 8001384:	4d2d      	ldr	r5, [pc, #180]	@ (800143c <HALL_Init+0x110>)
    pHandle->HALLMaxRatio = (pHandle->HallTimeout * pHandle->OvfFreq) / 1000U ;
 8001386:	0989      	lsrs	r1, r1, #6
    pHandle->PseudoFreqConv = ((pHandle->TIMClockFreq / 6U) / pHandle->_Super.hMeasurementFrequency)
 8001388:	fba5 5202 	umull	r5, r2, r5, r2
    pHandle->MaxPeriod = pHandle->HALLMaxRatio * 65536UL;
 800138c:	040d      	lsls	r5, r1, #16
 800138e:	f8c0 50bc 	str.w	r5, [r0, #188]	@ 0xbc
                              * pHandle->_Super.DPPConvFactor;
 8001392:	69c5      	ldr	r5, [r0, #28]
    pHandle->HALLMaxRatio = (pHandle->HallTimeout * pHandle->OvfFreq) / 1000U ;
 8001394:	f8a0 10b4 	strh.w	r1, [r0, #180]	@ 0xb4
    pHandle->PseudoFreqConv = ((pHandle->TIMClockFreq / 6U) / pHandle->_Super.hMeasurementFrequency)
 8001398:	0892      	lsrs	r2, r2, #2

    if (0U == hMaxReliableElSpeedUnit)
    {
      pHandle->MinPeriod = ((uint32_t)SPEED_UNIT * (pHandle->TIMClockFreq / 6UL));
 800139a:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
    pHandle->PseudoFreqConv = ((pHandle->TIMClockFreq / 6U) / pHandle->_Super.hMeasurementFrequency)
 800139e:	fbb2 f2fe 	udiv	r2, r2, lr
                              * pHandle->_Super.DPPConvFactor;
 80013a2:	fb05 f202 	mul.w	r2, r5, r2
    pHandle->PseudoFreqConv = ((pHandle->TIMClockFreq / 6U) / pHandle->_Super.hMeasurementFrequency)
 80013a6:	f8c0 20b8 	str.w	r2, [r0, #184]	@ 0xb8
    if (0U == hMaxReliableElSpeedUnit)
 80013aa:	b289      	uxth	r1, r1
      pHandle->MinPeriod = ((uint32_t)SPEED_UNIT * (pHandle->TIMClockFreq / 6UL));
 80013ac:	ea4f 024c 	mov.w	r2, ip, lsl #1
    if (0U == hMaxReliableElSpeedUnit)
 80013b0:	b10c      	cbz	r4, 80013b6 <HALL_Init+0x8a>
    }
    else
    {
      pHandle->MinPeriod = (((uint32_t)SPEED_UNIT * (pHandle->TIMClockFreq / 6UL)) / hMaxReliableElSpeedUnit);
 80013b2:	fbb2 f2f4 	udiv	r2, r2, r4
 80013b6:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
    }

    pHandle->PWMNbrPSamplingFreq = ((pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 80013ba:	f890 20ca 	ldrb.w	r2, [r0, #202]	@ 0xca
                                    pHandle->SpeedSamplingFreqHz) - 1U;
 80013be:	8c84      	ldrh	r4, [r0, #36]	@ 0x24
    pHandle->PWMNbrPSamplingFreq = ((pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 80013c0:	fb0e f202 	mul.w	r2, lr, r2
 80013c4:	fbb2 f2f4 	udiv	r2, r2, r4
  */
__STATIC_INLINE void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
{
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 80013c8:	699c      	ldr	r4, [r3, #24]
                                    pHandle->SpeedSamplingFreqHz) - 1U;
 80013ca:	3a01      	subs	r2, #1
    pHandle->PWMNbrPSamplingFreq = ((pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 80013cc:	f8a0 20c8 	strh.w	r2, [r0, #200]	@ 0xc8
 80013d0:	f8b0 204a 	ldrh.w	r2, [r0, #74]	@ 0x4a
 80013d4:	f024 04f0 	bic.w	r4, r4, #240	@ 0xf0

    /* Reset speed reliability */
    pHandle->SensorIsReliable = true;
 80013d8:	2501      	movs	r5, #1
 80013da:	4322      	orrs	r2, r4
 80013dc:	f880 504c 	strb.w	r5, [r0, #76]	@ 0x4c
 80013e0:	619a      	str	r2, [r3, #24]
  WRITE_REG(TIMx->PSC, Prescaler);
 80013e2:	6299      	str	r1, [r3, #40]	@ 0x28
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80013e4:	695a      	ldr	r2, [r3, #20]
    */
    LL_TIM_SetPrescaler(TIMx, pHandle->HALLMaxRatio);
    LL_TIM_GenerateEvent_UPDATE(TIMx);

    /* Clear the TIMx's pending flags */
    WRITE_REG(TIMx->SR, 0);
 80013e6:	2100      	movs	r1, #0
 80013e8:	432a      	orrs	r2, r5
 80013ea:	615a      	str	r2, [r3, #20]
 80013ec:	6119      	str	r1, [r3, #16]
  MODIFY_REG(TIMx->CR1, TIM_CR1_URS, UpdateSource);
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	f042 0204 	orr.w	r2, r2, #4
 80013f4:	601a      	str	r2, [r3, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 80013f6:	68da      	ldr	r2, [r3, #12]
 80013f8:	f042 0202 	orr.w	r2, r2, #2
 80013fc:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80013fe:	68da      	ldr	r2, [r3, #12]
 8001400:	432a      	orrs	r2, r5
 8001402:	60da      	str	r2, [r3, #12]
  WRITE_REG(TIMx->CNT, Counter);
 8001404:	6259      	str	r1, [r3, #36]	@ 0x24
  SET_BIT(TIMx->CCER, Channels);
 8001406:	6a1a      	ldr	r2, [r3, #32]
 8001408:	432a      	orrs	r2, r5
 800140a:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	432a      	orrs	r2, r5
 8001410:	601a      	str	r2, [r3, #0]

    LL_TIM_CC_EnableChannel(TIMx, LL_TIM_CHANNEL_CH1);
    LL_TIM_EnableCounter(TIMx);

    /* Erase speed buffer */
    bSpeedBufferSize = pHandle->SpeedBufferSize;
 8001412:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26

    for (bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++)
 8001416:	b14a      	cbz	r2, 800142c <HALL_Init+0x100>
 8001418:	f100 0350 	add.w	r3, r0, #80	@ 0x50
    {
      pHandle->SensorPeriod[bIndex]  = (int32_t)pHandle->MaxPeriod;
 800141c:	f8d0 10bc 	ldr.w	r1, [r0, #188]	@ 0xbc
 8001420:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8001424:	f843 1f04 	str.w	r1, [r3, #4]!
    for (bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++)
 8001428:	4293      	cmp	r3, r2
 800142a:	d1fb      	bne.n	8001424 <HALL_Init+0xf8>
    }
#ifdef NULL_PTR_CHECK_HALL_SPD_POS_FDB
  }
#endif
}
 800142c:	bd30      	pop	{r4, r5, pc}
 800142e:	f04f 0c96 	mov.w	ip, #150	@ 0x96
      pHandle->HallTimeout = 150U;
 8001432:	4665      	mov	r5, ip
 8001434:	e79b      	b.n	800136e <HALL_Init+0x42>
 8001436:	bf00      	nop
 8001438:	10624dd3 	.word	0x10624dd3
 800143c:	aaaaaaab 	.word	0xaaaaaaab

08001440 <HALL_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    TIM_TypeDef *TIMx = pHandle->TIMx;
 8001440:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
  CLEAR_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8001442:	68d1      	ldr	r1, [r2, #12]
 8001444:	f021 0102 	bic.w	r1, r1, #2
{
 8001448:	b4f0      	push	{r4, r5, r6, r7}

    /* Mask interrupts to insure a clean intialization */
    LL_TIM_DisableIT_CC1(TIMx);

    pHandle->RatioDec = false;
 800144a:	2300      	movs	r3, #0

    /* Clear speed error counter */
    pHandle->_Super.bSpeedErrorNumber = 0;

    /* Re-initialize partly the timer */
    LL_TIM_SetPrescaler(TIMx, pHandle->HALLMaxRatio);
 800144c:	f8b0 40b4 	ldrh.w	r4, [r0, #180]	@ 0xb4
 8001450:	60d1      	str	r1, [r2, #12]
    pHandle->SensorIsReliable = true;
 8001452:	2101      	movs	r1, #1
    pHandle->RatioDec = false;
 8001454:	f880 304d 	strb.w	r3, [r0, #77]	@ 0x4d
    pHandle->Direction = POSITIVE;
 8001458:	f880 10a6 	strb.w	r1, [r0, #166]	@ 0xa6
    pHandle->RatioInc = false;
 800145c:	f880 304e 	strb.w	r3, [r0, #78]	@ 0x4e
    pHandle->SpeedFIFOIdx = 0U;
 8001460:	f880 309c 	strb.w	r3, [r0, #156]	@ 0x9c
    pHandle->FirstCapt = 0U;
 8001464:	f880 304f 	strb.w	r3, [r0, #79]	@ 0x4f
    pHandle->_Super.bSpeedErrorNumber = 0;
 8001468:	7003      	strb	r3, [r0, #0]
    pHandle->BufferFilled = 0U;
 800146a:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
    pHandle->SensorIsReliable = true;
 800146e:	f880 104c 	strb.w	r1, [r0, #76]	@ 0x4c
    pHandle->OVFCounter = 0U;
 8001472:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
    pHandle->_Super.hMecAccelUnitP = 0;
 8001476:	8243      	strh	r3, [r0, #18]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001478:	6294      	str	r4, [r2, #40]	@ 0x28
  WRITE_REG(TIMx->CNT, Counter);
 800147a:	6253      	str	r3, [r2, #36]	@ 0x24
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800147c:	6813      	ldr	r3, [r2, #0]
  {
#endif
    if (DEGREES_120 == pHandle->SensorPlacement)
    {
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
                                      | (LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) << 1U)
 800147e:	6b86      	ldr	r6, [r0, #56]	@ 0x38
 8001480:	430b      	orrs	r3, r1
 8001482:	6013      	str	r3, [r2, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8001484:	68d3      	ldr	r3, [r2, #12]
 8001486:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8001488:	f043 0302 	orr.w	r3, r3, #2
 800148c:	60d3      	str	r3, [r2, #12]
    if (DEGREES_120 == pHandle->SensorPlacement)
 800148e:	f890 7020 	ldrb.w	r7, [r0, #32]
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 8001492:	e9d0 5310 	ldrd	r5, r3, [r0, #64]	@ 0x40
                                      | LL_GPIO_IsInputPinSet(pHandle->H1Port, pHandle->H1Pin));
 8001496:	e9d0 420c 	ldrd	r4, r2, [r0, #48]	@ 0x30
    if (DEGREES_120 == pHandle->SensorPlacement)
 800149a:	b9ef      	cbnz	r7, 80014d8 <HALL_Clear+0x98>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 800149c:	692d      	ldr	r5, [r5, #16]
 800149e:	43ab      	bics	r3, r5
 80014a0:	6933      	ldr	r3, [r6, #16]
 80014a2:	6924      	ldr	r4, [r4, #16]
 80014a4:	bf0c      	ite	eq
 80014a6:	2501      	moveq	r5, #1
 80014a8:	2500      	movne	r5, #0
 80014aa:	ea31 0303 	bics.w	r3, r1, r3
 80014ae:	bf0c      	ite	eq
 80014b0:	2301      	moveq	r3, #1
 80014b2:	2300      	movne	r3, #0
                                      | (LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) << 1U)
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
 80014ba:	ea32 0404 	bics.w	r4, r2, r4
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 80014be:	bf08      	it	eq
 80014c0:	f043 0301 	orreq.w	r3, r3, #1
      pHandle->HallState  = (uint8_t)(((LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) ^ 1U) << 2U)
                                      | (LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 1U)
                                      | LL_GPIO_IsInputPinSet(pHandle->H1Port, pHandle->H1Pin));
    }

    switch (pHandle->HallState)
 80014c4:	1e5a      	subs	r2, r3, #1
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 80014c6:	f880 30aa 	strb.w	r3, [r0, #170]	@ 0xaa
    switch (pHandle->HallState)
 80014ca:	2a05      	cmp	r2, #5
 80014cc:	d84c      	bhi.n	8001568 <HALL_Clear+0x128>
 80014ce:	e8df f002 	tbb	[pc, r2]
 80014d2:	2f28      	.short	0x2f28
 80014d4:	1b443d36 	.word	0x1b443d36
 80014d8:	6936      	ldr	r6, [r6, #16]
 80014da:	692d      	ldr	r5, [r5, #16]
 80014dc:	43ab      	bics	r3, r5
 80014de:	6923      	ldr	r3, [r4, #16]
 80014e0:	bf0c      	ite	eq
 80014e2:	2401      	moveq	r4, #1
 80014e4:	2400      	movne	r4, #0
 80014e6:	ea32 0303 	bics.w	r3, r2, r3
 80014ea:	bf0c      	ite	eq
 80014ec:	2301      	moveq	r3, #1
 80014ee:	2300      	movne	r3, #0
 80014f0:	ea31 0606 	bics.w	r6, r1, r6
 80014f4:	bf0c      	ite	eq
 80014f6:	2201      	moveq	r2, #1
 80014f8:	2200      	movne	r2, #0
      pHandle->HallState  = (uint8_t)(((LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) ^ 1U) << 2U)
 80014fa:	0092      	lsls	r2, r2, #2
 80014fc:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
 8001500:	f082 0204 	eor.w	r2, r2, #4
 8001504:	4313      	orrs	r3, r2
 8001506:	e7dd      	b.n	80014c4 <HALL_Clear+0x84>
        break;
      }

      case STATE_6:
      {
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift - S16_60_PHASE_SHIFT - (S16_60_PHASE_SHIFT / 2));
 8001508:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 800150a:	f5a3 537f 	sub.w	r3, r3, #16320	@ 0x3fc0
 800150e:	3b3f      	subs	r3, #63	@ 0x3f
 8001510:	b21b      	sxth	r3, r3
 8001512:	8083      	strh	r3, [r0, #4]
        pHandle->SensorIsReliable = false;
        break;
      }
    }
    /* Reset incremental value */
    pHandle->IncrementElAngle = 0;
 8001514:	2200      	movs	r2, #0
}
 8001516:	bcf0      	pop	{r4, r5, r6, r7}

    /* Initialize the measured angle */
    pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8001518:	f8a0 30ae 	strh.w	r3, [r0, #174]	@ 0xae
    pHandle->IncrementElAngle = 0;
 800151c:	f8c0 20b0 	str.w	r2, [r0, #176]	@ 0xb0
}
 8001520:	4770      	bx	lr
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift + S16_60_PHASE_SHIFT + (S16_60_PHASE_SHIFT / 2));
 8001522:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8001524:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 8001528:	333f      	adds	r3, #63	@ 0x3f
 800152a:	b21b      	sxth	r3, r3
 800152c:	8083      	strh	r3, [r0, #4]
        break;
 800152e:	e7f1      	b.n	8001514 <HALL_Clear+0xd4>
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift - S16_120_PHASE_SHIFT - (S16_60_PHASE_SHIFT / 2));
 8001530:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8001532:	f5a3 43d5 	sub.w	r3, r3, #27264	@ 0x6a80
 8001536:	3b2a      	subs	r3, #42	@ 0x2a
 8001538:	b21b      	sxth	r3, r3
 800153a:	8083      	strh	r3, [r0, #4]
        break;
 800153c:	e7ea      	b.n	8001514 <HALL_Clear+0xd4>
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT + (S16_60_PHASE_SHIFT / 2));
 800153e:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8001540:	f503 43d5 	add.w	r3, r3, #27264	@ 0x6a80
 8001544:	332a      	adds	r3, #42	@ 0x2a
 8001546:	b21b      	sxth	r3, r3
 8001548:	8083      	strh	r3, [r0, #4]
        break;
 800154a:	e7e3      	b.n	8001514 <HALL_Clear+0xd4>
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift - (S16_60_PHASE_SHIFT / 2));
 800154c:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 800154e:	f5a3 53aa 	sub.w	r3, r3, #5440	@ 0x1540
 8001552:	3b15      	subs	r3, #21
 8001554:	b21b      	sxth	r3, r3
 8001556:	8083      	strh	r3, [r0, #4]
        break;
 8001558:	e7dc      	b.n	8001514 <HALL_Clear+0xd4>
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift + (S16_60_PHASE_SHIFT / 2));
 800155a:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 800155c:	f503 53aa 	add.w	r3, r3, #5440	@ 0x1540
 8001560:	3315      	adds	r3, #21
 8001562:	b21b      	sxth	r3, r3
 8001564:	8083      	strh	r3, [r0, #4]
        break;
 8001566:	e7d5      	b.n	8001514 <HALL_Clear+0xd4>
        pHandle->SensorIsReliable = false;
 8001568:	2200      	movs	r2, #0
    pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 800156a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
        pHandle->SensorIsReliable = false;
 800156e:	f880 204c 	strb.w	r2, [r0, #76]	@ 0x4c
        break;
 8001572:	e7cf      	b.n	8001514 <HALL_Clear+0xd4>

08001574 <HALL_CalcElAngle>:
    if (pHandle->_Super.hElSpeedDpp != HALL_MAX_PSEUDO_SPEED)
 8001574:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
 8001578:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800157c:	428a      	cmp	r2, r1
{
 800157e:	4603      	mov	r3, r0
        pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed - (pHandle->IncrementElAngle - S16_60_PHASE_SHIFT) - 1;
 8001580:	8880      	ldrh	r0, [r0, #4]
    if (pHandle->_Super.hElSpeedDpp != HALL_MAX_PSEUDO_SPEED)
 8001582:	d02b      	beq.n	80015dc <HALL_CalcElAngle+0x68>
{
 8001584:	b530      	push	{r4, r5, lr}
      pHandle->IncrementElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8001586:	fa1f fe82 	uxth.w	lr, r2
      pHandle->PrevRotorFreq = pHandle->_Super.hElSpeedDpp;
 800158a:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
      pHandle->IncrementElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 800158e:	f8b3 20b2 	ldrh.w	r2, [r3, #178]	@ 0xb2
 8001592:	f8b3 40b0 	ldrh.w	r4, [r3, #176]	@ 0xb0
 8001596:	4472      	add	r2, lr
 8001598:	b292      	uxth	r2, r2
 800159a:	18a1      	adds	r1, r4, r2
 800159c:	b209      	sxth	r1, r1
      if (pHandle->IncrementElAngle >= S16_60_PHASE_SHIFT)
 800159e:	f642 2ca9 	movw	ip, #10921	@ 0x2aa9
 80015a2:	4561      	cmp	r1, ip
      pHandle->IncrementElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 80015a4:	f8a3 10b0 	strh.w	r1, [r3, #176]	@ 0xb0
      if (pHandle->IncrementElAngle >= S16_60_PHASE_SHIFT)
 80015a8:	dd0a      	ble.n	80015c0 <HALL_CalcElAngle+0x4c>
        pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed - (pHandle->IncrementElAngle - S16_60_PHASE_SHIFT) - 1;
 80015aa:	4484      	add	ip, r0
 80015ac:	ebac 0c04 	sub.w	ip, ip, r4
 80015b0:	fa0f f08c 	sxth.w	r0, ip
        pHandle->IncrementElAngle = S16_60_PHASE_SHIFT;
 80015b4:	f642 22aa 	movw	r2, #10922	@ 0x2aaa
        pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed - (pHandle->IncrementElAngle - S16_60_PHASE_SHIFT) - 1;
 80015b8:	8098      	strh	r0, [r3, #4]
        pHandle->IncrementElAngle = S16_60_PHASE_SHIFT;
 80015ba:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
}
 80015be:	bd30      	pop	{r4, r5, pc}
      else if (pHandle->IncrementElAngle <= -S16_60_PHASE_SHIFT)
 80015c0:	4d0e      	ldr	r5, [pc, #56]	@ (80015fc <HALL_CalcElAngle+0x88>)
 80015c2:	42a9      	cmp	r1, r5
 80015c4:	da10      	bge.n	80015e8 <HALL_CalcElAngle+0x74>
        pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed - (pHandle->IncrementElAngle + S16_60_PHASE_SHIFT) + 1;
 80015c6:	f5a0 502a 	sub.w	r0, r0, #10880	@ 0x2a80
 80015ca:	3829      	subs	r0, #41	@ 0x29
 80015cc:	1b00      	subs	r0, r0, r4
 80015ce:	b200      	sxth	r0, r0
        pHandle->IncrementElAngle = -S16_60_PHASE_SHIFT;
 80015d0:	f24d 5256 	movw	r2, #54614	@ 0xd556
        pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed - (pHandle->IncrementElAngle + S16_60_PHASE_SHIFT) + 1;
 80015d4:	8098      	strh	r0, [r3, #4]
        pHandle->IncrementElAngle = -S16_60_PHASE_SHIFT;
 80015d6:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
}
 80015da:	bd30      	pop	{r4, r5, pc}
      pHandle->_Super.hElAngle += pHandle->PrevRotorFreq;
 80015dc:	f8b3 20a4 	ldrh.w	r2, [r3, #164]	@ 0xa4
 80015e0:	4410      	add	r0, r2
 80015e2:	b200      	sxth	r0, r0
 80015e4:	8098      	strh	r0, [r3, #4]
}
 80015e6:	4770      	bx	lr
        pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 80015e8:	f8b3 10ae 	ldrh.w	r1, [r3, #174]	@ 0xae
        pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 80015ec:	4402      	add	r2, r0
        pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 80015ee:	448e      	add	lr, r1
        pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 80015f0:	b210      	sxth	r0, r2
        pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 80015f2:	f8a3 e0ae 	strh.w	lr, [r3, #174]	@ 0xae
        pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 80015f6:	8098      	strh	r0, [r3, #4]
}
 80015f8:	bd30      	pop	{r4, r5, pc}
 80015fa:	bf00      	nop
 80015fc:	ffffd557 	.word	0xffffd557

08001600 <HALL_CalcAvrgMecSpeedUnit>:
{
 8001600:	b538      	push	{r3, r4, r5, lr}
 8001602:	4604      	mov	r4, r0
    if (pHandle->SensorIsReliable)
 8001604:	f890 004c 	ldrb.w	r0, [r0, #76]	@ 0x4c
    TIM_TypeDef *TIMx = pHandle->TIMx;
 8001608:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
{
 800160a:	460d      	mov	r5, r1
    if (pHandle->SensorIsReliable)
 800160c:	b180      	cbz	r0, 8001630 <HALL_CalcAvrgMecSpeedUnit+0x30>
  return (uint32_t)(READ_REG(TIMx->PSC));
 800160e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (LL_TIM_GetPrescaler(TIMx) >= pHandle->HALLMaxRatio)
 8001610:	f8b4 20b4 	ldrh.w	r2, [r4, #180]	@ 0xb4
 8001614:	429a      	cmp	r2, r3
 8001616:	d812      	bhi.n	800163e <HALL_CalcAvrgMecSpeedUnit+0x3e>
        pHandle->_Super.hElSpeedDpp = 0;
 8001618:	2300      	movs	r3, #0
 800161a:	81e3      	strh	r3, [r4, #14]
              pHandle->CompSpeed = 0;
 800161c:	2300      	movs	r3, #0
        *hMecSpeedUnit = 0;
 800161e:	802b      	strh	r3, [r5, #0]
      bReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, hMecSpeedUnit);
 8001620:	4629      	mov	r1, r5
 8001622:	4620      	mov	r0, r4
 8001624:	f009 f9c8 	bl	800a9b8 <SPD_IsMecSpeedReliable>
    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8001628:	f9b5 3000 	ldrsh.w	r3, [r5]
 800162c:	81a3      	strh	r3, [r4, #12]
}
 800162e:	bd38      	pop	{r3, r4, r5, pc}
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8001630:	78e3      	ldrb	r3, [r4, #3]
 8001632:	7023      	strb	r3, [r4, #0]
      *hMecSpeedUnit = 0;
 8001634:	4603      	mov	r3, r0
      pHandle->_Super.hElSpeedDpp = 0;
 8001636:	81e0      	strh	r0, [r4, #14]
      *hMecSpeedUnit = 0;
 8001638:	8008      	strh	r0, [r1, #0]
    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 800163a:	81a3      	strh	r3, [r4, #12]
}
 800163c:	bd38      	pop	{r3, r4, r5, pc}
        pHandle->_Super.hElSpeedDpp =  pHandle->AvrElSpeedDpp;
 800163e:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	@ 0xa8
 8001642:	81e2      	strh	r2, [r4, #14]
        if (0 ==  pHandle->AvrElSpeedDpp)
 8001644:	2a00      	cmp	r2, #0
 8001646:	d0e9      	beq.n	800161c <HALL_CalcAvrgMecSpeedUnit+0x1c>
          if (pHandle->AvrElSpeedDpp != HALL_MAX_PSEUDO_SPEED)
 8001648:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800164c:	429a      	cmp	r2, r3
 800164e:	d01f      	beq.n	8001690 <HALL_CalcAvrgMecSpeedUnit+0x90>
            if (true == pHandle->HallMtpa)
 8001650:	f894 30cb 	ldrb.w	r3, [r4, #203]	@ 0xcb
 8001654:	b9d3      	cbnz	r3, 800168c <HALL_CalcAvrgMecSpeedUnit+0x8c>
              pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 8001656:	88a3      	ldrh	r3, [r4, #4]
 8001658:	f8b4 10ae 	ldrh.w	r1, [r4, #174]	@ 0xae
 800165c:	1ac9      	subs	r1, r1, r3
 800165e:	b209      	sxth	r1, r1
              pHandle->CompSpeed = (int16_t)((int32_t)(pHandle->DeltaAngle) / (int32_t)(pHandle->PWMNbrPSamplingFreq));
 8001660:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	@ 0xc8
              pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 8001664:	f8a4 10ac 	strh.w	r1, [r4, #172]	@ 0xac
              pHandle->CompSpeed = (int16_t)((int32_t)(pHandle->DeltaAngle) / (int32_t)(pHandle->PWMNbrPSamplingFreq));
 8001668:	fb91 f1f3 	sdiv	r1, r1, r3
            *hMecSpeedUnit = (int16_t)((pHandle->AvrElSpeedDpp * (int32_t)pHandle->_Super.hMeasurementFrequency
 800166c:	8b63      	ldrh	r3, [r4, #26]
 800166e:	f8a4 10b2 	strh.w	r1, [r4, #178]	@ 0xb2
 8001672:	fb02 f303 	mul.w	r3, r2, r3
                        / ((int32_t)(pHandle->_Super.DPPConvFactor) * (int32_t)(pHandle->_Super.bElToMecRatio)) );
 8001676:	69e1      	ldr	r1, [r4, #28]
 8001678:	7862      	ldrb	r2, [r4, #1]
                        * (int32_t)SPEED_UNIT )
 800167a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800167e:	005b      	lsls	r3, r3, #1
                        / ((int32_t)(pHandle->_Super.DPPConvFactor) * (int32_t)(pHandle->_Super.bElToMecRatio)) );
 8001680:	fb01 f202 	mul.w	r2, r1, r2
 8001684:	fb93 f3f2 	sdiv	r3, r3, r2
            *hMecSpeedUnit = (int16_t)((pHandle->AvrElSpeedDpp * (int32_t)pHandle->_Super.hMeasurementFrequency
 8001688:	b21b      	sxth	r3, r3
 800168a:	e7c8      	b.n	800161e <HALL_CalcAvrgMecSpeedUnit+0x1e>
              pHandle->CompSpeed = 0;
 800168c:	2100      	movs	r1, #0
 800168e:	e7ed      	b.n	800166c <HALL_CalcAvrgMecSpeedUnit+0x6c>
            *hMecSpeedUnit = (int16_t)pHandle->SatSpeed;
 8001690:	f9b4 30b6 	ldrsh.w	r3, [r4, #182]	@ 0xb6
 8001694:	e7c3      	b.n	800161e <HALL_CalcAvrgMecSpeedUnit+0x1e>
 8001696:	bf00      	nop

08001698 <HALL_TIMx_CC_IRQHandler>:
  if (pHandle->SensorIsReliable)
 8001698:	f890 304c 	ldrb.w	r3, [r0, #76]	@ 0x4c
 800169c:	2b00      	cmp	r3, #0
 800169e:	d04f      	beq.n	8001740 <HALL_TIMx_CC_IRQHandler+0xa8>
{
 80016a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (DEGREES_120 == pHandle->SensorPlacement)
 80016a4:	f890 8020 	ldrb.w	r8, [r0, #32]
  TIM_TypeDef *TIMx = pHandle->TIMx;
 80016a8:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
    bPrevHallState = pHandle->HallState;
 80016aa:	f890 20aa 	ldrb.w	r2, [r0, #170]	@ 0xaa
    PrevDirection = pHandle->Direction;
 80016ae:	f990 c0a6 	ldrsb.w	ip, [r0, #166]	@ 0xa6
                                      | (LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) << 1U)
 80016b2:	f8d0 e038 	ldr.w	lr, [r0, #56]	@ 0x38
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 80016b6:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80016b8:	e9d0 470f 	ldrd	r4, r7, [r0, #60]	@ 0x3c
                                      | LL_GPIO_IsInputPinSet(pHandle->H1Port, pHandle->H1Pin));
 80016bc:	e9d0 650c 	ldrd	r6, r5, [r0, #48]	@ 0x30
    if (DEGREES_120 == pHandle->SensorPlacement)
 80016c0:	f1b8 0f00 	cmp.w	r8, #0
 80016c4:	d026      	beq.n	8001714 <HALL_TIMx_CC_IRQHandler+0x7c>
 80016c6:	f8de e010 	ldr.w	lr, [lr, #16]
 80016ca:	693f      	ldr	r7, [r7, #16]
 80016cc:	43bb      	bics	r3, r7
 80016ce:	6933      	ldr	r3, [r6, #16]
 80016d0:	bf0c      	ite	eq
 80016d2:	2601      	moveq	r6, #1
 80016d4:	2600      	movne	r6, #0
 80016d6:	ea35 0303 	bics.w	r3, r5, r3
 80016da:	bf0c      	ite	eq
 80016dc:	2301      	moveq	r3, #1
 80016de:	2300      	movne	r3, #0
 80016e0:	ea34 0e0e 	bics.w	lr, r4, lr
 80016e4:	bf0c      	ite	eq
 80016e6:	f04f 0e01 	moveq.w	lr, #1
 80016ea:	f04f 0e00 	movne.w	lr, #0
      pHandle->HallState  = (uint8_t)(((LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) ^ 1U) << 2U)
 80016ee:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80016f2:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
 80016f6:	f08e 0e04 	eor.w	lr, lr, #4
 80016fa:	ea43 030e 	orr.w	r3, r3, lr
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 80016fe:	f880 30aa 	strb.w	r3, [r0, #170]	@ 0xaa
    switch (pHandle->HallState)
 8001702:	3b01      	subs	r3, #1
 8001704:	2b05      	cmp	r3, #5
 8001706:	f200 815d 	bhi.w	80019c4 <HALL_TIMx_CC_IRQHandler+0x32c>
 800170a:	e8df f003 	tbb	[pc, r3]
 800170e:	556e      	.short	0x556e
 8001710:	1b2b3a46 	.word	0x1b2b3a46
 8001714:	693f      	ldr	r7, [r7, #16]
 8001716:	43bb      	bics	r3, r7
 8001718:	f8de 3010 	ldr.w	r3, [lr, #16]
 800171c:	6936      	ldr	r6, [r6, #16]
 800171e:	bf0c      	ite	eq
 8001720:	2701      	moveq	r7, #1
 8001722:	2700      	movne	r7, #0
 8001724:	ea34 0303 	bics.w	r3, r4, r3
 8001728:	bf0c      	ite	eq
 800172a:	2301      	moveq	r3, #1
 800172c:	2300      	movne	r3, #0
                                      | (LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) << 1U)
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	ea35 0606 	bics.w	r6, r5, r6
 8001734:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 8001738:	bf08      	it	eq
 800173a:	f043 0301 	orreq.w	r3, r3, #1
 800173e:	e7de      	b.n	80016fe <HALL_TIMx_CC_IRQHandler+0x66>
}
 8001740:	2000      	movs	r0, #0
 8001742:	4770      	bx	lr
        if (STATE_2 == bPrevHallState)
 8001744:	2a02      	cmp	r2, #2
 8001746:	f000 808f 	beq.w	8001868 <HALL_TIMx_CC_IRQHandler+0x1d0>
        else if (STATE_4 == bPrevHallState)
 800174a:	2a04      	cmp	r2, #4
 800174c:	d152      	bne.n	80017f4 <HALL_TIMx_CC_IRQHandler+0x15c>
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_60_PHASE_SHIFT);
 800174e:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8001750:	f5a3 532a 	sub.w	r3, r3, #10880	@ 0x2a80
          pHandle->Direction = NEGATIVE;
 8001754:	22ff      	movs	r2, #255	@ 0xff
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_60_PHASE_SHIFT);
 8001756:	3b2a      	subs	r3, #42	@ 0x2a
          pHandle->Direction = NEGATIVE;
 8001758:	f880 20a6 	strb.w	r2, [r0, #166]	@ 0xa6
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_60_PHASE_SHIFT);
 800175c:	b21b      	sxth	r3, r3
 800175e:	f04f 32ff 	mov.w	r2, #4294967295
 8001762:	e037      	b.n	80017d4 <HALL_TIMx_CC_IRQHandler+0x13c>
        if (STATE_4 == bPrevHallState)
 8001764:	2a04      	cmp	r2, #4
 8001766:	d079      	beq.n	800185c <HALL_TIMx_CC_IRQHandler+0x1c4>
        else if (STATE_1 == bPrevHallState)
 8001768:	2a01      	cmp	r2, #1
 800176a:	d143      	bne.n	80017f4 <HALL_TIMx_CC_IRQHandler+0x15c>
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_60_PHASE_SHIFT);
 800176c:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 800176e:	f503 532a 	add.w	r3, r3, #10880	@ 0x2a80
          pHandle->Direction = NEGATIVE;
 8001772:	22ff      	movs	r2, #255	@ 0xff
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_60_PHASE_SHIFT);
 8001774:	332a      	adds	r3, #42	@ 0x2a
          pHandle->Direction = NEGATIVE;
 8001776:	f880 20a6 	strb.w	r2, [r0, #166]	@ 0xa6
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_60_PHASE_SHIFT);
 800177a:	b21b      	sxth	r3, r3
 800177c:	f04f 32ff 	mov.w	r2, #4294967295
 8001780:	e028      	b.n	80017d4 <HALL_TIMx_CC_IRQHandler+0x13c>
        if (STATE_6 == bPrevHallState)
 8001782:	2a06      	cmp	r2, #6
 8001784:	d061      	beq.n	800184a <HALL_TIMx_CC_IRQHandler+0x1b2>
        else if (STATE_5 == bPrevHallState)
 8001786:	2a05      	cmp	r2, #5
 8001788:	d134      	bne.n	80017f4 <HALL_TIMx_CC_IRQHandler+0x15c>
          pHandle->Direction = NEGATIVE;
 800178a:	22ff      	movs	r2, #255	@ 0xff
 800178c:	f880 20a6 	strb.w	r2, [r0, #166]	@ 0xa6
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift);
 8001790:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 8001794:	f04f 32ff 	mov.w	r2, #4294967295
 8001798:	e01c      	b.n	80017d4 <HALL_TIMx_CC_IRQHandler+0x13c>
        if (STATE_1 == bPrevHallState)
 800179a:	2a01      	cmp	r2, #1
 800179c:	d04d      	beq.n	800183a <HALL_TIMx_CC_IRQHandler+0x1a2>
        else if (STATE_2 == bPrevHallState)
 800179e:	2a02      	cmp	r2, #2
 80017a0:	d128      	bne.n	80017f4 <HALL_TIMx_CC_IRQHandler+0x15c>
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT + S16_60_PHASE_SHIFT);
 80017a2:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 80017a4:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
          pHandle->Direction = NEGATIVE;
 80017a8:	22ff      	movs	r2, #255	@ 0xff
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT + S16_60_PHASE_SHIFT);
 80017aa:	337f      	adds	r3, #127	@ 0x7f
          pHandle->Direction = NEGATIVE;
 80017ac:	f880 20a6 	strb.w	r2, [r0, #166]	@ 0xa6
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT + S16_60_PHASE_SHIFT);
 80017b0:	b21b      	sxth	r3, r3
 80017b2:	f04f 32ff 	mov.w	r2, #4294967295
 80017b6:	e00d      	b.n	80017d4 <HALL_TIMx_CC_IRQHandler+0x13c>
        if (STATE_3 == bPrevHallState)
 80017b8:	2a03      	cmp	r2, #3
 80017ba:	d035      	beq.n	8001828 <HALL_TIMx_CC_IRQHandler+0x190>
        else if (STATE_6 == bPrevHallState)
 80017bc:	2a06      	cmp	r2, #6
 80017be:	d119      	bne.n	80017f4 <HALL_TIMx_CC_IRQHandler+0x15c>
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_120_PHASE_SHIFT);
 80017c0:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 80017c2:	f5a3 43aa 	sub.w	r3, r3, #21760	@ 0x5500
          pHandle->Direction = NEGATIVE;
 80017c6:	22ff      	movs	r2, #255	@ 0xff
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_120_PHASE_SHIFT);
 80017c8:	3b55      	subs	r3, #85	@ 0x55
          pHandle->Direction = NEGATIVE;
 80017ca:	f880 20a6 	strb.w	r2, [r0, #166]	@ 0xa6
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_120_PHASE_SHIFT);
 80017ce:	b21b      	sxth	r3, r3
 80017d0:	f04f 32ff 	mov.w	r2, #4294967295
    if (pHandle->Direction != PrevDirection)
 80017d4:	4594      	cmp	ip, r2
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT + S16_60_PHASE_SHIFT);
 80017d6:	f8a0 30ae 	strh.w	r3, [r0, #174]	@ 0xae
    if (pHandle->Direction != PrevDirection)
 80017da:	d004      	beq.n	80017e6 <HALL_TIMx_CC_IRQHandler+0x14e>
      pHandle->BufferFilled = 0U ;
 80017dc:	2400      	movs	r4, #0
 80017de:	f880 4050 	strb.w	r4, [r0, #80]	@ 0x50
      pHandle->SpeedFIFOIdx = 0U;
 80017e2:	f880 409c 	strb.w	r4, [r0, #156]	@ 0x9c
 80017e6:	4694      	mov	ip, r2
 80017e8:	e006      	b.n	80017f8 <HALL_TIMx_CC_IRQHandler+0x160>
        if (STATE_5 == bPrevHallState)
 80017ea:	2a05      	cmp	r2, #5
 80017ec:	d045      	beq.n	800187a <HALL_TIMx_CC_IRQHandler+0x1e2>
        else if (STATE_3 == bPrevHallState)
 80017ee:	2a03      	cmp	r2, #3
 80017f0:	f000 80dd 	beq.w	80019ae <HALL_TIMx_CC_IRQHandler+0x316>
      pHandle->_Super.hElAngle = pHandle->MeasuredElAngle;
 80017f4:	f9b0 30ae 	ldrsh.w	r3, [r0, #174]	@ 0xae
    if (true == pHandle->HallMtpa)
 80017f8:	f890 20cb 	ldrb.w	r2, [r0, #203]	@ 0xcb
 80017fc:	2a00      	cmp	r2, #0
 80017fe:	f040 80a1 	bne.w	8001944 <HALL_TIMx_CC_IRQHandler+0x2ac>
    pHandle->IncrementElAngle = pHandle->_Super.hElAngle - pHandle->MeasuredElAngle;
 8001802:	8882      	ldrh	r2, [r0, #4]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	b21b      	sxth	r3, r3
    if (0U == pHandle->FirstCapt)
 8001808:	f890 204f 	ldrb.w	r2, [r0, #79]	@ 0x4f
    pHandle->IncrementElAngle = pHandle->_Super.hElAngle - pHandle->MeasuredElAngle;
 800180c:	f8a0 30b0 	strh.w	r3, [r0, #176]	@ 0xb0
    if (0U == pHandle->FirstCapt)
 8001810:	2a00      	cmp	r2, #0
 8001812:	d13b      	bne.n	800188c <HALL_TIMx_CC_IRQHandler+0x1f4>
      pHandle->FirstCapt++;
 8001814:	f890 304f 	ldrb.w	r3, [r0, #79]	@ 0x4f
 8001818:	3301      	adds	r3, #1
 800181a:	b2db      	uxtb	r3, r3
 800181c:	f880 304f 	strb.w	r3, [r0, #79]	@ 0x4f
  return (uint32_t)(READ_REG(TIMx->CCR1));
 8001820:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
}
 8001822:	2000      	movs	r0, #0
 8001824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT + S16_60_PHASE_SHIFT);
 8001828:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 800182a:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
          pHandle->Direction = POSITIVE;
 800182e:	2201      	movs	r2, #1
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT + S16_60_PHASE_SHIFT);
 8001830:	337f      	adds	r3, #127	@ 0x7f
          pHandle->Direction = POSITIVE;
 8001832:	f880 20a6 	strb.w	r2, [r0, #166]	@ 0xa6
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT + S16_60_PHASE_SHIFT);
 8001836:	b21b      	sxth	r3, r3
 8001838:	e7cc      	b.n	80017d4 <HALL_TIMx_CC_IRQHandler+0x13c>
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT);
 800183a:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
          pHandle->Direction = POSITIVE;
 800183c:	f880 20a6 	strb.w	r2, [r0, #166]	@ 0xa6
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT);
 8001840:	f503 43aa 	add.w	r3, r3, #21760	@ 0x5500
 8001844:	3355      	adds	r3, #85	@ 0x55
 8001846:	b21b      	sxth	r3, r3
 8001848:	e7c4      	b.n	80017d4 <HALL_TIMx_CC_IRQHandler+0x13c>
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_60_PHASE_SHIFT);
 800184a:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 800184c:	f5a3 532a 	sub.w	r3, r3, #10880	@ 0x2a80
          pHandle->Direction = POSITIVE;
 8001850:	2201      	movs	r2, #1
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_60_PHASE_SHIFT);
 8001852:	3b2a      	subs	r3, #42	@ 0x2a
          pHandle->Direction = POSITIVE;
 8001854:	f880 20a6 	strb.w	r2, [r0, #166]	@ 0xa6
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_60_PHASE_SHIFT);
 8001858:	b21b      	sxth	r3, r3
 800185a:	e7bb      	b.n	80017d4 <HALL_TIMx_CC_IRQHandler+0x13c>
          pHandle->Direction = POSITIVE;
 800185c:	2201      	movs	r2, #1
          pHandle->MeasuredElAngle = pHandle->PhaseShift;
 800185e:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
          pHandle->Direction = POSITIVE;
 8001862:	f880 20a6 	strb.w	r2, [r0, #166]	@ 0xa6
          pHandle->MeasuredElAngle = pHandle->PhaseShift;
 8001866:	e7b5      	b.n	80017d4 <HALL_TIMx_CC_IRQHandler+0x13c>
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_120_PHASE_SHIFT);
 8001868:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 800186a:	f5a3 43aa 	sub.w	r3, r3, #21760	@ 0x5500
          pHandle->Direction = POSITIVE;
 800186e:	2201      	movs	r2, #1
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_120_PHASE_SHIFT);
 8001870:	3b55      	subs	r3, #85	@ 0x55
          pHandle->Direction = POSITIVE;
 8001872:	f880 20a6 	strb.w	r2, [r0, #166]	@ 0xa6
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_120_PHASE_SHIFT);
 8001876:	b21b      	sxth	r3, r3
 8001878:	e7ac      	b.n	80017d4 <HALL_TIMx_CC_IRQHandler+0x13c>
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 800187a:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 800187c:	f503 532a 	add.w	r3, r3, #10880	@ 0x2a80
          pHandle->Direction = POSITIVE;
 8001880:	2201      	movs	r2, #1
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 8001882:	332a      	adds	r3, #42	@ 0x2a
          pHandle->Direction = POSITIVE;
 8001884:	f880 20a6 	strb.w	r2, [r0, #166]	@ 0xa6
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 8001888:	b21b      	sxth	r3, r3
 800188a:	e7a3      	b.n	80017d4 <HALL_TIMx_CC_IRQHandler+0x13c>
      if (pHandle->BufferFilled < pHandle->SpeedBufferSize)
 800188c:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 8001890:	f890 e026 	ldrb.w	lr, [r0, #38]	@ 0x26
 8001894:	4573      	cmp	r3, lr
 8001896:	d205      	bcs.n	80018a4 <HALL_TIMx_CC_IRQHandler+0x20c>
        pHandle->BufferFilled++;
 8001898:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 800189c:	3301      	adds	r3, #1
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
 80018a4:	6b4d      	ldr	r5, [r1, #52]	@ 0x34
  return (uint32_t)(READ_REG(TIMx->PSC));
 80018a6:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
      wCaptBuf += ((uint32_t)pHandle->OVFCounter) * 0x10000UL;
 80018a8:	f890 3051 	ldrb.w	r3, [r0, #81]	@ 0x51
      if (pHandle->OVFCounter != 0U)
 80018ac:	f890 4051 	ldrb.w	r4, [r0, #81]	@ 0x51
      wCaptBuf += ((uint32_t)pHandle->OVFCounter) * 0x10000UL;
 80018b0:	041b      	lsls	r3, r3, #16
      hPrscBuf = (uint16_t)LL_TIM_GetPrescaler(TIMx);
 80018b2:	b292      	uxth	r2, r2
      wCaptBuf += ((uint32_t)pHandle->OVFCounter) * 0x10000UL;
 80018b4:	fa13 f385 	uxtah	r3, r3, r5
      if (pHandle->OVFCounter != 0U)
 80018b8:	f004 06ff 	and.w	r6, r4, #255	@ 0xff
 80018bc:	2c00      	cmp	r4, #0
 80018be:	d044      	beq.n	800194a <HALL_TIMx_CC_IRQHandler+0x2b2>
        hAux = hPrscBuf + 1U;
 80018c0:	3201      	adds	r2, #1
        wCaptBuf *= hAux;
 80018c2:	b292      	uxth	r2, r2
 80018c4:	fb02 f303 	mul.w	r3, r2, r3
        if (pHandle->RatioInc)
 80018c8:	f890 204e 	ldrb.w	r2, [r0, #78]	@ 0x4e
 80018cc:	2a00      	cmp	r2, #0
 80018ce:	d046      	beq.n	800195e <HALL_TIMx_CC_IRQHandler+0x2c6>
          pHandle->RatioInc = false;  /* Previous capture caused overflow */
 80018d0:	2200      	movs	r2, #0
 80018d2:	f880 204e 	strb.w	r2, [r0, #78]	@ 0x4e
      if (wCaptBuf < pHandle->MinPeriod)
 80018d6:	f8d0 20c0 	ldr.w	r2, [r0, #192]	@ 0xc0
 80018da:	429a      	cmp	r2, r3
 80018dc:	d82c      	bhi.n	8001938 <HALL_TIMx_CC_IRQHandler+0x2a0>
        pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 80018de:	f890 209c 	ldrb.w	r2, [r0, #156]	@ 0x9c
        if (wCaptBuf >= pHandle->MaxPeriod)
 80018e2:	f8d0 40bc 	ldr.w	r4, [r0, #188]	@ 0xbc
        pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 80018e6:	f8d0 10a0 	ldr.w	r1, [r0, #160]	@ 0xa0
 80018ea:	eb00 0682 	add.w	r6, r0, r2, lsl #2
        if (wCaptBuf >= pHandle->MaxPeriod)
 80018ee:	429c      	cmp	r4, r3
        pHandle->SpeedFIFOIdx++;
 80018f0:	f102 0201 	add.w	r2, r2, #1
        pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 80018f4:	6d75      	ldr	r5, [r6, #84]	@ 0x54
          pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] = (int32_t)pHandle->MaxPeriod * pHandle->Direction;
 80018f6:	bf94      	ite	ls
 80018f8:	fb0c f404 	mulls.w	r4, ip, r4
          pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] *= pHandle->Direction;
 80018fc:	fb0c f403 	mulhi.w	r4, ip, r3
        pHandle->SpeedFIFOIdx++;
 8001900:	b2d2      	uxtb	r2, r2
 8001902:	6574      	str	r4, [r6, #84]	@ 0x54
          pHandle->SpeedFIFOIdx = 0U;
 8001904:	4596      	cmp	lr, r2
 8001906:	bf08      	it	eq
 8001908:	2200      	moveq	r2, #0
        pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 800190a:	1b49      	subs	r1, r1, r5
          pHandle->ElPeriodSum += pHandle->SensorPeriod[pHandle->SpeedFIFOIdx];
 800190c:	f880 209c 	strb.w	r2, [r0, #156]	@ 0x9c
        if (pHandle->SensorIsReliable)
 8001910:	f890 204c 	ldrb.w	r2, [r0, #76]	@ 0x4c
          pHandle->ElPeriodSum += pHandle->SensorPeriod[pHandle->SpeedFIFOIdx];
 8001914:	4421      	add	r1, r4
 8001916:	f8c0 10a0 	str.w	r1, [r0, #160]	@ 0xa0
        if (pHandle->SensorIsReliable)
 800191a:	b362      	cbz	r2, 8001976 <HALL_TIMx_CC_IRQHandler+0x2de>
          if ((pHandle->BufferFilled < pHandle->SpeedBufferSize) && (wCaptBuf != 0U))
 800191c:	f890 4050 	ldrb.w	r4, [r0, #80]	@ 0x50
            uint32_t tempReg = (pHandle->PseudoFreqConv / wCaptBuf) * (uint32_t)pHandle->Direction;
 8001920:	f8d0 20b8 	ldr.w	r2, [r0, #184]	@ 0xb8
          if ((pHandle->BufferFilled < pHandle->SpeedBufferSize) && (wCaptBuf != 0U))
 8001924:	45a6      	cmp	lr, r4
 8001926:	d93b      	bls.n	80019a0 <HALL_TIMx_CC_IRQHandler+0x308>
 8001928:	2b00      	cmp	r3, #0
 800192a:	d039      	beq.n	80019a0 <HALL_TIMx_CC_IRQHandler+0x308>
            uint32_t tempReg = (pHandle->PseudoFreqConv / wCaptBuf) * (uint32_t)pHandle->Direction;
 800192c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001930:	fb0c f303 	mul.w	r3, ip, r3
            pHandle->AvrElSpeedDpp = (int16_t)tempReg;
 8001934:	f8a0 30a8 	strh.w	r3, [r0, #168]	@ 0xa8
      pHandle->OVFCounter = 0U;
 8001938:	2300      	movs	r3, #0
 800193a:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
}
 800193e:	2000      	movs	r0, #0
 8001940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pHandle->_Super.hElAngle = pHandle->MeasuredElAngle;
 8001944:	8083      	strh	r3, [r0, #4]
 8001946:	2300      	movs	r3, #0
 8001948:	e75e      	b.n	8001808 <HALL_TIMx_CC_IRQHandler+0x170>
        if (pHandle->RatioDec) /* and don't decrease it again */
 800194a:	f890 404d 	ldrb.w	r4, [r0, #77]	@ 0x4d
 800194e:	b1ac      	cbz	r4, 800197c <HALL_TIMx_CC_IRQHandler+0x2e4>
          hAux = hPrscBuf + 2U;
 8001950:	3202      	adds	r2, #2
          wCaptBuf *= hAux;
 8001952:	b292      	uxth	r2, r2
          pHandle->RatioDec = false;
 8001954:	f880 604d 	strb.w	r6, [r0, #77]	@ 0x4d
          wCaptBuf *= hAux;
 8001958:	fb02 f303 	mul.w	r3, r2, r3
          pHandle->RatioDec = false;
 800195c:	e7bb      	b.n	80018d6 <HALL_TIMx_CC_IRQHandler+0x23e>
 800195e:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
          if (LL_TIM_GetPrescaler(TIMx) < pHandle->HALLMaxRatio) /* Avoid OVF w/ very low freq */
 8001960:	f8b0 40b4 	ldrh.w	r4, [r0, #180]	@ 0xb4
 8001964:	4294      	cmp	r4, r2
 8001966:	d9b6      	bls.n	80018d6 <HALL_TIMx_CC_IRQHandler+0x23e>
 8001968:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
            LL_TIM_SetPrescaler(TIMx, LL_TIM_GetPrescaler(TIMx) + 1U); /* To avoid OVF during speed decrease */
 800196a:	3201      	adds	r2, #1
  WRITE_REG(TIMx->PSC, Prescaler);
 800196c:	628a      	str	r2, [r1, #40]	@ 0x28
            pHandle->RatioInc = true;   /* new prsc value updated at next capture only */
 800196e:	2201      	movs	r2, #1
 8001970:	f880 204e 	strb.w	r2, [r0, #78]	@ 0x4e
 8001974:	e7af      	b.n	80018d6 <HALL_TIMx_CC_IRQHandler+0x23e>
          pHandle->AvrElSpeedDpp = 0;
 8001976:	f8a0 20a8 	strh.w	r2, [r0, #168]	@ 0xa8
 800197a:	e7dd      	b.n	8001938 <HALL_TIMx_CC_IRQHandler+0x2a0>
          uint16_t hAux = hPrscBuf + 1U;
 800197c:	3201      	adds	r2, #1
          if (hHighSpeedCapture < LOW_RES_THRESHOLD) /* If capture range correct */
 800197e:	b2ad      	uxth	r5, r5
          wCaptBuf *= hAux;
 8001980:	b292      	uxth	r2, r2
          if (hHighSpeedCapture < LOW_RES_THRESHOLD) /* If capture range correct */
 8001982:	f5b5 4faa 	cmp.w	r5, #21760	@ 0x5500
          wCaptBuf *= hAux;
 8001986:	fb02 f303 	mul.w	r3, r2, r3
          if (hHighSpeedCapture < LOW_RES_THRESHOLD) /* If capture range correct */
 800198a:	d2a4      	bcs.n	80018d6 <HALL_TIMx_CC_IRQHandler+0x23e>
  return (uint32_t)(READ_REG(TIMx->PSC));
 800198c:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
            if (LL_TIM_GetPrescaler(TIMx) > 0U) /* or prescaler cannot be further reduced */
 800198e:	2a00      	cmp	r2, #0
 8001990:	d0a1      	beq.n	80018d6 <HALL_TIMx_CC_IRQHandler+0x23e>
 8001992:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
              LL_TIM_SetPrescaler(TIMx, LL_TIM_GetPrescaler(TIMx) - 1U); /* Increase accuracy by decreasing prsc */
 8001994:	3a01      	subs	r2, #1
  WRITE_REG(TIMx->PSC, Prescaler);
 8001996:	628a      	str	r2, [r1, #40]	@ 0x28
              pHandle->RatioDec = true;
 8001998:	2201      	movs	r2, #1
 800199a:	f880 204d 	strb.w	r2, [r0, #77]	@ 0x4d
 800199e:	e79a      	b.n	80018d6 <HALL_TIMx_CC_IRQHandler+0x23e>
                                               (pHandle->ElPeriodSum / (int32_t)pHandle->SpeedBufferSize)); /* Average value */
 80019a0:	fb91 f1fe 	sdiv	r1, r1, lr
            pHandle->AvrElSpeedDpp = (int16_t)((int32_t)pHandle->PseudoFreqConv /
 80019a4:	fb92 f2f1 	sdiv	r2, r2, r1
 80019a8:	f8a0 20a8 	strh.w	r2, [r0, #168]	@ 0xa8
 80019ac:	e7c4      	b.n	8001938 <HALL_TIMx_CC_IRQHandler+0x2a0>
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT);
 80019ae:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 80019b0:	f503 43aa 	add.w	r3, r3, #21760	@ 0x5500
          pHandle->Direction = NEGATIVE;
 80019b4:	22ff      	movs	r2, #255	@ 0xff
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT);
 80019b6:	3355      	adds	r3, #85	@ 0x55
          pHandle->Direction = NEGATIVE;
 80019b8:	f880 20a6 	strb.w	r2, [r0, #166]	@ 0xa6
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT);
 80019bc:	b21b      	sxth	r3, r3
 80019be:	f04f 32ff 	mov.w	r2, #4294967295
 80019c2:	e707      	b.n	80017d4 <HALL_TIMx_CC_IRQHandler+0x13c>
        pHandle->SensorIsReliable = false;
 80019c4:	2300      	movs	r3, #0
 80019c6:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
        break;
 80019ca:	e713      	b.n	80017f4 <HALL_TIMx_CC_IRQHandler+0x15c>

080019cc <HALL_TIMx_UP_IRQHandler>:
  if (pHandle->SensorIsReliable)
 80019cc:	f890 304c 	ldrb.w	r3, [r0, #76]	@ 0x4c
  TIM_TypeDef *TIMx = pHandle->TIMx;
 80019d0:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
  if (pHandle->SensorIsReliable)
 80019d2:	b1db      	cbz	r3, 8001a0c <HALL_TIMx_UP_IRQHandler+0x40>
{
 80019d4:	b4f0      	push	{r4, r5, r6, r7}
    pHandle->OVFCounter++;
 80019d6:	f890 2051 	ldrb.w	r2, [r0, #81]	@ 0x51
    hMaxTimerOverflow = (uint16_t)(((uint32_t)pHandle->HallTimeout * pHandle->OvfFreq)
 80019da:	f8b0 30c4 	ldrh.w	r3, [r0, #196]	@ 0xc4
    pHandle->OVFCounter++;
 80019de:	3201      	adds	r2, #1
 80019e0:	b2d2      	uxtb	r2, r2
 80019e2:	f880 2051 	strb.w	r2, [r0, #81]	@ 0x51
    hMaxTimerOverflow = (uint16_t)(((uint32_t)pHandle->HallTimeout * pHandle->OvfFreq)
 80019e6:	f8b0 20c6 	ldrh.w	r2, [r0, #198]	@ 0xc6
  return (uint32_t)(READ_REG(TIMx->PSC));
 80019ea:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
    if (pHandle->OVFCounter >= hMaxTimerOverflow)
 80019ec:	f890 1051 	ldrb.w	r1, [r0, #81]	@ 0x51
    hMaxTimerOverflow = (uint16_t)(((uint32_t)pHandle->HallTimeout * pHandle->OvfFreq)
 80019f0:	fb02 f303 	mul.w	r3, r2, r3
                                 / ((LL_TIM_GetPrescaler(TIMx) + 1U) * 1000U));
 80019f4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80019f8:	fb04 2202 	mla	r2, r4, r2, r2
 80019fc:	fbb3 f3f2 	udiv	r3, r3, r2
    if (pHandle->OVFCounter >= hMaxTimerOverflow)
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	4299      	cmp	r1, r3
 8001a04:	d204      	bcs.n	8001a10 <HALL_TIMx_UP_IRQHandler+0x44>
}
 8001a06:	2000      	movs	r0, #0
 8001a08:	bcf0      	pop	{r4, r5, r6, r7}
 8001a0a:	4770      	bx	lr
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	4770      	bx	lr
    if (DEGREES_120 == pHandle->SensorPlacement)
 8001a10:	f890 7020 	ldrb.w	r7, [r0, #32]
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 8001a14:	6c05      	ldr	r5, [r0, #64]	@ 0x40
      pHandle->_Super.hElSpeedDpp = 0;
 8001a16:	2300      	movs	r3, #0
 8001a18:	81c3      	strh	r3, [r0, #14]
                                      | (LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) << 1U)
 8001a1a:	e9d0 620e 	ldrd	r6, r2, [r0, #56]	@ 0x38
                                      | LL_GPIO_IsInputPinSet(pHandle->H1Port, pHandle->H1Pin));
 8001a1e:	e9d0 410c 	ldrd	r4, r1, [r0, #48]	@ 0x30
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 8001a22:	6c43      	ldr	r3, [r0, #68]	@ 0x44
    if (DEGREES_120 == pHandle->SensorPlacement)
 8001a24:	b9ef      	cbnz	r7, 8001a62 <HALL_TIMx_UP_IRQHandler+0x96>
 8001a26:	692d      	ldr	r5, [r5, #16]
 8001a28:	43ab      	bics	r3, r5
 8001a2a:	6933      	ldr	r3, [r6, #16]
 8001a2c:	6924      	ldr	r4, [r4, #16]
 8001a2e:	bf0c      	ite	eq
 8001a30:	2501      	moveq	r5, #1
 8001a32:	2500      	movne	r5, #0
 8001a34:	ea32 0303 	bics.w	r3, r2, r3
 8001a38:	bf0c      	ite	eq
 8001a3a:	2301      	moveq	r3, #1
 8001a3c:	2300      	movne	r3, #0
                                      | (LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) << 1U)
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
 8001a44:	ea31 0404 	bics.w	r4, r1, r4
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 8001a48:	bf08      	it	eq
 8001a4a:	f043 0301 	orreq.w	r3, r3, #1
    switch (pHandle->HallState)
 8001a4e:	1e5a      	subs	r2, r3, #1
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 8001a50:	f880 30aa 	strb.w	r3, [r0, #170]	@ 0xaa
    switch (pHandle->HallState)
 8001a54:	2a05      	cmp	r2, #5
 8001a56:	d869      	bhi.n	8001b2c <HALL_TIMx_UP_IRQHandler+0x160>
 8001a58:	e8df f002 	tbb	[pc, r2]
 8001a5c:	4c535a61 	.word	0x4c535a61
 8001a60:	1b45      	.short	0x1b45
 8001a62:	6936      	ldr	r6, [r6, #16]
 8001a64:	692d      	ldr	r5, [r5, #16]
 8001a66:	43ab      	bics	r3, r5
 8001a68:	6923      	ldr	r3, [r4, #16]
 8001a6a:	bf0c      	ite	eq
 8001a6c:	2401      	moveq	r4, #1
 8001a6e:	2400      	movne	r4, #0
 8001a70:	ea31 0303 	bics.w	r3, r1, r3
 8001a74:	bf0c      	ite	eq
 8001a76:	2301      	moveq	r3, #1
 8001a78:	2300      	movne	r3, #0
 8001a7a:	ea32 0606 	bics.w	r6, r2, r6
 8001a7e:	bf0c      	ite	eq
 8001a80:	2201      	moveq	r2, #1
 8001a82:	2200      	movne	r2, #0
      pHandle->HallState  = (uint8_t)(((LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) ^ 1U) << 2U)
 8001a84:	0092      	lsls	r2, r2, #2
 8001a86:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
 8001a8a:	f082 0204 	eor.w	r2, r2, #4
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	e7dd      	b.n	8001a4e <HALL_TIMx_UP_IRQHandler+0x82>
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift - S16_60_PHASE_SHIFT - (S16_60_PHASE_SHIFT / 2));
 8001a92:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8001a94:	f5a3 537f 	sub.w	r3, r3, #16320	@ 0x3fc0
 8001a98:	3b3f      	subs	r3, #63	@ 0x3f
 8001a9a:	b21b      	sxth	r3, r3
 8001a9c:	8083      	strh	r3, [r0, #4]
      for (bIndex = 0U; bIndex < pHandle->SpeedBufferSize; bIndex++)
 8001a9e:	f890 4026 	ldrb.w	r4, [r0, #38]	@ 0x26
      uint32_t tempReg = pHandle->MaxPeriod * pHandle->SpeedBufferSize;
 8001aa2:	f8d0 20bc 	ldr.w	r2, [r0, #188]	@ 0xbc
    pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8001aa6:	f8a0 30ae 	strh.w	r3, [r0, #174]	@ 0xae
    pHandle->IncrementElAngle = 0;
 8001aaa:	2100      	movs	r1, #0
      pHandle->OVFCounter = 0U;
 8001aac:	f880 1051 	strb.w	r1, [r0, #81]	@ 0x51
    pHandle->IncrementElAngle = 0;
 8001ab0:	f8c0 10b0 	str.w	r1, [r0, #176]	@ 0xb0
      pHandle->FirstCapt = 0U;
 8001ab4:	f880 104f 	strb.w	r1, [r0, #79]	@ 0x4f
      for (bIndex = 0U; bIndex < pHandle->SpeedBufferSize; bIndex++)
 8001ab8:	b14c      	cbz	r4, 8001ace <HALL_TIMx_UP_IRQHandler+0x102>
 8001aba:	f100 0350 	add.w	r3, r0, #80	@ 0x50
 8001abe:	eb03 0184 	add.w	r1, r3, r4, lsl #2
        pHandle->SensorPeriod[bIndex]  = (int32_t)pHandle->MaxPeriod;
 8001ac2:	f843 2f04 	str.w	r2, [r3, #4]!
      for (bIndex = 0U; bIndex < pHandle->SpeedBufferSize; bIndex++)
 8001ac6:	428b      	cmp	r3, r1
 8001ac8:	d1fb      	bne.n	8001ac2 <HALL_TIMx_UP_IRQHandler+0xf6>
      uint32_t tempReg = pHandle->MaxPeriod * pHandle->SpeedBufferSize;
 8001aca:	fb02 f404 	mul.w	r4, r2, r4
      pHandle->BufferFilled = 0U ;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
      pHandle->SpeedFIFOIdx = 0U;
 8001ad4:	f880 309c 	strb.w	r3, [r0, #156]	@ 0x9c
      pHandle->ElPeriodSum = (int32_t)tempReg;
 8001ad8:	f8c0 40a0 	str.w	r4, [r0, #160]	@ 0xa0
      pHandle->AvrElSpeedDpp = 0;
 8001adc:	f8a0 30a8 	strh.w	r3, [r0, #168]	@ 0xa8
}
 8001ae0:	bcf0      	pop	{r4, r5, r6, r7}
 8001ae2:	2000      	movs	r0, #0
 8001ae4:	4770      	bx	lr
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift + (S16_60_PHASE_SHIFT / 2));
 8001ae6:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8001ae8:	f503 53aa 	add.w	r3, r3, #5440	@ 0x1540
 8001aec:	3315      	adds	r3, #21
 8001aee:	b21b      	sxth	r3, r3
 8001af0:	8083      	strh	r3, [r0, #4]
        break;
 8001af2:	e7d4      	b.n	8001a9e <HALL_TIMx_UP_IRQHandler+0xd2>
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift - (S16_60_PHASE_SHIFT / 2));
 8001af4:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8001af6:	f5a3 53aa 	sub.w	r3, r3, #5440	@ 0x1540
 8001afa:	3b15      	subs	r3, #21
 8001afc:	b21b      	sxth	r3, r3
 8001afe:	8083      	strh	r3, [r0, #4]
        break;
 8001b00:	e7cd      	b.n	8001a9e <HALL_TIMx_UP_IRQHandler+0xd2>
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT + (S16_60_PHASE_SHIFT / 2));
 8001b02:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8001b04:	f503 43d5 	add.w	r3, r3, #27264	@ 0x6a80
 8001b08:	332a      	adds	r3, #42	@ 0x2a
 8001b0a:	b21b      	sxth	r3, r3
 8001b0c:	8083      	strh	r3, [r0, #4]
        break;
 8001b0e:	e7c6      	b.n	8001a9e <HALL_TIMx_UP_IRQHandler+0xd2>
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift - S16_120_PHASE_SHIFT - (S16_60_PHASE_SHIFT / 2));
 8001b10:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8001b12:	f5a3 43d5 	sub.w	r3, r3, #27264	@ 0x6a80
 8001b16:	3b2a      	subs	r3, #42	@ 0x2a
 8001b18:	b21b      	sxth	r3, r3
 8001b1a:	8083      	strh	r3, [r0, #4]
        break;
 8001b1c:	e7bf      	b.n	8001a9e <HALL_TIMx_UP_IRQHandler+0xd2>
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift + S16_60_PHASE_SHIFT + (S16_60_PHASE_SHIFT / 2));
 8001b1e:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8001b20:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 8001b24:	333f      	adds	r3, #63	@ 0x3f
 8001b26:	b21b      	sxth	r3, r3
 8001b28:	8083      	strh	r3, [r0, #4]
        break;
 8001b2a:	e7b8      	b.n	8001a9e <HALL_TIMx_UP_IRQHandler+0xd2>
        pHandle->SensorIsReliable = false;
 8001b2c:	2200      	movs	r2, #0
    pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8001b2e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
        pHandle->SensorIsReliable = false;
 8001b32:	f880 204c 	strb.w	r2, [r0, #76]	@ 0x4c
        break;
 8001b36:	e7b2      	b.n	8001a9e <HALL_TIMx_UP_IRQHandler+0xd2>

08001b38 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 0 */



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
    if (huart->Instance != USART2) return;
 8001b38:	4b30      	ldr	r3, [pc, #192]	@ (8001bfc <HAL_UART_RxCpltCallback+0xc4>)
 8001b3a:	6802      	ldr	r2, [r0, #0]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d000      	beq.n	8001b42 <HAL_UART_RxCpltCallback+0xa>
 8001b40:	4770      	bx	lr
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001b42:	b470      	push	{r4, r5, r6}

    if (!is_calibrated) {
 8001b44:	4d2e      	ldr	r5, [pc, #184]	@ (8001c00 <HAL_UART_RxCpltCallback+0xc8>)
 8001b46:	782b      	ldrb	r3, [r5, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d043      	beq.n	8001bd4 <HAL_UART_RxCpltCallback+0x9c>
    // Post-calibration: process 5-byte messages like "1234;"
    valid = true;
    stringdata = 0;

    // Check if terminator is present
    if (RxData[4] == ';') {
 8001b4c:	492d      	ldr	r1, [pc, #180]	@ (8001c04 <HAL_UART_RxCpltCallback+0xcc>)
    valid = true;
 8001b4e:	4e2e      	ldr	r6, [pc, #184]	@ (8001c08 <HAL_UART_RxCpltCallback+0xd0>)
    stringdata = 0;
 8001b50:	4c2e      	ldr	r4, [pc, #184]	@ (8001c0c <HAL_UART_RxCpltCallback+0xd4>)
    valid = true;
 8001b52:	2301      	movs	r3, #1
 8001b54:	7033      	strb	r3, [r6, #0]
    if (RxData[4] == ';') {
 8001b56:	790b      	ldrb	r3, [r1, #4]
    stringdata = 0;
 8001b58:	2200      	movs	r2, #0
    if (RxData[4] == ';') {
 8001b5a:	2b3b      	cmp	r3, #59	@ 0x3b
    stringdata = 0;
 8001b5c:	8022      	strh	r2, [r4, #0]
    if (RxData[4] == ';') {
 8001b5e:	d008      	beq.n	8001b72 <HAL_UART_RxCpltCallback+0x3a>
        for (int i = 0; i < 4; i++) {
            if (RxData[i] >= '0' && RxData[i] <= '9') {
                stringdata = stringdata * 10 + (RxData[i] - '0');
            } else {
                valid = false;  // Non-digit found
 8001b60:	2300      	movs	r3, #0
 8001b62:	7033      	strb	r3, [r6, #0]
        valid = false;  // Missing `;` is also invalid
    }

    // If the message is invalid, treat it as an error
    if (!valid) {
        is_calibrated = false;
 8001b64:	702b      	strb	r3, [r5, #0]
        HAL_UART_Receive_DMA(&huart2, &singleByte, 1);  // Back to single-byte calibration mode
 8001b66:	492a      	ldr	r1, [pc, #168]	@ (8001c10 <HAL_UART_RxCpltCallback+0xd8>)
 8001b68:	482a      	ldr	r0, [pc, #168]	@ (8001c14 <HAL_UART_RxCpltCallback+0xdc>)
        return;
    }

    // Continue reading next 5-byte message
    HAL_UART_Receive_DMA(&huart2, RxData, 5);
}
 8001b6a:	bc70      	pop	{r4, r5, r6}
        HAL_UART_Receive_DMA(&huart2, &singleByte, 1);  // Back to single-byte calibration mode
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f007 bbff 	b.w	8009370 <HAL_UART_Receive_DMA>
            if (RxData[i] >= '0' && RxData[i] <= '9') {
 8001b72:	780b      	ldrb	r3, [r1, #0]
 8001b74:	3b30      	subs	r3, #48	@ 0x30
 8001b76:	b2d8      	uxtb	r0, r3
 8001b78:	2809      	cmp	r0, #9
 8001b7a:	d83c      	bhi.n	8001bf6 <HAL_UART_RxCpltCallback+0xbe>
 8001b7c:	784a      	ldrb	r2, [r1, #1]
 8001b7e:	3a30      	subs	r2, #48	@ 0x30
 8001b80:	b2d0      	uxtb	r0, r2
 8001b82:	2809      	cmp	r0, #9
                stringdata = stringdata * 10 + (RxData[i] - '0');
 8001b84:	b29b      	uxth	r3, r3
            if (RxData[i] >= '0' && RxData[i] <= '9') {
 8001b86:	d837      	bhi.n	8001bf8 <HAL_UART_RxCpltCallback+0xc0>
                stringdata = stringdata * 10 + (RxData[i] - '0');
 8001b88:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001b8c:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8001b90:	b293      	uxth	r3, r2
            if (RxData[i] >= '0' && RxData[i] <= '9') {
 8001b92:	788a      	ldrb	r2, [r1, #2]
 8001b94:	3a30      	subs	r2, #48	@ 0x30
 8001b96:	b2d0      	uxtb	r0, r2
 8001b98:	2809      	cmp	r0, #9
 8001b9a:	d82d      	bhi.n	8001bf8 <HAL_UART_RxCpltCallback+0xc0>
                stringdata = stringdata * 10 + (RxData[i] - '0');
 8001b9c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001ba0:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8001ba4:	b293      	uxth	r3, r2
            if (RxData[i] >= '0' && RxData[i] <= '9') {
 8001ba6:	78ca      	ldrb	r2, [r1, #3]
 8001ba8:	3a30      	subs	r2, #48	@ 0x30
 8001baa:	b2d0      	uxtb	r0, r2
 8001bac:	2809      	cmp	r0, #9
 8001bae:	d823      	bhi.n	8001bf8 <HAL_UART_RxCpltCallback+0xc0>
                stringdata = stringdata * 10 + (RxData[i] - '0');
 8001bb0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001bb4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8001bb8:	b29b      	uxth	r3, r3
            pot_software = stringdata;
 8001bba:	ee07 3a90 	vmov	s15, r3
 8001bbe:	4d16      	ldr	r5, [pc, #88]	@ (8001c18 <HAL_UART_RxCpltCallback+0xe0>)
 8001bc0:	8023      	strh	r3, [r4, #0]
 8001bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
    HAL_UART_Receive_DMA(&huart2, RxData, 5);
 8001bc6:	4813      	ldr	r0, [pc, #76]	@ (8001c14 <HAL_UART_RxCpltCallback+0xdc>)
            pot_software = stringdata;
 8001bc8:	edc5 7a00 	vstr	s15, [r5]
    HAL_UART_Receive_DMA(&huart2, RxData, 5);
 8001bcc:	2205      	movs	r2, #5
}
 8001bce:	bc70      	pop	{r4, r5, r6}
    HAL_UART_Receive_DMA(&huart2, RxData, 5);
 8001bd0:	f007 bbce 	b.w	8009370 <HAL_UART_Receive_DMA>
        if (singleByte == ';') {
 8001bd4:	490e      	ldr	r1, [pc, #56]	@ (8001c10 <HAL_UART_RxCpltCallback+0xd8>)
 8001bd6:	780b      	ldrb	r3, [r1, #0]
 8001bd8:	2b3b      	cmp	r3, #59	@ 0x3b
 8001bda:	d004      	beq.n	8001be6 <HAL_UART_RxCpltCallback+0xae>
}
 8001bdc:	bc70      	pop	{r4, r5, r6}
            HAL_UART_Receive_DMA(&huart2, &singleByte, 1);
 8001bde:	480d      	ldr	r0, [pc, #52]	@ (8001c14 <HAL_UART_RxCpltCallback+0xdc>)
 8001be0:	2201      	movs	r2, #1
 8001be2:	f007 bbc5 	b.w	8009370 <HAL_UART_Receive_DMA>
            is_calibrated = true;
 8001be6:	2301      	movs	r3, #1
 8001be8:	702b      	strb	r3, [r5, #0]
            HAL_UART_Receive_DMA(&huart2, RxData, 5);  // Start full message reception
 8001bea:	4906      	ldr	r1, [pc, #24]	@ (8001c04 <HAL_UART_RxCpltCallback+0xcc>)
 8001bec:	4809      	ldr	r0, [pc, #36]	@ (8001c14 <HAL_UART_RxCpltCallback+0xdc>)
}
 8001bee:	bc70      	pop	{r4, r5, r6}
            HAL_UART_Receive_DMA(&huart2, RxData, 5);  // Start full message reception
 8001bf0:	2205      	movs	r2, #5
 8001bf2:	f007 bbbd 	b.w	8009370 <HAL_UART_Receive_DMA>
            if (RxData[i] >= '0' && RxData[i] <= '9') {
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	8023      	strh	r3, [r4, #0]
        if (valid) {
 8001bfa:	e7b1      	b.n	8001b60 <HAL_UART_RxCpltCallback+0x28>
 8001bfc:	40004400 	.word	0x40004400
 8001c00:	20000539 	.word	0x20000539
 8001c04:	20000540 	.word	0x20000540
 8001c08:	20000531 	.word	0x20000531
 8001c0c:	2000053c 	.word	0x2000053c
 8001c10:	20000538 	.word	0x20000538
 8001c14:	20000624 	.word	0x20000624
 8001c18:	2000055c 	.word	0x2000055c
 8001c1c:	00000000 	.word	0x00000000

08001c20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c20:	b510      	push	{r4, lr}
 8001c22:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c24:	2238      	movs	r2, #56	@ 0x38
 8001c26:	2100      	movs	r1, #0
 8001c28:	a806      	add	r0, sp, #24
 8001c2a:	f009 fa01 	bl	800b030 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c2e:	2000      	movs	r0, #0
 8001c30:	e9cd 0001 	strd	r0, r0, [sp, #4]
 8001c34:	e9cd 0003 	strd	r0, r0, [sp, #12]
 8001c38:	9005      	str	r0, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001c3a:	f005 fb2b 	bl	8007294 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c3e:	ed9f 7b14 	vldr	d7, [pc, #80]	@ 8001c90 <SystemClock_Config+0x70>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8001c42:	2206      	movs	r2, #6
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c44:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c46:	2403      	movs	r4, #3
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8001c48:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8001c4a:	2155      	movs	r1, #85	@ 0x55
 8001c4c:	2208      	movs	r2, #8
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c4e:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c50:	ed8d 7b06 	vstr	d7, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c54:	e9cd 340d 	strd	r3, r4, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8001c58:	e9cd 1210 	strd	r1, r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001c5c:	e9cd 3312 	strd	r3, r3, [sp, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c60:	f005 fb92 	bl	8007388 <HAL_RCC_OscConfig>
 8001c64:	b108      	cbz	r0, 8001c6a <SystemClock_Config+0x4a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001c66:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c68:	e7fe      	b.n	8001c68 <SystemClock_Config+0x48>
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001c6a:	2104      	movs	r1, #4
 8001c6c:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c6e:	220f      	movs	r2, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001c70:	eb0d 0001 	add.w	r0, sp, r1
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c74:	e9cd 2401 	strd	r2, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c78:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c7c:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001c7e:	f005 fe01 	bl	8007884 <HAL_RCC_ClockConfig>
 8001c82:	b108      	cbz	r0, 8001c88 <SystemClock_Config+0x68>
 8001c84:	b672      	cpsid	i
  while (1)
 8001c86:	e7fe      	b.n	8001c86 <SystemClock_Config+0x66>
  HAL_RCC_EnableCSS();
 8001c88:	f005 ff2a 	bl	8007ae0 <HAL_RCC_EnableCSS>
}
 8001c8c:	b014      	add	sp, #80	@ 0x50
 8001c8e:	bd10      	pop	{r4, pc}
 8001c90:	00000001 	.word	0x00000001
 8001c94:	00010000 	.word	0x00010000

08001c98 <main>:
{
 8001c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9c:	2400      	movs	r4, #0
{
 8001c9e:	b0a7      	sub	sp, #156	@ 0x9c
  HAL_Init();
 8001ca0:	f003 fe80 	bl	80059a4 <HAL_Init>
  SystemClock_Config();
 8001ca4:	f7ff ffbc 	bl	8001c20 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca8:	e9cd 4419 	strd	r4, r4, [sp, #100]	@ 0x64
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cac:	4dae      	ldr	r5, [pc, #696]	@ (8001f68 <main+0x2d0>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cae:	941b      	str	r4, [sp, #108]	@ 0x6c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cb0:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8001cb2:	48ae      	ldr	r0, [pc, #696]	@ (8001f6c <main+0x2d4>)
  hadc1.Instance = ADC1;
 8001cb4:	f8df b2dc 	ldr.w	fp, [pc, #732]	@ 8001f94 <main+0x2fc>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cb8:	f043 0304 	orr.w	r3, r3, #4
 8001cbc:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8001cbe:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8001cc0:	f003 0304 	and.w	r3, r3, #4
 8001cc4:	9305      	str	r3, [sp, #20]
 8001cc6:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cc8:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8001cca:	f043 0320 	orr.w	r3, r3, #32
 8001cce:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8001cd0:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8001cd2:	f003 0320 	and.w	r3, r3, #32
 8001cd6:	9306      	str	r3, [sp, #24]
 8001cd8:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cda:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8001cdc:	f043 0301 	orr.w	r3, r3, #1
 8001ce0:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8001ce2:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	9307      	str	r3, [sp, #28]
 8001cea:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cec:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8001cee:	f043 0302 	orr.w	r3, r3, #2
 8001cf2:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8001cf4:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8001cfc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d00:	9b08      	ldr	r3, [sp, #32]
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8001d02:	9217      	str	r2, [sp, #92]	@ 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d04:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8001d08:	a917      	add	r1, sp, #92	@ 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d0a:	9318      	str	r3, [sp, #96]	@ 0x60
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8001d0c:	f005 f8fe 	bl	8006f0c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d10:	f44f 7300 	mov.w	r3, #512	@ 0x200
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d14:	4895      	ldr	r0, [pc, #596]	@ (8001f6c <main+0x2d4>)
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d16:	9317      	str	r3, [sp, #92]	@ 0x5c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d18:	a917      	add	r1, sp, #92	@ 0x5c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1a:	e9cd 4418 	strd	r4, r4, [sp, #96]	@ 0x60
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d1e:	f005 f8f5 	bl	8006f0c <HAL_GPIO_Init>
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001d22:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8001d24:	f043 0304 	orr.w	r3, r3, #4
 8001d28:	64ab      	str	r3, [r5, #72]	@ 0x48
 8001d2a:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8001d2c:	f003 0304 	and.w	r3, r3, #4
 8001d30:	9303      	str	r3, [sp, #12]
 8001d32:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d34:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8001d36:	f043 0301 	orr.w	r3, r3, #1
 8001d3a:	64ab      	str	r3, [r5, #72]	@ 0x48
 8001d3c:	6cab      	ldr	r3, [r5, #72]	@ 0x48
  ADC_MultiModeTypeDef multimode = {0};
 8001d3e:	940c      	str	r4, [sp, #48]	@ 0x30
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d40:	f003 0301 	and.w	r3, r3, #1
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001d44:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d46:	9304      	str	r3, [sp, #16]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001d48:	223c      	movs	r2, #60	@ 0x3c
 8001d4a:	a817      	add	r0, sp, #92	@ 0x5c
  ADC_MultiModeTypeDef multimode = {0};
 8001d4c:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d50:	9b04      	ldr	r3, [sp, #16]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001d52:	f009 f96d 	bl	800b030 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 8001d56:	2220      	movs	r2, #32
 8001d58:	4621      	mov	r1, r4
 8001d5a:	a80f      	add	r0, sp, #60	@ 0x3c
 8001d5c:	f009 f968 	bl	800b030 <memset>
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8001d60:	f44f 4700 	mov.w	r7, #32768	@ 0x8000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d64:	e9cb 4401 	strd	r4, r4, [fp, #4]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d68:	e9cb 440b 	strd	r4, r4, [fp, #44]	@ 0x2c
  hadc1.Init.GainCompensation = 0;
 8001d6c:	f8cb 4010 	str.w	r4, [fp, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001d70:	f8ab 401c 	strh.w	r4, [fp, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d74:	f88b 4024 	strb.w	r4, [fp, #36]	@ 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001d78:	f88b 4038 	strb.w	r4, [fp, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001d7c:	f8cb 403c 	str.w	r4, [fp, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001d80:	f88b 4040 	strb.w	r4, [fp, #64]	@ 0x40
  hadc1.Instance = ADC1;
 8001d84:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d88:	2501      	movs	r5, #1
 8001d8a:	2404      	movs	r4, #4
  hadc1.Init.NbrOfConversion = 2;
 8001d8c:	2602      	movs	r6, #2
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d8e:	4658      	mov	r0, fp
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d90:	e9cb 5405 	strd	r5, r4, [fp, #20]
  hadc1.Instance = ADC1;
 8001d94:	f8cb 2000 	str.w	r2, [fp]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8001d98:	f8cb 700c 	str.w	r7, [fp, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001d9c:	f8cb 6020 	str.w	r6, [fp, #32]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001da0:	f003 fe3c 	bl	8005a1c <HAL_ADC_Init>
 8001da4:	b108      	cbz	r0, 8001daa <main+0x112>
 8001da6:	b672      	cpsid	i
  while (1)
 8001da8:	e7fe      	b.n	8001da8 <main+0x110>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001daa:	900c      	str	r0, [sp, #48]	@ 0x30
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001dac:	a90c      	add	r1, sp, #48	@ 0x30
 8001dae:	4658      	mov	r0, fp
 8001db0:	f004 fe22 	bl	80069f8 <HAL_ADCEx_MultiModeConfigChannel>
 8001db4:	b108      	cbz	r0, 8001dba <main+0x122>
 8001db6:	b672      	cpsid	i
  while (1)
 8001db8:	e7fe      	b.n	8001db8 <main+0x120>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001dba:	4a6d      	ldr	r2, [pc, #436]	@ (8001f70 <main+0x2d8>)
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001dbc:	f8ad 0080 	strh.w	r0, [sp, #128]	@ 0x80
  sConfigInjected.InjectedOffset = 0;
 8001dc0:	e9cd 401b 	strd	r4, r0, [sp, #108]	@ 0x6c
  sConfigInjected.QueueInjectedContext = DISABLE;
 8001dc4:	f88d 0082 	strb.w	r0, [sp, #130]	@ 0x82
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001dc8:	f88d 008c 	strb.w	r0, [sp, #140]	@ 0x8c
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8001dcc:	f04f 0880 	mov.w	r8, #128	@ 0x80
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001dd0:	f04f 0a09 	mov.w	sl, #9
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8001dd4:	f04f 097f 	mov.w	r9, #127	@ 0x7f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001dd8:	a917      	add	r1, sp, #92	@ 0x5c
 8001dda:	4658      	mov	r0, fp
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001ddc:	e9cd 8821 	strd	r8, r8, [sp, #132]	@ 0x84
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001de0:	e9cd 2a17 	strd	r2, sl, [sp, #92]	@ 0x5c
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8001de4:	9519      	str	r5, [sp, #100]	@ 0x64
  sConfigInjected.InjectedNbrOfConversion = 2;
 8001de6:	961f      	str	r6, [sp, #124]	@ 0x7c
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8001de8:	f8cd 9068 	str.w	r9, [sp, #104]	@ 0x68
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001dec:	f004 fac6 	bl	800637c <HAL_ADCEx_InjectedConfigChannel>
 8001df0:	b108      	cbz	r0, 8001df6 <main+0x15e>
 8001df2:	b672      	cpsid	i
  while (1)
 8001df4:	e7fe      	b.n	8001df4 <main+0x15c>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001df6:	4a5f      	ldr	r2, [pc, #380]	@ (8001f74 <main+0x2dc>)
 8001df8:	f240 130f 	movw	r3, #271	@ 0x10f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001dfc:	a917      	add	r1, sp, #92	@ 0x5c
 8001dfe:	4658      	mov	r0, fp
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001e00:	e9cd 2317 	strd	r2, r3, [sp, #92]	@ 0x5c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001e04:	f004 faba 	bl	800637c <HAL_ADCEx_InjectedConfigChannel>
 8001e08:	b108      	cbz	r0, 8001e0e <main+0x176>
 8001e0a:	b672      	cpsid	i
  while (1)
 8001e0c:	e7fe      	b.n	8001e0c <main+0x174>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e0e:	4b5a      	ldr	r3, [pc, #360]	@ (8001f78 <main+0x2e0>)
  sConfig.Offset = 0;
 8001e10:	9014      	str	r0, [sp, #80]	@ 0x50
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e12:	2206      	movs	r2, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e14:	a90f      	add	r1, sp, #60	@ 0x3c
 8001e16:	4658      	mov	r0, fp
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001e18:	e9cd 4911 	strd	r4, r9, [sp, #68]	@ 0x44
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e1c:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001e20:	9413      	str	r4, [sp, #76]	@ 0x4c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e22:	f003 ff09 	bl	8005c38 <HAL_ADC_ConfigChannel>
 8001e26:	b108      	cbz	r0, 8001e2c <main+0x194>
 8001e28:	b672      	cpsid	i
  while (1)
 8001e2a:	e7fe      	b.n	8001e2a <main+0x192>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e2c:	4658      	mov	r0, fp
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001e2e:	f8df b168 	ldr.w	fp, [pc, #360]	@ 8001f98 <main+0x300>
 8001e32:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e34:	a90f      	add	r1, sp, #60	@ 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001e36:	e9cd b30f 	strd	fp, r3, [sp, #60]	@ 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e3a:	f003 fefd 	bl	8005c38 <HAL_ADC_ConfigChannel>
 8001e3e:	4601      	mov	r1, r0
 8001e40:	b108      	cbz	r0, 8001e46 <main+0x1ae>
 8001e42:	b672      	cpsid	i
  while (1)
 8001e44:	e7fe      	b.n	8001e44 <main+0x1ac>
  hadc2.Instance = ADC2;
 8001e46:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8001f9c <main+0x304>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001e4a:	9001      	str	r0, [sp, #4]
 8001e4c:	223c      	movs	r2, #60	@ 0x3c
 8001e4e:	a817      	add	r0, sp, #92	@ 0x5c
 8001e50:	f009 f8ee 	bl	800b030 <memset>
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001e54:	9901      	ldr	r1, [sp, #4]
  hadc2.Instance = ADC2;
 8001e56:	4a49      	ldr	r2, [pc, #292]	@ (8001f7c <main+0x2e4>)
  hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8001e58:	f8cb 700c 	str.w	r7, [fp, #12]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001e5c:	4658      	mov	r0, fp
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001e5e:	e9cb 1101 	strd	r1, r1, [fp, #4]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001e62:	e9cb 1504 	strd	r1, r5, [fp, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e66:	f8cb 4018 	str.w	r4, [fp, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001e6a:	f8ab 101c 	strh.w	r1, [fp, #28]
  hadc2.Init.NbrOfConversion = 1;
 8001e6e:	f8cb 5020 	str.w	r5, [fp, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001e72:	f88b 1024 	strb.w	r1, [fp, #36]	@ 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001e76:	f88b 1038 	strb.w	r1, [fp, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001e7a:	f8cb 103c 	str.w	r1, [fp, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001e7e:	f88b 1040 	strb.w	r1, [fp, #64]	@ 0x40
  hadc2.Instance = ADC2;
 8001e82:	f8cb 2000 	str.w	r2, [fp]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001e86:	f003 fdc9 	bl	8005a1c <HAL_ADC_Init>
 8001e8a:	b108      	cbz	r0, 8001e90 <main+0x1f8>
 8001e8c:	b672      	cpsid	i
  while (1)
 8001e8e:	e7fe      	b.n	8001e8e <main+0x1f6>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
 8001e90:	4b38      	ldr	r3, [pc, #224]	@ (8001f74 <main+0x2dc>)
  sConfigInjected.InjectedOffset = 0;
 8001e92:	901c      	str	r0, [sp, #112]	@ 0x70
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001e94:	f8ad 0080 	strh.w	r0, [sp, #128]	@ 0x80
  sConfigInjected.QueueInjectedContext = DISABLE;
 8001e98:	f88d 0082 	strb.w	r0, [sp, #130]	@ 0x82
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001e9c:	f88d 008c 	strb.w	r0, [sp, #140]	@ 0x8c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001ea0:	a917      	add	r1, sp, #92	@ 0x5c
 8001ea2:	4658      	mov	r0, fp
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001ea4:	e9cd 3a17 	strd	r3, sl, [sp, #92]	@ 0x5c
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8001ea8:	e9cd 5919 	strd	r5, r9, [sp, #100]	@ 0x64
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001eac:	e9cd 8821 	strd	r8, r8, [sp, #132]	@ 0x84
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001eb0:	941b      	str	r4, [sp, #108]	@ 0x6c
  sConfigInjected.InjectedNbrOfConversion = 2;
 8001eb2:	961f      	str	r6, [sp, #124]	@ 0x7c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001eb4:	f004 fa62 	bl	800637c <HAL_ADCEx_InjectedConfigChannel>
 8001eb8:	b108      	cbz	r0, 8001ebe <main+0x226>
 8001eba:	b672      	cpsid	i
  while (1)
 8001ebc:	e7fe      	b.n	8001ebc <main+0x224>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001ebe:	f240 130f 	movw	r3, #271	@ 0x10f
 8001ec2:	9318      	str	r3, [sp, #96]	@ 0x60
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001ec4:	a917      	add	r1, sp, #92	@ 0x5c
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 8001ec6:	4b2e      	ldr	r3, [pc, #184]	@ (8001f80 <main+0x2e8>)
 8001ec8:	9317      	str	r3, [sp, #92]	@ 0x5c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001eca:	4658      	mov	r0, fp
 8001ecc:	f004 fa56 	bl	800637c <HAL_ADCEx_InjectedConfigChannel>
 8001ed0:	b108      	cbz	r0, 8001ed6 <main+0x23e>
 8001ed2:	b672      	cpsid	i
  while (1)
 8001ed4:	e7fe      	b.n	8001ed4 <main+0x23c>
  hcordic.Instance = CORDIC;
 8001ed6:	482b      	ldr	r0, [pc, #172]	@ (8001f84 <main+0x2ec>)
 8001ed8:	4b2b      	ldr	r3, [pc, #172]	@ (8001f88 <main+0x2f0>)
 8001eda:	6003      	str	r3, [r0, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8001edc:	f004 fe36 	bl	8006b4c <HAL_CORDIC_Init>
 8001ee0:	b108      	cbz	r0, 8001ee6 <main+0x24e>
 8001ee2:	b672      	cpsid	i
  while (1)
 8001ee4:	e7fe      	b.n	8001ee4 <main+0x24c>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ee6:	2400      	movs	r4, #0
  htim1.Instance = TIM1;
 8001ee8:	4d28      	ldr	r5, [pc, #160]	@ (8001f8c <main+0x2f4>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eea:	9409      	str	r4, [sp, #36]	@ 0x24
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001eec:	4621      	mov	r1, r4
 8001eee:	2234      	movs	r2, #52	@ 0x34
 8001ef0:	a817      	add	r0, sp, #92	@ 0x5c
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8001ef2:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ef6:	e9cd 440e 	strd	r4, r4, [sp, #56]	@ 0x38
 8001efa:	e9cd 4410 	strd	r4, r4, [sp, #64]	@ 0x40
 8001efe:	e9cd 4412 	strd	r4, r4, [sp, #72]	@ 0x48
 8001f02:	e9cd 4414 	strd	r4, r4, [sp, #80]	@ 0x50
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f06:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f0a:	f009 f891 	bl	800b030 <memset>
  htim1.Instance = TIM1;
 8001f0e:	4b20      	ldr	r3, [pc, #128]	@ (8001f90 <main+0x2f8>)
 8001f10:	602b      	str	r3, [r5, #0]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 8001f12:	f04f 0a20 	mov.w	sl, #32
 8001f16:	f241 039a 	movw	r3, #4250	@ 0x109a
 8001f1a:	e9c5 a302 	strd	sl, r3, [r5, #8]
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 8001f1e:	606c      	str	r4, [r5, #4]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f20:	61ac      	str	r4, [r5, #24]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8001f22:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f26:	2401      	movs	r4, #1
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001f28:	4628      	mov	r0, r5
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8001f2a:	e9c5 3404 	strd	r3, r4, [r5, #16]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001f2e:	f006 f8dd 	bl	80080ec <HAL_TIM_PWM_Init>
 8001f32:	b108      	cbz	r0, 8001f38 <main+0x2a0>
 8001f34:	b672      	cpsid	i
  while (1)
 8001f36:	e7fe      	b.n	8001f36 <main+0x29e>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f38:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001f3c:	2670      	movs	r6, #112	@ 0x70
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f3e:	a909      	add	r1, sp, #36	@ 0x24
 8001f40:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001f42:	9609      	str	r6, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f44:	f006 fcb2 	bl	80088ac <HAL_TIMEx_MasterConfigSynchronization>
 8001f48:	b108      	cbz	r0, 8001f4e <main+0x2b6>
 8001f4a:	b672      	cpsid	i
  while (1)
 8001f4c:	e7fe      	b.n	8001f4c <main+0x2b4>
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8001f4e:	aa0c      	add	r2, sp, #48	@ 0x30
 8001f50:	2102      	movs	r1, #2
 8001f52:	4628      	mov	r0, r5
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8001f54:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_LOW;
 8001f58:	940e      	str	r4, [sp, #56]	@ 0x38
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8001f5a:	f006 fd53 	bl	8008a04 <HAL_TIMEx_ConfigBreakInput>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	b1f0      	cbz	r0, 8001fa0 <main+0x308>
 8001f62:	b672      	cpsid	i
  while (1)
 8001f64:	e7fe      	b.n	8001f64 <main+0x2cc>
 8001f66:	bf00      	nop
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	48000800 	.word	0x48000800
 8001f70:	04300002 	.word	0x04300002
 8001f74:	1d500080 	.word	0x1d500080
 8001f78:	08600004 	.word	0x08600004
 8001f7c:	50000100 	.word	0x50000100
 8001f80:	19200040 	.word	0x19200040
 8001f84:	20000750 	.word	0x20000750
 8001f88:	40020c00 	.word	0x40020c00
 8001f8c:	20000704 	.word	0x20000704
 8001f90:	40012c00 	.word	0x40012c00
 8001f94:	200008bc 	.word	0x200008bc
 8001f98:	21800100 	.word	0x21800100
 8001f9c:	20000850 	.word	0x20000850
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001fa0:	e9cd 0011 	strd	r0, r0, [sp, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001fa4:	e9cd 0013 	strd	r0, r0, [sp, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001fa8:	9015      	str	r0, [sp, #84]	@ 0x54
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 8001faa:	f04f 0860 	mov.w	r8, #96	@ 0x60
 8001fae:	f640 034d 	movw	r3, #2125	@ 0x84d
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fb2:	a90f      	add	r1, sp, #60	@ 0x3c
 8001fb4:	4628      	mov	r0, r5
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 8001fb6:	e9cd 830f 	strd	r8, r3, [sp, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fba:	f006 fae1 	bl	8008580 <HAL_TIM_PWM_ConfigChannel>
 8001fbe:	b108      	cbz	r0, 8001fc4 <main+0x32c>
 8001fc0:	b672      	cpsid	i
  while (1)
 8001fc2:	e7fe      	b.n	8001fc2 <main+0x32a>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001fc4:	2204      	movs	r2, #4
 8001fc6:	a90f      	add	r1, sp, #60	@ 0x3c
 8001fc8:	4628      	mov	r0, r5
 8001fca:	f006 fad9 	bl	8008580 <HAL_TIM_PWM_ConfigChannel>
 8001fce:	b108      	cbz	r0, 8001fd4 <main+0x33c>
 8001fd0:	b672      	cpsid	i
  while (1)
 8001fd2:	e7fe      	b.n	8001fd2 <main+0x33a>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001fd4:	2208      	movs	r2, #8
 8001fd6:	a90f      	add	r1, sp, #60	@ 0x3c
 8001fd8:	4628      	mov	r0, r5
 8001fda:	f006 fad1 	bl	8008580 <HAL_TIM_PWM_ConfigChannel>
 8001fde:	b108      	cbz	r0, 8001fe4 <main+0x34c>
 8001fe0:	b672      	cpsid	i
  while (1)
 8001fe2:	e7fe      	b.n	8001fe2 <main+0x34a>
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 8001fe4:	f241 0399 	movw	r3, #4249	@ 0x1099
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001fe8:	220c      	movs	r2, #12
 8001fea:	a90f      	add	r1, sp, #60	@ 0x3c
 8001fec:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001fee:	960f      	str	r6, [sp, #60]	@ 0x3c
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 8001ff0:	9310      	str	r3, [sp, #64]	@ 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ff2:	f006 fac5 	bl	8008580 <HAL_TIM_PWM_ConfigChannel>
 8001ff6:	b108      	cbz	r0, 8001ffc <main+0x364>
 8001ff8:	b672      	cpsid	i
  while (1)
 8001ffa:	e7fe      	b.n	8001ffa <main+0x362>
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8001ffc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002000:	f44f 6600 	mov.w	r6, #2048	@ 0x800
 8002004:	e9cd 6317 	strd	r6, r3, [sp, #92]	@ 0x5c
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 8002008:	233b      	movs	r3, #59	@ 0x3b
 800200a:	931a      	str	r3, [sp, #104]	@ 0x68
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800200c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002010:	931c      	str	r3, [sp, #112]	@ 0x70
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002012:	f04f 7e80 	mov.w	lr, #16777216	@ 0x1000000
 8002016:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800201a:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800201e:	e9cd 0022 	strd	r0, r0, [sp, #136]	@ 0x88
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002022:	e9cd e31f 	strd	lr, r3, [sp, #124]	@ 0x7c
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002026:	9019      	str	r0, [sp, #100]	@ 0x64
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002028:	901b      	str	r0, [sp, #108]	@ 0x6c
  sBreakDeadTimeConfig.Break2Filter = 15;
 800202a:	230f      	movs	r3, #15
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800202c:	a917      	add	r1, sp, #92	@ 0x5c
 800202e:	4628      	mov	r0, r5
  sBreakDeadTimeConfig.Break2Filter = 15;
 8002030:	9321      	str	r3, [sp, #132]	@ 0x84
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002032:	f006 fc95 	bl	8008960 <HAL_TIMEx_ConfigBreakDeadTime>
 8002036:	4604      	mov	r4, r0
 8002038:	b108      	cbz	r0, 800203e <main+0x3a6>
 800203a:	b672      	cpsid	i
  while (1)
 800203c:	e7fe      	b.n	800203c <main+0x3a4>
  HAL_TIM_MspPostInit(&htim1);
 800203e:	4628      	mov	r0, r5
  htim2.Instance = TIM2;
 8002040:	4d6f      	ldr	r5, [pc, #444]	@ (8002200 <main+0x568>)
  HAL_TIM_MspPostInit(&htim1);
 8002042:	f003 fad7 	bl	80055f4 <HAL_TIM_MspPostInit>
  htim2.Instance = TIM2;
 8002046:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800204a:	602b      	str	r3, [r5, #0]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800204c:	4628      	mov	r0, r5
  htim2.Init.Period = M1_HALL_TIM_PERIOD;
 800204e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002052:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
 8002056:	e9cd 4411 	strd	r4, r4, [sp, #68]	@ 0x44
  TIM_HallSensor_InitTypeDef sConfig = {0};
 800205a:	e9cd 4417 	strd	r4, r4, [sp, #92]	@ 0x5c
 800205e:	e9cd 4419 	strd	r4, r4, [sp, #100]	@ 0x64
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002062:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002066:	e9c5 4401 	strd	r4, r4, [r5, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800206a:	940e      	str	r4, [sp, #56]	@ 0x38
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800206c:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800206e:	61ac      	str	r4, [r5, #24]
  htim2.Init.Period = M1_HALL_TIM_PERIOD;
 8002070:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002072:	f005 ff91 	bl	8007f98 <HAL_TIM_Base_Init>
 8002076:	b108      	cbz	r0, 800207c <main+0x3e4>
 8002078:	b672      	cpsid	i
  while (1)
 800207a:	e7fe      	b.n	800207a <main+0x3e2>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800207c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002080:	4628      	mov	r0, r5
 8002082:	a90f      	add	r1, sp, #60	@ 0x3c
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002084:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002086:	f006 f8db 	bl	8008240 <HAL_TIM_ConfigClockSource>
 800208a:	b108      	cbz	r0, 8002090 <main+0x3f8>
 800208c:	b672      	cpsid	i
  while (1)
 800208e:	e7fe      	b.n	800208e <main+0x3f6>
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002090:	2300      	movs	r3, #0
  sConfig.IC1Filter = M1_HALL_IC_FILTER;
 8002092:	220f      	movs	r2, #15
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 8002094:	485a      	ldr	r0, [pc, #360]	@ (8002200 <main+0x568>)
  sConfig.Commutation_Delay = 0;
 8002096:	931a      	str	r3, [sp, #104]	@ 0x68
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 8002098:	a917      	add	r1, sp, #92	@ 0x5c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800209a:	e9cd 3317 	strd	r3, r3, [sp, #92]	@ 0x5c
  sConfig.IC1Filter = M1_HALL_IC_FILTER;
 800209e:	9219      	str	r2, [sp, #100]	@ 0x64
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 80020a0:	f006 fb9a 	bl	80087d8 <HAL_TIMEx_HallSensor_Init>
 80020a4:	4603      	mov	r3, r0
 80020a6:	b108      	cbz	r0, 80020ac <main+0x414>
 80020a8:	b672      	cpsid	i
  while (1)
 80020aa:	e7fe      	b.n	80020aa <main+0x412>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80020ac:	2250      	movs	r2, #80	@ 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020ae:	4854      	ldr	r0, [pc, #336]	@ (8002200 <main+0x568>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020b0:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020b2:	a90c      	add	r1, sp, #48	@ 0x30
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80020b4:	920c      	str	r2, [sp, #48]	@ 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020b6:	f006 fbf9 	bl	80088ac <HAL_TIMEx_MasterConfigSynchronization>
 80020ba:	4603      	mov	r3, r0
 80020bc:	b108      	cbz	r0, 80020c2 <main+0x42a>
 80020be:	b672      	cpsid	i
  while (1)
 80020c0:	e7fe      	b.n	80020c0 <main+0x428>
  huart2.Instance = USART2;
 80020c2:	4c50      	ldr	r4, [pc, #320]	@ (8002204 <main+0x56c>)
  huart2.Init.BaudRate = 1843200;
 80020c4:	4950      	ldr	r1, [pc, #320]	@ (8002208 <main+0x570>)
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020c6:	62a3      	str	r3, [r4, #40]	@ 0x28
  huart2.Init.BaudRate = 1843200;
 80020c8:	f44f 12e1 	mov.w	r2, #1843200	@ 0x1c2000
 80020cc:	e9c4 1200 	strd	r1, r2, [r4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020d0:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020d2:	e9c4 0002 	strd	r0, r0, [r4, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020d6:	e9c4 0204 	strd	r0, r2, [r4, #16]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020da:	4620      	mov	r0, r4
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020dc:	e9c4 3306 	strd	r3, r3, [r4, #24]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80020e0:	e9c4 3308 	strd	r3, r3, [r4, #32]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020e4:	f007 f8c0 	bl	8009268 <HAL_UART_Init>
 80020e8:	4601      	mov	r1, r0
 80020ea:	b108      	cbz	r0, 80020f0 <main+0x458>
 80020ec:	b672      	cpsid	i
  while (1)
 80020ee:	e7fe      	b.n	80020ee <main+0x456>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020f0:	4620      	mov	r0, r4
 80020f2:	f007 f97d 	bl	80093f0 <HAL_UARTEx_SetTxFifoThreshold>
 80020f6:	4601      	mov	r1, r0
 80020f8:	b108      	cbz	r0, 80020fe <main+0x466>
 80020fa:	b672      	cpsid	i
  while (1)
 80020fc:	e7fe      	b.n	80020fc <main+0x464>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020fe:	4620      	mov	r0, r4
 8002100:	f007 f9b8 	bl	8009474 <HAL_UARTEx_SetRxFifoThreshold>
 8002104:	b108      	cbz	r0, 800210a <main+0x472>
 8002106:	b672      	cpsid	i
  while (1)
 8002108:	e7fe      	b.n	8002108 <main+0x470>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800210a:	4620      	mov	r0, r4
 800210c:	f007 f952 	bl	80093b4 <HAL_UARTEx_DisableFifoMode>
 8002110:	4605      	mov	r5, r0
 8002112:	b108      	cbz	r0, 8002118 <main+0x480>
 8002114:	b672      	cpsid	i
  while (1)
 8002116:	e7fe      	b.n	8002116 <main+0x47e>
  hadc3.Instance = ADC3;
 8002118:	4c3c      	ldr	r4, [pc, #240]	@ (800220c <main+0x574>)
  MX_MotorControl_Init();
 800211a:	f001 fadb 	bl	80036d4 <MX_MotorControl_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 800211e:	4629      	mov	r1, r5
 8002120:	2220      	movs	r2, #32
 8002122:	a817      	add	r0, sp, #92	@ 0x5c
  ADC_MultiModeTypeDef multimode = {0};
 8002124:	e9cd 550f 	strd	r5, r5, [sp, #60]	@ 0x3c
 8002128:	9511      	str	r5, [sp, #68]	@ 0x44
  ADC_ChannelConfTypeDef sConfig = {0};
 800212a:	f008 ff81 	bl	800b030 <memset>
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800212e:	4b38      	ldr	r3, [pc, #224]	@ (8002210 <main+0x578>)
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8002130:	83a5      	strh	r5, [r4, #28]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002132:	e9c4 5502 	strd	r5, r5, [r4, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002136:	e9c4 5504 	strd	r5, r5, [r4, #16]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800213a:	e9c4 550b 	strd	r5, r5, [r4, #44]	@ 0x2c
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800213e:	f44f 3640 	mov.w	r6, #196608	@ 0x30000
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002142:	f884 5024 	strb.w	r5, [r4, #36]	@ 0x24
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8002146:	f884 5038 	strb.w	r5, [r4, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800214a:	63e5      	str	r5, [r4, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 800214c:	f884 5040 	strb.w	r5, [r4, #64]	@ 0x40
  hadc3.Init.NbrOfConversion = 1;
 8002150:	2701      	movs	r7, #1
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002152:	2504      	movs	r5, #4
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002154:	4620      	mov	r0, r4
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002156:	e9c4 3600 	strd	r3, r6, [r4]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800215a:	61a5      	str	r5, [r4, #24]
  hadc3.Init.NbrOfConversion = 1;
 800215c:	6227      	str	r7, [r4, #32]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800215e:	f003 fc5d 	bl	8005a1c <HAL_ADC_Init>
 8002162:	b108      	cbz	r0, 8002168 <main+0x4d0>
 8002164:	b672      	cpsid	i
  while (1)
 8002166:	e7fe      	b.n	8002166 <main+0x4ce>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002168:	900f      	str	r0, [sp, #60]	@ 0x3c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800216a:	a90f      	add	r1, sp, #60	@ 0x3c
 800216c:	4620      	mov	r0, r4
 800216e:	f004 fc43 	bl	80069f8 <HAL_ADCEx_MultiModeConfigChannel>
 8002172:	4603      	mov	r3, r0
 8002174:	b108      	cbz	r0, 800217a <main+0x4e2>
 8002176:	b672      	cpsid	i
  while (1)
 8002178:	e7fe      	b.n	8002178 <main+0x4e0>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800217a:	4a26      	ldr	r2, [pc, #152]	@ (8002214 <main+0x57c>)
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800217c:	9319      	str	r3, [sp, #100]	@ 0x64
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800217e:	e9cd 531b 	strd	r5, r3, [sp, #108]	@ 0x6c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002182:	2306      	movs	r3, #6
 8002184:	e9cd 2317 	strd	r2, r3, [sp, #92]	@ 0x5c
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002188:	4620      	mov	r0, r4
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800218a:	237f      	movs	r3, #127	@ 0x7f
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800218c:	a917      	add	r1, sp, #92	@ 0x5c
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800218e:	931a      	str	r3, [sp, #104]	@ 0x68
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002190:	f003 fd52 	bl	8005c38 <HAL_ADC_ConfigChannel>
 8002194:	4604      	mov	r4, r0
 8002196:	b108      	cbz	r0, 800219c <main+0x504>
 8002198:	b672      	cpsid	i
  while (1)
 800219a:	e7fe      	b.n	800219a <main+0x502>
  ADC_ChannelConfTypeDef sConfig = {0};
 800219c:	4601      	mov	r1, r0
 800219e:	2220      	movs	r2, #32
 80021a0:	a817      	add	r0, sp, #92	@ 0x5c
 80021a2:	f008 ff45 	bl	800b030 <memset>
  hadc4.Instance = ADC4;
 80021a6:	481c      	ldr	r0, [pc, #112]	@ (8002218 <main+0x580>)
 80021a8:	4b1c      	ldr	r3, [pc, #112]	@ (800221c <main+0x584>)
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80021aa:	8384      	strh	r4, [r0, #28]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 80021ac:	e9c0 6401 	strd	r6, r4, [r0, #4]
  hadc4.Init.GainCompensation = 0;
 80021b0:	e9c0 4403 	strd	r4, r4, [r0, #12]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80021b4:	e9c0 4505 	strd	r4, r5, [r0, #20]
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80021b8:	e9c0 440b 	strd	r4, r4, [r0, #44]	@ 0x2c
  hadc4.Init.NbrOfConversion = 1;
 80021bc:	6207      	str	r7, [r0, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 80021be:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24
  hadc4.Init.DMAContinuousRequests = DISABLE;
 80021c2:	f880 4038 	strb.w	r4, [r0, #56]	@ 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80021c6:	63c4      	str	r4, [r0, #60]	@ 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 80021c8:	f880 4040 	strb.w	r4, [r0, #64]	@ 0x40
  hadc4.Instance = ADC4;
 80021cc:	6003      	str	r3, [r0, #0]
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 80021ce:	f003 fc25 	bl	8005a1c <HAL_ADC_Init>
 80021d2:	b108      	cbz	r0, 80021d8 <main+0x540>
 80021d4:	b672      	cpsid	i
  while (1)
 80021d6:	e7fe      	b.n	80021d6 <main+0x53e>
  sConfig.Channel = ADC_CHANNEL_4;
 80021d8:	4c11      	ldr	r4, [pc, #68]	@ (8002220 <main+0x588>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80021da:	2006      	movs	r0, #6
 80021dc:	e9cd 4017 	strd	r4, r0, [sp, #92]	@ 0x5c
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80021e0:	2300      	movs	r3, #0
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80021e2:	227f      	movs	r2, #127	@ 0x7f
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80021e4:	480c      	ldr	r0, [pc, #48]	@ (8002218 <main+0x580>)
 80021e6:	a917      	add	r1, sp, #92	@ 0x5c
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80021e8:	2504      	movs	r5, #4
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80021ea:	e9cd 3219 	strd	r3, r2, [sp, #100]	@ 0x64
  sConfig.Offset = 0;
 80021ee:	e9cd 531b 	strd	r5, r3, [sp, #108]	@ 0x6c
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80021f2:	f003 fd21 	bl	8005c38 <HAL_ADC_ConfigChannel>
 80021f6:	4604      	mov	r4, r0
 80021f8:	b1a0      	cbz	r0, 8002224 <main+0x58c>
 80021fa:	b672      	cpsid	i
  while (1)
 80021fc:	e7fe      	b.n	80021fc <main+0x564>
 80021fe:	bf00      	nop
 8002200:	200006b8 	.word	0x200006b8
 8002204:	20000624 	.word	0x20000624
 8002208:	40004400 	.word	0x40004400
 800220c:	200007e4 	.word	0x200007e4
 8002210:	50000400 	.word	0x50000400
 8002214:	14f00020 	.word	0x14f00020
 8002218:	20000778 	.word	0x20000778
 800221c:	50000500 	.word	0x50000500
 8002220:	10c00010 	.word	0x10c00010
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 8002224:	2201      	movs	r2, #1
 8002226:	2103      	movs	r1, #3
 8002228:	2026      	movs	r0, #38	@ 0x26
 800222a:	f004 fcbb 	bl	8006ba4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800222e:	2026      	movs	r0, #38	@ 0x26
 8002230:	f004 fcf4 	bl	8006c1c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 8002234:	4622      	mov	r2, r4
 8002236:	2103      	movs	r1, #3
 8002238:	200b      	movs	r0, #11
 800223a:	f004 fcb3 	bl	8006ba4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800223e:	200b      	movs	r0, #11
 8002240:	f004 fcec 	bl	8006c1c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 4, 1);
 8002244:	2201      	movs	r2, #1
 8002246:	4629      	mov	r1, r5
 8002248:	2018      	movs	r0, #24
 800224a:	f004 fcab 	bl	8006ba4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800224e:	2018      	movs	r0, #24
 8002250:	f004 fce4 	bl	8006c1c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002254:	4622      	mov	r2, r4
 8002256:	4621      	mov	r1, r4
 8002258:	2019      	movs	r0, #25
 800225a:	f004 fca3 	bl	8006ba4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800225e:	2019      	movs	r0, #25
 8002260:	f004 fcdc 	bl	8006c1c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 8002264:	4622      	mov	r2, r4
 8002266:	2102      	movs	r1, #2
 8002268:	2012      	movs	r0, #18
 800226a:	f004 fc9b 	bl	8006ba4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800226e:	2012      	movs	r0, #18
 8002270:	f004 fcd4 	bl	8006c1c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8002274:	4622      	mov	r2, r4
 8002276:	2103      	movs	r1, #3
 8002278:	201c      	movs	r0, #28
 800227a:	f004 fc93 	bl	8006ba4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800227e:	201c      	movs	r0, #28
 8002280:	f004 fccc 	bl	8006c1c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8002284:	4622      	mov	r2, r4
 8002286:	2103      	movs	r1, #3
 8002288:	2028      	movs	r0, #40	@ 0x28
 800228a:	f004 fc8b 	bl	8006ba4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800228e:	2028      	movs	r0, #40	@ 0x28
 8002290:	f004 fcc4 	bl	8006c1c <HAL_NVIC_EnableIRQ>
  HAL_UART_Receive_DMA(&huart2, &singleByte, 1);
 8002294:	498a      	ldr	r1, [pc, #552]	@ (80024c0 <main+0x828>)
 8002296:	488b      	ldr	r0, [pc, #556]	@ (80024c4 <main+0x82c>)
  pinState_PC9 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9);
 8002298:	4e8b      	ldr	r6, [pc, #556]	@ (80024c8 <main+0x830>)
  	  HAL_ADC_Start(&hadc3);
 800229a:	f8df b270 	ldr.w	fp, [pc, #624]	@ 800250c <main+0x874>
  	  HAL_ADC_Start(&hadc4);
 800229e:	f8df 8270 	ldr.w	r8, [pc, #624]	@ 8002510 <main+0x878>
  HAL_UART_Receive_DMA(&huart2, &singleByte, 1);
 80022a2:	2201      	movs	r2, #1
 80022a4:	f007 f864 	bl	8009370 <HAL_UART_Receive_DMA>
  pinState_PC9 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9);
 80022a8:	4888      	ldr	r0, [pc, #544]	@ (80024cc <main+0x834>)
 80022aa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80022ae:	f004 ffeb 	bl	8007288 <HAL_GPIO_ReadPin>
 80022b2:	1e03      	subs	r3, r0, #0
 80022b4:	bf18      	it	ne
 80022b6:	2301      	movne	r3, #1
 80022b8:	7033      	strb	r3, [r6, #0]
  while (pinState_PC9)
 80022ba:	f8cd b004 	str.w	fp, [sp, #4]
 80022be:	7830      	ldrb	r0, [r6, #0]
 80022c0:	2800      	cmp	r0, #0
 80022c2:	f000 80f4 	beq.w	80024ae <main+0x816>
  	  HAL_ADC_Start(&hadc3);
 80022c6:	9c01      	ldr	r4, [sp, #4]
 80022c8:	4620      	mov	r0, r4
 80022ca:	f003 ffd5 	bl	8006278 <HAL_ADC_Start>
  	  HAL_ADC_Start(&hadc4);
 80022ce:	4640      	mov	r0, r8
 80022d0:	f003 ffd2 	bl	8006278 <HAL_ADC_Start>
  	  pot_hardware = HAL_ADC_GetValue(&hadc3); // this pin is PB13, for the main pendal
 80022d4:	4620      	mov	r0, r4
 80022d6:	f003 fcab 	bl	8005c30 <HAL_ADC_GetValue>
 80022da:	ee07 0a90 	vmov	s15, r0
 80022de:	4c7c      	ldr	r4, [pc, #496]	@ (80024d0 <main+0x838>)
 80022e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
  	  pot_2 = HAL_ADC_Start(&hadc4);
 80022e4:	4640      	mov	r0, r8
  	  pot_hardware = HAL_ADC_GetValue(&hadc3); // this pin is PB13, for the main pendal
 80022e6:	edc4 7a00 	vstr	s15, [r4]
  	  pot_2 = HAL_ADC_Start(&hadc4);
 80022ea:	f003 ffc5 	bl	8006278 <HAL_ADC_Start>
 80022ee:	ee07 0a90 	vmov	s15, r0
 80022f2:	4b78      	ldr	r3, [pc, #480]	@ (80024d4 <main+0x83c>)
  	  pinState_PC9 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9);
 80022f4:	4875      	ldr	r0, [pc, #468]	@ (80024cc <main+0x834>)
  	  pot_2 = HAL_ADC_Start(&hadc4);
 80022f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
  	  pinState_PC9 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9);
 80022fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
  	  pot_2 = HAL_ADC_Start(&hadc4);
 80022fe:	edc3 7a00 	vstr	s15, [r3]
  	  pinState_PC9 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9);
 8002302:	f004 ffc1 	bl	8007288 <HAL_GPIO_ReadPin>
 8002306:	2800      	cmp	r0, #0
 8002308:	bf19      	ittee	ne
 800230a:	2301      	movne	r3, #1
  		  pot = pot_hardware;
 800230c:	4d72      	ldrne	r5, [pc, #456]	@ (80024d8 <main+0x840>)
 800230e:	4d72      	ldreq	r5, [pc, #456]	@ (80024d8 <main+0x840>)
  	  pinState_PC9 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9);
 8002310:	2300      	moveq	r3, #0
 8002312:	7033      	strb	r3, [r6, #0]
  		  pot = pot_hardware;
 8002314:	bf1c      	itt	ne
 8002316:	6823      	ldrne	r3, [r4, #0]
 8002318:	602b      	strne	r3, [r5, #0]
  	  if (MC_GetOccurredFaultsMotor1() == MC_DP_FAULT){
 800231a:	f000 f927 	bl	800256c <MC_GetOccurredFaultsMotor1>
 800231e:	f5b0 6f80 	cmp.w	r0, #1024	@ 0x400
 8002322:	d10b      	bne.n	800233c <main+0x6a4>
  		  checks_driver += 1;
 8002324:	4a6d      	ldr	r2, [pc, #436]	@ (80024dc <main+0x844>)
 8002326:	8813      	ldrh	r3, [r2, #0]
 8002328:	3301      	adds	r3, #1
 800232a:	8013      	strh	r3, [r2, #0]
  		  MC_AcknowledgeFaultMotor1();
 800232c:	f000 f918 	bl	8002560 <MC_AcknowledgeFaultMotor1>
  		  HAL_Delay(500);
 8002330:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002334:	f003 fb60 	bl	80059f8 <HAL_Delay>
  		  MC_StartMotor1();
 8002338:	f000 f8f0 	bl	800251c <MC_StartMotor1>
  	  if (MC_GetOccurredFaultsMotor1() == MC_SPEED_FDBK){
 800233c:	f000 f916 	bl	800256c <MC_GetOccurredFaultsMotor1>
 8002340:	2820      	cmp	r0, #32
 8002342:	d10a      	bne.n	800235a <main+0x6c2>
  		  checks_speed += 1;
 8002344:	4a66      	ldr	r2, [pc, #408]	@ (80024e0 <main+0x848>)
 8002346:	8813      	ldrh	r3, [r2, #0]
 		  HAL_Delay(100);
 8002348:	2064      	movs	r0, #100	@ 0x64
  		  checks_speed += 1;
 800234a:	3301      	adds	r3, #1
 800234c:	8013      	strh	r3, [r2, #0]
 		  HAL_Delay(100);
 800234e:	f003 fb53 	bl	80059f8 <HAL_Delay>
  		  MC_AcknowledgeFaultMotor1();
 8002352:	f000 f905 	bl	8002560 <MC_AcknowledgeFaultMotor1>
  		  MC_StartMotor1();
 8002356:	f000 f8e1 	bl	800251c <MC_StartMotor1>
  	  if (MC_GetOccurredFaultsMotor1() == MC_OVER_CURR){
 800235a:	f000 f907 	bl	800256c <MC_GetOccurredFaultsMotor1>
 800235e:	2840      	cmp	r0, #64	@ 0x40
 8002360:	d10a      	bne.n	8002378 <main+0x6e0>
  		  checks_curr += 1;
 8002362:	4a60      	ldr	r2, [pc, #384]	@ (80024e4 <main+0x84c>)
 8002364:	8813      	ldrh	r3, [r2, #0]
 8002366:	3301      	adds	r3, #1
 8002368:	8013      	strh	r3, [r2, #0]
  		  MC_AcknowledgeFaultMotor1();
 800236a:	f000 f8f9 	bl	8002560 <MC_AcknowledgeFaultMotor1>
  		  HAL_Delay(100);
 800236e:	2064      	movs	r0, #100	@ 0x64
 8002370:	f003 fb42 	bl	80059f8 <HAL_Delay>
  		  MC_StartMotor1();
 8002374:	f000 f8d2 	bl	800251c <MC_StartMotor1>
    	  pot_adjusted = ((float)(pot - raw_min) / (raw_max - raw_min)) * (rpm_max - rpm_low) + rpm_low;
 8002378:	4b5b      	ldr	r3, [pc, #364]	@ (80024e8 <main+0x850>)
 800237a:	4f5c      	ldr	r7, [pc, #368]	@ (80024ec <main+0x854>)
 800237c:	edd3 7a00 	vldr	s15, [r3]
 8002380:	edd7 6a00 	vldr	s13, [r7]
 8002384:	ed95 7a00 	vldr	s14, [r5]
 8002388:	4b59      	ldr	r3, [pc, #356]	@ (80024f0 <main+0x858>)
 800238a:	f8df 9188 	ldr.w	r9, [pc, #392]	@ 8002514 <main+0x87c>
  	  if (STATE == 0 && pot >= raw_min+100) {
 800238e:	4c59      	ldr	r4, [pc, #356]	@ (80024f4 <main+0x85c>)
    	  pot_adjusted = ((float)(pot - raw_min) / (raw_max - raw_min)) * (rpm_max - rpm_low) + rpm_low;
 8002390:	ee37 7a66 	vsub.f32	s14, s14, s13
 8002394:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002398:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800239c:	edd3 7a00 	vldr	s15, [r3]
 80023a0:	4b55      	ldr	r3, [pc, #340]	@ (80024f8 <main+0x860>)
 80023a2:	ed93 7a00 	vldr	s14, [r3]
 80023a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023aa:	eee6 7a87 	vfma.f32	s15, s13, s14
 80023ae:	edc9 7a00 	vstr	s15, [r9]
    	  pot_lim = MC_GetAverageMecSpeedMotor1_F();
 80023b2:	f000 f8cf 	bl	8002554 <MC_GetAverageMecSpeedMotor1_F>
 80023b6:	4b51      	ldr	r3, [pc, #324]	@ (80024fc <main+0x864>)
 80023b8:	ed83 0a00 	vstr	s0, [r3]
  	  if (STATE == 0 && pot >= raw_min+100) {
 80023bc:	7823      	ldrb	r3, [r4, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d151      	bne.n	8002466 <main+0x7ce>
 80023c2:	edd7 7a00 	vldr	s15, [r7]
 80023c6:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8002500 <main+0x868>
 80023ca:	ed95 7a00 	vldr	s14, [r5]
 80023ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023da:	d832      	bhi.n	8002442 <main+0x7aa>
  	  	  checks = 0;
 80023dc:	4a49      	ldr	r2, [pc, #292]	@ (8002504 <main+0x86c>)
 80023de:	8013      	strh	r3, [r2, #0]
  		  STATE = 1;
 80023e0:	2301      	movs	r3, #1
 80023e2:	7023      	strb	r3, [r4, #0]
  	  if (STATE == 1 && MC_GetAverageMecSpeedMotor1_F() > 0.9 * pot_adjusted) {
 80023e4:	f000 f8b6 	bl	8002554 <MC_GetAverageMecSpeedMotor1_F>
 80023e8:	ee10 0a10 	vmov	r0, s0
 80023ec:	f7fe f9a2 	bl	8000734 <__aeabi_f2d>
 80023f0:	4682      	mov	sl, r0
 80023f2:	f8d9 0000 	ldr.w	r0, [r9]
 80023f6:	468b      	mov	fp, r1
 80023f8:	f7fe f99c 	bl	8000734 <__aeabi_f2d>
 80023fc:	a32e      	add	r3, pc, #184	@ (adr r3, 80024b8 <main+0x820>)
 80023fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002402:	f7fd ff09 	bl	8000218 <__aeabi_dmul>
 8002406:	4602      	mov	r2, r0
 8002408:	460b      	mov	r3, r1
 800240a:	4650      	mov	r0, sl
 800240c:	4659      	mov	r1, fp
 800240e:	f7fe fa67 	bl	80008e0 <__aeabi_dcmpgt>
 8002412:	b3c0      	cbz	r0, 8002486 <main+0x7ee>
  	  	  checks = 0;
 8002414:	4b3b      	ldr	r3, [pc, #236]	@ (8002504 <main+0x86c>)
 8002416:	2200      	movs	r2, #0
 8002418:	801a      	strh	r2, [r3, #0]
  		  STATE = 2;
 800241a:	2302      	movs	r3, #2
 800241c:	7023      	strb	r3, [r4, #0]
  	  if (STATE > 0 && pot < raw_min) {
 800241e:	ed95 7a00 	vldr	s14, [r5]
 8002422:	edd7 7a00 	vldr	s15, [r7]
 8002426:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800242a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800242e:	d51d      	bpl.n	800246c <main+0x7d4>
  		checks++;
 8002430:	4a34      	ldr	r2, [pc, #208]	@ (8002504 <main+0x86c>)
 8002432:	8813      	ldrh	r3, [r2, #0]
 8002434:	3301      	adds	r3, #1
 8002436:	b29b      	uxth	r3, r3
  		if (checks>=100) {
 8002438:	2b63      	cmp	r3, #99	@ 0x63
  		checks++;
 800243a:	8013      	strh	r3, [r2, #0]
  		if (checks>=100) {
 800243c:	d916      	bls.n	800246c <main+0x7d4>
  			 STATE = 0;
 800243e:	2300      	movs	r3, #0
 8002440:	7023      	strb	r3, [r4, #0]
  		  MC_ProgramSpeedRampMotor1_F(0, 200);
 8002442:	ed9f 0a31 	vldr	s0, [pc, #196]	@ 8002508 <main+0x870>
 8002446:	20c8      	movs	r0, #200	@ 0xc8
 8002448:	f000 f874 	bl	8002534 <MC_ProgramSpeedRampMotor1_F>
  			if (MC_GetAverageMecSpeedMotor1_F()<20) {
 800244c:	f000 f882 	bl	8002554 <MC_GetAverageMecSpeedMotor1_F>
 8002450:	eef3 7a04 	vmov.f32	s15, #52	@ 0x41a00000  20.0
 8002454:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800245c:	f57f af2f 	bpl.w	80022be <main+0x626>
  					MC_StopMotor1();
 8002460:	f000 f862 	bl	8002528 <MC_StopMotor1>
 8002464:	e72b      	b.n	80022be <main+0x626>
  	  if (STATE == 1 && MC_GetAverageMecSpeedMotor1_F() > 0.9 * pot_adjusted) {
 8002466:	2b01      	cmp	r3, #1
 8002468:	d1d9      	bne.n	800241e <main+0x786>
 800246a:	e7bb      	b.n	80023e4 <main+0x74c>
  	  if (STATE == 1) {
 800246c:	7823      	ldrb	r3, [r4, #0]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d00d      	beq.n	800248e <main+0x7f6>
  	  } else if (STATE == 2) {
 8002472:	2b02      	cmp	r3, #2
 8002474:	d1e5      	bne.n	8002442 <main+0x7aa>
  		  MC_StartMotor1();
 8002476:	f000 f851 	bl	800251c <MC_StartMotor1>
  		  MC_ProgramSpeedRampMotor1_F(pot_adjusted, 200);
 800247a:	ed99 0a00 	vldr	s0, [r9]
 800247e:	20c8      	movs	r0, #200	@ 0xc8
 8002480:	f000 f858 	bl	8002534 <MC_ProgramSpeedRampMotor1_F>
 8002484:	e71b      	b.n	80022be <main+0x626>
  	  if (STATE > 0 && pot < raw_min) {
 8002486:	7823      	ldrb	r3, [r4, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0da      	beq.n	8002442 <main+0x7aa>
 800248c:	e7c7      	b.n	800241e <main+0x786>
  		  MC_StartMotor1();
 800248e:	f000 f845 	bl	800251c <MC_StartMotor1>
  		  MC_ProgramTorqueRampMotor1_F(10, 0);
 8002492:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8002496:	2000      	movs	r0, #0
 8002498:	f000 f854 	bl	8002544 <MC_ProgramTorqueRampMotor1_F>
			HAL_Delay(100);
 800249c:	2064      	movs	r0, #100	@ 0x64
 800249e:	f003 faab 	bl	80059f8 <HAL_Delay>
			MC_ProgramTorqueRampMotor1_F(18, 250);
 80024a2:	eeb3 0a02 	vmov.f32	s0, #50	@ 0x41900000  18.0
 80024a6:	20fa      	movs	r0, #250	@ 0xfa
 80024a8:	f000 f84c 	bl	8002544 <MC_ProgramTorqueRampMotor1_F>
 80024ac:	e707      	b.n	80022be <main+0x626>
}
 80024ae:	b027      	add	sp, #156	@ 0x9c
 80024b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024b4:	f3af 8000 	nop.w
 80024b8:	cccccccd 	.word	0xcccccccd
 80024bc:	3feccccc 	.word	0x3feccccc
 80024c0:	20000538 	.word	0x20000538
 80024c4:	20000624 	.word	0x20000624
 80024c8:	2000053a 	.word	0x2000053a
 80024cc:	48000800 	.word	0x48000800
 80024d0:	20000558 	.word	0x20000558
 80024d4:	20000560 	.word	0x20000560
 80024d8:	20000554 	.word	0x20000554
 80024dc:	2000054c 	.word	0x2000054c
 80024e0:	2000054a 	.word	0x2000054a
 80024e4:	20000548 	.word	0x20000548
 80024e8:	20000008 	.word	0x20000008
 80024ec:	2000000c 	.word	0x2000000c
 80024f0:	20000004 	.word	0x20000004
 80024f4:	20000530 	.word	0x20000530
 80024f8:	20000000 	.word	0x20000000
 80024fc:	20000534 	.word	0x20000534
 8002500:	42c80000 	.word	0x42c80000
 8002504:	20000546 	.word	0x20000546
 8002508:	00000000 	.word	0x00000000
 800250c:	200007e4 	.word	0x200007e4
 8002510:	20000778 	.word	0x20000778
 8002514:	20000550 	.word	0x20000550

08002518 <Error_Handler>:
 8002518:	b672      	cpsid	i
  while (1)
 800251a:	e7fe      	b.n	800251a <Error_Handler+0x2>

0800251c <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
  return (MCI_StartMotor(pMCI[M1]));
 800251c:	4b01      	ldr	r3, [pc, #4]	@ (8002524 <MC_StartMotor1+0x8>)
 800251e:	6818      	ldr	r0, [r3, #0]
 8002520:	f000 b8c2 	b.w	80026a8 <MCI_StartMotor>
 8002524:	20001c20 	.word	0x20001c20

08002528 <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
  return (MCI_StopMotor(pMCI[M1]));
 8002528:	4b01      	ldr	r3, [pc, #4]	@ (8002530 <MC_StopMotor1+0x8>)
 800252a:	6818      	ldr	r0, [r3, #0]
 800252c:	f000 b8d2 	b.w	80026d4 <MCI_StopMotor>
 8002530:	20001c20 	.word	0x20001c20

08002534 <MC_ProgramSpeedRampMotor1_F>:
  *         is possible to set 0 to perform an instantaneous change in the speed
  *         value.
  */
__weak void MC_ProgramSpeedRampMotor1_F(float_t FinalSpeed, uint16_t hDurationms)
{
  MCI_ExecSpeedRamp_F(pMCI[M1], FinalSpeed, hDurationms);
 8002534:	4b02      	ldr	r3, [pc, #8]	@ (8002540 <MC_ProgramSpeedRampMotor1_F+0xc>)
{
 8002536:	4601      	mov	r1, r0
  MCI_ExecSpeedRamp_F(pMCI[M1], FinalSpeed, hDurationms);
 8002538:	6818      	ldr	r0, [r3, #0]
 800253a:	f000 b833 	b.w	80025a4 <MCI_ExecSpeedRamp_F>
 800253e:	bf00      	nop
 8002540:	20001c20 	.word	0x20001c20

08002544 <MC_ProgramTorqueRampMotor1_F>:
  *         is possible to set 0 to perform an instantaneous change in the torque
  *         value.
  */
__weak void MC_ProgramTorqueRampMotor1_F(float_t FinalTorque, uint16_t hDurationms)
{
  MCI_ExecTorqueRamp_F(pMCI[M1], FinalTorque, hDurationms);
 8002544:	4b02      	ldr	r3, [pc, #8]	@ (8002550 <MC_ProgramTorqueRampMotor1_F+0xc>)
{
 8002546:	4601      	mov	r1, r0
  MCI_ExecTorqueRamp_F(pMCI[M1], FinalTorque, hDurationms);
 8002548:	6818      	ldr	r0, [r3, #0]
 800254a:	f000 b845 	b.w	80025d8 <MCI_ExecTorqueRamp_F>
 800254e:	bf00      	nop
 8002550:	20001c20 	.word	0x20001c20

08002554 <MC_GetAverageMecSpeedMotor1_F>:
/**
 * @brief Returns the last computed average mechanical rotor speed for Motor 1, expressed in rpm.
 */
__weak float_t MC_GetAverageMecSpeedMotor1_F(void)
{
  return (MCI_GetAvrgMecSpeed_F(pMCI[M1]));
 8002554:	4b01      	ldr	r3, [pc, #4]	@ (800255c <MC_GetAverageMecSpeedMotor1_F+0x8>)
 8002556:	6818      	ldr	r0, [r3, #0]
 8002558:	f000 b908 	b.w	800276c <MCI_GetAvrgMecSpeed_F>
 800255c:	20001c20 	.word	0x20001c20

08002560 <MC_AcknowledgeFaultMotor1>:
 * the function is called, nothing is done and false is returned. Otherwise, true is
 * returned.
 */
__weak bool MC_AcknowledgeFaultMotor1(void)
{
  return (MCI_FaultAcknowledged(pMCI[M1]));
 8002560:	4b01      	ldr	r3, [pc, #4]	@ (8002568 <MC_AcknowledgeFaultMotor1+0x8>)
 8002562:	6818      	ldr	r0, [r3, #0]
 8002564:	f000 b8d2 	b.w	800270c <MCI_FaultAcknowledged>
 8002568:	20001c20 	.word	0x20001c20

0800256c <MC_GetOccurredFaultsMotor1>:
 * See @ref fault_codes "Motor Control Faults" for a list of
 * of all possible faults codes.
 */
__weak uint16_t MC_GetOccurredFaultsMotor1(void)
{
  return (MCI_GetOccurredFaults(pMCI[M1]));
 800256c:	4b01      	ldr	r3, [pc, #4]	@ (8002574 <MC_GetOccurredFaultsMotor1+0x8>)
 800256e:	6818      	ldr	r0, [r3, #0]
 8002570:	f000 b896 	b.w	80026a0 <MCI_GetOccurredFaults>
 8002574:	20001c20 	.word	0x20001c20

08002578 <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak MCI_State_t MC_GetSTMStateMotor1(void)
{
  return (MCI_GetSTMState(pMCI[M1]));
 8002578:	4b01      	ldr	r3, [pc, #4]	@ (8002580 <MC_GetSTMStateMotor1+0x8>)
 800257a:	6818      	ldr	r0, [r3, #0]
 800257c:	f000 b88e 	b.w	800269c <MCI_GetSTMState>
 8002580:	20001c20 	.word	0x20001c20

08002584 <MC_ProfilerCommand>:
 * @brief Not implemented MC_Profiler function.
 *  */ //cstat !MISRAC2012-Rule-2.7 !RED-unused-param  !MISRAC2012-Rule-2.7  !MISRAC2012-Rule-8.13
__weak uint8_t MC_ProfilerCommand(uint16_t rxLength, uint8_t *rxBuffer, int16_t txSyncFreeSpace, uint16_t *txLength, uint8_t *txBuffer)
{
  return (MCP_CMD_UNKNOWN);
}
 8002584:	2002      	movs	r0, #2
 8002586:	4770      	bx	lr

08002588 <MC_APP_BootHook>:
   */

/* USER CODE BEGIN BootHook */

/* USER CODE END BootHook */
}
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop

0800258c <MC_APP_PostMediumFrequencyHook_M1>:
 * @brief Hook function called right after the Medium Frequency Task for Motor 1.
 *
 *
 *
 */
__weak void MC_APP_PostMediumFrequencyHook_M1(void)
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop

08002590 <MCI_ExecSpeedRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 8002590:	f04f 0c01 	mov.w	ip, #1
    pHandle->hFinalSpeed = hFinalSpeed;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8002594:	f240 3301 	movw	r3, #769	@ 0x301
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 8002598:	f880 c00c 	strb.w	ip, [r0, #12]
    pHandle->hFinalSpeed = hFinalSpeed;
 800259c:	81c1      	strh	r1, [r0, #14]
    pHandle->hDurationms = hDurationms;
 800259e:	8382      	strh	r2, [r0, #28]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80025a0:	8483      	strh	r3, [r0, #36]	@ 0x24
    pHandle->LastModalitySetByUser = MCM_SPEED_MODE;

#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80025a2:	4770      	bx	lr

080025a4 <MCI_ExecSpeedRamp_F>:
    /* Nothing to do */
  }
  else
  {
#endif
    float_t hFinalSpeed = ((FinalSpeed * (float_t)SPEED_UNIT) / (float_t)U_RPM);
 80025a4:	eddf 7a06 	vldr	s15, [pc, #24]	@ 80025c0 <MCI_ExecSpeedRamp_F+0x1c>
 80025a8:	ee20 0a27 	vmul.f32	s0, s0, s15
{
 80025ac:	b508      	push	{r3, lr}
    MCI_ExecSpeedRamp(pHandle, (int16_t)hFinalSpeed, hDurationms);
 80025ae:	eebd 0ac0 	vcvt.s32.f32	s0, s0
{
 80025b2:	460a      	mov	r2, r1
    MCI_ExecSpeedRamp(pHandle, (int16_t)hFinalSpeed, hDurationms);
 80025b4:	ee10 3a10 	vmov	r3, s0
 80025b8:	b219      	sxth	r1, r3
 80025ba:	f7ff ffe9 	bl	8002590 <MCI_ExecSpeedRamp>
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80025be:	bd08      	pop	{r3, pc}
 80025c0:	3e2aaaab 	.word	0x3e2aaaab

080025c4 <MCI_ExecTorqueRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 80025c4:	f04f 0c02 	mov.w	ip, #2
    pHandle->hFinalTorque = hFinalTorque;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80025c8:	f240 4301 	movw	r3, #1025	@ 0x401
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 80025cc:	f880 c00c 	strb.w	ip, [r0, #12]
    pHandle->hFinalTorque = hFinalTorque;
 80025d0:	8201      	strh	r1, [r0, #16]
    pHandle->hDurationms = hDurationms;
 80025d2:	8382      	strh	r2, [r0, #28]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80025d4:	8483      	strh	r3, [r0, #36]	@ 0x24
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80025d6:	4770      	bx	lr

080025d8 <MCI_ExecTorqueRamp_F>:
    /* Nothing to do */
  }
  else
  {
#endif
    float_t hFinalTorque = (FinalTorque * (float_t)CURRENT_CONV_FACTOR);
 80025d8:	eddf 7a06 	vldr	s15, [pc, #24]	@ 80025f4 <MCI_ExecTorqueRamp_F+0x1c>
 80025dc:	ee20 0a27 	vmul.f32	s0, s0, s15
{
 80025e0:	b508      	push	{r3, lr}
    MCI_ExecTorqueRamp(pHandle, (int16_t)hFinalTorque, hDurationms);
 80025e2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
{
 80025e6:	460a      	mov	r2, r1
    MCI_ExecTorqueRamp(pHandle, (int16_t)hFinalTorque, hDurationms);
 80025e8:	ee10 3a10 	vmov	r3, s0
 80025ec:	b219      	sxth	r1, r3
 80025ee:	f7ff ffe9 	bl	80025c4 <MCI_ExecTorqueRamp>
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80025f2:	bd08      	pop	{r3, pc}
 80025f4:	44468000 	.word	0x44468000

080025f8 <MCI_SetCurrentReferences>:
  * function.

  @sa MCI_SetCurrentReferences_F
  */
__weak void MCI_SetCurrentReferences(MCI_Handle_t *pHandle, qd_t Iqdref)
{
 80025f8:	b082      	sub	sp, #8
  }
  else
  {
#endif

    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 80025fa:	2203      	movs	r2, #3
    pHandle->Iqdref.q = Iqdref.q;
    pHandle->Iqdref.d = Iqdref.d;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80025fc:	f240 4301 	movw	r3, #1025	@ 0x401
    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 8002600:	7302      	strb	r2, [r0, #12]
    pHandle->Iqdref.q = Iqdref.q;
 8002602:	f8c0 1012 	str.w	r1, [r0, #18]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8002606:	8483      	strh	r3, [r0, #36]	@ 0x24
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8002608:	b002      	add	sp, #8
 800260a:	4770      	bx	lr

0800260c <MCI_FaultProcessing>:
  }
  else
  {
#endif
    /* Set current errors */
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 800260c:	8c03      	ldrh	r3, [r0, #32]
    pHandle->PastFaults |= hSetErrors;
 800260e:	f8b0 c022 	ldrh.w	ip, [r0, #34]	@ 0x22
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8002612:	430b      	orrs	r3, r1
 8002614:	ea23 0302 	bic.w	r3, r3, r2
    pHandle->PastFaults |= hSetErrors;
 8002618:	ea41 010c 	orr.w	r1, r1, ip
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 800261c:	8403      	strh	r3, [r0, #32]
    pHandle->PastFaults |= hSetErrors;
 800261e:	8441      	strh	r1, [r0, #34]	@ 0x22
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop

08002624 <MCI_ExecBufferedCommands>:
    /* Nothing to do */
  }
  else
  {
#endif
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8002624:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8002628:	2b01      	cmp	r3, #1
 800262a:	d000      	beq.n	800262e <MCI_ExecBufferedCommands+0xa>
 800262c:	4770      	bx	lr
{
 800262e:	b510      	push	{r4, lr}
    {
      bool commandHasBeenExecuted = false;
      switch (pHandle->lastCommand)
 8002630:	7b02      	ldrb	r2, [r0, #12]
 8002632:	2a02      	cmp	r2, #2
 8002634:	4604      	mov	r4, r0
 8002636:	d021      	beq.n	800267c <MCI_ExecBufferedCommands+0x58>
 8002638:	2a03      	cmp	r2, #3
 800263a:	d014      	beq.n	8002666 <MCI_ExecBufferedCommands+0x42>
 800263c:	2a01      	cmp	r2, #1
 800263e:	d119      	bne.n	8002674 <MCI_ExecBufferedCommands+0x50>
      {
        case MCI_CMD_EXECSPEEDRAMP:
        {
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8002640:	6843      	ldr	r3, [r0, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 8002648:	6800      	ldr	r0, [r0, #0]
 800264a:	2103      	movs	r1, #3
 800264c:	f008 fa16 	bl	800aa7c <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms);
 8002650:	8ba2      	ldrh	r2, [r4, #28]
 8002652:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002656:	6820      	ldr	r0, [r4, #0]
 8002658:	f008 fa14 	bl	800aa84 <STC_ExecRamp>

        default:
          break;
      }

      if (commandHasBeenExecuted)
 800265c:	b150      	cbz	r0, 8002674 <MCI_ExecBufferedCommands+0x50>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESSFULLY;
 800265e:	2302      	movs	r3, #2
 8002660:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      }
    }
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8002664:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8002666:	6842      	ldr	r2, [r0, #4]
 8002668:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 800266c:	f8d0 3012 	ldr.w	r3, [r0, #18]
 8002670:	6113      	str	r3, [r2, #16]
      if (commandHasBeenExecuted)
 8002672:	e7f4      	b.n	800265e <MCI_ExecBufferedCommands+0x3a>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESSFULLY;
 8002674:	2303      	movs	r3, #3
 8002676:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
}
 800267a:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 800267c:	6843      	ldr	r3, [r0, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 8002684:	6800      	ldr	r0, [r0, #0]
 8002686:	2104      	movs	r1, #4
 8002688:	f008 f9f8 	bl	800aa7c <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms);
 800268c:	8ba2      	ldrh	r2, [r4, #28]
 800268e:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8002692:	6820      	ldr	r0, [r4, #0]
 8002694:	f008 f9f6 	bl	800aa84 <STC_ExecRamp>
          break;
 8002698:	e7e0      	b.n	800265c <MCI_ExecBufferedCommands+0x38>
 800269a:	bf00      	nop

0800269c <MCI_GetSTMState>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? FAULT_NOW : pHandle->State);
#else
  return (pHandle->State);
#endif
}
 800269c:	7fc0      	ldrb	r0, [r0, #31]
 800269e:	4770      	bx	lr

080026a0 <MCI_GetOccurredFaults>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->PastFaults);
#else
  return ((uint16_t)pHandle->PastFaults);
#endif
}
 80026a0:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 80026a2:	4770      	bx	lr

080026a4 <MCI_GetCurrentFaults>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->CurrentFaults);
#else
  return ((uint16_t)pHandle->CurrentFaults);
#endif
}
 80026a4:	8c00      	ldrh	r0, [r0, #32]
 80026a6:	4770      	bx	lr

080026a8 <MCI_StartMotor>:
{
 80026a8:	b510      	push	{r4, lr}
 80026aa:	4604      	mov	r4, r0
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 80026ac:	f7ff fff6 	bl	800269c <MCI_GetSTMState>
 80026b0:	b108      	cbz	r0, 80026b6 <MCI_StartMotor+0xe>
  bool retVal = false;
 80026b2:	2000      	movs	r0, #0
}
 80026b4:	bd10      	pop	{r4, pc}
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80026b6:	4620      	mov	r0, r4
 80026b8:	f7ff fff2 	bl	80026a0 <MCI_GetOccurredFaults>
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 80026bc:	2800      	cmp	r0, #0
 80026be:	d1f8      	bne.n	80026b2 <MCI_StartMotor+0xa>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 80026c0:	4620      	mov	r0, r4
 80026c2:	f7ff ffef 	bl	80026a4 <MCI_GetCurrentFaults>
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80026c6:	2800      	cmp	r0, #0
 80026c8:	d1f3      	bne.n	80026b2 <MCI_StartMotor+0xa>
      pHandle->DirectCommand = MCI_START;
 80026ca:	2001      	movs	r0, #1
 80026cc:	77a0      	strb	r0, [r4, #30]
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80026ce:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
}
 80026d2:	bd10      	pop	{r4, pc}

080026d4 <MCI_StopMotor>:
{
 80026d4:	b538      	push	{r3, r4, r5, lr}
 80026d6:	4605      	mov	r5, r0
    State = MCI_GetSTMState(pHandle);
 80026d8:	f7ff ffe0 	bl	800269c <MCI_GetSTMState>
    if ((IDLE == State) || (ICLWAIT == State))
 80026dc:	4604      	mov	r4, r0
 80026de:	b118      	cbz	r0, 80026e8 <MCI_StopMotor+0x14>
 80026e0:	f1b0 040c 	subs.w	r4, r0, #12
 80026e4:	bf18      	it	ne
 80026e6:	2401      	movne	r4, #1
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80026e8:	4628      	mov	r0, r5
 80026ea:	f7ff ffd9 	bl	80026a0 <MCI_GetOccurredFaults>
 80026ee:	b110      	cbz	r0, 80026f6 <MCI_StopMotor+0x22>
  bool retVal = false;
 80026f0:	2400      	movs	r4, #0
}
 80026f2:	4620      	mov	r0, r4
 80026f4:	bd38      	pop	{r3, r4, r5, pc}
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 80026f6:	4628      	mov	r0, r5
 80026f8:	f7ff ffd4 	bl	80026a4 <MCI_GetCurrentFaults>
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80026fc:	2800      	cmp	r0, #0
 80026fe:	d1f7      	bne.n	80026f0 <MCI_StopMotor+0x1c>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8002700:	2c00      	cmp	r4, #0
 8002702:	d0f5      	beq.n	80026f0 <MCI_StopMotor+0x1c>
      pHandle->DirectCommand = MCI_STOP;
 8002704:	2305      	movs	r3, #5
 8002706:	77ab      	strb	r3, [r5, #30]
      retVal = true;
 8002708:	e7f3      	b.n	80026f2 <MCI_StopMotor+0x1e>
 800270a:	bf00      	nop

0800270c <MCI_FaultAcknowledged>:
{
 800270c:	b510      	push	{r4, lr}
 800270e:	4604      	mov	r4, r0
    if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8002710:	f7ff ffc4 	bl	800269c <MCI_GetSTMState>
 8002714:	280b      	cmp	r0, #11
 8002716:	d001      	beq.n	800271c <MCI_FaultAcknowledged+0x10>
  bool reVal = false;
 8002718:	2000      	movs	r0, #0
}
 800271a:	bd10      	pop	{r4, pc}
    if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 800271c:	4620      	mov	r0, r4
 800271e:	f7ff ffc1 	bl	80026a4 <MCI_GetCurrentFaults>
 8002722:	2800      	cmp	r0, #0
 8002724:	d1f8      	bne.n	8002718 <MCI_FaultAcknowledged+0xc>
      pHandle->DirectCommand = MCI_ACK_FAULTS;
 8002726:	2302      	movs	r3, #2
 8002728:	77a3      	strb	r3, [r4, #30]
      pHandle->PastFaults = MC_NO_FAULTS;
 800272a:	8460      	strh	r0, [r4, #34]	@ 0x22
      reVal = true;
 800272c:	2001      	movs	r0, #1
}
 800272e:	bd10      	pop	{r4, pc}

08002730 <MCI_GetFaultState>:
    LocalFaultState = MC_SW_ERROR | (MC_SW_ERROR << 16);
  }
  else
  {
#endif
    LocalFaultState = (uint32_t)(pHandle->PastFaults);
 8002730:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
    LocalFaultState |= (uint32_t)(pHandle->CurrentFaults) << 16;
 8002732:	8c00      	ldrh	r0, [r0, #32]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (LocalFaultState);
}
 8002734:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop

0800273c <MCI_GetControlMode>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MCM_TORQUE_MODE : pHandle->LastModalitySetByUser);
#else
  return (pHandle->LastModalitySetByUser);
#endif
}
 800273c:	f890 0025 	ldrb.w	r0, [r0, #37]	@ 0x25
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop

08002744 <MCI_GetLastRampFinalSpeed>:
  }
  return (retVal);
#else
  return (pHandle->hFinalSpeed);
#endif
}
 8002744:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop

0800274c <MCI_GetLastRampFinalTorque>:
  }
  return (retVal);
#else
  return (pHandle->hFinalTorque);
#endif
}
 800274c:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop

08002754 <MCI_GetLastRampFinalDuration>:
  }
  return (retVal);
#else
  return (pHandle->hDurationms);
#endif
}
 8002754:	8b80      	ldrh	r0, [r0, #28]
 8002756:	4770      	bx	lr

08002758 <MCI_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    STC_StopRamp(pHandle->pSTC);
 8002758:	6803      	ldr	r3, [r0, #0]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->RampRemainingStep = 0U;
 800275a:	2200      	movs	r2, #0
 800275c:	60da      	str	r2, [r3, #12]
    pHandle->IncDecAmount = 0;
 800275e:	619a      	str	r2, [r3, #24]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop

08002764 <MCI_GetAvrgMecSpeedUnit>:
static inline SpeednPosFdbk_Handle_t *STC_GetSpeedSensor(SpeednTorqCtrl_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  return ((MC_NULL ==  pHandle) ? MC_NULL : pHandle->SPD);
#else
  return (pHandle->SPD);
 8002764:	6803      	ldr	r3, [r0, #0]
  }
  else
  {
#endif
    SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
 8002766:	6958      	ldr	r0, [r3, #20]
 8002768:	f008 b922 	b.w	800a9b0 <SPD_GetAvrgMecSpeedUnit>

0800276c <MCI_GetAvrgMecSpeed_F>:
  * @brief  Returns the last computed average mechanical speed, expressed in rpm
  *         and related to the sensor actually used by FOC algorithm.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak float_t MCI_GetAvrgMecSpeed_F(MCI_Handle_t *pHandle)
{
 800276c:	b508      	push	{r3, lr}
 800276e:	6803      	ldr	r3, [r0, #0]
  }
  else
  {
#endif
    SpeednPosFdbk_Handle_t *SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
    returnAvrgSpeed = (((float_t)SPD_GetAvrgMecSpeedUnit(SpeedSensor) * (float_t)U_RPM) / (float_t)SPEED_UNIT);
 8002770:	6958      	ldr	r0, [r3, #20]
 8002772:	f008 f91d 	bl	800a9b0 <SPD_GetAvrgMecSpeedUnit>
 8002776:	ee07 0a90 	vmov	s15, r0
 800277a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800277e:	eeb1 0a08 	vmov.f32	s0, #24	@ 0x40c00000  6.0
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (returnAvrgSpeed);
}
 8002782:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002786:	bd08      	pop	{r3, pc}

08002788 <MCI_GetMecSpeedRefUnit>:
__weak int16_t MCI_GetMecSpeedRefUnit(MCI_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? 0 : STC_GetMecSpeedRefUnit(pHandle->pSTC));
#else
  return (STC_GetMecSpeedRefUnit(pHandle->pSTC));
 8002788:	6800      	ldr	r0, [r0, #0]
 800278a:	f008 b973 	b.w	800aa74 <STC_GetMecSpeedRefUnit>
 800278e:	bf00      	nop

08002790 <MCI_GetIab>:
  {
    tempVal = pHandle->pFOCVars->Iab;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iab);
 8002790:	6843      	ldr	r3, [r0, #4]
 8002792:	6818      	ldr	r0, [r3, #0]
 8002794:	b283      	uxth	r3, r0
 8002796:	f36f 000f 	bfc	r0, #0, #16
{
 800279a:	b082      	sub	sp, #8
#endif
}
 800279c:	4318      	orrs	r0, r3
 800279e:	b002      	add	sp, #8
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop

080027a4 <MCI_GetIalphabeta>:
  {
    tempVal = pHandle->pFOCVars->Ialphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Ialphabeta);
 80027a4:	6843      	ldr	r3, [r0, #4]
 80027a6:	6858      	ldr	r0, [r3, #4]
 80027a8:	b283      	uxth	r3, r0
 80027aa:	f36f 000f 	bfc	r0, #0, #16
{
 80027ae:	b082      	sub	sp, #8
#endif
}
 80027b0:	4318      	orrs	r0, r3
 80027b2:	b002      	add	sp, #8
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop

080027b8 <MCI_GetIqd>:
  {
    tempVal = pHandle->pFOCVars->Iqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqd);
 80027b8:	6843      	ldr	r3, [r0, #4]
 80027ba:	68d8      	ldr	r0, [r3, #12]
 80027bc:	b283      	uxth	r3, r0
 80027be:	f36f 000f 	bfc	r0, #0, #16
{
 80027c2:	b082      	sub	sp, #8
#endif
}
 80027c4:	4318      	orrs	r0, r3
 80027c6:	b002      	add	sp, #8
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop

080027cc <MCI_GetIqdref>:
  {
    tempVal = pHandle->pFOCVars->Iqdref;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqdref);
 80027cc:	6843      	ldr	r3, [r0, #4]
 80027ce:	6918      	ldr	r0, [r3, #16]
 80027d0:	b283      	uxth	r3, r0
 80027d2:	f36f 000f 	bfc	r0, #0, #16
{
 80027d6:	b082      	sub	sp, #8
#endif
}
 80027d8:	4318      	orrs	r0, r3
 80027da:	b002      	add	sp, #8
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop

080027e0 <MCI_GetVqd>:
  {
    tempVal = pHandle->pFOCVars->Vqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Vqd);
 80027e0:	6843      	ldr	r3, [r0, #4]
 80027e2:	f8d3 0016 	ldr.w	r0, [r3, #22]
 80027e6:	b283      	uxth	r3, r0
 80027e8:	f36f 000f 	bfc	r0, #0, #16
{
 80027ec:	b082      	sub	sp, #8
#endif
}
 80027ee:	4318      	orrs	r0, r3
 80027f0:	b002      	add	sp, #8
 80027f2:	4770      	bx	lr

080027f4 <MCI_GetValphabeta>:
  {
    tempVal = pHandle->pFOCVars->Valphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Valphabeta);
 80027f4:	6843      	ldr	r3, [r0, #4]
 80027f6:	f8d3 001a 	ldr.w	r0, [r3, #26]
 80027fa:	b283      	uxth	r3, r0
 80027fc:	f36f 000f 	bfc	r0, #0, #16
{
 8002800:	b082      	sub	sp, #8
#endif
}
 8002802:	4318      	orrs	r0, r3
 8002804:	b002      	add	sp, #8
 8002806:	4770      	bx	lr

08002808 <MCI_GetTeref>:
__weak int16_t MCI_GetTeref(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? 0 : pHandle->pFOCVars->hTeref);
#else
  return (pHandle->pFOCVars->hTeref);
 8002808:	6843      	ldr	r3, [r0, #4]
#endif
}
 800280a:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 800280e:	4770      	bx	lr

08002810 <MCI_Clear_Iqdref>:
/**
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_Clear_Iqdref(MCI_Handle_t *pHandle)
{
 8002810:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref(pHandle->pSTC);
 8002812:	e9d0 0400 	ldrd	r0, r4, [r0]
 8002816:	f008 f9b7 	bl	800ab88 <STC_GetDefaultIqdref>
 800281a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800281e:	8220      	strh	r0, [r4, #16]
 8002820:	8263      	strh	r3, [r4, #18]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8002822:	bd10      	pop	{r4, pc}

08002824 <MCI_Clear_PerfMeasure>:
    /* Nothing to do */
  }
  else
  {
#endif
    MC_Perf_Clear(pHandle->pPerfMeasure,bMotor);
 8002824:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8002826:	f000 b8cd 	b.w	80029c4 <MC_Perf_Clear>
 800282a:	bf00      	nop

0800282c <MCM_Clarke>:
  *                       beta = -(2*b+a)/sqrt(3)
  * @param  Input: stator values a and b in ab_t format.
  * @retval Stator values alpha and beta in alphabeta_t format.
  */
__weak alphabeta_t MCM_Clarke(ab_t Input)
{
 800282c:	f3c0 430f 	ubfx	r3, r0, #16, #16
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.a);

  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 8002830:	f644 11e6 	movw	r1, #18918	@ 0x49e6
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 8002834:	f24b 621a 	movw	r2, #46618	@ 0xb61a
  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 8002838:	fb13 f301 	smulbb	r3, r3, r1
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 800283c:	fb10 f202 	smulbb	r2, r0, r2
 8002840:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
#else
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) / 32768;
#endif

  /* Check saturation of Ibeta */
  if (wbeta_tmp > INT16_MAX)
 8002844:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
{
 8002848:	b084      	sub	sp, #16
 800284a:	b203      	sxth	r3, r0
  if (wbeta_tmp > INT16_MAX)
 800284c:	da05      	bge.n	800285a <MCM_Clarke+0x2e>
 800284e:	13d1      	asrs	r1, r2, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if (wbeta_tmp < (-32768))
 8002850:	f511 4f00 	cmn.w	r1, #32768	@ 0x8000
 8002854:	da0c      	bge.n	8002870 <MCM_Clarke+0x44>
 8002856:	4a09      	ldr	r2, [pc, #36]	@ (800287c <MCM_Clarke+0x50>)
 8002858:	e001      	b.n	800285e <MCM_Clarke+0x32>
 800285a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
  else
  {
    /* Nothing to do */
  }

  return (Output);
 800285e:	b29b      	uxth	r3, r3
 8002860:	2000      	movs	r0, #0
 8002862:	f363 000f 	bfi	r0, r3, #0, #16
 8002866:	b293      	uxth	r3, r2
 8002868:	f363 401f 	bfi	r0, r3, #16, #16
}
 800286c:	b004      	add	sp, #16
 800286e:	4770      	bx	lr
    hbeta_tmp = ((int16_t)wbeta_tmp);
 8002870:	4802      	ldr	r0, [pc, #8]	@ (800287c <MCM_Clarke+0x50>)
 8002872:	b20a      	sxth	r2, r1
 8002874:	4282      	cmp	r2, r0
 8002876:	bfb8      	it	lt
 8002878:	4602      	movlt	r2, r0
 800287a:	e7f0      	b.n	800285e <MCM_Clarke+0x32>
 800287c:	ffff8001 	.word	0xffff8001

08002880 <MCM_Trig_Functions>:
  } CosSin;
  //cstat +MISRAC2012-Rule-19.2
  /* Configure CORDIC */
  /* Misra  violation Rule 11.4 A�Conversion�should�not�be�performed�between�a�
   * pointer�to�object and an integer type */
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 8002880:	4b06      	ldr	r3, [pc, #24]	@ (800289c <MCM_Trig_Functions+0x1c>)
  /* Misra  violation Rule�11.4 A�Conversion�should�not�be�performed�between�a
   * pointer�to�object and an integer type */
  LL_CORDIC_WriteData(CORDIC, ((uint32_t)0x7FFF0000) + ((uint32_t)hAngle));
 8002882:	f100 40ff 	add.w	r0, r0, #2139095040	@ 0x7f800000
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 8002886:	f04f 1260 	mov.w	r2, #6291552	@ 0x600060
  LL_CORDIC_WriteData(CORDIC, ((uint32_t)0x7FFF0000) + ((uint32_t)hAngle));
 800288a:	f500 00fe 	add.w	r0, r0, #8323072	@ 0x7f0000
{
 800288e:	b082      	sub	sp, #8
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 8002890:	601a      	str	r2, [r3, #0]
  * @param  InData 0 .. 0xFFFFFFFF : 32-bit value to be provided as input data for CORDIC processing.
  * @retval None
  */
__STATIC_INLINE void LL_CORDIC_WriteData(CORDIC_TypeDef *CORDICx, uint32_t InData)
{
  WRITE_REG(CORDICx->WDATA, InData);
 8002892:	6058      	str	r0, [r3, #4]
  * @param  CORDICx CORDIC Instance
  * @retval 32-bit output data of CORDIC processing.
  */
__STATIC_INLINE uint32_t LL_CORDIC_ReadData(const CORDIC_TypeDef *CORDICx)
{
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 8002894:	6898      	ldr	r0, [r3, #8]
  /* Read angle */
  /* Misra  violation Rule�11.4 A�Conversion�should�not�be�performed between�a
   * pointer�to object and an integer type */
  CosSin.CordicRdata = LL_CORDIC_ReadData(CORDIC);
  return (CosSin.Components); //cstat !UNION-type-punning
}
 8002896:	b002      	add	sp, #8
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	40020c00 	.word	0x40020c00

080028a0 <MCM_Park>:
{
 80028a0:	b530      	push	{r4, r5, lr}
 80028a2:	4605      	mov	r5, r0
 80028a4:	4604      	mov	r4, r0
 80028a6:	b085      	sub	sp, #20
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 80028a8:	4608      	mov	r0, r1
 80028aa:	f7ff ffe9 	bl	8002880 <MCM_Trig_Functions>
 80028ae:	b22d      	sxth	r5, r5
 80028b0:	b201      	sxth	r1, r0
 80028b2:	1424      	asrs	r4, r4, #16
 80028b4:	1400      	asrs	r0, r0, #16
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 80028b6:	fb05 f301 	mul.w	r3, r5, r1
  wqd_tmp = (q_tmp_1 - q_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80028ba:	fb04 3310 	mls	r3, r4, r0, r3
  if (wqd_tmp > INT16_MAX)
 80028be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028c2:	da05      	bge.n	80028d0 <MCM_Park+0x30>
 80028c4:	13da      	asrs	r2, r3, #15
  else if (wqd_tmp < (-32768))
 80028c6:	f512 4f00 	cmn.w	r2, #32768	@ 0x8000
 80028ca:	da22      	bge.n	8002912 <MCM_Park+0x72>
 80028cc:	4a14      	ldr	r2, [pc, #80]	@ (8002920 <MCM_Park+0x80>)
 80028ce:	e001      	b.n	80028d4 <MCM_Park+0x34>
 80028d0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
  d_tmp_2 = Input.beta * ((int32_t )Local_Vector_Components.hCos);
 80028d4:	fb01 f404 	mul.w	r4, r1, r4
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80028d8:	fb05 4400 	mla	r4, r5, r0, r4
  if (wqd_tmp > INT16_MAX)
 80028dc:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80028e0:	ea4f 33e4 	mov.w	r3, r4, asr #15
  if (wqd_tmp > INT16_MAX)
 80028e4:	da04      	bge.n	80028f0 <MCM_Park+0x50>
  else if (wqd_tmp < (-32768))
 80028e6:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80028ea:	da0c      	bge.n	8002906 <MCM_Park+0x66>
 80028ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002920 <MCM_Park+0x80>)
 80028ee:	e001      	b.n	80028f4 <MCM_Park+0x54>
 80028f0:	f647 73ff 	movw	r3, #32767	@ 0x7fff
  return (Output);
 80028f4:	b292      	uxth	r2, r2
 80028f6:	2000      	movs	r0, #0
 80028f8:	f362 000f 	bfi	r0, r2, #0, #16
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	f363 401f 	bfi	r0, r3, #16, #16
}
 8002902:	b005      	add	sp, #20
 8002904:	bd30      	pop	{r4, r5, pc}
    hqd_tmp = ((int16_t)wqd_tmp);
 8002906:	4906      	ldr	r1, [pc, #24]	@ (8002920 <MCM_Park+0x80>)
 8002908:	b21b      	sxth	r3, r3
 800290a:	428b      	cmp	r3, r1
 800290c:	bfb8      	it	lt
 800290e:	460b      	movlt	r3, r1
 8002910:	e7f0      	b.n	80028f4 <MCM_Park+0x54>
    hqd_tmp = ((int16_t)wqd_tmp);
 8002912:	4b03      	ldr	r3, [pc, #12]	@ (8002920 <MCM_Park+0x80>)
 8002914:	b212      	sxth	r2, r2
 8002916:	429a      	cmp	r2, r3
 8002918:	bfb8      	it	lt
 800291a:	461a      	movlt	r2, r3
 800291c:	e7da      	b.n	80028d4 <MCM_Park+0x34>
 800291e:	bf00      	nop
 8002920:	ffff8001 	.word	0xffff8001

08002924 <MCM_Rev_Park>:
{
 8002924:	b530      	push	{r4, r5, lr}
 8002926:	4605      	mov	r5, r0
 8002928:	b085      	sub	sp, #20
 800292a:	4604      	mov	r4, r0
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 800292c:	4608      	mov	r0, r1
 800292e:	f7ff ffa7 	bl	8002880 <MCM_Trig_Functions>
 8002932:	1424      	asrs	r4, r4, #16
 8002934:	1402      	asrs	r2, r0, #16
 8002936:	b22d      	sxth	r5, r5
 8002938:	b200      	sxth	r0, r0
  alpha_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hSin);
 800293a:	fb04 f302 	mul.w	r3, r4, r2
  Output.alpha = (int16_t)(((alpha_tmp1) + (alpha_tmp2)) >> 15);
 800293e:	fb05 3300 	mla	r3, r5, r0, r3
  beta_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hCos);
 8002942:	fb00 f404 	mul.w	r4, r0, r4
  Output.beta = (int16_t)((beta_tmp2 - beta_tmp1) >> 15);
 8002946:	fb05 4412 	mls	r4, r5, r2, r4
  return (Output);
 800294a:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 800294e:	2000      	movs	r0, #0
 8002950:	f363 000f 	bfi	r0, r3, #0, #16
 8002954:	f3c4 34cf 	ubfx	r4, r4, #15, #16
 8002958:	f364 401f 	bfi	r0, r4, #16, #16
}
 800295c:	b005      	add	sp, #20
 800295e:	bd30      	pop	{r4, r5, pc}

08002960 <MCM_Sqrt>:
  */
__weak int32_t MCM_Sqrt(int32_t wInput)
{
  int32_t wtemprootnew;

  if (wInput > 0)
 8002960:	2800      	cmp	r0, #0
 8002962:	dd09      	ble.n	8002978 <MCM_Sqrt+0x18>
 8002964:	b672      	cpsid	i
  {
    uint32_t retVal;
    /* Disable Irq as sqrt is used in MF and HF task */
    __disable_irq();
    /* Configure CORDIC */
    WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_SQRT);
 8002966:	4b05      	ldr	r3, [pc, #20]	@ (800297c <MCM_Sqrt+0x1c>)
 8002968:	f240 1269 	movw	r2, #361	@ 0x169
 800296c:	601a      	str	r2, [r3, #0]
  WRITE_REG(CORDICx->WDATA, InData);
 800296e:	6058      	str	r0, [r3, #4]
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 8002970:	6898      	ldr	r0, [r3, #8]
    LL_CORDIC_WriteData(CORDIC, ((uint32_t)wInput));
    /* Read sqrt and return */
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
    retVal = (LL_CORDIC_ReadData(CORDIC)) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8002972:	0bc0      	lsrs	r0, r0, #15
  __ASM volatile ("cpsie i" : : : "memory");
 8002974:	b662      	cpsie	i
}
 8002976:	4770      	bx	lr
    __enable_irq();

  }
  else
  {
    wtemprootnew = (int32_t)0;
 8002978:	2000      	movs	r0, #0
  }

  return (wtemprootnew);
}
 800297a:	4770      	bx	lr
 800297c:	40020c00 	.word	0x40020c00

08002980 <MC_Perf_Measure_Init>:
#endif
  uint8_t  i;
  Perf_Handle_t  *pHdl;

  /* Set Debug mod for DWT IP Enabling */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002980:	490e      	ldr	r1, [pc, #56]	@ (80029bc <MC_Perf_Measure_Init+0x3c>)

  if (DWT->CTRL != 0U)
 8002982:	4a0f      	ldr	r2, [pc, #60]	@ (80029c0 <MC_Perf_Measure_Init+0x40>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002984:	f8d1 30fc 	ldr.w	r3, [r1, #252]	@ 0xfc
 8002988:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800298c:	f8c1 30fc 	str.w	r3, [r1, #252]	@ 0xfc
  if (DWT->CTRL != 0U)
 8002990:	6813      	ldr	r3, [r2, #0]
 8002992:	b12b      	cbz	r3, 80029a0 <MC_Perf_Measure_Init+0x20>
  {                                        /* Check if DWT is present. */
    DWT->CYCCNT  = 0;
 8002994:	2300      	movs	r3, #0
 8002996:	6053      	str	r3, [r2, #4]
    DWT->CTRL   |= DWT_CTRL_CYCCNTENA_Msk; /* Enable Cycle Counter. */
 8002998:	6813      	ldr	r3, [r2, #0]
 800299a:	f043 0301 	orr.w	r3, r3, #1
 800299e:	6013      	str	r3, [r2, #0]
    {
      pHdl = &pHandle->MC_Perf_TraceLog[i];
      pHdl->StartMeasure = 0;
      pHdl->DeltaTimeInCycle = 0;
      pHdl->min = UINT32_MAX;
      pHdl->max = 0;
 80029a0:	2300      	movs	r3, #0
    }
    pHandle->BG_Task_OnGoing = false;
    pHandle->AccHighFreqTasksCnt = 0;
 80029a2:	f04f 32ff 	mov.w	r2, #4294967295
 80029a6:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80029aa:	e9c0 3203 	strd	r3, r2, [r0, #12]
 80029ae:	e9c0 3305 	strd	r3, r3, [r0, #20]
 80029b2:	e9c0 3207 	strd	r3, r2, [r0, #28]
      pHdl->max = 0;
 80029b6:	6243      	str	r3, [r0, #36]	@ 0x24
    pHandle->BG_Task_OnGoing = false;
 80029b8:	7003      	strb	r3, [r0, #0]
#ifdef NULL_PTR_CHECK_MC_PERF
  }
#endif
}
 80029ba:	4770      	bx	lr
 80029bc:	e000ed00 	.word	0xe000ed00
 80029c0:	e0001000 	.word	0xe0001000

080029c4 <MC_Perf_Clear>:
    Perf_Handle_t  *pHdl;

    for (i = 0U; i < 2; i++)
    {
      pHdl = &pHandle->MC_Perf_TraceLog[2*bMotor+i];
      pHdl->DeltaTimeInCycle = 0;
 80029c4:	014b      	lsls	r3, r1, #5
 80029c6:	f103 0208 	add.w	r2, r3, #8
 80029ca:	eb00 1141 	add.w	r1, r0, r1, lsl #5
{
 80029ce:	b410      	push	{r4}
      pHdl->DeltaTimeInCycle = 0;
 80029d0:	2300      	movs	r3, #0
 80029d2:	f04f 34ff 	mov.w	r4, #4294967295
 80029d6:	4402      	add	r2, r0
 80029d8:	e9c2 3401 	strd	r3, r4, [r2, #4]
 80029dc:	e9c1 3407 	strd	r3, r4, [r1, #28]
      pHdl->min = UINT32_MAX;
      pHdl->max = 0;
 80029e0:	614b      	str	r3, [r1, #20]
    }
#ifdef NULL_PTR_CHECK_MC_PERF
  }
#endif
}
 80029e2:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHdl->max = 0;
 80029e6:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop

080029ec <MC_BG_Perf_Measure_Start>:
  }
  else
  {
#endif
    pHandle->BG_Task_OnGoing = true;
    pHandle->AccHighFreqTasksCnt = 0;
 80029ec:	2200      	movs	r2, #0
    uint32_t StartMeasure = DWT->CYCCNT;
 80029ee:	4b04      	ldr	r3, [pc, #16]	@ (8002a00 <MC_BG_Perf_Measure_Start+0x14>)
    pHandle->AccHighFreqTasksCnt = 0;
 80029f0:	6042      	str	r2, [r0, #4]
    pHandle->MC_Perf_TraceLog[CodeSection].StartMeasure = StartMeasure;
 80029f2:	eb00 1101 	add.w	r1, r0, r1, lsl #4
    uint32_t StartMeasure = DWT->CYCCNT;
 80029f6:	685b      	ldr	r3, [r3, #4]
    pHandle->BG_Task_OnGoing = true;
 80029f8:	2201      	movs	r2, #1
 80029fa:	7002      	strb	r2, [r0, #0]
    pHandle->MC_Perf_TraceLog[CodeSection].StartMeasure = StartMeasure;
 80029fc:	608b      	str	r3, [r1, #8]
#ifdef NULL_PTR_CHECK_MC_PERF
  }
#endif
}
 80029fe:	4770      	bx	lr
 8002a00:	e0001000 	.word	0xe0001000

08002a04 <MC_Perf_Measure_Stop>:
  {
#endif
    uint32_t StopMeasure;
    Perf_Handle_t *pHdl;

    StopMeasure = DWT->CYCCNT;
 8002a04:	4a0f      	ldr	r2, [pc, #60]	@ (8002a44 <MC_Perf_Measure_Stop+0x40>)
    pHdl = &pHandle->MC_Perf_TraceLog[CodeSection];

    /* Check Overflow cases */
    if (StopMeasure < pHdl->StartMeasure)
 8002a06:	eb00 1301 	add.w	r3, r0, r1, lsl #4
{
 8002a0a:	b410      	push	{r4}
    if (StopMeasure < pHdl->StartMeasure)
 8002a0c:	689b      	ldr	r3, [r3, #8]
    StopMeasure = DWT->CYCCNT;
 8002a0e:	6854      	ldr	r4, [r2, #4]
    if (StopMeasure < pHdl->StartMeasure)
 8002a10:	42a3      	cmp	r3, r4
    {
      pHdl->DeltaTimeInCycle = (UINT32_MAX - pHdl->StartMeasure) + StopMeasure;
 8002a12:	bf88      	it	hi
 8002a14:	f104 34ff 	addhi.w	r4, r4, #4294967295
    if (StopMeasure < pHdl->StartMeasure)
 8002a18:	010a      	lsls	r2, r1, #4
    }
    else
    {
      pHdl->DeltaTimeInCycle = StopMeasure - pHdl->StartMeasure;
 8002a1a:	1ae3      	subs	r3, r4, r3
 8002a1c:	4402      	add	r2, r0
    }

    if(pHandle->BG_Task_OnGoing)
 8002a1e:	7804      	ldrb	r4, [r0, #0]
 8002a20:	60d3      	str	r3, [r2, #12]
 8002a22:	b114      	cbz	r4, 8002a2a <MC_Perf_Measure_Stop+0x26>
    {
      pHandle->AccHighFreqTasksCnt += pHdl->DeltaTimeInCycle;
 8002a24:	6842      	ldr	r2, [r0, #4]
 8002a26:	441a      	add	r2, r3
 8002a28:	6042      	str	r2, [r0, #4]
    else
    {
      /* Nothing to do */
    }

    if (pHdl->max < pHdl->DeltaTimeInCycle)
 8002a2a:	eb00 1001 	add.w	r0, r0, r1, lsl #4
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_MC_PERF
  }
#endif
}
 8002a2e:	f85d 4b04 	ldr.w	r4, [sp], #4
    if (pHdl->max < pHdl->DeltaTimeInCycle)
 8002a32:	6942      	ldr	r2, [r0, #20]
 8002a34:	429a      	cmp	r2, r3
    if (pHdl->min > pHdl->DeltaTimeInCycle)
 8002a36:	6902      	ldr	r2, [r0, #16]
      pHdl->max = pHdl->DeltaTimeInCycle;
 8002a38:	bf38      	it	cc
 8002a3a:	6143      	strcc	r3, [r0, #20]
    if (pHdl->min > pHdl->DeltaTimeInCycle)
 8002a3c:	429a      	cmp	r2, r3
      pHdl->min = pHdl->DeltaTimeInCycle;
 8002a3e:	bf88      	it	hi
 8002a40:	6103      	strhi	r3, [r0, #16]
}
 8002a42:	4770      	bx	lr
 8002a44:	e0001000 	.word	0xe0001000

08002a48 <MC_BG_Perf_Measure_Stop>:
  }
  else
  {
#endif
    Perf_Handle_t *pHdl;
    uint32_t StopMeasure = DWT->CYCCNT;
 8002a48:	4a11      	ldr	r2, [pc, #68]	@ (8002a90 <MC_BG_Perf_Measure_Stop+0x48>)
    pHandle->BG_Task_OnGoing = false;

    pHdl  = &pHandle->MC_Perf_TraceLog[CodeSection];

    /* Check Overflow cases */
    if (StopMeasure < pHdl->StartMeasure)
 8002a4a:	eb00 1301 	add.w	r3, r0, r1, lsl #4
{
 8002a4e:	b410      	push	{r4}
    if (StopMeasure < pHdl->StartMeasure)
 8002a50:	689b      	ldr	r3, [r3, #8]
    uint32_t StopMeasure = DWT->CYCCNT;
 8002a52:	6854      	ldr	r4, [r2, #4]
    pHandle->BG_Task_OnGoing = false;
 8002a54:	2200      	movs	r2, #0
 8002a56:	7002      	strb	r2, [r0, #0]
    if (StopMeasure < pHdl->StartMeasure)
 8002a58:	42a3      	cmp	r3, r4
 8002a5a:	ea4f 1201 	mov.w	r2, r1, lsl #4
 8002a5e:	4402      	add	r2, r0
    {
      pHdl->DeltaTimeInCycle = (UINT32_MAX - pHdl->StartMeasure) + StopMeasure;
 8002a60:	bf88      	it	hi
 8002a62:	f104 34ff 	addhi.w	r4, r4, #4294967295
    }
    else
    {
      pHdl->DeltaTimeInCycle = StopMeasure - pHdl->StartMeasure;
 8002a66:	1ae3      	subs	r3, r4, r3
 8002a68:	60d3      	str	r3, [r2, #12]
    }

    if (pHdl->DeltaTimeInCycle > pHandle->AccHighFreqTasksCnt)
 8002a6a:	6844      	ldr	r4, [r0, #4]
 8002a6c:	429c      	cmp	r4, r3
    {
      pHdl->DeltaTimeInCycle -= pHandle->AccHighFreqTasksCnt;
 8002a6e:	bf38      	it	cc
 8002a70:	1b1b      	subcc	r3, r3, r4
 8002a72:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 8002a76:	bf38      	it	cc
 8002a78:	60d3      	strcc	r3, [r2, #12]
    }
    else
    {
      /* Nothing to do */
    }
    if (pHdl->max < pHdl->DeltaTimeInCycle)
 8002a7a:	6942      	ldr	r2, [r0, #20]
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_MC_PERF
  }
#endif
}
 8002a7c:	f85d 4b04 	ldr.w	r4, [sp], #4
    if (pHdl->max < pHdl->DeltaTimeInCycle)
 8002a80:	4293      	cmp	r3, r2
    if (pHdl->min > pHdl->DeltaTimeInCycle)
 8002a82:	6902      	ldr	r2, [r0, #16]
      pHdl->max = pHdl->DeltaTimeInCycle;
 8002a84:	bf88      	it	hi
 8002a86:	6143      	strhi	r3, [r0, #20]
    if (pHdl->min > pHdl->DeltaTimeInCycle)
 8002a88:	4293      	cmp	r3, r2
      pHdl->min = pHdl->DeltaTimeInCycle;
 8002a8a:	bf38      	it	cc
 8002a8c:	6103      	strcc	r3, [r0, #16]
}
 8002a8e:	4770      	bx	lr
 8002a90:	e0001000 	.word	0xe0001000

08002a94 <MC_Perf_GetCPU_Load>:
    float_t MFT_cpu_loadM1;
    float_t HFT_cpu_loadM1;

    MFT_cpu_loadM1 = (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_MediumFrequencyTaskM1].DeltaTimeInCycle\
                   / (float_t)SYSCLK_FREQ ) * (float_t)MEDIUM_FREQUENCY_TASK_RATE);
    HFT_cpu_loadM1 = (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_HighFrequencyTaskM1].DeltaTimeInCycle\
 8002a94:	edd0 7a03 	vldr	s15, [r0, #12]
 8002a98:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8002ad0 <MC_Perf_GetCPU_Load+0x3c>
    MFT_cpu_loadM1 = (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_MediumFrequencyTaskM1].DeltaTimeInCycle\
 8002a9c:	ed90 7a07 	vldr	s14, [r0, #28]
                   / (float_t)SYSCLK_FREQ ) * (float_t)(PWM_FREQUENCY/REGULATION_EXECUTION_RATE));

    cpuLoad = MFT_cpu_loadM1 + HFT_cpu_loadM1;
 8002aa0:	ed9f 6a0c 	vldr	s12, [pc, #48]	@ 8002ad4 <MC_Perf_GetCPU_Load+0x40>

    cpuLoad = (cpuLoad > 1.0f) ? 1.0f : cpuLoad;
    cpuLoad *= 100.0f;
 8002aa4:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8002ad8 <MC_Perf_GetCPU_Load+0x44>
    HFT_cpu_loadM1 = (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_HighFrequencyTaskM1].DeltaTimeInCycle\
 8002aa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
    MFT_cpu_loadM1 = (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_MediumFrequencyTaskM1].DeltaTimeInCycle\
 8002aac:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    HFT_cpu_loadM1 = (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_HighFrequencyTaskM1].DeltaTimeInCycle\
 8002ab0:	ee67 7aa6 	vmul.f32	s15, s15, s13
    cpuLoad = (cpuLoad > 1.0f) ? 1.0f : cpuLoad;
 8002ab4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
    cpuLoad = MFT_cpu_loadM1 + HFT_cpu_loadM1;
 8002ab8:	eee7 7a06 	vfma.f32	s15, s14, s12
    cpuLoad = (cpuLoad > 1.0f) ? 1.0f : cpuLoad;
 8002abc:	eef4 7ae6 	vcmpe.f32	s15, s13
 8002ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ac4:	bf88      	it	hi
 8002ac6:	eef0 7a66 	vmovhi.f32	s15, s13
#ifdef NULL_PTR_CHECK_MC_PERF
  }
#endif
  return (cpuLoad);
}
 8002aca:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002ace:	4770      	bx	lr
 8002ad0:	38f6b948 	.word	0x38f6b948
 8002ad4:	36c56107 	.word	0x36c56107
 8002ad8:	42c80000 	.word	0x42c80000

08002adc <MC_Perf_GetMaxCPU_Load>:
  else
  {
#endif
    cpuLoad += (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_MediumFrequencyTaskM1].max / (float_t)SYSCLK_FREQ )\
                   * (float_t)MEDIUM_FREQUENCY_TASK_RATE);
    cpuLoad += (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_HighFrequencyTaskM1].max / (float_t)SYSCLK_FREQ )\
 8002adc:	edd0 7a05 	vldr	s15, [r0, #20]
                   * (float_t)(PWM_FREQUENCY/REGULATION_EXECUTION_RATE));
 8002ae0:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8002b18 <MC_Perf_GetMaxCPU_Load+0x3c>
    cpuLoad += (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_MediumFrequencyTaskM1].max / (float_t)SYSCLK_FREQ )\
 8002ae4:	ed90 7a09 	vldr	s14, [r0, #36]	@ 0x24
    cpuLoad += (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_HighFrequencyTaskM1].max / (float_t)SYSCLK_FREQ )\
 8002ae8:	ed9f 6a0c 	vldr	s12, [pc, #48]	@ 8002b1c <MC_Perf_GetMaxCPU_Load+0x40>

    cpuLoad = (cpuLoad > 1.0f) ? 1.0f : cpuLoad;
    cpuLoad *= 100.0f;
 8002aec:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8002b20 <MC_Perf_GetMaxCPU_Load+0x44>
    cpuLoad += (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_HighFrequencyTaskM1].max / (float_t)SYSCLK_FREQ )\
 8002af0:	eef8 7a67 	vcvt.f32.u32	s15, s15
    cpuLoad += (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_MediumFrequencyTaskM1].max / (float_t)SYSCLK_FREQ )\
 8002af4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
                   * (float_t)(PWM_FREQUENCY/REGULATION_EXECUTION_RATE));
 8002af8:	ee67 7aa6 	vmul.f32	s15, s15, s13
    cpuLoad = (cpuLoad > 1.0f) ? 1.0f : cpuLoad;
 8002afc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
    cpuLoad += (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_HighFrequencyTaskM1].max / (float_t)SYSCLK_FREQ )\
 8002b00:	eee7 7a06 	vfma.f32	s15, s14, s12
    cpuLoad = (cpuLoad > 1.0f) ? 1.0f : cpuLoad;
 8002b04:	eef4 7ae6 	vcmpe.f32	s15, s13
 8002b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b0c:	bf88      	it	hi
 8002b0e:	eef0 7a66 	vmovhi.f32	s15, s13
#ifdef NULL_PTR_CHECK_MC_PERF
  }
#endif
  return (cpuLoad);
}
 8002b12:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002b16:	4770      	bx	lr
 8002b18:	38f6b948 	.word	0x38f6b948
 8002b1c:	36c56107 	.word	0x36c56107
 8002b20:	42c80000 	.word	0x42c80000

08002b24 <MC_Perf_GetMinCPU_Load>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (pHandle->MC_Perf_TraceLog[MEASURE_TSK_MediumFrequencyTaskM1].min != UINT32_MAX)
 8002b24:	6a03      	ldr	r3, [r0, #32]
 8002b26:	1c59      	adds	r1, r3, #1
 8002b28:	d020      	beq.n	8002b6c <MC_Perf_GetMinCPU_Load+0x48>
    {
      cpu_load_acc += (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_MediumFrequencyTaskM1].min / (float_t)SYSCLK_FREQ )\
 8002b2a:	ee07 3a90 	vmov	s15, r3
                     * (float_t)MEDIUM_FREQUENCY_TASK_RATE);
 8002b2e:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8002b74 <MC_Perf_GetMinCPU_Load+0x50>
      cpu_load_acc += (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_MediumFrequencyTaskM1].min / (float_t)SYSCLK_FREQ )\
 8002b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
                     * (float_t)MEDIUM_FREQUENCY_TASK_RATE);
 8002b36:	ee67 7a87 	vmul.f32	s15, s15, s14
    }
    if (pHandle->MC_Perf_TraceLog[MEASURE_TSK_HighFrequencyTaskM1].min != UINT32_MAX)
 8002b3a:	6903      	ldr	r3, [r0, #16]
 8002b3c:	1c5a      	adds	r2, r3, #1
 8002b3e:	d007      	beq.n	8002b50 <MC_Perf_GetMinCPU_Load+0x2c>
    {
      cpu_load_acc += (((float_t)pHandle->MC_Perf_TraceLog[MEASURE_TSK_HighFrequencyTaskM1].min / (float_t)SYSCLK_FREQ )\
 8002b40:	ee07 3a10 	vmov	s14, r3
 8002b44:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8002b78 <MC_Perf_GetMinCPU_Load+0x54>
 8002b48:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002b4c:	eee7 7a26 	vfma.f32	s15, s14, s13
                   * (float_t)(PWM_FREQUENCY/REGULATION_EXECUTION_RATE));
    }
    cpu_load_acc = (cpu_load_acc > 1.0f) ? 1.0f : cpu_load_acc;
 8002b50:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cpu_load_acc *= 100.0f;
 8002b5c:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 8002b7c <MC_Perf_GetMinCPU_Load+0x58>
    cpu_load_acc = (cpu_load_acc > 1.0f) ? 1.0f : cpu_load_acc;
 8002b60:	bf88      	it	hi
 8002b62:	eef0 7a47 	vmovhi.f32	s15, s14
#ifdef NULL_PTR_CHECK_MC_PERF
  }
#endif
  return (cpu_load_acc);
}
 8002b66:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002b6a:	4770      	bx	lr
  float_t cpu_load_acc = 0.0f;
 8002b6c:	eddf 7a04 	vldr	s15, [pc, #16]	@ 8002b80 <MC_Perf_GetMinCPU_Load+0x5c>
 8002b70:	e7e3      	b.n	8002b3a <MC_Perf_GetMinCPU_Load+0x16>
 8002b72:	bf00      	nop
 8002b74:	36c56107 	.word	0x36c56107
 8002b78:	38f6b948 	.word	0x38f6b948
 8002b7c:	42c80000 	.word	0x42c80000
 8002b80:	00000000 	.word	0x00000000

08002b84 <MCboot>:
{
  /* USER CODE BEGIN MCboot 0 */

  /* USER CODE END MCboot 0 */

  if (MC_NULL == pMCIList)
 8002b84:	b310      	cbz	r0, 8002bcc <MCboot+0x48>
{
 8002b86:	b538      	push	{r3, r4, r5, lr}
    /* Nothing to do */
  }
  else
  {

    bMCBootCompleted = (uint8_t )0;
 8002b88:	4c11      	ldr	r4, [pc, #68]	@ (8002bd0 <MCboot+0x4c>)

    /*************************************************/
    /*    FOC initialization         */
    /*************************************************/
    pMCIList[M1] = &Mci[M1];
 8002b8a:	4d12      	ldr	r5, [pc, #72]	@ (8002bd4 <MCboot+0x50>)
 8002b8c:	6005      	str	r5, [r0, #0]
    bMCBootCompleted = (uint8_t )0;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	7023      	strb	r3, [r4, #0]
    FOC_Init();
 8002b92:	f000 fa15 	bl	8002fc0 <FOC_Init>

    ASPEP_start(&aspepOverUartA);
 8002b96:	4810      	ldr	r0, [pc, #64]	@ (8002bd8 <MCboot+0x54>)
 8002b98:	f7fe f86c 	bl	8000c74 <ASPEP_start>
    /* USER CODE END MCboot 1 */

    /******************************************************/
    /*   PID component initialization: speed regulation   */
    /******************************************************/
    PID_HandleInit(&PIDSpeedHandle_M1);
 8002b9c:	480f      	ldr	r0, [pc, #60]	@ (8002bdc <MCboot+0x58>)
 8002b9e:	f006 fe97 	bl	80098d0 <PID_HandleInit>

    /********************************************************/
    /*   Bus voltage sensor component initialization        */
    /********************************************************/
    (void)RCM_RegisterRegConv(&VbusRegConv_M1);
 8002ba2:	480f      	ldr	r0, [pc, #60]	@ (8002be0 <MCboot+0x5c>)
 8002ba4:	f001 fffe 	bl	8004ba4 <RCM_RegisterRegConv>
    RVBS_Init(&BusVoltageSensor_M1);
 8002ba8:	480e      	ldr	r0, [pc, #56]	@ (8002be4 <MCboot+0x60>)
 8002baa:	f007 fe9f 	bl	800a8ec <RVBS_Init>

    /*******************************************************/
    /*   Temperature measurement component initialization  */
    /*******************************************************/
    (void)RCM_RegisterRegConv(&TempRegConv_M1);
 8002bae:	480e      	ldr	r0, [pc, #56]	@ (8002be8 <MCboot+0x64>)
 8002bb0:	f001 fff8 	bl	8004ba4 <RCM_RegisterRegConv>
    NTC_Init(&TempSensor_M1);
 8002bb4:	480d      	ldr	r0, [pc, #52]	@ (8002bec <MCboot+0x68>)
 8002bb6:	f006 fe4f 	bl	8009858 <NTC_Init>

    Mci[M1].pPerfMeasure = &PerfTraces;
 8002bba:	480d      	ldr	r0, [pc, #52]	@ (8002bf0 <MCboot+0x6c>)
 8002bbc:	62a8      	str	r0, [r5, #40]	@ 0x28
    MC_Perf_Measure_Init(&PerfTraces);
 8002bbe:	f7ff fedf 	bl	8002980 <MC_Perf_Measure_Init>

    /* Applicative hook in MCBoot() */
    MC_APP_BootHook();
 8002bc2:	f7ff fce1 	bl	8002588 <MC_APP_BootHook>

    /* USER CODE BEGIN MCboot 2 */

    /* USER CODE END MCboot 2 */

    bMCBootCompleted = 1U;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	7023      	strb	r3, [r4, #0]
  }
}
 8002bca:	bd38      	pop	{r3, r4, r5, pc}
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	2000098c 	.word	0x2000098c
 8002bd4:	20000010 	.word	0x20000010
 8002bd8:	2000047c 	.word	0x2000047c
 8002bdc:	2000038c 	.word	0x2000038c
 8002be0:	200003e4 	.word	0x200003e4
 8002be4:	200003c8 	.word	0x200003c8
 8002be8:	20000410 	.word	0x20000410
 8002bec:	200003f4 	.word	0x200003f4
 8002bf0:	20000958 	.word	0x20000958

08002bf4 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8002bf4:	4b01      	ldr	r3, [pc, #4]	@ (8002bfc <TSK_SetChargeBootCapDelayM1+0x8>)
 8002bf6:	8018      	strh	r0, [r3, #0]
}
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	20000990 	.word	0x20000990

08002c00 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise.
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hBootCapDelayCounterM1)
 8002c00:	4b03      	ldr	r3, [pc, #12]	@ (8002c10 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 8002c02:	8818      	ldrh	r0, [r3, #0]
 8002c04:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8002c06:	fab0 f080 	clz	r0, r0
 8002c0a:	0940      	lsrs	r0, r0, #5
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	20000990 	.word	0x20000990

08002c14 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8002c14:	4b01      	ldr	r3, [pc, #4]	@ (8002c1c <TSK_SetStopPermanencyTimeM1+0x8>)
 8002c16:	8018      	strh	r0, [r3, #0]
}
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	2000098e 	.word	0x2000098e

08002c20 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise.
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hStopPermanencyCounterM1)
 8002c20:	4b03      	ldr	r3, [pc, #12]	@ (8002c30 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 8002c22:	8818      	ldrh	r0, [r3, #0]
 8002c24:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8002c26:	fab0 f080 	clz	r0, r0
 8002c2a:	0940      	lsrs	r0, r0, #5
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	2000098e 	.word	0x2000098e

08002c34 <TSK_HighFrequencyTask>:
    /* Nothing to do */
  }
  else
  {
#endif
    uint32_t StartMeasure = DWT->CYCCNT;
 8002c34:	4a0c      	ldr	r2, [pc, #48]	@ (8002c68 <TSK_HighFrequencyTask+0x34>)
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8002c36:	b508      	push	{r3, lr}
    pHandle->MC_Perf_TraceLog[CodeSection].StartMeasure = StartMeasure;
 8002c38:	4b0c      	ldr	r3, [pc, #48]	@ (8002c6c <TSK_HighFrequencyTask+0x38>)
    uint32_t StartMeasure = DWT->CYCCNT;
 8002c3a:	6852      	ldr	r2, [r2, #4]
    pHandle->MC_Perf_TraceLog[CodeSection].StartMeasure = StartMeasure;
 8002c3c:	609a      	str	r2, [r3, #8]

  MC_Perf_Measure_Start(&PerfTraces, MEASURE_TSK_HighFrequencyTaskM1);
  /* USER CODE BEGIN HighFrequencyTask 0 */

  /* USER CODE END HighFrequencyTask 0 */
  FOC_HighFrequencyTask(bMotorNbr);
 8002c3e:	2000      	movs	r0, #0
 8002c40:	f000 fb3c 	bl	80032bc <FOC_HighFrequencyTask>

  /* USER CODE BEGIN HighFrequencyTask 1 */

  /* USER CODE END HighFrequencyTask 1 */

  GLOBAL_TIMESTAMP++;
 8002c44:	4a0a      	ldr	r2, [pc, #40]	@ (8002c70 <TSK_HighFrequencyTask+0x3c>)
  if (0U == MCPA_UART_A.Mark)
 8002c46:	480b      	ldr	r0, [pc, #44]	@ (8002c74 <TSK_HighFrequencyTask+0x40>)
  GLOBAL_TIMESTAMP++;
 8002c48:	6813      	ldr	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 8002c4a:	f890 1029 	ldrb.w	r1, [r0, #41]	@ 0x29
  GLOBAL_TIMESTAMP++;
 8002c4e:	3301      	adds	r3, #1
 8002c50:	6013      	str	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 8002c52:	b929      	cbnz	r1, 8002c60 <TSK_HighFrequencyTask+0x2c>
  else
  {
    MCPA_dataLog (&MCPA_UART_A);
  }

  MC_Perf_Measure_Stop(&PerfTraces, MEASURE_TSK_HighFrequencyTaskM1);
 8002c54:	4805      	ldr	r0, [pc, #20]	@ (8002c6c <TSK_HighFrequencyTask+0x38>)
 8002c56:	2100      	movs	r1, #0
 8002c58:	f7ff fed4 	bl	8002a04 <MC_Perf_Measure_Stop>
  return (bMotorNbr);

}
 8002c5c:	2000      	movs	r0, #0
 8002c5e:	bd08      	pop	{r3, pc}
    MCPA_dataLog (&MCPA_UART_A);
 8002c60:	f006 fc7e 	bl	8009560 <MCPA_dataLog>
 8002c64:	e7f6      	b.n	8002c54 <TSK_HighFrequencyTask+0x20>
 8002c66:	bf00      	nop
 8002c68:	e0001000 	.word	0xe0001000
 8002c6c:	20000958 	.word	0x20000958
 8002c70:	20001c88 	.word	0x20001c88
 8002c74:	20000440 	.word	0x20000440

08002c78 <TSK_SafetyTask_PWMOFF>:
  * @brief  Safety task implementation if  MC.M1_ON_OVER_VOLTAGE == TURN_OFF_PWM.
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink.
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8002c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  uint16_t CodeReturn = MC_NO_ERROR;
  uint8_t lbmotor = M1;
  const uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};
  /* Check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
  if (M1 == bMotor)
 8002c7a:	4604      	mov	r4, r0
 8002c7c:	b1a8      	cbz	r0, 8002caa <TSK_SafetyTask_PWMOFF+0x32>
  {
    /* Nothing to do */
  }

/* Due to warning array subscript 1 is above array bounds of PWMC_Handle_t *[1] [-Warray-bounds] */
   CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[lbmotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8002c7e:	4e22      	ldr	r6, [pc, #136]	@ (8002d08 <TSK_SafetyTask_PWMOFF+0x90>)
 8002c80:	6830      	ldr	r0, [r6, #0]
 8002c82:	f000 ff45 	bl	8003b10 <PWMC_IsFaultOccurred>
 8002c86:	4601      	mov	r1, r0
  }
  else
  {
    /* Nothing to do */
  }
  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* Process faults */
 8002c88:	4d20      	ldr	r5, [pc, #128]	@ (8002d0c <TSK_SafetyTask_PWMOFF+0x94>)
 8002c8a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002c8e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8002c92:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8002c96:	43ca      	mvns	r2, r1
 8002c98:	4628      	mov	r0, r5
 8002c9a:	b292      	uxth	r2, r2
 8002c9c:	f7ff fcb6 	bl	800260c <MCI_FaultProcessing>

  if (MCI_GetFaultState(&Mci[bMotor]) != (uint32_t)MC_NO_FAULTS)
 8002ca0:	4628      	mov	r0, r5
 8002ca2:	f7ff fd45 	bl	8002730 <MCI_GetFaultState>
 8002ca6:	b9d8      	cbnz	r0, 8002ce0 <TSK_SafetyTask_PWMOFF+0x68>
    /* No errors */
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 8002ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint16_t rawValueM1 = RCM_ExecRegularConv(&TempRegConv_M1);
 8002caa:	4819      	ldr	r0, [pc, #100]	@ (8002d10 <TSK_SafetyTask_PWMOFF+0x98>)
   CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[lbmotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8002cac:	4e16      	ldr	r6, [pc, #88]	@ (8002d08 <TSK_SafetyTask_PWMOFF+0x90>)
    uint16_t rawValueM1 = RCM_ExecRegularConv(&TempRegConv_M1);
 8002cae:	f002 f89b 	bl	8004de8 <RCM_ExecRegularConv>
 8002cb2:	4601      	mov	r1, r0
    CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(&TempSensor_M1, rawValueM1);
 8002cb4:	4817      	ldr	r0, [pc, #92]	@ (8002d14 <TSK_SafetyTask_PWMOFF+0x9c>)
 8002cb6:	f006 fde1 	bl	800987c <NTC_CalcAvTemp>
 8002cba:	4607      	mov	r7, r0
   CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[lbmotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8002cbc:	6830      	ldr	r0, [r6, #0]
 8002cbe:	f000 ff27 	bl	8003b10 <PWMC_IsFaultOccurred>
 8002cc2:	4605      	mov	r5, r0
    uint16_t rawValueM1 =  RCM_ExecRegularConv(&VbusRegConv_M1);
 8002cc4:	4814      	ldr	r0, [pc, #80]	@ (8002d18 <TSK_SafetyTask_PWMOFF+0xa0>)
 8002cc6:	f002 f88f 	bl	8004de8 <RCM_ExecRegularConv>
 8002cca:	4601      	mov	r1, r0
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1, rawValueM1);
 8002ccc:	4813      	ldr	r0, [pc, #76]	@ (8002d1c <TSK_SafetyTask_PWMOFF+0xa4>)
 8002cce:	f007 fe39 	bl	800a944 <RVBS_CalcAvVbus>
 8002cd2:	4307      	orrs	r7, r0
 8002cd4:	f007 070e 	and.w	r7, r7, #14
 8002cd8:	ea45 0107 	orr.w	r1, r5, r7
 8002cdc:	b289      	uxth	r1, r1
 8002cde:	e7d3      	b.n	8002c88 <TSK_SafetyTask_PWMOFF+0x10>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8002ce0:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8002ce4:	f000 fec8 	bl	8003a78 <PWMC_SwitchOffPWM>
    if (MCPA_UART_A.Mark != 0U)
 8002ce8:	480d      	ldr	r0, [pc, #52]	@ (8002d20 <TSK_SafetyTask_PWMOFF+0xa8>)
 8002cea:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 8002cee:	b923      	cbnz	r3, 8002cfa <TSK_SafetyTask_PWMOFF+0x82>
    FOC_Clear(bMotor);
 8002cf0:	4620      	mov	r0, r4
}
 8002cf2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    FOC_Clear(bMotor);
 8002cf6:	f000 b923 	b.w	8002f40 <FOC_Clear>
      MCPA_flushDataLog (&MCPA_UART_A);
 8002cfa:	f006 fcef 	bl	80096dc <MCPA_flushDataLog>
    FOC_Clear(bMotor);
 8002cfe:	4620      	mov	r0, r4
}
 8002d00:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    FOC_Clear(bMotor);
 8002d04:	f000 b91c 	b.w	8002f40 <FOC_Clear>
 8002d08:	20000954 	.word	0x20000954
 8002d0c:	20000010 	.word	0x20000010
 8002d10:	20000410 	.word	0x20000410
 8002d14:	200003f4 	.word	0x200003f4
 8002d18:	200003e4 	.word	0x200003e4
 8002d1c:	200003c8 	.word	0x200003c8
 8002d20:	20000440 	.word	0x20000440

08002d24 <TSK_SafetyTask>:
{
 8002d24:	b508      	push	{r3, lr}
  if (1U == bMCBootCompleted)
 8002d26:	4b06      	ldr	r3, [pc, #24]	@ (8002d40 <TSK_SafetyTask+0x1c>)
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d000      	beq.n	8002d30 <TSK_SafetyTask+0xc>
}
 8002d2e:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 8002d30:	2000      	movs	r0, #0
 8002d32:	f7ff ffa1 	bl	8002c78 <TSK_SafetyTask_PWMOFF>
}
 8002d36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv();
 8002d3a:	f002 b91d 	b.w	8004f78 <RCM_ExecUserConv>
 8002d3e:	bf00      	nop
 8002d40:	2000098c 	.word	0x2000098c

08002d44 <MC_RunMotorControlTasks>:
  if (0U == bMCBootCompleted)
 8002d44:	4b22      	ldr	r3, [pc, #136]	@ (8002dd0 <MC_RunMotorControlTasks+0x8c>)
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	b1cb      	cbz	r3, 8002d7e <MC_RunMotorControlTasks+0x3a>
{
 8002d4a:	b570      	push	{r4, r5, r6, lr}
    if(hMFTaskCounterM1 > 0u)
 8002d4c:	4c21      	ldr	r4, [pc, #132]	@ (8002dd4 <MC_RunMotorControlTasks+0x90>)
 8002d4e:	8823      	ldrh	r3, [r4, #0]
 8002d50:	b1b3      	cbz	r3, 8002d80 <MC_RunMotorControlTasks+0x3c>
      hMFTaskCounterM1--;
 8002d52:	3b01      	subs	r3, #1
 8002d54:	b29b      	uxth	r3, r3
    if(hBootCapDelayCounterM1 > 0U)
 8002d56:	4a20      	ldr	r2, [pc, #128]	@ (8002dd8 <MC_RunMotorControlTasks+0x94>)
      hMFTaskCounterM1--;
 8002d58:	8023      	strh	r3, [r4, #0]
    if(hBootCapDelayCounterM1 > 0U)
 8002d5a:	8813      	ldrh	r3, [r2, #0]
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	b11b      	cbz	r3, 8002d68 <MC_RunMotorControlTasks+0x24>
      hBootCapDelayCounterM1--;
 8002d60:	8813      	ldrh	r3, [r2, #0]
 8002d62:	3b01      	subs	r3, #1
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0U)
 8002d68:	4a1c      	ldr	r2, [pc, #112]	@ (8002ddc <MC_RunMotorControlTasks+0x98>)
 8002d6a:	8813      	ldrh	r3, [r2, #0]
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	b11b      	cbz	r3, 8002d78 <MC_RunMotorControlTasks+0x34>
      hStopPermanencyCounterM1--;
 8002d70:	8813      	ldrh	r3, [r2, #0]
 8002d72:	3b01      	subs	r3, #1
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	8013      	strh	r3, [r2, #0]
    TSK_SafetyTask();
 8002d78:	f7ff ffd4 	bl	8002d24 <TSK_SafetyTask>
}
 8002d7c:	bd70      	pop	{r4, r5, r6, pc}
 8002d7e:	4770      	bx	lr
      MC_BG_Perf_Measure_Start(&PerfTraces, MEASURE_TSK_MediumFrequencyTaskM1);
 8002d80:	4817      	ldr	r0, [pc, #92]	@ (8002de0 <MC_RunMotorControlTasks+0x9c>)
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 8002d82:	4d18      	ldr	r5, [pc, #96]	@ (8002de4 <MC_RunMotorControlTasks+0xa0>)
      MC_BG_Perf_Measure_Start(&PerfTraces, MEASURE_TSK_MediumFrequencyTaskM1);
 8002d84:	2101      	movs	r1, #1
 8002d86:	f7ff fe31 	bl	80029ec <MC_BG_Perf_Measure_Start>
      TSK_MediumFrequencyTaskM1();
 8002d8a:	f000 f9a3 	bl	80030d4 <TSK_MediumFrequencyTaskM1>
  MC_BG_Perf_Measure_Stop(&PerfTraces, MEASURE_TSK_MediumFrequencyTaskM1);
 8002d8e:	4814      	ldr	r0, [pc, #80]	@ (8002de0 <MC_RunMotorControlTasks+0x9c>)
 8002d90:	2101      	movs	r1, #1
 8002d92:	f7ff fe59 	bl	8002a48 <MC_BG_Perf_Measure_Stop>
      MC_APP_PostMediumFrequencyHook_M1();
 8002d96:	f7ff fbf9 	bl	800258c <MC_APP_PostMediumFrequencyHook_M1>
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 8002d9a:	4629      	mov	r1, r5
 8002d9c:	f851 0b0c 	ldr.w	r0, [r1], #12
 8002da0:	6883      	ldr	r3, [r0, #8]
 8002da2:	4798      	blx	r3
 8002da4:	6068      	str	r0, [r5, #4]
      if ( 0U == MCP_Over_UartA.rxBuffer)
 8002da6:	b130      	cbz	r0, 8002db6 <MC_RunMotorControlTasks+0x72>
        if (0U == MCP_Over_UartA.pTransportLayer->fGetBuffer(MCP_Over_UartA.pTransportLayer,
 8002da8:	4629      	mov	r1, r5
 8002daa:	220a      	movs	r2, #10
 8002dac:	f851 0b08 	ldr.w	r0, [r1], #8
 8002db0:	6803      	ldr	r3, [r0, #0]
 8002db2:	4798      	blx	r3
 8002db4:	b908      	cbnz	r0, 8002dba <MC_RunMotorControlTasks+0x76>
{
 8002db6:	2301      	movs	r3, #1
 8002db8:	e7cd      	b.n	8002d56 <MC_RunMotorControlTasks+0x12>
          MCP_ReceivedPacket(&MCP_Over_UartA);
 8002dba:	4628      	mov	r0, r5
 8002dbc:	f000 fbb8 	bl	8003530 <MCP_ReceivedPacket>
          MCP_Over_UartA.pTransportLayer->fSendPacket(MCP_Over_UartA.pTransportLayer, MCP_Over_UartA.txBuffer,
 8002dc0:	6828      	ldr	r0, [r5, #0]
 8002dc2:	89ea      	ldrh	r2, [r5, #14]
 8002dc4:	6846      	ldr	r6, [r0, #4]
 8002dc6:	68a9      	ldr	r1, [r5, #8]
 8002dc8:	230a      	movs	r3, #10
 8002dca:	47b0      	blx	r6
 8002dcc:	e7f3      	b.n	8002db6 <MC_RunMotorControlTasks+0x72>
 8002dce:	bf00      	nop
 8002dd0:	2000098c 	.word	0x2000098c
 8002dd4:	20000992 	.word	0x20000992
 8002dd8:	20000990 	.word	0x20000990
 8002ddc:	2000098e 	.word	0x2000098e
 8002de0:	20000958 	.word	0x20000958
 8002de4:	2000046c 	.word	0x2000046c

08002de8 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8002de8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
   FOC_Clear(M1);
 8002dea:	2000      	movs	r0, #0
 8002dec:	f000 f8a8 	bl	8002f40 <FOC_Clear>
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);

  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8002df0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
 8002df4:	4802      	ldr	r0, [pc, #8]	@ (8002e00 <TSK_HardwareFaultTask+0x18>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	2180      	movs	r1, #128	@ 0x80
 8002dfa:	f7ff bc07 	b.w	800260c <MCI_FaultProcessing>
 8002dfe:	bf00      	nop
 8002e00:	20000010 	.word	0x20000010

08002e04 <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 8002e04:	b508      	push	{r3, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (IDLE == MC_GetSTMStateMotor1())
 8002e06:	f7ff fbb7 	bl	8002578 <MC_GetSTMStateMotor1>
 8002e0a:	b918      	cbnz	r0, 8002e14 <UI_HandleStartStopButton_cb+0x10>
  else
  {
    (void)MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 8002e0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)MC_StartMotor1();
 8002e10:	f7ff bb84 	b.w	800251c <MC_StartMotor1>
}
 8002e14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)MC_StopMotor1();
 8002e18:	f7ff bb86 	b.w	8002528 <MC_StopMotor1>

08002e1c <mc_lock_pins>:

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration.
  */
__weak void mc_lock_pins (void)
{
 8002e1c:	b4f0      	push	{r4, r5, r6, r7}
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002e1e:	4941      	ldr	r1, [pc, #260]	@ (8002f24 <mc_lock_pins+0x108>)
 8002e20:	f04f 1401 	mov.w	r4, #65537	@ 0x10001
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002e24:	2601      	movs	r6, #1
 8002e26:	b090      	sub	sp, #64	@ 0x40
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002e28:	61cc      	str	r4, [r1, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002e2a:	61ce      	str	r6, [r1, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002e2c:	61cc      	str	r4, [r1, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002e2e:	69ca      	ldr	r2, [r1, #28]
 8002e30:	920f      	str	r2, [sp, #60]	@ 0x3c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002e32:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
  (void) temp;
 8002e36:	980f      	ldr	r0, [sp, #60]	@ 0x3c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002e38:	f44f 32c0 	mov.w	r2, #98304	@ 0x18000
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002e3c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002e40:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002e42:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002e44:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002e46:	69da      	ldr	r2, [r3, #28]
 8002e48:	920e      	str	r2, [sp, #56]	@ 0x38
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002e4a:	4a37      	ldr	r2, [pc, #220]	@ (8002f28 <mc_lock_pins+0x10c>)
  (void) temp;
 8002e4c:	980e      	ldr	r0, [sp, #56]	@ 0x38
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002e4e:	4837      	ldr	r0, [pc, #220]	@ (8002f2c <mc_lock_pins+0x110>)
 8002e50:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002e52:	2508      	movs	r5, #8
 8002e54:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002e56:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002e58:	69d0      	ldr	r0, [r2, #28]
 8002e5a:	900d      	str	r0, [sp, #52]	@ 0x34
  (void) temp;
 8002e5c:	980d      	ldr	r0, [sp, #52]	@ 0x34
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002e5e:	f44f 6580 	mov.w	r5, #1024	@ 0x400
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002e62:	f44f 3082 	mov.w	r0, #66560	@ 0x10400
 8002e66:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002e68:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002e6a:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002e6c:	69d7      	ldr	r7, [r2, #28]
 8002e6e:	970c      	str	r7, [sp, #48]	@ 0x30
  (void) temp;
 8002e70:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002e72:	4f2f      	ldr	r7, [pc, #188]	@ (8002f30 <mc_lock_pins+0x114>)
 8002e74:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002e76:	f44f 7c80 	mov.w	ip, #256	@ 0x100
 8002e7a:	f8c3 c01c 	str.w	ip, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002e7e:	61df      	str	r7, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002e80:	69df      	ldr	r7, [r3, #28]
 8002e82:	970b      	str	r7, [sp, #44]	@ 0x2c
  (void) temp;
 8002e84:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002e86:	f44f 7c00 	mov.w	ip, #512	@ 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002e8a:	f44f 3781 	mov.w	r7, #66048	@ 0x10200
 8002e8e:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002e90:	f8c3 c01c 	str.w	ip, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002e94:	61df      	str	r7, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002e96:	69df      	ldr	r7, [r3, #28]
 8002e98:	970a      	str	r7, [sp, #40]	@ 0x28
  (void) temp;
 8002e9a:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002e9c:	f44f 6c00 	mov.w	ip, #2048	@ 0x800
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002ea0:	f44f 3784 	mov.w	r7, #67584	@ 0x10800
 8002ea4:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002ea6:	f8c3 c01c 	str.w	ip, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002eaa:	61df      	str	r7, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002eac:	69df      	ldr	r7, [r3, #28]
 8002eae:	9709      	str	r7, [sp, #36]	@ 0x24
  (void) temp;
 8002eb0:	9f09      	ldr	r7, [sp, #36]	@ 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002eb2:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002eb4:	61d6      	str	r6, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002eb6:	61d4      	str	r4, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002eb8:	69d7      	ldr	r7, [r2, #28]
 8002eba:	9708      	str	r7, [sp, #32]
  (void) temp;
 8002ebc:	9f08      	ldr	r7, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002ebe:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002ec0:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002ec2:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002ec4:	69d8      	ldr	r0, [r3, #28]
 8002ec6:	9007      	str	r0, [sp, #28]
  (void) temp;
 8002ec8:	9807      	ldr	r0, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002eca:	481a      	ldr	r0, [pc, #104]	@ (8002f34 <mc_lock_pins+0x118>)
 8002ecc:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002ece:	2502      	movs	r5, #2
 8002ed0:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002ed2:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002ed4:	69d2      	ldr	r2, [r2, #28]
 8002ed6:	9206      	str	r2, [sp, #24]
  (void) temp;
 8002ed8:	9a06      	ldr	r2, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002eda:	4a17      	ldr	r2, [pc, #92]	@ (8002f38 <mc_lock_pins+0x11c>)
 8002edc:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002ede:	2780      	movs	r7, #128	@ 0x80
 8002ee0:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002ee2:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002ee4:	69da      	ldr	r2, [r3, #28]
 8002ee6:	9205      	str	r2, [sp, #20]
  (void) temp;
 8002ee8:	9a05      	ldr	r2, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002eea:	4a14      	ldr	r2, [pc, #80]	@ (8002f3c <mc_lock_pins+0x120>)
 8002eec:	61ca      	str	r2, [r1, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002eee:	2704      	movs	r7, #4
 8002ef0:	61cf      	str	r7, [r1, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002ef2:	61ca      	str	r2, [r1, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002ef4:	69ca      	ldr	r2, [r1, #28]
 8002ef6:	9204      	str	r2, [sp, #16]
  (void) temp;
 8002ef8:	9a04      	ldr	r2, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002efa:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002efc:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002efe:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002f00:	69da      	ldr	r2, [r3, #28]
 8002f02:	9203      	str	r2, [sp, #12]
  (void) temp;
 8002f04:	9a03      	ldr	r2, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002f06:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002f08:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002f0a:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002f0c:	69db      	ldr	r3, [r3, #28]
 8002f0e:	9302      	str	r3, [sp, #8]
  (void) temp;
 8002f10:	9b02      	ldr	r3, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002f12:	61c8      	str	r0, [r1, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002f14:	61cd      	str	r5, [r1, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002f16:	61c8      	str	r0, [r1, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002f18:	69cb      	ldr	r3, [r1, #28]
 8002f1a:	9301      	str	r3, [sp, #4]
  (void) temp;
 8002f1c:	9b01      	ldr	r3, [sp, #4]
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
LL_GPIO_LockPin(M1_TEMPERATURE_GPIO_Port, M1_TEMPERATURE_Pin);
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_V_GPIO_Port, M1_CURR_AMPL_V_Pin);
}
 8002f1e:	b010      	add	sp, #64	@ 0x40
 8002f20:	bcf0      	pop	{r4, r5, r6, r7}
 8002f22:	4770      	bx	lr
 8002f24:	48000800 	.word	0x48000800
 8002f28:	48000400 	.word	0x48000400
 8002f2c:	00010008 	.word	0x00010008
 8002f30:	00010100 	.word	0x00010100
 8002f34:	00010002 	.word	0x00010002
 8002f38:	00010080 	.word	0x00010080
 8002f3c:	00010004 	.word	0x00010004

08002f40 <FOC_Clear>:
  *         controller. It must be called before each motor restart.
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2.
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 8002f40:	b538      	push	{r3, r4, r5, lr}
 8002f42:	2326      	movs	r3, #38	@ 0x26
 8002f44:	4918      	ldr	r1, [pc, #96]	@ (8002fa8 <FOC_Clear+0x68>)
 8002f46:	fb00 f303 	mul.w	r3, r0, r3

  ab_t NULL_ab = {((int16_t)0), ((int16_t)0)};
  qd_t NULL_qd = {((int16_t)0), ((int16_t)0)};
  alphabeta_t NULL_alphabeta = {((int16_t)0), ((int16_t)0)};

  FOCVars[bMotor].Iab = NULL_ab;
 8002f4a:	2400      	movs	r4, #0
 8002f4c:	50cc      	str	r4, [r1, r3]
{
 8002f4e:	4605      	mov	r5, r0
 8002f50:	f103 0208 	add.w	r2, r3, #8
 8002f54:	1858      	adds	r0, r3, r1
 8002f56:	3310      	adds	r3, #16
 8002f58:	440a      	add	r2, r1
 8002f5a:	440b      	add	r3, r1
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8002f5c:	4913      	ldr	r1, [pc, #76]	@ (8002fac <FOC_Clear+0x6c>)
  FOCVars[bMotor].Iab = NULL_ab;
 8002f5e:	6044      	str	r4, [r0, #4]
  FOCVars[bMotor].Iqd = NULL_qd;
 8002f60:	6054      	str	r4, [r2, #4]
 8002f62:	6094      	str	r4, [r2, #8]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8002f64:	f851 0025 	ldr.w	r0, [r1, r5, lsl #2]
  FOCVars[bMotor].Vqd = NULL_qd;
 8002f68:	f8c3 4006 	str.w	r4, [r3, #6]
 8002f6c:	f8c3 400a 	str.w	r4, [r3, #10]
 8002f70:	f8c3 400e 	str.w	r4, [r3, #14]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8002f74:	4621      	mov	r1, r4
 8002f76:	f006 fcbf 	bl	80098f8 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], ((int32_t)0));
 8002f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8002fb0 <FOC_Clear+0x70>)
 8002f7c:	4621      	mov	r1, r4
 8002f7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8002f82:	f006 fcb9 	bl	80098f8 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8002f86:	4b0b      	ldr	r3, [pc, #44]	@ (8002fb4 <FOC_Clear+0x74>)
 8002f88:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8002f8c:	f007 fd6a 	bl	800aa64 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8002f90:	4b09      	ldr	r3, [pc, #36]	@ (8002fb8 <FOC_Clear+0x78>)
 8002f92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8002f96:	f000 fd6f 	bl	8003a78 <PWMC_SwitchOffPWM>

  MC_Perf_Clear(&PerfTraces,bMotor);
 8002f9a:	4629      	mov	r1, r5
 8002f9c:	4807      	ldr	r0, [pc, #28]	@ (8002fbc <FOC_Clear+0x7c>)
  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8002f9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  MC_Perf_Clear(&PerfTraces,bMotor);
 8002fa2:	f7ff bd0f 	b.w	80029c4 <MC_Perf_Clear>
 8002fa6:	bf00      	nop
 8002fa8:	2000092c 	.word	0x2000092c
 8002fac:	20000044 	.word	0x20000044
 8002fb0:	20000040 	.word	0x20000040
 8002fb4:	20000048 	.word	0x20000048
 8002fb8:	20000954 	.word	0x20000954
 8002fbc:	20000958 	.word	0x20000958

08002fc0 <FOC_Init>:
{
 8002fc0:	b570      	push	{r4, r5, r6, lr}
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8002fc2:	4b24      	ldr	r3, [pc, #144]	@ (8003054 <FOC_Init+0x94>)
    PID_HandleInit(&PIDSpeedHandle_M1);
 8002fc4:	4c24      	ldr	r4, [pc, #144]	@ (8003058 <FOC_Init+0x98>)
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8002fc6:	4825      	ldr	r0, [pc, #148]	@ (800305c <FOC_Init+0x9c>)
    HALL_Init (&HALL_M1);
 8002fc8:	4e25      	ldr	r6, [pc, #148]	@ (8003060 <FOC_Init+0xa0>)
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &HALL_M1._Super);
 8002fca:	4d26      	ldr	r5, [pc, #152]	@ (8003064 <FOC_Init+0xa4>)
{
 8002fcc:	b082      	sub	sp, #8
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8002fce:	6018      	str	r0, [r3, #0]
    R3_2_Init(&PWM_Handle_M1);
 8002fd0:	f007 f86e 	bl	800a0b0 <R3_2_Init>
    startTimers();
 8002fd4:	f000 fb9c 	bl	8003710 <startTimers>
    PID_HandleInit(&PIDSpeedHandle_M1);
 8002fd8:	4620      	mov	r0, r4
 8002fda:	f006 fc79 	bl	80098d0 <PID_HandleInit>
    HALL_Init (&HALL_M1);
 8002fde:	4630      	mov	r0, r6
 8002fe0:	f7fe f9a4 	bl	800132c <HALL_Init>
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &HALL_M1._Super);
 8002fe4:	4621      	mov	r1, r4
 8002fe6:	4632      	mov	r2, r6
 8002fe8:	6828      	ldr	r0, [r5, #0]
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 8002fea:	4c1f      	ldr	r4, [pc, #124]	@ (8003068 <FOC_Init+0xa8>)
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &HALL_M1._Super);
 8002fec:	f007 fd24 	bl	800aa38 <STC_Init>
    STO_PLL_Init (&STO_PLL_M1);
 8002ff0:	481e      	ldr	r0, [pc, #120]	@ (800306c <FOC_Init+0xac>)
 8002ff2:	f007 ffc1 	bl	800af78 <STO_PLL_Init>
    PID_HandleInit(&PIDIqHandle_M1);
 8002ff6:	481e      	ldr	r0, [pc, #120]	@ (8003070 <FOC_Init+0xb0>)
 8002ff8:	f006 fc6a 	bl	80098d0 <PID_HandleInit>
    PID_HandleInit(&PIDIdHandle_M1);
 8002ffc:	481d      	ldr	r0, [pc, #116]	@ (8003074 <FOC_Init+0xb4>)
 8002ffe:	f006 fc67 	bl	80098d0 <PID_HandleInit>
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8003002:	4b1d      	ldr	r3, [pc, #116]	@ (8003078 <FOC_Init+0xb8>)
 8003004:	4a1d      	ldr	r2, [pc, #116]	@ (800307c <FOC_Init+0xbc>)
 8003006:	681b      	ldr	r3, [r3, #0]
    pREMNG[M1] = &RampExtMngrHFParamsM1;
 8003008:	481d      	ldr	r0, [pc, #116]	@ (8003080 <FOC_Init+0xc0>)
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 800300a:	e9c3 4202 	strd	r4, r2, [r3, #8]
    pREMNG[M1] = &RampExtMngrHFParamsM1;
 800300e:	4b1d      	ldr	r3, [pc, #116]	@ (8003084 <FOC_Init+0xc4>)
 8003010:	6018      	str	r0, [r3, #0]
    REMNG_Init(pREMNG[M1]);
 8003012:	f007 fcc5 	bl	800a9a0 <REMNG_Init>
    FOC_Clear(M1);
 8003016:	2000      	movs	r0, #0
 8003018:	f7ff ff92 	bl	8002f40 <FOC_Clear>
    FOCVars[M1].bDriveInput = EXTERNAL;
 800301c:	2301      	movs	r3, #1
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 800301e:	6828      	ldr	r0, [r5, #0]
    FOCVars[M1].bDriveInput = EXTERNAL;
 8003020:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8003024:	f007 fdb0 	bl	800ab88 <STC_GetDefaultIqdref>
 8003028:	f3c0 420f 	ubfx	r2, r0, #16, #16
 800302c:	4603      	mov	r3, r0
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 800302e:	6828      	ldr	r0, [r5, #0]
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8003030:	8262      	strh	r2, [r4, #18]
 8003032:	8223      	strh	r3, [r4, #16]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8003034:	f007 fda8 	bl	800ab88 <STC_GetDefaultIqdref>
 8003038:	f3c0 430f 	ubfx	r3, r0, #16, #16
    MCI_ExecSpeedRamp(&Mci[M1],
 800303c:	6828      	ldr	r0, [r5, #0]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 800303e:	82a3      	strh	r3, [r4, #20]
    MCI_ExecSpeedRamp(&Mci[M1],
 8003040:	f007 fd9e 	bl	800ab80 <STC_GetMecSpeedRefUnitDefault>
 8003044:	4601      	mov	r1, r0
 8003046:	4810      	ldr	r0, [pc, #64]	@ (8003088 <FOC_Init+0xc8>)
 8003048:	2200      	movs	r2, #0
}
 800304a:	b002      	add	sp, #8
 800304c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    MCI_ExecSpeedRamp(&Mci[M1],
 8003050:	f7ff ba9e 	b.w	8002590 <MCI_ExecSpeedRamp>
 8003054:	20000954 	.word	0x20000954
 8003058:	2000038c 	.word	0x2000038c
 800305c:	2000025c 	.word	0x2000025c
 8003060:	20000068 	.word	0x20000068
 8003064:	20000048 	.word	0x20000048
 8003068:	2000092c 	.word	0x2000092c
 800306c:	20000134 	.word	0x20000134
 8003070:	20000360 	.word	0x20000360
 8003074:	20000334 	.word	0x20000334
 8003078:	2000003c 	.word	0x2000003c
 800307c:	200003c8 	.word	0x200003c8
 8003080:	20000050 	.word	0x20000050
 8003084:	20000928 	.word	0x20000928
 8003088:	20000010 	.word	0x20000010

0800308c <FOC_InitAdditionalMethods>:
    {
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
    }
}
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop

08003090 <FOC_CalcCurrRef>:
  *         MTPA algorithm(s). It must be called with the periodicity specified
  *         in oTSC parameters.
  * @param  bMotor related motor it can be M1 or M2.
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 8003090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003092:	4606      	mov	r6, r0
  __ASM volatile ("cpsid i" : : : "memory");
 8003094:	b672      	cpsid	i

  /* Enter critical section */
  /* Disable interrupts to avoid any interruption during Iqd reference latching */
  /* to avoid MF task writing them while HF task reading them */
  __disable_irq();
  IqdTmp = FOCVars[bMotor].Iqdref;
 8003096:	4d0d      	ldr	r5, [pc, #52]	@ (80030cc <FOC_CalcCurrRef+0x3c>)
 8003098:	2426      	movs	r4, #38	@ 0x26
 800309a:	fb04 5400 	mla	r4, r4, r0, r5
 800309e:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
 80030a2:	f9b4 7012 	ldrsh.w	r7, [r4, #18]
  __ASM volatile ("cpsie i" : : : "memory");
 80030a6:	b662      	cpsie	i
  __enable_irq();

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if (INTERNAL == FOCVars[bMotor].bDriveInput)
 80030a8:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 80030ac:	b13b      	cbz	r3, 80030be <FOC_CalcCurrRef+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 80030ae:	b672      	cpsid	i
  }

  /* Enter critical section */
  /* Disable interrupts to avoid any interruption during Iqd reference restoring */
  __disable_irq();
  FOCVars[bMotor].Iqdref = IqdTmp;
 80030b0:	2326      	movs	r3, #38	@ 0x26
 80030b2:	fb03 5506 	mla	r5, r3, r6, r5
 80030b6:	8228      	strh	r0, [r5, #16]
 80030b8:	826f      	strh	r7, [r5, #18]
  __ASM volatile ("cpsie i" : : : "memory");
 80030ba:	b662      	cpsie	i
  /* Exit critical section */
  __enable_irq();
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 80030bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 80030be:	4b04      	ldr	r3, [pc, #16]	@ (80030d0 <FOC_CalcCurrRef+0x40>)
 80030c0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80030c4:	f007 fd26 	bl	800ab14 <STC_CalcTorqueReference>
 80030c8:	83e0      	strh	r0, [r4, #30]
    IqdTmp.q = FOCVars[bMotor].hTeref;
 80030ca:	e7f0      	b.n	80030ae <FOC_CalcCurrRef+0x1e>
 80030cc:	2000092c 	.word	0x2000092c
 80030d0:	20000048 	.word	0x20000048

080030d4 <TSK_MediumFrequencyTaskM1>:
{
 80030d4:	b530      	push	{r4, r5, lr}
 80030d6:	b083      	sub	sp, #12
  int16_t wAux = 0;
 80030d8:	2300      	movs	r3, #0
  (void)STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 80030da:	f10d 0106 	add.w	r1, sp, #6
 80030de:	4870      	ldr	r0, [pc, #448]	@ (80032a0 <TSK_MediumFrequencyTaskM1+0x1cc>)
  int16_t wAux = 0;
 80030e0:	f8ad 3006 	strh.w	r3, [sp, #6]
  (void)STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 80030e4:	f007 fe50 	bl	800ad88 <STO_PLL_CalcAvrgMecSpeedUnit>
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit(&HALL_M1, &wAux);
 80030e8:	f10d 0106 	add.w	r1, sp, #6
 80030ec:	486d      	ldr	r0, [pc, #436]	@ (80032a4 <TSK_MediumFrequencyTaskM1+0x1d0>)
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 80030ee:	4c6e      	ldr	r4, [pc, #440]	@ (80032a8 <TSK_MediumFrequencyTaskM1+0x1d4>)
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit(&HALL_M1, &wAux);
 80030f0:	f7fe fa86 	bl	8001600 <HALL_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower(pMPM[M1]);
 80030f4:	4b6d      	ldr	r3, [pc, #436]	@ (80032ac <TSK_MediumFrequencyTaskM1+0x1d8>)
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit(&HALL_M1, &wAux);
 80030f6:	4605      	mov	r5, r0
  PQD_CalcElMotorPower(pMPM[M1]);
 80030f8:	6818      	ldr	r0, [r3, #0]
 80030fa:	f006 fc6f 	bl	80099dc <PQD_CalcElMotorPower>
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 80030fe:	4620      	mov	r0, r4
 8003100:	f7ff fad0 	bl	80026a4 <MCI_GetCurrentFaults>
 8003104:	b118      	cbz	r0, 800310e <TSK_MediumFrequencyTaskM1+0x3a>
    Mci[M1].State = FAULT_NOW;
 8003106:	230a      	movs	r3, #10
 8003108:	77e3      	strb	r3, [r4, #31]
}
 800310a:	b003      	add	sp, #12
 800310c:	bd30      	pop	{r4, r5, pc}
    if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 800310e:	4620      	mov	r0, r4
 8003110:	f7ff fac6 	bl	80026a0 <MCI_GetOccurredFaults>
 8003114:	bb50      	cbnz	r0, 800316c <TSK_MediumFrequencyTaskM1+0x98>
      switch (Mci[M1].State)
 8003116:	7fe3      	ldrb	r3, [r4, #31]
 8003118:	2b11      	cmp	r3, #17
 800311a:	d8f6      	bhi.n	800310a <TSK_MediumFrequencyTaskM1+0x36>
 800311c:	a201      	add	r2, pc, #4	@ (adr r2, 8003124 <TSK_MediumFrequencyTaskM1+0x50>)
 800311e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003122:	bf00      	nop
 8003124:	0800323f 	.word	0x0800323f
 8003128:	0800310b 	.word	0x0800310b
 800312c:	0800310b 	.word	0x0800310b
 8003130:	0800310b 	.word	0x0800310b
 8003134:	0800310b 	.word	0x0800310b
 8003138:	0800310b 	.word	0x0800310b
 800313c:	0800321b 	.word	0x0800321b
 8003140:	0800310b 	.word	0x0800310b
 8003144:	0800325f 	.word	0x0800325f
 8003148:	0800310b 	.word	0x0800310b
 800314c:	0800316d 	.word	0x0800316d
 8003150:	0800320d 	.word	0x0800320d
 8003154:	0800310b 	.word	0x0800310b
 8003158:	0800310b 	.word	0x0800310b
 800315c:	0800310b 	.word	0x0800310b
 8003160:	0800310b 	.word	0x0800310b
 8003164:	080031af 	.word	0x080031af
 8003168:	08003175 	.word	0x08003175
      Mci[M1].State = FAULT_OVER;
 800316c:	230b      	movs	r3, #11
 800316e:	77e3      	strb	r3, [r4, #31]
}
 8003170:	b003      	add	sp, #12
 8003172:	bd30      	pop	{r4, r5, pc}
          if (MCI_STOP == Mci[M1].DirectCommand)
 8003174:	7fa3      	ldrb	r3, [r4, #30]
            if (pwmcHandle[M1]->offsetCalibStatus == false)
 8003176:	4d4e      	ldr	r5, [pc, #312]	@ (80032b0 <TSK_MediumFrequencyTaskM1+0x1dc>)
          if (MCI_STOP == Mci[M1].DirectCommand)
 8003178:	2b05      	cmp	r3, #5
            if (pwmcHandle[M1]->offsetCalibStatus == false)
 800317a:	6828      	ldr	r0, [r5, #0]
          if (MCI_STOP == Mci[M1].DirectCommand)
 800317c:	d077      	beq.n	800326e <TSK_MediumFrequencyTaskM1+0x19a>
            if (PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC))
 800317e:	2101      	movs	r1, #1
 8003180:	f000 fc7e 	bl	8003a80 <PWMC_CurrentReadingCalibr>
 8003184:	2800      	cmp	r0, #0
 8003186:	d0c0      	beq.n	800310a <TSK_MediumFrequencyTaskM1+0x36>
              if (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand)
 8003188:	7fa3      	ldrb	r3, [r4, #30]
 800318a:	2b03      	cmp	r3, #3
 800318c:	f000 8081 	beq.w	8003292 <TSK_MediumFrequencyTaskM1+0x1be>
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_BK2E);
 8003190:	4a48      	ldr	r2, [pc, #288]	@ (80032b4 <TSK_MediumFrequencyTaskM1+0x1e0>)
                R3_2_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 8003192:	6828      	ldr	r0, [r5, #0]
 8003194:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8003196:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800319a:	6453      	str	r3, [r2, #68]	@ 0x44
 800319c:	2100      	movs	r1, #0
 800319e:	f006 feeb 	bl	8009f78 <R3_2_TurnOnLowSides>
                TSK_SetChargeBootCapDelayM1(M1_CHARGE_BOOT_CAP_TICKS);
 80031a2:	2014      	movs	r0, #20
 80031a4:	f7ff fd26 	bl	8002bf4 <TSK_SetChargeBootCapDelayM1>
                Mci[M1].State = CHARGE_BOOT_CAP;
 80031a8:	2310      	movs	r3, #16
 80031aa:	77e3      	strb	r3, [r4, #31]
 80031ac:	e7ad      	b.n	800310a <TSK_MediumFrequencyTaskM1+0x36>
          if (MCI_STOP == Mci[M1].DirectCommand)
 80031ae:	7fa3      	ldrb	r3, [r4, #30]
 80031b0:	2b05      	cmp	r3, #5
 80031b2:	d05a      	beq.n	800326a <TSK_MediumFrequencyTaskM1+0x196>
            if (TSK_ChargeBootCapDelayHasElapsedM1())
 80031b4:	f7ff fd24 	bl	8002c00 <TSK_ChargeBootCapDelayHasElapsedM1>
 80031b8:	2800      	cmp	r0, #0
 80031ba:	d0a6      	beq.n	800310a <TSK_MediumFrequencyTaskM1+0x36>
              R3_2_SwitchOffPWM(pwmcHandle[M1]);
 80031bc:	4d3c      	ldr	r5, [pc, #240]	@ (80032b0 <TSK_MediumFrequencyTaskM1+0x1dc>)
 80031be:	6828      	ldr	r0, [r5, #0]
 80031c0:	f006 fe1a 	bl	8009df8 <R3_2_SwitchOffPWM>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 80031c4:	4b3b      	ldr	r3, [pc, #236]	@ (80032b4 <TSK_MediumFrequencyTaskM1+0x1e0>)
              HALL_Clear(&HALL_M1);
 80031c6:	4837      	ldr	r0, [pc, #220]	@ (80032a4 <TSK_MediumFrequencyTaskM1+0x1d0>)
 80031c8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80031cc:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->BDTR, TIM_BDTR_BK2E);
 80031ce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031d0:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80031d4:	645a      	str	r2, [r3, #68]	@ 0x44
 80031d6:	f7fe f933 	bl	8001440 <HALL_Clear>
              STO_PLL_Clear(&STO_PLL_M1);
 80031da:	4831      	ldr	r0, [pc, #196]	@ (80032a0 <TSK_MediumFrequencyTaskM1+0x1cc>)
 80031dc:	f007 fea6 	bl	800af2c <STO_PLL_Clear>
              FOC_Clear( M1 );
 80031e0:	2000      	movs	r0, #0
 80031e2:	f7ff fead 	bl	8002f40 <FOC_Clear>
                FOC_InitAdditionalMethods(M1);
 80031e6:	2000      	movs	r0, #0
 80031e8:	f7ff ff50 	bl	800308c <FOC_InitAdditionalMethods>
                FOC_CalcCurrRef(M1);
 80031ec:	2000      	movs	r0, #0
 80031ee:	f7ff ff4f 	bl	8003090 <FOC_CalcCurrRef>
                STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1]); /* Init the reference speed to current speed */
 80031f2:	4b31      	ldr	r3, [pc, #196]	@ (80032b8 <TSK_MediumFrequencyTaskM1+0x1e4>)
 80031f4:	6818      	ldr	r0, [r3, #0]
 80031f6:	f007 fccd 	bl	800ab94 <STC_ForceSpeedReferenceToCurrentSpeed>
              MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the speed sensor */
 80031fa:	482b      	ldr	r0, [pc, #172]	@ (80032a8 <TSK_MediumFrequencyTaskM1+0x1d4>)
 80031fc:	f7ff fa12 	bl	8002624 <MCI_ExecBufferedCommands>
              Mci[M1].State = RUN;
 8003200:	2306      	movs	r3, #6
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 8003202:	6828      	ldr	r0, [r5, #0]
              Mci[M1].State = RUN;
 8003204:	77e3      	strb	r3, [r4, #31]
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 8003206:	f000 fc39 	bl	8003a7c <PWMC_SwitchOnPWM>
 800320a:	e77e      	b.n	800310a <TSK_MediumFrequencyTaskM1+0x36>
          if (MCI_ACK_FAULTS == Mci[M1].DirectCommand)
 800320c:	7fa3      	ldrb	r3, [r4, #30]
 800320e:	2b02      	cmp	r3, #2
 8003210:	f47f af7b 	bne.w	800310a <TSK_MediumFrequencyTaskM1+0x36>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8003214:	2300      	movs	r3, #0
 8003216:	83e3      	strh	r3, [r4, #30]
 8003218:	e777      	b.n	800310a <TSK_MediumFrequencyTaskM1+0x36>
          if (MCI_STOP == Mci[M1].DirectCommand)
 800321a:	7fa3      	ldrb	r3, [r4, #30]
 800321c:	2b05      	cmp	r3, #5
 800321e:	d024      	beq.n	800326a <TSK_MediumFrequencyTaskM1+0x196>
            MCI_ExecBufferedCommands(&Mci[M1]);
 8003220:	4821      	ldr	r0, [pc, #132]	@ (80032a8 <TSK_MediumFrequencyTaskM1+0x1d4>)
 8003222:	f7ff f9ff 	bl	8002624 <MCI_ExecBufferedCommands>
              FOC_CalcCurrRef(M1);
 8003226:	2000      	movs	r0, #0
 8003228:	f7ff ff32 	bl	8003090 <FOC_CalcCurrRef>
              if(!IsSpeedReliable)
 800322c:	2d00      	cmp	r5, #0
 800322e:	f47f af6c 	bne.w	800310a <TSK_MediumFrequencyTaskM1+0x36>
                MCI_FaultProcessing(&Mci[M1], MC_SPEED_FDBK, 0);
 8003232:	481d      	ldr	r0, [pc, #116]	@ (80032a8 <TSK_MediumFrequencyTaskM1+0x1d4>)
 8003234:	462a      	mov	r2, r5
 8003236:	2120      	movs	r1, #32
 8003238:	f7ff f9e8 	bl	800260c <MCI_FaultProcessing>
 800323c:	e765      	b.n	800310a <TSK_MediumFrequencyTaskM1+0x36>
          if ((MCI_START == Mci[M1].DirectCommand) || (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand))
 800323e:	7fa3      	ldrb	r3, [r4, #30]
 8003240:	f003 03fd 	and.w	r3, r3, #253	@ 0xfd
 8003244:	2b01      	cmp	r3, #1
 8003246:	f47f af60 	bne.w	800310a <TSK_MediumFrequencyTaskM1+0x36>
            if (pwmcHandle[M1]->offsetCalibStatus == false)
 800324a:	4d19      	ldr	r5, [pc, #100]	@ (80032b0 <TSK_MediumFrequencyTaskM1+0x1dc>)
 800324c:	6828      	ldr	r0, [r5, #0]
 800324e:	f890 107f 	ldrb.w	r1, [r0, #127]	@ 0x7f
 8003252:	b9c1      	cbnz	r1, 8003286 <TSK_MediumFrequencyTaskM1+0x1b2>
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_START);
 8003254:	f000 fc14 	bl	8003a80 <PWMC_CurrentReadingCalibr>
              Mci[M1].State = OFFSET_CALIB;
 8003258:	2311      	movs	r3, #17
 800325a:	77e3      	strb	r3, [r4, #31]
 800325c:	e755      	b.n	800310a <TSK_MediumFrequencyTaskM1+0x36>
          if (TSK_StopPermanencyTimeHasElapsedM1())
 800325e:	f7ff fcdf 	bl	8002c20 <TSK_StopPermanencyTimeHasElapsedM1>
 8003262:	2800      	cmp	r0, #0
 8003264:	f43f af51 	beq.w	800310a <TSK_MediumFrequencyTaskM1+0x36>
 8003268:	e7d4      	b.n	8003214 <TSK_MediumFrequencyTaskM1+0x140>
    R3_2_SwitchOffPWM(pwmcHandle[motor]);
 800326a:	4b11      	ldr	r3, [pc, #68]	@ (80032b0 <TSK_MediumFrequencyTaskM1+0x1dc>)
 800326c:	6818      	ldr	r0, [r3, #0]
 800326e:	f006 fdc3 	bl	8009df8 <R3_2_SwitchOffPWM>
  FOC_Clear(motor);
 8003272:	2000      	movs	r0, #0
 8003274:	f7ff fe64 	bl	8002f40 <FOC_Clear>
  TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 8003278:	f44f 7048 	mov.w	r0, #800	@ 0x320
 800327c:	f7ff fcca 	bl	8002c14 <TSK_SetStopPermanencyTimeM1>
  Mci[motor].State = STOP;
 8003280:	2308      	movs	r3, #8
 8003282:	77e3      	strb	r3, [r4, #31]
}
 8003284:	e741      	b.n	800310a <TSK_MediumFrequencyTaskM1+0x36>
              pwmcHandle[M1]->OffCalibrWaitTimeCounter = 1u;
 8003286:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 800328a:	4619      	mov	r1, r3
 800328c:	f000 fbf8 	bl	8003a80 <PWMC_CurrentReadingCalibr>
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_BK2E);
 8003290:	e77e      	b.n	8003190 <TSK_MediumFrequencyTaskM1+0xbc>
                FOC_Clear(M1);
 8003292:	2000      	movs	r0, #0
 8003294:	f7ff fe54 	bl	8002f40 <FOC_Clear>
                Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8003298:	2300      	movs	r3, #0
 800329a:	83e3      	strh	r3, [r4, #30]
 800329c:	e735      	b.n	800310a <TSK_MediumFrequencyTaskM1+0x36>
 800329e:	bf00      	nop
 80032a0:	20000134 	.word	0x20000134
 80032a4:	20000068 	.word	0x20000068
 80032a8:	20000010 	.word	0x20000010
 80032ac:	2000003c 	.word	0x2000003c
 80032b0:	20000954 	.word	0x20000954
 80032b4:	40012c00 	.word	0x40012c00
 80032b8:	20000048 	.word	0x20000048

080032bc <FOC_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t FOC_HighFrequencyTask(uint8_t bMotorNbr)
{
 80032bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* USER CODE BEGIN HighFrequencyTask 0 */

  /* USER CODE END HighFrequencyTask 0 */

  Observer_Inputs_t STO_aux_Inputs; /* Only if sensorless aux */
  STO_aux_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* Only if sensorless */
 80032c0:	4c36      	ldr	r4, [pc, #216]	@ (800339c <FOC_HighFrequencyTask+0xe0>)
  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
  hElAngle = SPD_GetElAngle(speedHandle);
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 80032c2:	f8df 80fc 	ldr.w	r8, [pc, #252]	@ 80033c0 <FOC_HighFrequencyTask+0x104>
{
 80032c6:	b088      	sub	sp, #32
 80032c8:	4605      	mov	r5, r0
  STO_aux_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* Only if sensorless */
 80032ca:	f8d4 001a 	ldr.w	r0, [r4, #26]
 80032ce:	9005      	str	r0, [sp, #20]
  (void)HALL_CalcElAngle(&HALL_M1);
 80032d0:	4833      	ldr	r0, [pc, #204]	@ (80033a0 <FOC_HighFrequencyTask+0xe4>)
 80032d2:	f7fe f94f 	bl	8001574 <HALL_CalcElAngle>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 80032d6:	4b33      	ldr	r3, [pc, #204]	@ (80033a4 <FOC_HighFrequencyTask+0xe8>)
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 80032d8:	f8d8 0000 	ldr.w	r0, [r8]
 80032dc:	681b      	ldr	r3, [r3, #0]
static inline int16_t SPD_GetElAngle(const SpeednPosFdbk_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hElAngle);
#else
  return (pHandle->hElAngle);
 80032de:	695b      	ldr	r3, [r3, #20]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctGetPhaseCurrents(pHandle, Iab);
 80032e0:	a902      	add	r1, sp, #8
 80032e2:	f9b3 6004 	ldrsh.w	r6, [r3, #4]
 80032e6:	6803      	ldr	r3, [r0, #0]
 80032e8:	4798      	blx	r3
  RCM_ReadOngoingConv();
 80032ea:	f001 febd 	bl	8005068 <RCM_ReadOngoingConv>
  RCM_ExecNextConv();
 80032ee:	f001 fe77 	bl	8004fe0 <RCM_ExecNextConv>
  Ialphabeta = MCM_Clarke(Iab);
 80032f2:	9802      	ldr	r0, [sp, #8]
 80032f4:	f7ff fa9a 	bl	800282c <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80032f8:	4631      	mov	r1, r6
  Ialphabeta = MCM_Clarke(Iab);
 80032fa:	9003      	str	r0, [sp, #12]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80032fc:	f7ff fad0 	bl	80028a0 <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8003300:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8003304:	9000      	str	r0, [sp, #0]
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8003306:	b201      	sxth	r1, r0
 8003308:	1a59      	subs	r1, r3, r1
 800330a:	4b27      	ldr	r3, [pc, #156]	@ (80033a8 <FOC_HighFrequencyTask+0xec>)
 800330c:	6818      	ldr	r0, [r3, #0]
 800330e:	f006 fb25 	bl	800995c <PI_Controller>
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8003312:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8003316:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 800331a:	1ac9      	subs	r1, r1, r3
 800331c:	4b23      	ldr	r3, [pc, #140]	@ (80033ac <FOC_HighFrequencyTask+0xf0>)
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 800331e:	4607      	mov	r7, r0
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8003320:	6818      	ldr	r0, [r3, #0]
 8003322:	f006 fb1b 	bl	800995c <PI_Controller>
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 8003326:	f8ad 7004 	strh.w	r7, [sp, #4]
 800332a:	f8ad 0006 	strh.w	r0, [sp, #6]
 800332e:	9901      	ldr	r1, [sp, #4]
 8003330:	481f      	ldr	r0, [pc, #124]	@ (80033b0 <FOC_HighFrequencyTask+0xf4>)
 8003332:	f006 f8e7 	bl	8009504 <Circle_Limitation>
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8003336:	4631      	mov	r1, r6
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 8003338:	4607      	mov	r7, r0
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 800333a:	f7ff faf3 	bl	8002924 <MCM_Rev_Park>
 800333e:	4601      	mov	r1, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8003340:	f8d8 0000 	ldr.w	r0, [r8]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8003344:	9104      	str	r1, [sp, #16]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8003346:	f000 fa4f 	bl	80037e8 <PWMC_SetPhaseVoltage>
 800334a:	4601      	mov	r1, r0

  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 800334c:	9802      	ldr	r0, [sp, #8]
 800334e:	6020      	str	r0, [r4, #0]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8003350:	9803      	ldr	r0, [sp, #12]
 8003352:	6060      	str	r0, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 8003354:	9800      	ldr	r0, [sp, #0]
 8003356:	60e0      	str	r0, [r4, #12]
  if(hFOCreturn == MC_DURATION)
 8003358:	2901      	cmp	r1, #1
  FOCVars[M1].Valphabeta = Valphabeta;
 800335a:	9804      	ldr	r0, [sp, #16]
  FOCVars[M1].Vqd = Vqd;
 800335c:	f8c4 7016 	str.w	r7, [r4, #22]
  FOCVars[M1].hElAngle = hElAngle;
 8003360:	8426      	strh	r6, [r4, #32]
  FOCVars[M1].Valphabeta = Valphabeta;
 8003362:	f8c4 001a 	str.w	r0, [r4, #26]
  if(hFOCreturn == MC_DURATION)
 8003366:	d010      	beq.n	800338a <FOC_HighFrequencyTask+0xce>
  {
    temp_avBusVoltage_d = pHandle->AvBusVoltage_d;
  }
  return (temp_avBusVoltage_d);
#else
  return (pHandle->AvBusVoltage_d);
 8003368:	4b12      	ldr	r3, [pc, #72]	@ (80033b4 <FOC_HighFrequencyTask+0xf8>)
    STO_aux_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /* Only if sensorless */
 800336a:	6860      	ldr	r0, [r4, #4]
    STO_aux_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /* Only for sensorless */
 800336c:	88db      	ldrh	r3, [r3, #6]
    STO_aux_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /* Only if sensorless */
 800336e:	9006      	str	r0, [sp, #24]
    (void)STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_aux_Inputs);
 8003370:	a905      	add	r1, sp, #20
 8003372:	4811      	ldr	r0, [pc, #68]	@ (80033b8 <FOC_HighFrequencyTask+0xfc>)
    STO_aux_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /* Only for sensorless */
 8003374:	f8ad 301c 	strh.w	r3, [sp, #28]
    (void)STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_aux_Inputs);
 8003378:	f007 fc14 	bl	800aba4 <STO_PLL_CalcElAngle>
    STO_PLL_CalcAvrgElSpeedDpp (&STO_PLL_M1);
 800337c:	480e      	ldr	r0, [pc, #56]	@ (80033b8 <FOC_HighFrequencyTask+0xfc>)
 800337e:	f007 fda9 	bl	800aed4 <STO_PLL_CalcAvrgElSpeedDpp>
}
 8003382:	4628      	mov	r0, r5
 8003384:	b008      	add	sp, #32
 8003386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MCI_FaultProcessing(&Mci[M1], MC_DURATION, 0);
 800338a:	480c      	ldr	r0, [pc, #48]	@ (80033bc <FOC_HighFrequencyTask+0x100>)
 800338c:	2200      	movs	r2, #0
 800338e:	f7ff f93d 	bl	800260c <MCI_FaultProcessing>
}
 8003392:	4628      	mov	r0, r5
 8003394:	b008      	add	sp, #32
 8003396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800339a:	bf00      	nop
 800339c:	2000092c 	.word	0x2000092c
 80033a0:	20000068 	.word	0x20000068
 80033a4:	20000048 	.word	0x20000048
 80033a8:	20000044 	.word	0x20000044
 80033ac:	20000040 	.word	0x20000040
 80033b0:	2000004c 	.word	0x2000004c
 80033b4:	200003c8 	.word	0x200003c8
 80033b8:	20000134 	.word	0x20000134
 80033bc:	20000010 	.word	0x20000010
 80033c0:	20000954 	.word	0x20000954

080033c4 <RI_SetRegCommandParser>:
  * @param  txSyncFreeSpace Space available for synchronous transmission
  *
  * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
  */
uint8_t RI_SetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 80033c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033c8:	b089      	sub	sp, #36	@ 0x24
  else
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
 80033ca:	6885      	ldr	r5, [r0, #8]
    uint8_t accessResult;

    uint16_t regID;
    uint8_t typeID;
    uint8_t motorID;
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 80033cc:	4b33      	ldr	r3, [pc, #204]	@ (800349c <RI_SetRegCommandParser+0xd8>)
 80033ce:	9306      	str	r3, [sp, #24]
    uint16_t size = 0U;
 80033d0:	f04f 0800 	mov.w	r8, #0
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 80033d4:	4b32      	ldr	r3, [pc, #200]	@ (80034a0 <RI_SetRegCommandParser+0xdc>)
    uint8_t * rxData = pHandle->rxBuffer;
 80033d6:	6844      	ldr	r4, [r0, #4]
    int16_t rxLength = pHandle->rxLength;
 80033d8:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
    uint16_t size = 0U;
 80033dc:	f8ad 8016 	strh.w	r8, [sp, #22]
{
 80033e0:	4606      	mov	r6, r0
    uint8_t number_of_item =0;
    pHandle->txLength = 0;
 80033e2:	f8a0 800e 	strh.w	r8, [r0, #14]
 80033e6:	186f      	adds	r7, r5, r1
  uint8_t retVal = MCP_CMD_OK;
 80033e8:	f8cd 800c 	str.w	r8, [sp, #12]
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 80033ec:	9307      	str	r3, [sp, #28]
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
        /* Prepare next data*/
        rxLength = (int16_t) (rxLength - size);
        rxData = rxData+size;
        /* If there is only one CMD in the buffer, we do not store the result */
        if ((1U == number_of_item) && (0 == rxLength))
 80033ee:	f1c5 0901 	rsb	r9, r5, #1
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 80033f2:	f1a2 0a02 	sub.w	sl, r2, #2
    while (rxLength > 0)
 80033f6:	2a00      	cmp	r2, #0
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 80033f8:	fa0f fe8a 	sxth.w	lr, sl
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 80033fc:	f10d 0316 	add.w	r3, sp, #22
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8003400:	fa1f fa8a 	uxth.w	sl, sl
    while (rxLength > 0)
 8003404:	dd36      	ble.n	8003474 <RI_SetRegCommandParser+0xb0>
      regID = *dataElementID & REG_MASK;
 8003406:	f834 cb02 	ldrh.w	ip, [r4], #2
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 800340a:	f10d 0820 	add.w	r8, sp, #32
      regID = *dataElementID & REG_MASK;
 800340e:	f02c 0007 	bic.w	r0, ip, #7
      motorID = (uint8_t)((*dataElementID & MOTOR_MASK));
 8003412:	f00c 0b07 	and.w	fp, ip, #7
      if (motorID > NBR_OF_MOTORS)
 8003416:	f01c 0f06 	tst.w	ip, #6
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 800341a:	4622      	mov	r2, r4
      regID = *dataElementID & REG_MASK;
 800341c:	b280      	uxth	r0, r0
      typeID = (uint8_t)*dataElementID & TYPE_MASK;
 800341e:	f00c 0138 	and.w	r1, ip, #56	@ 0x38
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8003422:	eb08 0b8b 	add.w	fp, r8, fp, lsl #2
      if (motorID > NBR_OF_MOTORS)
 8003426:	d12d      	bne.n	8003484 <RI_SetRegCommandParser+0xc0>
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8003428:	f85b bc08 	ldr.w	fp, [fp, #-8]
 800342c:	f8cd e000 	str.w	lr, [sp]
 8003430:	47d8      	blx	fp
        rxLength = (int16_t) (rxLength - size);
 8003432:	f8bd 1016 	ldrh.w	r1, [sp, #22]
        if ((1U == number_of_item) && (0 == rxLength))
 8003436:	eb05 0309 	add.w	r3, r5, r9
 800343a:	b2db      	uxtb	r3, r3
        rxLength = (int16_t) (rxLength - size);
 800343c:	ebaa 0201 	sub.w	r2, sl, r1
        if ((1U == number_of_item) && (0 == rxLength))
 8003440:	2b01      	cmp	r3, #1
        rxLength = (int16_t) (rxLength - size);
 8003442:	b212      	sxth	r2, r2
        rxData = rxData+size;
 8003444:	440c      	add	r4, r1
        if ((1U == number_of_item) && (0 == rxLength))
 8003446:	d012      	beq.n	800346e <RI_SetRegCommandParser+0xaa>
        {
          retVal = accessResult;
        }
        else
        {/* Store the result for each access to be able to report failing access */
          if (txSyncFreeSpace !=0 )
 8003448:	42bd      	cmp	r5, r7
 800344a:	d021      	beq.n	8003490 <RI_SetRegCommandParser+0xcc>
          {
            *txData = accessResult;
 800344c:	f805 0b01 	strb.w	r0, [r5], #1
            txData = txData+1;
            pHandle->txLength++;
 8003450:	89f3      	ldrh	r3, [r6, #14]
 8003452:	3301      	adds	r3, #1
 8003454:	81f3      	strh	r3, [r6, #14]
            txSyncFreeSpace--; /* decrement one by one no wraparound possible */
            retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8003456:	2800      	cmp	r0, #0
 8003458:	d0cb      	beq.n	80033f2 <RI_SetRegCommandParser+0x2e>
            if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 800345a:	2807      	cmp	r0, #7
 800345c:	d012      	beq.n	8003484 <RI_SetRegCommandParser+0xc0>
 800345e:	2301      	movs	r3, #1
 8003460:	280a      	cmp	r0, #10
 8003462:	9303      	str	r3, [sp, #12]
 8003464:	d1c5      	bne.n	80033f2 <RI_SetRegCommandParser+0x2e>
    }
  #ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 8003466:	9803      	ldr	r0, [sp, #12]
 8003468:	b009      	add	sp, #36	@ 0x24
 800346a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((1U == number_of_item) && (0 == rxLength))
 800346e:	2a00      	cmp	r2, #0
 8003470:	d1ea      	bne.n	8003448 <RI_SetRegCommandParser+0x84>
 8003472:	9003      	str	r0, [sp, #12]
    if (MCP_CMD_OK == retVal)
 8003474:	9b03      	ldr	r3, [sp, #12]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1f5      	bne.n	8003466 <RI_SetRegCommandParser+0xa2>
}
 800347a:	9803      	ldr	r0, [sp, #12]
      pHandle->txLength = 0;
 800347c:	81f3      	strh	r3, [r6, #14]
}
 800347e:	b009      	add	sp, #36	@ 0x24
 8003480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        retVal = MCP_CMD_NOK;
 8003484:	2301      	movs	r3, #1
 8003486:	9303      	str	r3, [sp, #12]
}
 8003488:	9803      	ldr	r0, [sp, #12]
 800348a:	b009      	add	sp, #36	@ 0x24
 800348c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8003490:	2308      	movs	r3, #8
 8003492:	9303      	str	r3, [sp, #12]
}
 8003494:	9803      	ldr	r0, [sp, #12]
 8003496:	b009      	add	sp, #36	@ 0x24
 8003498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800349c:	08003b49 	.word	0x08003b49
 80034a0:	08003c49 	.word	0x08003c49

080034a4 <RI_GetRegCommandParser>:
  * @param  txSyncFreeSpace Space available for synchronous transmission
  *
  * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
  */
uint8_t RI_GetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 80034a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034a8:	b086      	sub	sp, #24
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
    uint16_t size = 0U;
 80034aa:	2300      	movs	r3, #0
 80034ac:	f8ad 300e 	strh.w	r3, [sp, #14]

    uint16_t regID;
    uint8_t typeID;
    uint8_t motorID;
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
    pHandle->txLength = 0;
 80034b0:	81c3      	strh	r3, [r0, #14]
    uint16_t rxLength = pHandle->rxLength;
 80034b2:	f8b0 800c 	ldrh.w	r8, [r0, #12]
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
 80034b6:	4b1c      	ldr	r3, [pc, #112]	@ (8003528 <RI_GetRegCommandParser+0x84>)
 80034b8:	9304      	str	r3, [sp, #16]
 80034ba:	4b1c      	ldr	r3, [pc, #112]	@ (800352c <RI_GetRegCommandParser+0x88>)
    uint8_t * rxData = pHandle->rxBuffer;
 80034bc:	f8d0 9004 	ldr.w	r9, [r0, #4]
    uint8_t * txData = pHandle->txBuffer;
 80034c0:	6886      	ldr	r6, [r0, #8]
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
 80034c2:	9305      	str	r3, [sp, #20]
    while (rxLength > 0U)
 80034c4:	f1b8 0f00 	cmp.w	r8, #0
 80034c8:	d029      	beq.n	800351e <RI_GetRegCommandParser+0x7a>
 80034ca:	4607      	mov	r7, r0
 80034cc:	b20c      	sxth	r4, r1
    uint8_t * rxData = pHandle->rxBuffer;
 80034ce:	464d      	mov	r5, r9
 80034d0:	e012      	b.n	80034f8 <RI_GetRegCommandParser+0x54>
        retVal = MCP_CMD_NOK;
        rxLength = 0;
      }
      else
      {
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 80034d2:	f85e ac08 	ldr.w	sl, [lr, #-8]
 80034d6:	9400      	str	r4, [sp, #0]
 80034d8:	47d0      	blx	sl
        if (retVal == MCP_CMD_OK )
 80034da:	eba8 0305 	sub.w	r3, r8, r5
    while (rxLength > 0U)
 80034de:	fa19 f383 	uxtah	r3, r9, r3
 80034e2:	b29b      	uxth	r3, r3
        if (retVal == MCP_CMD_OK )
 80034e4:	b9e0      	cbnz	r0, 8003520 <RI_GetRegCommandParser+0x7c>
        {
          /* Prepare next data */
          txData = txData+size;
 80034e6:	f8bd 100e 	ldrh.w	r1, [sp, #14]
          pHandle->txLength += size;
 80034ea:	89fa      	ldrh	r2, [r7, #14]
          freeSpaceS16 = freeSpaceS16-size;
 80034ec:	1a64      	subs	r4, r4, r1
          pHandle->txLength += size;
 80034ee:	440a      	add	r2, r1
          txData = txData+size;
 80034f0:	440e      	add	r6, r1
          pHandle->txLength += size;
 80034f2:	81fa      	strh	r2, [r7, #14]
          freeSpaceS16 = freeSpaceS16-size;
 80034f4:	b224      	sxth	r4, r4
    while (rxLength > 0U)
 80034f6:	b19b      	cbz	r3, 8003520 <RI_GetRegCommandParser+0x7c>
      regID = *dataElementID & REG_MASK;
 80034f8:	f835 cb02 	ldrh.w	ip, [r5], #2
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 80034fc:	f10d 0a18 	add.w	sl, sp, #24
      regID = *dataElementID & REG_MASK;
 8003500:	f02c 0007 	bic.w	r0, ip, #7
      motorID = (uint8_t)((*dataElementID & MOTOR_MASK));
 8003504:	f00c 0e07 	and.w	lr, ip, #7
      if (motorID > NBR_OF_MOTORS)
 8003508:	f01c 0f06 	tst.w	ip, #6
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 800350c:	f10d 030e 	add.w	r3, sp, #14
 8003510:	4632      	mov	r2, r6
      regID = *dataElementID & REG_MASK;
 8003512:	b280      	uxth	r0, r0
      typeID = (uint8_t)*dataElementID & TYPE_MASK;
 8003514:	f00c 0138 	and.w	r1, ip, #56	@ 0x38
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8003518:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
      if (motorID > NBR_OF_MOTORS)
 800351c:	d0d9      	beq.n	80034d2 <RI_GetRegCommandParser+0x2e>
  uint8_t retVal = MCP_CMD_NOK;
 800351e:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 8003520:	b006      	add	sp, #24
 8003522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003526:	bf00      	nop
 8003528:	08004151 	.word	0x08004151
 800352c:	080042e5 	.word	0x080042e5

08003530 <MCP_ReceivedPacket>:
  * @brief  Parses the header from the received packet and call the required function depending on the command sent by the controller device.
  *
  * @param  pHandle Handler of the current instance of the MCP component
  */
void MCP_ReceivedPacket(MCP_Handle_t *pHandle)
{
 8003530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003532:	4604      	mov	r4, r0
  }
  else /* Length is 0, this is a request to send back the last packet */
  {
#endif
    packetHeader = (uint16_t *)pHandle->rxBuffer; //cstat !MISRAC2012-Rule-11.3
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8003534:	6846      	ldr	r6, [r0, #4]
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;

    /* Commands requiering payload response must be aware of space available for the payload */
    /* Last byte is reserved for MCP response*/
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8003536:	6822      	ldr	r2, [r4, #0]
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8003538:	f836 3b02 	ldrh.w	r3, [r6], #2
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 800353c:	8980      	ldrh	r0, [r0, #12]
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 800353e:	8992      	ldrh	r2, [r2, #12]
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8003540:	f403 457f 	and.w	r5, r3, #65280	@ 0xff00
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8003544:	3a01      	subs	r2, #1
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8003546:	3802      	subs	r0, #2
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8003548:	f023 0c07 	bic.w	ip, r3, #7
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 800354c:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8003550:	b291      	uxth	r1, r2
{
 8003552:	b083      	sub	sp, #12
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8003554:	b280      	uxth	r0, r0
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8003556:	fa1f fc8c 	uxth.w	ip, ip
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 800355a:	b212      	sxth	r2, r2
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 800355c:	d044      	beq.n	80035e8 <MCP_ReceivedPacket+0xb8>
    motorID = (uint8_t)((*packetHeader - 1U) & MOTOR_MASK);
 800355e:	3b01      	subs	r3, #1
    MCI_Handle_t *pMCI = &Mci[motorID];
 8003560:	f003 0307 	and.w	r3, r3, #7
 8003564:	4d59      	ldr	r5, [pc, #356]	@ (80036cc <MCP_ReceivedPacket+0x19c>)
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8003566:	81a0      	strh	r0, [r4, #12]
    MCI_Handle_t *pMCI = &Mci[motorID];
 8003568:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 800356c:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8003570:	eb05 0783 	add.w	r7, r5, r3, lsl #2

    /* Initialization of the tx length, command which send back data has to increment the txLength
     * (case of Read register) */
    pHandle->txLength = 0U;

    switch (command)
 8003574:	f1bc 0f48 	cmp.w	ip, #72	@ 0x48
    pHandle->txLength = 0U;
 8003578:	f04f 0500 	mov.w	r5, #0
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 800357c:	6066      	str	r6, [r4, #4]
    pHandle->txLength = 0U;
 800357e:	81e5      	strh	r5, [r4, #14]
    switch (command)
 8003580:	d87c      	bhi.n	800367c <MCP_ReceivedPacket+0x14c>
 8003582:	f1bc 0f48 	cmp.w	ip, #72	@ 0x48
 8003586:	d826      	bhi.n	80035d6 <MCP_ReceivedPacket+0xa6>
 8003588:	e8df f00c 	tbb	[pc, ip]
 800358c:	25252558 	.word	0x25252558
 8003590:	25252525 	.word	0x25252525
 8003594:	25252560 	.word	0x25252560
 8003598:	25252525 	.word	0x25252525
 800359c:	25252553 	.word	0x25252553
 80035a0:	25252525 	.word	0x25252525
 80035a4:	25252543 	.word	0x25252543
 80035a8:	25252525 	.word	0x25252525
 80035ac:	2525253d 	.word	0x2525253d
 80035b0:	25252525 	.word	0x25252525
 80035b4:	2525254b 	.word	0x2525254b
 80035b8:	25252525 	.word	0x25252525
 80035bc:	25252539 	.word	0x25252539
 80035c0:	25252525 	.word	0x25252525
 80035c4:	25252565 	.word	0x25252565
 80035c8:	25252525 	.word	0x25252525
 80035cc:	2525256b 	.word	0x2525256b
 80035d0:	25252525 	.word	0x25252525
 80035d4:	72          	.byte	0x72
 80035d5:	00          	.byte	0x00
 80035d6:	2300      	movs	r3, #0
 80035d8:	2002      	movs	r0, #2
      {
        MCPResponse = MCP_CMD_UNKNOWN;
        break;
      }
    }
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80035da:	68a2      	ldr	r2, [r4, #8]
 80035dc:	54d0      	strb	r0, [r2, r3]
    pHandle->txLength++;
 80035de:	89e3      	ldrh	r3, [r4, #14]
 80035e0:	3301      	adds	r3, #1
 80035e2:	81e3      	strh	r3, [r4, #14]
#ifdef NULL_PTR_CHECK_MCP
  }
#endif
}
 80035e4:	b003      	add	sp, #12
 80035e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      userCommand = ((uint8_t)(command & 0xF8U) >> 3U);
 80035e8:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
    pHandle->txLength = 0U;
 80035ec:	2300      	movs	r3, #0
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 80035ee:	f1bc 0f01 	cmp.w	ip, #1
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 80035f2:	81a0      	strh	r0, [r4, #12]
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 80035f4:	6066      	str	r6, [r4, #4]
    pHandle->txLength = 0U;
 80035f6:	81e3      	strh	r3, [r4, #14]
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 80035f8:	d954      	bls.n	80036a4 <MCP_ReceivedPacket+0x174>
          MCPResponse = MCP_ERROR_CALLBACK_NOT_REGISTRED;
 80035fa:	200d      	movs	r0, #13
 80035fc:	e7ed      	b.n	80035da <MCP_ReceivedPacket+0xaa>
        if (IDLE == MCI_GetSTMState(pMCI))
 80035fe:	4638      	mov	r0, r7
 8003600:	f7ff f84c 	bl	800269c <MCI_GetSTMState>
 8003604:	b128      	cbz	r0, 8003612 <MCP_ReceivedPacket+0xe2>
          (void)MCI_StopMotor(pMCI);
 8003606:	4638      	mov	r0, r7
 8003608:	f7ff f864 	bl	80026d4 <MCI_StopMotor>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800360c:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 800360e:	2000      	movs	r0, #0
 8003610:	e7e3      	b.n	80035da <MCP_ReceivedPacket+0xaa>
          MCPResponse = (MCI_StartMotor(pMCI) == true) ? MCP_CMD_OK : MCP_CMD_NOK;
 8003612:	4638      	mov	r0, r7
 8003614:	f7ff f848 	bl	80026a8 <MCI_StartMotor>
 8003618:	f080 0001 	eor.w	r0, r0, #1
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800361c:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = (MCI_StartMotor(pMCI) == true) ? MCP_CMD_OK : MCP_CMD_NOK;
 800361e:	b2c0      	uxtb	r0, r0
 8003620:	e7db      	b.n	80035da <MCP_ReceivedPacket+0xaa>
        if (RUN == MCI_GetSTMState(pMCI))
 8003622:	4638      	mov	r0, r7
 8003624:	f7ff f83a 	bl	800269c <MCI_GetSTMState>
 8003628:	2806      	cmp	r0, #6
 800362a:	d047      	beq.n	80036bc <MCP_ReceivedPacket+0x18c>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800362c:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 800362e:	2000      	movs	r0, #0
 8003630:	e7d3      	b.n	80035da <MCP_ReceivedPacket+0xaa>
        MCPResponse = RI_GetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 8003632:	4620      	mov	r0, r4
 8003634:	f7ff ff36 	bl	80034a4 <RI_GetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8003638:	89e3      	ldrh	r3, [r4, #14]
        break;
 800363a:	e7ce      	b.n	80035da <MCP_ReceivedPacket+0xaa>
        *pHandle->txBuffer = MCP_VERSION;
 800363c:	68a3      	ldr	r3, [r4, #8]
        pHandle->txLength = 4U;
 800363e:	2104      	movs	r1, #4
        *pHandle->txBuffer = MCP_VERSION;
 8003640:	2201      	movs	r2, #1
        pHandle->txLength = 4U;
 8003642:	81e1      	strh	r1, [r4, #14]
        *pHandle->txBuffer = MCP_VERSION;
 8003644:	701a      	strb	r2, [r3, #0]
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8003646:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8003648:	2000      	movs	r0, #0
        break;
 800364a:	e7c6      	b.n	80035da <MCP_ReceivedPacket+0xaa>
        MCPResponse = RI_SetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 800364c:	4620      	mov	r0, r4
 800364e:	f7ff feb9 	bl	80033c4 <RI_SetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8003652:	89e3      	ldrh	r3, [r4, #14]
        break;
 8003654:	e7c1      	b.n	80035da <MCP_ReceivedPacket+0xaa>
        (void)MCI_FaultAcknowledged(pMCI);
 8003656:	4638      	mov	r0, r7
 8003658:	f7ff f858 	bl	800270c <MCI_FaultAcknowledged>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800365c:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 800365e:	2000      	movs	r0, #0
        break;
 8003660:	e7bb      	b.n	80035da <MCP_ReceivedPacket+0xaa>
        MCI_Clear_PerfMeasure(pMCI,M1);
 8003662:	4638      	mov	r0, r7
 8003664:	2100      	movs	r1, #0
 8003666:	f7ff f8dd 	bl	8002824 <MCI_Clear_PerfMeasure>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800366a:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 800366c:	2000      	movs	r0, #0
        break;
 800366e:	e7b4      	b.n	80035da <MCP_ReceivedPacket+0xaa>
        MCI_Clear_Iqdref(pMCI);
 8003670:	4638      	mov	r0, r7
 8003672:	f7ff f8cd 	bl	8002810 <MCI_Clear_Iqdref>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8003676:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8003678:	2000      	movs	r0, #0
        break;
 800367a:	e7ae      	b.n	80035da <MCP_ReceivedPacket+0xaa>
    switch (command)
 800367c:	f1bc 0f78 	cmp.w	ip, #120	@ 0x78
 8003680:	d00b      	beq.n	800369a <MCP_ReceivedPacket+0x16a>
 8003682:	f1bc 0f68 	cmp.w	ip, #104	@ 0x68
 8003686:	d1a6      	bne.n	80035d6 <MCP_ReceivedPacket+0xa6>
        MCPResponse = MC_ProfilerCommand(pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength,
 8003688:	68a3      	ldr	r3, [r4, #8]
 800368a:	9300      	str	r3, [sp, #0]
 800368c:	4631      	mov	r1, r6
 800368e:	f104 030e 	add.w	r3, r4, #14
 8003692:	f7fe ff77 	bl	8002584 <MC_ProfilerCommand>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8003696:	89e3      	ldrh	r3, [r4, #14]
        break;
 8003698:	e79f      	b.n	80035da <MCP_ReceivedPacket+0xaa>
        HAL_NVIC_SystemReset();
 800369a:	f003 facd 	bl	8006c38 <HAL_NVIC_SystemReset>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800369e:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 80036a0:	4628      	mov	r0, r5
        break;
 80036a2:	e79a      	b.n	80035da <MCP_ReceivedPacket+0xaa>
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 80036a4:	4b0a      	ldr	r3, [pc, #40]	@ (80036d0 <MCP_ReceivedPacket+0x1a0>)
 80036a6:	f853 502c 	ldr.w	r5, [r3, ip, lsl #2]
 80036aa:	b16d      	cbz	r5, 80036c8 <MCP_ReceivedPacket+0x198>
          MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace,
 80036ac:	68a3      	ldr	r3, [r4, #8]
 80036ae:	9300      	str	r3, [sp, #0]
 80036b0:	4631      	mov	r1, r6
 80036b2:	f104 030e 	add.w	r3, r4, #14
 80036b6:	47a8      	blx	r5
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80036b8:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace,
 80036ba:	e78e      	b.n	80035da <MCP_ReceivedPacket+0xaa>
          MCI_StopRamp(pMCI);
 80036bc:	4638      	mov	r0, r7
 80036be:	f7ff f84b 	bl	8002758 <MCI_StopRamp>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80036c2:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 80036c4:	2000      	movs	r0, #0
 80036c6:	e788      	b.n	80035da <MCP_ReceivedPacket+0xaa>
 80036c8:	462b      	mov	r3, r5
 80036ca:	e796      	b.n	80035fa <MCP_ReceivedPacket+0xca>
 80036cc:	20000010 	.word	0x20000010
 80036d0:	20000994 	.word	0x20000994

080036d4 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 80036d4:	b508      	push	{r3, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  (void)HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / SYS_TICK_FREQUENCY);
 80036d6:	f004 f9d9 	bl	8007a8c <HAL_RCC_GetHCLKFreq>
 80036da:	4b0a      	ldr	r3, [pc, #40]	@ (8003704 <MX_MotorControl_Init+0x30>)
 80036dc:	fba3 3000 	umull	r3, r0, r3, r0
 80036e0:	09c0      	lsrs	r0, r0, #7
 80036e2:	f003 fabb 	bl	8006c5c <HAL_SYSTICK_Config>
  HAL_NVIC_SetPriority(SysTick_IRQn, uwTickPrio, 0U);
 80036e6:	4b08      	ldr	r3, [pc, #32]	@ (8003708 <MX_MotorControl_Init+0x34>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	6819      	ldr	r1, [r3, #0]
 80036ec:	f04f 30ff 	mov.w	r0, #4294967295
 80036f0:	f003 fa58 	bl	8006ba4 <HAL_NVIC_SetPriority>

  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI);
 80036f4:	4805      	ldr	r0, [pc, #20]	@ (800370c <MX_MotorControl_Init+0x38>)
 80036f6:	f7ff fa45 	bl	8002b84 <MCboot>
  mc_lock_pins();
}
 80036fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  mc_lock_pins();
 80036fe:	f7ff bb8d 	b.w	8002e1c <mc_lock_pins>
 8003702:	bf00      	nop
 8003704:	10624dd3 	.word	0x10624dd3
 8003708:	20000510 	.word	0x20000510
 800370c:	20001c20 	.word	0x20001c20

08003710 <startTimers>:
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
 8003710:	4922      	ldr	r1, [pc, #136]	@ (800379c <startTimers+0x8c>)
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
  */
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((READ_BIT(RCC->APB1ENR1, Periphs) == Periphs) ? 1UL : 0UL);
 8003712:	4a23      	ldr	r2, [pc, #140]	@ (80037a0 <startTimers+0x90>)
 8003714:	688b      	ldr	r3, [r1, #8]
  * When this function is called, TIM1 and/or TIM8 must be in a frozen state
  * with CNT, ARR, REP RATE and trigger correctly set (these settings are
  * usually performed in the Init method accordingly with the configuration)
  */
__weak void startTimers(void)
{
 8003716:	b410      	push	{r4}
 8003718:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800371c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003720:	f043 0310 	orr.w	r3, r3, #16
 8003724:	b083      	sub	sp, #12
 8003726:	608b      	str	r3, [r1, #8]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, SlaveMode);
 8003728:	688b      	ldr	r3, [r1, #8]
 800372a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800372e:	f023 0307 	bic.w	r3, r3, #7
 8003732:	f043 0306 	orr.w	r3, r3, #6
 8003736:	608b      	str	r3, [r1, #8]
 8003738:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800373a:	07db      	lsls	r3, r3, #31
 800373c:	d416      	bmi.n	800376c <startTimers+0x5c>
  SET_BIT(RCC->APB1ENR1, Periphs);
 800373e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8003740:	f043 0301 	orr.w	r3, r3, #1
 8003744:	6593      	str	r3, [r2, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003746:	6d93      	ldr	r3, [r2, #88]	@ 0x58
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003748:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8003752:	9b01      	ldr	r3, [sp, #4]
 8003754:	694b      	ldr	r3, [r1, #20]
 8003756:	f043 0301 	orr.w	r3, r3, #1
 800375a:	614b      	str	r3, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 800375c:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800375e:	f023 0301 	bic.w	r3, r3, #1
 8003762:	6593      	str	r3, [r2, #88]	@ 0x58
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_UPDATE);
    LL_TIM_GenerateEvent_UPDATE(TIM2);
    LL_TIM_SetTriggerOutput(TIM2, trigOut);
  }
}
 8003764:	b003      	add	sp, #12
 8003766:	f85d 4b04 	ldr.w	r4, [sp], #4
 800376a:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
 800376c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8003770:	480c      	ldr	r0, [pc, #48]	@ (80037a4 <startTimers+0x94>)
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	6859      	ldr	r1, [r3, #4]
 8003776:	4c0c      	ldr	r4, [pc, #48]	@ (80037a8 <startTimers+0x98>)
 8003778:	4001      	ands	r1, r0
 800377a:	f041 0120 	orr.w	r1, r1, #32
 800377e:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003780:	6959      	ldr	r1, [r3, #20]
 8003782:	f041 0101 	orr.w	r1, r1, #1
 8003786:	6159      	str	r1, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8003788:	6859      	ldr	r1, [r3, #4]
 800378a:	4022      	ands	r2, r4
 800378c:	4001      	ands	r1, r0
 800378e:	430a      	orrs	r2, r1
 8003790:	605a      	str	r2, [r3, #4]
}
 8003792:	b003      	add	sp, #12
 8003794:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	40012c00 	.word	0x40012c00
 80037a0:	40021000 	.word	0x40021000
 80037a4:	fdffff8f 	.word	0xfdffff8f
 80037a8:	02000070 	.word	0x02000070

080037ac <waitForPolarizationEnd>:
  {
#endif
    uint16_t hCalibrationPeriodCounter;
    uint16_t hMaxPeriodsNumber;

    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 80037ac:	3201      	adds	r2, #1
{
 80037ae:	b570      	push	{r4, r5, r6, lr}
    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 80037b0:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80037b2:	f06f 0602 	mvn.w	r6, #2
 80037b6:	0155      	lsls	r5, r2, #5
 80037b8:	6106      	str	r6, [r0, #16]

    /* Wait for NB_CONVERSIONS to be executed */
    LL_TIM_ClearFlag_CC1(TIMx);
    hCalibrationPeriodCounter = 0u;
 80037ba:	2200      	movs	r2, #0
    while (*cnt < NB_CONVERSIONS)
 80037bc:	f893 c000 	ldrb.w	ip, [r3]
 80037c0:	f1bc 0f0f 	cmp.w	ip, #15
    {
      if ((uint32_t)ERROR == LL_TIM_IsActiveFlag_CC1(TIMx))
      {
        LL_TIM_ClearFlag_CC1(TIMx);
        hCalibrationPeriodCounter++;
 80037c4:	f102 0e01 	add.w	lr, r2, #1
    while (*cnt < NB_CONVERSIONS)
 80037c8:	d80c      	bhi.n	80037e4 <waitForPolarizationEnd+0x38>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 80037ca:	6904      	ldr	r4, [r0, #16]
 80037cc:	07a4      	lsls	r4, r4, #30
 80037ce:	d5f5      	bpl.n	80037bc <waitForPolarizationEnd+0x10>
        hCalibrationPeriodCounter++;
 80037d0:	fa1f f28e 	uxth.w	r2, lr
        if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 80037d4:	4295      	cmp	r5, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80037d6:	6106      	str	r6, [r0, #16]
 80037d8:	d8f0      	bhi.n	80037bc <waitForPolarizationEnd+0x10>
        {
          if (*cnt < NB_CONVERSIONS)
 80037da:	781c      	ldrb	r4, [r3, #0]
 80037dc:	2c0f      	cmp	r4, #15
 80037de:	d8ed      	bhi.n	80037bc <waitForPolarizationEnd+0x10>
          {
            *SWerror = 1u;
 80037e0:	2301      	movs	r3, #1
 80037e2:	800b      	strh	r3, [r1, #0]
      }
    }
#ifdef NULL_PTR_CHECK_POW_COM
  }
#endif
  }
 80037e4:	bd70      	pop	{r4, r5, r6, pc}
 80037e6:	bf00      	nop

080037e8 <PWMC_SetPhaseVoltage>:
  * @param  Valfa_beta: Voltage Components expressed in the @f$(\alpha, \beta)@f$ reference frame.
  * @retval #MC_NO_ERROR if no error occurred or #MC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage(PWMC_Handle_t *pHandle, alphabeta_t Valfa_beta)
{
 80037e8:	b530      	push	{r4, r5, lr}
    int32_t wTimePhA;
    int32_t wTimePhB;
    int32_t wTimePhC;

    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 80037ea:	f8b0 4070 	ldrh.w	r4, [r0, #112]	@ 0x70
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 80037ee:	f8b0 204e 	ldrh.w	r2, [r0, #78]	@ 0x4e
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 80037f2:	ea4f 4c21 	mov.w	ip, r1, asr #16
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 80037f6:	b20b      	sxth	r3, r1
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 80037f8:	fb04 fc0c 	mul.w	ip, r4, ip
 80037fc:	ebcc 7ccc 	rsb	ip, ip, ip, lsl #31
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8003800:	fb02 f303 	mul.w	r3, r2, r3

    wX = wUBeta;
    wY = (wUBeta + wUAlpha) / 2;
 8003804:	eb03 024c 	add.w	r2, r3, ip, lsl #1
    wZ = (wUBeta - wUAlpha) / 2;
 8003808:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
    wY = (wUBeta + wUAlpha) / 2;
 800380c:	eb02 7ed2 	add.w	lr, r2, r2, lsr #31
    wZ = (wUBeta - wUAlpha) / 2;
 8003810:	eb03 71d3 	add.w	r1, r3, r3, lsr #31

    /* Sector calculation from wX, wY, wZ */
    if (wY < 0)
 8003814:	1c55      	adds	r5, r2, #1
{
 8003816:	b083      	sub	sp, #12
    {
      if (wZ < 0)
      {
        pHandle->Sector = SECTOR_5;
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8003818:	ea4f 0494 	mov.w	r4, r4, lsr #2
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 800381c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    wY = (wUBeta + wUAlpha) / 2;
 8003820:	ea4f 0e6e 	mov.w	lr, lr, asr #1
    wZ = (wUBeta - wUAlpha) / 2;
 8003824:	ea4f 0161 	mov.w	r1, r1, asr #1
    if (wY < 0)
 8003828:	db6b      	blt.n	8003902 <PWMC_SetPhaseVoltage+0x11a>
        }
        }
    }
    else /* wY > 0 */
    {
      if (wZ >= 0)
 800382a:	1c5d      	adds	r5, r3, #1
 800382c:	db3d      	blt.n	80038aa <PWMC_SetPhaseVoltage+0xc2>
      {
        pHandle->Sector = SECTOR_2;
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 800382e:	ebbe 0e01 	subs.w	lr, lr, r1
 8003832:	bf44      	itt	mi
 8003834:	f50e 3e7f 	addmi.w	lr, lr, #261120	@ 0x3fc00
 8003838:	f20e 3eff 	addwmi	lr, lr, #1023	@ 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 800383c:	2b00      	cmp	r3, #0
 800383e:	bfbc      	itt	lt
 8003840:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
 8003844:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
        wTimePhC = wTimePhA - (wY / 131072);
 8003848:	2a00      	cmp	r2, #0
 800384a:	bfb8      	it	lt
 800384c:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00

        if(true == pHandle->SingleShuntTopology)
 8003850:	f890 1085 	ldrb.w	r1, [r0, #133]	@ 0x85
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8003854:	eb04 4eae 	add.w	lr, r4, lr, asr #18
        pHandle->Sector = SECTOR_2;
 8003858:	f04f 0501 	mov.w	r5, #1
        wTimePhC = wTimePhA - (wY / 131072);
 800385c:	bfb8      	it	lt
 800385e:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
        pHandle->Sector = SECTOR_2;
 8003862:	f880 507a 	strb.w	r5, [r0, #122]	@ 0x7a
        wTimePhB = wTimePhA + (wZ / 131072);
 8003866:	eb0e 43a3 	add.w	r3, lr, r3, asr #18
        wTimePhC = wTimePhA - (wY / 131072);
 800386a:	ebae 42a2 	sub.w	r2, lr, r2, asr #18
        if(true == pHandle->SingleShuntTopology)
 800386e:	2900      	cmp	r1, #0
 8003870:	d16e      	bne.n	8003950 <PWMC_SetPhaseVoltage+0x168>
          pHandle->midDuty = 0U;
          pHandle->highDuty = 1U;
        }
        else
        {
        pHandle->lowDuty = (uint16_t)wTimePhB;
 8003872:	fa1f fc83 	uxth.w	ip, r3
        pHandle->midDuty = (uint16_t)wTimePhA;
 8003876:	fa1f f48e 	uxth.w	r4, lr
        pHandle->highDuty = (uint16_t)wTimePhC;
 800387a:	b291      	uxth	r1, r2
            pHandle->highDuty = 2U;
 800387c:	f8a0 105c 	strh.w	r1, [r0, #92]	@ 0x5c

    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));

    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 8003880:	6941      	ldr	r1, [r0, #20]
            pHandle->lowDuty = 0U;
 8003882:	f8a0 c058 	strh.w	ip, [r0, #88]	@ 0x58
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 8003886:	ea2e 7eee 	bic.w	lr, lr, lr, asr #31
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 800388a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 800388e:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
            pHandle->midDuty = 1U;
 8003892:	f8a0 405a 	strh.w	r4, [r0, #90]	@ 0x5a
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 8003896:	f8a0 e050 	strh.w	lr, [r0, #80]	@ 0x50
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 800389a:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 800389e:	f8a0 2054 	strh.w	r2, [r0, #84]	@ 0x54
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (returnValue);
}
 80038a2:	b003      	add	sp, #12
 80038a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 80038a8:	4708      	bx	r1
        if ( wX <= 0 )
 80038aa:	f1bc 0f00 	cmp.w	ip, #0
 80038ae:	dd7b      	ble.n	80039a8 <PWMC_SetPhaseVoltage+0x1c0>
          wTimePhB = wTimePhA + (wZ / 131072);
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	bfb8      	it	lt
 80038b4:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 80038b8:	ebac 0101 	sub.w	r1, ip, r1
          wTimePhB = wTimePhA + (wZ / 131072);
 80038bc:	bfb8      	it	lt
 80038be:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
          wTimePhC = wTimePhB - (wX / 131072);
 80038c2:	f1bc 0f00 	cmp.w	ip, #0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 80038c6:	eb04 4ea1 	add.w	lr, r4, r1, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 80038ca:	bfb8      	it	lt
 80038cc:	f50c 3cff 	addlt.w	ip, ip, #130560	@ 0x1fe00
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 80038d0:	f890 107d 	ldrb.w	r1, [r0, #125]	@ 0x7d
          pHandle->Sector = SECTOR_1;
 80038d4:	f04f 0200 	mov.w	r2, #0
          wTimePhB = wTimePhA + (wZ / 131072);
 80038d8:	eb0e 43a3 	add.w	r3, lr, r3, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 80038dc:	bfb8      	it	lt
 80038de:	f20c 1cff 	addwlt	ip, ip, #511	@ 0x1ff
          pHandle->Sector = SECTOR_1;
 80038e2:	f880 207a 	strb.w	r2, [r0, #122]	@ 0x7a
          wTimePhC = wTimePhB - (wX / 131072);
 80038e6:	eba3 426c 	sub.w	r2, r3, ip, asr #17
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 80038ea:	2900      	cmp	r1, #0
 80038ec:	f040 80ae 	bne.w	8003a4c <PWMC_SetPhaseVoltage+0x264>
 80038f0:	f890 4085 	ldrb.w	r4, [r0, #133]	@ 0x85
 80038f4:	2c00      	cmp	r4, #0
 80038f6:	f000 80b9 	beq.w	8003a6c <PWMC_SetPhaseVoltage+0x284>
 80038fa:	f04f 0c02 	mov.w	ip, #2
 80038fe:	2401      	movs	r4, #1
 8003900:	e7bc      	b.n	800387c <PWMC_SetPhaseVoltage+0x94>
      if (wZ < 0)
 8003902:	f1b3 3fff 	cmp.w	r3, #4294967295
        if(true == pHandle->SingleShuntTopology)
 8003906:	f890 5085 	ldrb.w	r5, [r0, #133]	@ 0x85
      if (wZ < 0)
 800390a:	db70      	blt.n	80039ee <PWMC_SetPhaseVoltage+0x206>
        if (wX <= 0)
 800390c:	f1bc 0f00 	cmp.w	ip, #0
 8003910:	dd23      	ble.n	800395a <PWMC_SetPhaseVoltage+0x172>
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 8003912:	ebbe 0e0c 	subs.w	lr, lr, ip
 8003916:	bf44      	itt	mi
 8003918:	f50e 3e7f 	addmi.w	lr, lr, #261120	@ 0x3fc00
 800391c:	f20e 3eff 	addwmi	lr, lr, #1023	@ 0x3ff
          wTimePhC = wTimePhA - (wY / 131072);
 8003920:	2a00      	cmp	r2, #0
 8003922:	bfb8      	it	lt
 8003924:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 8003928:	eb04 4eae 	add.w	lr, r4, lr, asr #18
          wTimePhC = wTimePhA - (wY / 131072);
 800392c:	bfb8      	it	lt
 800392e:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
          pHandle->Sector = SECTOR_3;
 8003932:	2302      	movs	r3, #2
          wTimePhC = wTimePhA - (wY / 131072);
 8003934:	ebae 42a2 	sub.w	r2, lr, r2, asr #18
          pHandle->Sector = SECTOR_3;
 8003938:	f880 307a 	strb.w	r3, [r0, #122]	@ 0x7a
          wTimePhB = wTimePhC + (wX / 131072);
 800393c:	eb02 436c 	add.w	r3, r2, ip, asr #17
          if(true == pHandle->SingleShuntTopology)
 8003940:	2d00      	cmp	r5, #0
 8003942:	d17e      	bne.n	8003a42 <PWMC_SetPhaseVoltage+0x25a>
          pHandle->lowDuty = (uint16_t)wTimePhB;
 8003944:	fa1f fc83 	uxth.w	ip, r3
          pHandle->midDuty = (uint16_t)wTimePhC;
 8003948:	b294      	uxth	r4, r2
          pHandle->highDuty = (uint16_t)wTimePhA;
 800394a:	fa1f f18e 	uxth.w	r1, lr
 800394e:	e795      	b.n	800387c <PWMC_SetPhaseVoltage+0x94>
 8003950:	f04f 0c02 	mov.w	ip, #2
 8003954:	2400      	movs	r4, #0
 8003956:	2101      	movs	r1, #1
 8003958:	e790      	b.n	800387c <PWMC_SetPhaseVoltage+0x94>
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 800395a:	ebbc 0101 	subs.w	r1, ip, r1
 800395e:	bf44      	itt	mi
 8003960:	f501 317f 	addmi.w	r1, r1, #261120	@ 0x3fc00
 8003964:	f201 31ff 	addwmi	r1, r1, #1023	@ 0x3ff
          wTimePhB = wTimePhA + (wZ / 131072);
 8003968:	2b00      	cmp	r3, #0
 800396a:	bfb8      	it	lt
 800396c:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
          pHandle->Sector = SECTOR_4;
 8003970:	f04f 0203 	mov.w	r2, #3
          wTimePhB = wTimePhA + (wZ / 131072);
 8003974:	bfb8      	it	lt
 8003976:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
          pHandle->Sector = SECTOR_4;
 800397a:	f880 207a 	strb.w	r2, [r0, #122]	@ 0x7a
          wTimePhC = wTimePhB - (wX / 131072);
 800397e:	f1bc 0200 	subs.w	r2, ip, #0
 8003982:	bfb8      	it	lt
 8003984:	f502 32ff 	addlt.w	r2, r2, #130560	@ 0x1fe00
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8003988:	eb04 4ea1 	add.w	lr, r4, r1, asr #18
          wTimePhB = wTimePhA + (wZ / 131072);
 800398c:	eb0e 43a3 	add.w	r3, lr, r3, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8003990:	bfb8      	it	lt
 8003992:	f202 12ff 	addwlt	r2, r2, #511	@ 0x1ff
 8003996:	eba3 4262 	sub.w	r2, r3, r2, asr #17
          if(true == pHandle->SingleShuntTopology)
 800399a:	2d00      	cmp	r5, #0
 800399c:	d060      	beq.n	8003a60 <PWMC_SetPhaseVoltage+0x278>
 800399e:	f04f 0c00 	mov.w	ip, #0
 80039a2:	2401      	movs	r4, #1
 80039a4:	2102      	movs	r1, #2
 80039a6:	e769      	b.n	800387c <PWMC_SetPhaseVoltage+0x94>
          wTimePhC = wTimePhA - (wY / 131072);
 80039a8:	2a00      	cmp	r2, #0
 80039aa:	bfb8      	it	lt
 80039ac:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
          pHandle->Sector = SECTOR_6;
 80039b0:	f04f 0305 	mov.w	r3, #5
          wTimePhC = wTimePhA - (wY / 131072);
 80039b4:	bfb8      	it	lt
 80039b6:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 80039ba:	ebae 0e0c 	sub.w	lr, lr, ip
          pHandle->Sector = SECTOR_6;
 80039be:	f880 307a 	strb.w	r3, [r0, #122]	@ 0x7a
          wTimePhB = wTimePhC + (wX / 131072);
 80039c2:	f1bc 0300 	subs.w	r3, ip, #0
 80039c6:	bfb8      	it	lt
 80039c8:	f503 33ff 	addlt.w	r3, r3, #130560	@ 0x1fe00
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 80039cc:	eb04 4eae 	add.w	lr, r4, lr, asr #18
          if(true == pHandle->SingleShuntTopology)
 80039d0:	f890 1085 	ldrb.w	r1, [r0, #133]	@ 0x85
          wTimePhC = wTimePhA - (wY / 131072);
 80039d4:	ebae 42a2 	sub.w	r2, lr, r2, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 80039d8:	bfb8      	it	lt
 80039da:	f203 13ff 	addwlt	r3, r3, #511	@ 0x1ff
 80039de:	eb02 4363 	add.w	r3, r2, r3, asr #17
          if(true == pHandle->SingleShuntTopology)
 80039e2:	b3c1      	cbz	r1, 8003a56 <PWMC_SetPhaseVoltage+0x26e>
 80039e4:	f04f 0c01 	mov.w	ip, #1
 80039e8:	2402      	movs	r4, #2
 80039ea:	2100      	movs	r1, #0
 80039ec:	e746      	b.n	800387c <PWMC_SetPhaseVoltage+0x94>
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80039ee:	ebbe 0e01 	subs.w	lr, lr, r1
 80039f2:	bf44      	itt	mi
 80039f4:	f50e 3e7f 	addmi.w	lr, lr, #261120	@ 0x3fc00
 80039f8:	f20e 3eff 	addwmi	lr, lr, #1023	@ 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	bfbc      	itt	lt
 8003a00:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
 8003a04:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
        wTimePhC = wTimePhA - (wY / 131072) ;
 8003a08:	2a00      	cmp	r2, #0
 8003a0a:	bfb8      	it	lt
 8003a0c:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8003a10:	eb04 4eae 	add.w	lr, r4, lr, asr #18
        pHandle->Sector = SECTOR_5;
 8003a14:	f04f 0c04 	mov.w	ip, #4
        wTimePhC = wTimePhA - (wY / 131072) ;
 8003a18:	bfb8      	it	lt
 8003a1a:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
        pHandle->Sector = SECTOR_5;
 8003a1e:	f880 c07a 	strb.w	ip, [r0, #122]	@ 0x7a
        wTimePhB = wTimePhA + (wZ / 131072);
 8003a22:	eb0e 43a3 	add.w	r3, lr, r3, asr #18
        wTimePhC = wTimePhA - (wY / 131072) ;
 8003a26:	ebae 42a2 	sub.w	r2, lr, r2, asr #18
        if(true == pHandle->SingleShuntTopology)
 8003a2a:	b92d      	cbnz	r5, 8003a38 <PWMC_SetPhaseVoltage+0x250>
          pHandle->lowDuty = (uint16_t)wTimePhC;
 8003a2c:	fa1f fc82 	uxth.w	ip, r2
          pHandle->midDuty = (uint16_t)wTimePhA;
 8003a30:	fa1f f48e 	uxth.w	r4, lr
          pHandle->highDuty = (uint16_t)wTimePhB;
 8003a34:	b299      	uxth	r1, r3
 8003a36:	e721      	b.n	800387c <PWMC_SetPhaseVoltage+0x94>
 8003a38:	f04f 0c01 	mov.w	ip, #1
 8003a3c:	2400      	movs	r4, #0
 8003a3e:	2102      	movs	r1, #2
 8003a40:	e71c      	b.n	800387c <PWMC_SetPhaseVoltage+0x94>
 8003a42:	f04f 0c00 	mov.w	ip, #0
 8003a46:	2402      	movs	r4, #2
 8003a48:	2101      	movs	r1, #1
 8003a4a:	e717      	b.n	800387c <PWMC_SetPhaseVoltage+0x94>
 8003a4c:	f04f 0c02 	mov.w	ip, #2
 8003a50:	2401      	movs	r4, #1
 8003a52:	2100      	movs	r1, #0
 8003a54:	e712      	b.n	800387c <PWMC_SetPhaseVoltage+0x94>
            pHandle->lowDuty = (uint16_t)wTimePhA;
 8003a56:	fa1f fc8e 	uxth.w	ip, lr
            pHandle->midDuty = (uint16_t)wTimePhC;
 8003a5a:	b294      	uxth	r4, r2
            pHandle->highDuty = (uint16_t)wTimePhB;
 8003a5c:	b299      	uxth	r1, r3
 8003a5e:	e70d      	b.n	800387c <PWMC_SetPhaseVoltage+0x94>
          pHandle->lowDuty = (uint16_t)wTimePhC;
 8003a60:	fa1f fc82 	uxth.w	ip, r2
          pHandle->midDuty = (uint16_t)wTimePhB;
 8003a64:	b29c      	uxth	r4, r3
          pHandle->highDuty = (uint16_t)wTimePhA;
 8003a66:	fa1f f18e 	uxth.w	r1, lr
 8003a6a:	e707      	b.n	800387c <PWMC_SetPhaseVoltage+0x94>
            pHandle->lowDuty = (uint16_t)wTimePhA;
 8003a6c:	fa1f fc8e 	uxth.w	ip, lr
            pHandle->midDuty = (uint16_t)wTimePhB;
 8003a70:	b29c      	uxth	r4, r3
            pHandle->highDuty = (uint16_t)wTimePhC;
 8003a72:	b291      	uxth	r1, r2
 8003a74:	e702      	b.n	800387c <PWMC_SetPhaseVoltage+0x94>
 8003a76:	bf00      	nop

08003a78 <PWMC_SwitchOffPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOffPwm(pHandle);
 8003a78:	6843      	ldr	r3, [r0, #4]
 8003a7a:	4718      	bx	r3

08003a7c <PWMC_SwitchOnPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOnPwm(pHandle);
 8003a7c:	6883      	ldr	r3, [r0, #8]
 8003a7e:	4718      	bx	r3

08003a80 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, **false** if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr(PWMC_Handle_t *pHandle, CRCAction_t action)
{
 8003a80:	b510      	push	{r4, lr}
 8003a82:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    if (CRC_START == action)
 8003a84:	b179      	cbz	r1, 8003aa6 <PWMC_CurrentReadingCalibr+0x26>
    {
      PWMC_SwitchOffPWM(pHandle);
      pHandle->pFctCurrReadingCalib(pHandle);
      retVal = true;
    }
    else if (CRC_EXEC == action)
 8003a86:	2901      	cmp	r1, #1
 8003a88:	d001      	beq.n	8003a8e <PWMC_CurrentReadingCalibr+0xe>
  bool retVal = false;
 8003a8a:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (retVal);
}
 8003a8c:	bd10      	pop	{r4, pc}
      if (pHandle->OffCalibrWaitTimeCounter > 0u)
 8003a8e:	f8b0 3060 	ldrh.w	r3, [r0, #96]	@ 0x60
 8003a92:	b16b      	cbz	r3, 8003ab0 <PWMC_CurrentReadingCalibr+0x30>
        pHandle->OffCalibrWaitTimeCounter--;
 8003a94:	3b01      	subs	r3, #1
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
        if (0U == pHandle->OffCalibrWaitTimeCounter)
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1f4      	bne.n	8003a8a <PWMC_CurrentReadingCalibr+0xa>
          pHandle->pFctCurrReadingCalib(pHandle);
 8003aa0:	68c3      	ldr	r3, [r0, #12]
 8003aa2:	4798      	blx	r3
          retVal = true;
 8003aa4:	e004      	b.n	8003ab0 <PWMC_CurrentReadingCalibr+0x30>
      PWMC_SwitchOffPWM(pHandle);
 8003aa6:	f7ff ffe7 	bl	8003a78 <PWMC_SwitchOffPWM>
      pHandle->pFctCurrReadingCalib(pHandle);
 8003aaa:	68e3      	ldr	r3, [r4, #12]
 8003aac:	4620      	mov	r0, r4
 8003aae:	4798      	blx	r3
      retVal = true;
 8003ab0:	2001      	movs	r0, #1
}
 8003ab2:	bd10      	pop	{r4, pc}

08003ab4 <PWMC_DP_Handler>:
    tempPointer = MC_NULL;
  }
  else
  {
#endif
    if (false == pHandle->BrakeActionLock)
 8003ab4:	f890 3083 	ldrb.w	r3, [r0, #131]	@ 0x83
 8003ab8:	b91b      	cbnz	r3, 8003ac2 <PWMC_DP_Handler+0xe>
    {
      if (ES_GPIO == pHandle->LowSideOutputs)
 8003aba:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d004      	beq.n	8003acc <PWMC_DP_Handler+0x18>
    }
    else
    {
      /* Nothing to do */
    }
    pHandle->driverProtectionFlag = true;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	f880 3082 	strb.w	r3, [r0, #130]	@ 0x82
    tempPointer = &(pHandle->Motor);
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (tempPointer);
}
 8003ac8:	3078      	adds	r0, #120	@ 0x78
 8003aca:	4770      	bx	lr
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_v_port, pHandle->pwm_en_v_pin);
 8003acc:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	@ 0x3c
{
 8003ad0:	b410      	push	{r4}
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_w_port, pHandle->pwm_en_w_pin);
 8003ad2:	6c43      	ldr	r3, [r0, #68]	@ 0x44
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_u_port, pHandle->pwm_en_u_pin);
 8003ad4:	f8b0 4048 	ldrh.w	r4, [r0, #72]	@ 0x48
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8003ad8:	6294      	str	r4, [r2, #40]	@ 0x28
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_v_port, pHandle->pwm_en_v_pin);
 8003ada:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_w_port, pHandle->pwm_en_w_pin);
 8003ade:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
 8003ae2:	628c      	str	r4, [r1, #40]	@ 0x28
 8003ae4:	629a      	str	r2, [r3, #40]	@ 0x28
    pHandle->driverProtectionFlag = true;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	f880 3082 	strb.w	r3, [r0, #130]	@ 0x82
}
 8003aec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003af0:	3078      	adds	r0, #120	@ 0x78
 8003af2:	4770      	bx	lr

08003af4 <PWMC_OVP_Handler>:
    tempPointer = MC_NULL;
  }
  else
  {
#endif
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8003af4:	6c4a      	ldr	r2, [r1, #68]	@ 0x44
{
 8003af6:	4603      	mov	r3, r0
    pHandle->OverVoltageFlag = true;
 8003af8:	f04f 0c01 	mov.w	ip, #1
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8003afc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003b00:	644a      	str	r2, [r1, #68]	@ 0x44
    tempPointer = &(pHandle->Motor);
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (tempPointer);
}
 8003b02:	3078      	adds	r0, #120	@ 0x78
    pHandle->OverVoltageFlag = true;
 8003b04:	f883 c081 	strb.w	ip, [r3, #129]	@ 0x81
    pHandle->BrakeActionLock = true;
 8003b08:	f883 c083 	strb.w	ip, [r3, #131]	@ 0x83
}
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop

08003b10 <PWMC_IsFaultOccurred>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @retval uint16_t Returns #MC_OVER_CURR if an overcurrent has been
  *                  detected since last method call, #MC_NO_FAULTS otherwise.
  */
__weak uint16_t PWMC_IsFaultOccurred(PWMC_Handle_t *pHandle)
{
 8003b10:	4603      	mov	r3, r0
  uint16_t retVal = MC_NO_FAULTS;

  if (true == pHandle->OverVoltageFlag)
 8003b12:	f890 0081 	ldrb.w	r0, [r0, #129]	@ 0x81
 8003b16:	b1a8      	cbz	r0, 8003b44 <PWMC_IsFaultOccurred+0x34>
  {
    retVal = MC_OVER_VOLT;
    pHandle->OverVoltageFlag = false;
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8003b1e:	2142      	movs	r1, #66	@ 0x42
    retVal = MC_OVER_VOLT;
 8003b20:	2002      	movs	r0, #2
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->OverCurrentFlag)
 8003b22:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 8003b26:	b11a      	cbz	r2, 8003b30 <PWMC_IsFaultOccurred+0x20>
  {
    retVal |= MC_OVER_CURR;
    pHandle->OverCurrentFlag = false;
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    retVal |= MC_OVER_CURR;
 8003b2e:	4608      	mov	r0, r1
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->driverProtectionFlag)
 8003b30:	f893 2082 	ldrb.w	r2, [r3, #130]	@ 0x82
 8003b34:	b12a      	cbz	r2, 8003b42 <PWMC_IsFaultOccurred+0x32>
  {
    retVal |= MC_DP_FAULT;
 8003b36:	f440 6080 	orr.w	r0, r0, #1024	@ 0x400
    pHandle->driverProtectionFlag = false;
 8003b3a:	2200      	movs	r2, #0
    retVal |= MC_DP_FAULT;
 8003b3c:	b280      	uxth	r0, r0
    pHandle->driverProtectionFlag = false;
 8003b3e:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
  {
    /* Nothing to do */
  }

  return (retVal);
}
 8003b42:	4770      	bx	lr
 8003b44:	2140      	movs	r1, #64	@ 0x40
 8003b46:	e7ec      	b.n	8003b22 <PWMC_IsFaultOccurred+0x12>

08003b48 <RI_SetRegisterGlobal>:
#include "mcp_config.h"
#include "mcpa.h"
#include "mc_configuration_registers.h"

uint8_t RI_SetRegisterGlobal(uint16_t regID, uint8_t typeID, uint8_t *data, uint16_t *size, int16_t dataAvailable)
{
 8003b48:	b410      	push	{r4}
  uint8_t retVal = MCP_CMD_OK;
  switch(typeID)
 8003b4a:	3908      	subs	r1, #8
{
 8003b4c:	f9bd c004 	ldrsh.w	ip, [sp, #4]
  switch(typeID)
 8003b50:	2920      	cmp	r1, #32
 8003b52:	d812      	bhi.n	8003b7a <RI_SetRegisterGlobal+0x32>
 8003b54:	e8df f001 	tbb	[pc, r1]
 8003b58:	11111117 	.word	0x11111117
 8003b5c:	11111111 	.word	0x11111111
 8003b60:	11111121 	.word	0x11111121
 8003b64:	11111111 	.word	0x11111111
 8003b68:	1111112f 	.word	0x1111112f
 8003b6c:	11111111 	.word	0x11111111
 8003b70:	11111139 	.word	0x11111139
 8003b74:	11111111 	.word	0x11111111
 8003b78:	4d          	.byte	0x4d
 8003b79:	00          	.byte	0x00
    }

    default:
    {
      retVal = MCP_ERROR_BAD_DATA_TYPE;
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	801a      	strh	r2, [r3, #0]
      retVal = MCP_ERROR_BAD_DATA_TYPE;
 8003b7e:	2007      	movs	r0, #7
      break;
    }
  }
  return (retVal);
}
 8003b80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b84:	4770      	bx	lr
          retVal = MCP_ERROR_RO_REG;
 8003b86:	2848      	cmp	r0, #72	@ 0x48
      *size = 1;
 8003b88:	f04f 0201 	mov.w	r2, #1
          retVal = MCP_ERROR_RO_REG;
 8003b8c:	bf14      	ite	ne
 8003b8e:	2005      	movne	r0, #5
 8003b90:	2004      	moveq	r0, #4
}
 8003b92:	f85d 4b04 	ldr.w	r4, [sp], #4
      *size = 1;
 8003b96:	801a      	strh	r2, [r3, #0]
}
 8003b98:	4770      	bx	lr
      switch (regID)
 8003b9a:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 8003b9e:	d039      	beq.n	8003c14 <RI_SetRegisterGlobal+0xcc>
 8003ba0:	d942      	bls.n	8003c28 <RI_SetRegisterGlobal+0xe0>
 8003ba2:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 8003ba6:	d035      	beq.n	8003c14 <RI_SetRegisterGlobal+0xcc>
 8003ba8:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8003bac:	4290      	cmp	r0, r2
 8003bae:	bf14      	ite	ne
 8003bb0:	2005      	movne	r0, #5
 8003bb2:	2004      	moveq	r0, #4
 8003bb4:	e02f      	b.n	8003c16 <RI_SetRegisterGlobal+0xce>
          retVal = MCP_ERROR_RO_REG;
 8003bb6:	2818      	cmp	r0, #24
      *size = 4;
 8003bb8:	f04f 0204 	mov.w	r2, #4
          retVal = MCP_ERROR_RO_REG;
 8003bbc:	bf14      	ite	ne
 8003bbe:	2005      	movne	r0, #5
 8003bc0:	4610      	moveq	r0, r2
}
 8003bc2:	f85d 4b04 	ldr.w	r4, [sp], #4
      *size = 4;
 8003bc6:	801a      	strh	r2, [r3, #0]
}
 8003bc8:	4770      	bx	lr
uint8_t RI_MovString(const char_t *srcString, char_t *destString, uint16_t *size, int16_t maxSize)
{
  uint8_t retVal = MCP_CMD_OK;
  const char_t *tempsrcString = srcString;
  char_t *tempdestString = destString;
  *size= 1U ; /* /0 is the min String size */
 8003bca:	2101      	movs	r1, #1
 8003bcc:	8019      	strh	r1, [r3, #0]

  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003bce:	f992 0000 	ldrsb.w	r0, [r2]
 8003bd2:	b328      	cbz	r0, 8003c20 <RI_SetRegisterGlobal+0xd8>
 8003bd4:	fa1f f08c 	uxth.w	r0, ip
 8003bd8:	e003      	b.n	8003be2 <RI_SetRegisterGlobal+0x9a>
  {
    *tempdestString = *tempsrcString;
    tempdestString++;
    tempsrcString++;
    *size = *size + 1U;
 8003bda:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003bdc:	f912 4f01 	ldrsb.w	r4, [r2, #1]!
 8003be0:	b1f4      	cbz	r4, 8003c20 <RI_SetRegisterGlobal+0xd8>
    *size = *size + 1U;
 8003be2:	f101 0c01 	add.w	ip, r1, #1
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003be6:	4281      	cmp	r1, r0
    *size = *size + 1U;
 8003be8:	fa1f f18c 	uxth.w	r1, ip
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003bec:	d3f5      	bcc.n	8003bda <RI_SetRegisterGlobal+0x92>
      retVal = MCP_ERROR_RO_REG;
 8003bee:	2004      	movs	r0, #4
 8003bf0:	e7c6      	b.n	8003b80 <RI_SetRegisterGlobal+0x38>
      *size = rawSize + 2U;
 8003bf2:	8812      	ldrh	r2, [r2, #0]
 8003bf4:	3202      	adds	r2, #2
 8003bf6:	b292      	uxth	r2, r2
      if (*size > (uint16_t)dataAvailable)
 8003bf8:	fa1f fc8c 	uxth.w	ip, ip
 8003bfc:	4562      	cmp	r2, ip
      *size = rawSize + 2U;
 8003bfe:	801a      	strh	r2, [r3, #0]
      if (*size > (uint16_t)dataAvailable)
 8003c00:	d81a      	bhi.n	8003c38 <RI_SetRegisterGlobal+0xf0>
        switch (regID)
 8003c02:	28a8      	cmp	r0, #168	@ 0xa8
 8003c04:	d0f3      	beq.n	8003bee <RI_SetRegisterGlobal+0xa6>
 8003c06:	d81b      	bhi.n	8003c40 <RI_SetRegisterGlobal+0xf8>
 8003c08:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8003c0c:	2828      	cmp	r0, #40	@ 0x28
 8003c0e:	d0ee      	beq.n	8003bee <RI_SetRegisterGlobal+0xa6>
 8003c10:	2005      	movs	r0, #5
 8003c12:	e7b5      	b.n	8003b80 <RI_SetRegisterGlobal+0x38>
  uint8_t retVal = MCP_CMD_OK;
 8003c14:	2000      	movs	r0, #0
      *size = 2;
 8003c16:	2202      	movs	r2, #2
}
 8003c18:	f85d 4b04 	ldr.w	r4, [sp], #4
      *size = 2;
 8003c1c:	801a      	strh	r2, [r3, #0]
}
 8003c1e:	4770      	bx	lr
  { /* Last string char must be 0 */
    retVal = MCP_ERROR_STRING_FORMAT;
  }
  else
  {
    *tempdestString = (int8_t)0;
 8003c20:	2300      	movs	r3, #0
 8003c22:	7013      	strb	r3, [r2, #0]
      retVal = MCP_ERROR_RO_REG;
 8003c24:	2004      	movs	r0, #4
 8003c26:	e7ab      	b.n	8003b80 <RI_SetRegisterGlobal+0x38>
      switch (regID)
 8003c28:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8003c2c:	f5b0 6fb2 	cmp.w	r0, #1424	@ 0x590
 8003c30:	bf14      	ite	ne
 8003c32:	2005      	movne	r0, #5
 8003c34:	2004      	moveq	r0, #4
 8003c36:	e7ee      	b.n	8003c16 <RI_SetRegisterGlobal+0xce>
        *size = 0;
 8003c38:	2200      	movs	r2, #0
 8003c3a:	801a      	strh	r2, [r3, #0]
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* This error stop the parsing of the CMD buffer */
 8003c3c:	200a      	movs	r0, #10
 8003c3e:	e79f      	b.n	8003b80 <RI_SetRegisterGlobal+0x38>
        switch (regID)
 8003c40:	28e8      	cmp	r0, #232	@ 0xe8
 8003c42:	d1e5      	bne.n	8003c10 <RI_SetRegisterGlobal+0xc8>
 8003c44:	e7d3      	b.n	8003bee <RI_SetRegisterGlobal+0xa6>
 8003c46:	bf00      	nop

08003c48 <RI_SetRegisterMotor1>:
{
 8003c48:	b530      	push	{r4, r5, lr}
 8003c4a:	b083      	sub	sp, #12
  switch(typeID)
 8003c4c:	3908      	subs	r1, #8
{
 8003c4e:	f9bd e018 	ldrsh.w	lr, [sp, #24]
 8003c52:	4694      	mov	ip, r2
 8003c54:	461c      	mov	r4, r3
  switch(typeID)
 8003c56:	2920      	cmp	r1, #32
 8003c58:	d812      	bhi.n	8003c80 <RI_SetRegisterMotor1+0x38>
 8003c5a:	e8df f001 	tbb	[pc, r1]
 8003c5e:	1116      	.short	0x1116
 8003c60:	11111111 	.word	0x11111111
 8003c64:	11251111 	.word	0x11251111
 8003c68:	11111111 	.word	0x11111111
 8003c6c:	11481111 	.word	0x11481111
 8003c70:	11111111 	.word	0x11111111
 8003c74:	11551111 	.word	0x11551111
 8003c78:	11111111 	.word	0x11111111
 8003c7c:	1111      	.short	0x1111
 8003c7e:	66          	.byte	0x66
 8003c7f:	00          	.byte	0x00
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 8003c80:	2300      	movs	r3, #0
 8003c82:	8023      	strh	r3, [r4, #0]
      retVal = MCP_ERROR_BAD_DATA_TYPE;
 8003c84:	2007      	movs	r0, #7
}
 8003c86:	b003      	add	sp, #12
 8003c88:	bd30      	pop	{r4, r5, pc}
      switch (regID)
 8003c8a:	2848      	cmp	r0, #72	@ 0x48
 8003c8c:	f000 809c 	beq.w	8003dc8 <RI_SetRegisterMotor1+0x180>
 8003c90:	2888      	cmp	r0, #136	@ 0x88
 8003c92:	f040 8094 	bne.w	8003dbe <RI_SetRegisterMotor1+0x176>
          uint8_t regdata8 = *data;
 8003c96:	7813      	ldrb	r3, [r2, #0]
          if ((uint8_t)MCM_TORQUE_MODE == regdata8)
 8003c98:	2b04      	cmp	r3, #4
 8003c9a:	f000 80eb 	beq.w	8003e74 <RI_SetRegisterMotor1+0x22c>
          if ((uint8_t)MCM_SPEED_MODE == regdata8)
 8003c9e:	2b03      	cmp	r3, #3
 8003ca0:	f000 8153 	beq.w	8003f4a <RI_SetRegisterMotor1+0x302>
  uint8_t retVal = MCP_CMD_OK;
 8003ca4:	2000      	movs	r0, #0
 8003ca6:	e08b      	b.n	8003dc0 <RI_SetRegisterMotor1+0x178>
      switch (regID)
 8003ca8:	f5b0 6f15 	cmp.w	r0, #2384	@ 0x950
      uint16_t regdata16 = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 8003cac:	8815      	ldrh	r5, [r2, #0]
      switch (regID)
 8003cae:	f000 81e5 	beq.w	800407c <RI_SetRegisterMotor1+0x434>
 8003cb2:	d85b      	bhi.n	8003d6c <RI_SetRegisterMotor1+0x124>
 8003cb4:	f5b0 7f24 	cmp.w	r0, #656	@ 0x290
 8003cb8:	f000 8197 	beq.w	8003fea <RI_SetRegisterMotor1+0x3a2>
 8003cbc:	f240 80c4 	bls.w	8003e48 <RI_SetRegisterMotor1+0x200>
 8003cc0:	f5b0 7f64 	cmp.w	r0, #912	@ 0x390
 8003cc4:	f000 8164 	beq.w	8003f90 <RI_SetRegisterMotor1+0x348>
 8003cc8:	f200 8110 	bhi.w	8003eec <RI_SetRegisterMotor1+0x2a4>
 8003ccc:	f5b0 7f44 	cmp.w	r0, #784	@ 0x310
 8003cd0:	f000 81a7 	beq.w	8004022 <RI_SetRegisterMotor1+0x3da>
 8003cd4:	f5b0 7f54 	cmp.w	r0, #848	@ 0x350
 8003cd8:	f000 8196 	beq.w	8004008 <RI_SetRegisterMotor1+0x3c0>
 8003cdc:	f5b0 7f34 	cmp.w	r0, #720	@ 0x2d0
 8003ce0:	f040 81d8 	bne.w	8004094 <RI_SetRegisterMotor1+0x44c>
          PID_SetKI(&PIDIdHandle_M1, (int16_t)regdata16);
 8003ce4:	48b1      	ldr	r0, [pc, #708]	@ (8003fac <RI_SetRegisterMotor1+0x364>)
 8003ce6:	b229      	sxth	r1, r5
 8003ce8:	f005 fdfc 	bl	80098e4 <PID_SetKI>
          break;
 8003cec:	e05e      	b.n	8003dac <RI_SetRegisterMotor1+0x164>
      switch (regID)
 8003cee:	2898      	cmp	r0, #152	@ 0x98
 8003cf0:	d074      	beq.n	8003ddc <RI_SetRegisterMotor1+0x194>
 8003cf2:	d86b      	bhi.n	8003dcc <RI_SetRegisterMotor1+0x184>
 8003cf4:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
          retVal = MCP_ERROR_RO_REG;
 8003cf8:	2818      	cmp	r0, #24
 8003cfa:	bf14      	ite	ne
 8003cfc:	2005      	movne	r0, #5
 8003cfe:	2004      	moveq	r0, #4
      *size = 4;
 8003d00:	2304      	movs	r3, #4
 8003d02:	8023      	strh	r3, [r4, #0]
}
 8003d04:	b003      	add	sp, #12
 8003d06:	bd30      	pop	{r4, r5, pc}
  *size= 1U ; /* /0 is the min String size */
 8003d08:	2201      	movs	r2, #1
 8003d0a:	8022      	strh	r2, [r4, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003d0c:	f99c 3000 	ldrsb.w	r3, [ip]
 8003d10:	b33b      	cbz	r3, 8003d62 <RI_SetRegisterMotor1+0x11a>
 8003d12:	fa1f f38e 	uxth.w	r3, lr
 8003d16:	e003      	b.n	8003d20 <RI_SetRegisterMotor1+0xd8>
    *size = *size + 1U;
 8003d18:	8022      	strh	r2, [r4, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003d1a:	f91c 1f01 	ldrsb.w	r1, [ip, #1]!
 8003d1e:	b301      	cbz	r1, 8003d62 <RI_SetRegisterMotor1+0x11a>
    *size = *size + 1U;
 8003d20:	1c51      	adds	r1, r2, #1
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003d22:	429a      	cmp	r2, r3
    *size = *size + 1U;
 8003d24:	b28a      	uxth	r2, r1
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003d26:	d3f7      	bcc.n	8003d18 <RI_SetRegisterMotor1+0xd0>
 8003d28:	e01e      	b.n	8003d68 <RI_SetRegisterMotor1+0x120>
      *size = rawSize + 2U;
 8003d2a:	8812      	ldrh	r2, [r2, #0]
 8003d2c:	3202      	adds	r2, #2
 8003d2e:	b292      	uxth	r2, r2
      if (*size > (uint16_t)dataAvailable)
 8003d30:	fa1f f38e 	uxth.w	r3, lr
 8003d34:	429a      	cmp	r2, r3
      *size = rawSize + 2U;
 8003d36:	8022      	strh	r2, [r4, #0]
      if (*size > (uint16_t)dataAvailable)
 8003d38:	d83d      	bhi.n	8003db6 <RI_SetRegisterMotor1+0x16e>
        switch (regID)
 8003d3a:	f5b0 7ff4 	cmp.w	r0, #488	@ 0x1e8
 8003d3e:	f000 80b8 	beq.w	8003eb2 <RI_SetRegisterMotor1+0x26a>
 8003d42:	d959      	bls.n	8003df8 <RI_SetRegisterMotor1+0x1b0>
 8003d44:	f5b0 7f5a 	cmp.w	r0, #872	@ 0x368
 8003d48:	f000 80ac 	beq.w	8003ea4 <RI_SetRegisterMotor1+0x25c>
 8003d4c:	f5b0 6fa5 	cmp.w	r0, #1320	@ 0x528
 8003d50:	d15e      	bne.n	8003e10 <RI_SetRegisterMotor1+0x1c8>
            retVal =  MCPA_cfgLog (&MCPA_UART_A, rawData);
 8003d52:	4897      	ldr	r0, [pc, #604]	@ (8003fb0 <RI_SetRegisterMotor1+0x368>)
 8003d54:	f10c 0102 	add.w	r1, ip, #2
}
 8003d58:	b003      	add	sp, #12
 8003d5a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
            retVal =  MCPA_cfgLog (&MCPA_UART_A, rawData);
 8003d5e:	f005 bceb 	b.w	8009738 <MCPA_cfgLog>
    *tempdestString = (int8_t)0;
 8003d62:	2300      	movs	r3, #0
 8003d64:	f88c 3000 	strb.w	r3, [ip]
      retVal = MCP_ERROR_RO_REG;
 8003d68:	2004      	movs	r0, #4
 8003d6a:	e78c      	b.n	8003c86 <RI_SetRegisterMotor1+0x3e>
      switch (regID)
 8003d6c:	f241 5350 	movw	r3, #5456	@ 0x1550
 8003d70:	4298      	cmp	r0, r3
 8003d72:	f000 8179 	beq.w	8004068 <RI_SetRegisterMotor1+0x420>
 8003d76:	d84d      	bhi.n	8003e14 <RI_SetRegisterMotor1+0x1cc>
 8003d78:	f241 4350 	movw	r3, #5200	@ 0x1450
 8003d7c:	4298      	cmp	r0, r3
 8003d7e:	f000 8155 	beq.w	800402c <RI_SetRegisterMotor1+0x3e4>
 8003d82:	f240 809e 	bls.w	8003ec2 <RI_SetRegisterMotor1+0x27a>
 8003d86:	f241 43d0 	movw	r3, #5328	@ 0x14d0
 8003d8a:	4298      	cmp	r0, r3
 8003d8c:	f000 8137 	beq.w	8003ffe <RI_SetRegisterMotor1+0x3b6>
 8003d90:	f241 5310 	movw	r3, #5392	@ 0x1510
 8003d94:	4298      	cmp	r0, r3
 8003d96:	f000 812d 	beq.w	8003ff4 <RI_SetRegisterMotor1+0x3ac>
 8003d9a:	f241 4390 	movw	r3, #5264	@ 0x1490
 8003d9e:	4298      	cmp	r0, r3
 8003da0:	f040 8178 	bne.w	8004094 <RI_SetRegisterMotor1+0x44c>
          PID_SetKIDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 8003da4:	4883      	ldr	r0, [pc, #524]	@ (8003fb4 <RI_SetRegisterMotor1+0x36c>)
 8003da6:	4629      	mov	r1, r5
 8003da8:	f005 fdb6 	bl	8009918 <PID_SetKIDivisorPOW2>
  uint8_t retVal = MCP_CMD_OK;
 8003dac:	2000      	movs	r0, #0
      *size = 2;
 8003dae:	2302      	movs	r3, #2
 8003db0:	8023      	strh	r3, [r4, #0]
}
 8003db2:	b003      	add	sp, #12
 8003db4:	bd30      	pop	{r4, r5, pc}
        *size = 0;
 8003db6:	2300      	movs	r3, #0
 8003db8:	8023      	strh	r3, [r4, #0]
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* This error stop the parsing of the CMD buffer */
 8003dba:	200a      	movs	r0, #10
 8003dbc:	e763      	b.n	8003c86 <RI_SetRegisterMotor1+0x3e>
      switch (regID)
 8003dbe:	2005      	movs	r0, #5
      *size = 1;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	8023      	strh	r3, [r4, #0]
}
 8003dc4:	b003      	add	sp, #12
 8003dc6:	bd30      	pop	{r4, r5, pc}
            retVal = MCP_ERROR_RO_REG;
 8003dc8:	2004      	movs	r0, #4
 8003dca:	e7f9      	b.n	8003dc0 <RI_SetRegisterMotor1+0x178>
      switch (regID)
 8003dcc:	28d8      	cmp	r0, #216	@ 0xd8
 8003dce:	d04f      	beq.n	8003e70 <RI_SetRegisterMotor1+0x228>
          retVal = MCP_ERROR_RO_REG;
 8003dd0:	f5b0 7f8c 	cmp.w	r0, #280	@ 0x118
 8003dd4:	bf14      	ite	ne
 8003dd6:	2005      	movne	r0, #5
 8003dd8:	2004      	moveq	r0, #4
 8003dda:	e791      	b.n	8003d00 <RI_SetRegisterMotor1+0xb8>
          MCI_ExecSpeedRamp(pMCIN,((((int16_t)regdata32) * ((int16_t)SPEED_UNIT)) / (int16_t)U_RPM), 0);
 8003ddc:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003de0:	4975      	ldr	r1, [pc, #468]	@ (8003fb8 <RI_SetRegisterMotor1+0x370>)
 8003de2:	4876      	ldr	r0, [pc, #472]	@ (8003fbc <RI_SetRegisterMotor1+0x374>)
 8003de4:	fb81 2103 	smull	r2, r1, r1, r3
 8003de8:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8003dec:	2200      	movs	r2, #0
 8003dee:	b209      	sxth	r1, r1
 8003df0:	f7fe fbce 	bl	8002590 <MCI_ExecSpeedRamp>
  uint8_t retVal = MCP_CMD_OK;
 8003df4:	2000      	movs	r0, #0
          break;
 8003df6:	e783      	b.n	8003d00 <RI_SetRegisterMotor1+0xb8>
        switch (regID)
 8003df8:	f5b0 7fd4 	cmp.w	r0, #424	@ 0x1a8
 8003dfc:	d043      	beq.n	8003e86 <RI_SetRegisterMotor1+0x23e>
 8003dfe:	d807      	bhi.n	8003e10 <RI_SetRegisterMotor1+0x1c8>
 8003e00:	28a8      	cmp	r0, #168	@ 0xa8
 8003e02:	d0b1      	beq.n	8003d68 <RI_SetRegisterMotor1+0x120>
 8003e04:	f200 80c0 	bhi.w	8003f88 <RI_SetRegisterMotor1+0x340>
 8003e08:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8003e0c:	2828      	cmp	r0, #40	@ 0x28
 8003e0e:	d0ab      	beq.n	8003d68 <RI_SetRegisterMotor1+0x120>
 8003e10:	2005      	movs	r0, #5
 8003e12:	e738      	b.n	8003c86 <RI_SetRegisterMotor1+0x3e>
      switch (regID)
 8003e14:	f241 6350 	movw	r3, #5712	@ 0x1650
 8003e18:	4298      	cmp	r0, r3
 8003e1a:	f000 810c 	beq.w	8004036 <RI_SetRegisterMotor1+0x3ee>
 8003e1e:	d873      	bhi.n	8003f08 <RI_SetRegisterMotor1+0x2c0>
 8003e20:	f241 53d0 	movw	r3, #5584	@ 0x15d0
 8003e24:	4298      	cmp	r0, r3
 8003e26:	f000 80d6 	beq.w	8003fd6 <RI_SetRegisterMotor1+0x38e>
 8003e2a:	f241 6310 	movw	r3, #5648	@ 0x1610
 8003e2e:	4298      	cmp	r0, r3
 8003e30:	f000 80cc 	beq.w	8003fcc <RI_SetRegisterMotor1+0x384>
 8003e34:	f241 5390 	movw	r3, #5520	@ 0x1590
 8003e38:	4298      	cmp	r0, r3
 8003e3a:	f040 812b 	bne.w	8004094 <RI_SetRegisterMotor1+0x44c>
          PID_SetKDDivisorPOW2(&PIDIdHandle_M1, regdata16);
 8003e3e:	485b      	ldr	r0, [pc, #364]	@ (8003fac <RI_SetRegisterMotor1+0x364>)
 8003e40:	4629      	mov	r1, r5
 8003e42:	f005 fd85 	bl	8009950 <PID_SetKDDivisorPOW2>
          break;
 8003e46:	e7b1      	b.n	8003dac <RI_SetRegisterMotor1+0x164>
      switch (regID)
 8003e48:	f5b0 7fc8 	cmp.w	r0, #400	@ 0x190
 8003e4c:	f000 8102 	beq.w	8004054 <RI_SetRegisterMotor1+0x40c>
 8003e50:	d86e      	bhi.n	8003f30 <RI_SetRegisterMotor1+0x2e8>
 8003e52:	28d0      	cmp	r0, #208	@ 0xd0
 8003e54:	f000 80f9 	beq.w	800404a <RI_SetRegisterMotor1+0x402>
 8003e58:	f5b0 7f88 	cmp.w	r0, #272	@ 0x110
 8003e5c:	f000 80f0 	beq.w	8004040 <RI_SetRegisterMotor1+0x3f8>
 8003e60:	2890      	cmp	r0, #144	@ 0x90
 8003e62:	f040 8117 	bne.w	8004094 <RI_SetRegisterMotor1+0x44c>
          PID_SetKP(&PIDSpeedHandle_M1, (int16_t)regdata16);
 8003e66:	4853      	ldr	r0, [pc, #332]	@ (8003fb4 <RI_SetRegisterMotor1+0x36c>)
 8003e68:	b229      	sxth	r1, r5
 8003e6a:	f005 fd39 	bl	80098e0 <PID_SetKP>
          break;
 8003e6e:	e79d      	b.n	8003dac <RI_SetRegisterMotor1+0x164>
          retVal = MCP_ERROR_RO_REG;
 8003e70:	2004      	movs	r0, #4
 8003e72:	e745      	b.n	8003d00 <RI_SetRegisterMotor1+0xb8>
            MCI_ExecTorqueRamp(pMCIN, MCI_GetTeref(pMCIN), 0);
 8003e74:	4851      	ldr	r0, [pc, #324]	@ (8003fbc <RI_SetRegisterMotor1+0x374>)
 8003e76:	f7fe fcc7 	bl	8002808 <MCI_GetTeref>
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	4601      	mov	r1, r0
 8003e7e:	484f      	ldr	r0, [pc, #316]	@ (8003fbc <RI_SetRegisterMotor1+0x374>)
 8003e80:	f7fe fba0 	bl	80025c4 <MCI_ExecTorqueRamp>
          if ((uint8_t)MCM_SPEED_MODE == regdata8)
 8003e84:	e70e      	b.n	8003ca4 <RI_SetRegisterMotor1+0x5c>
            MCI_ExecSpeedRamp(pMCIN, (int16_t)((rpm * SPEED_UNIT) / U_RPM), duration);
 8003e86:	f8dc 1002 	ldr.w	r1, [ip, #2]
 8003e8a:	4b4b      	ldr	r3, [pc, #300]	@ (8003fb8 <RI_SetRegisterMotor1+0x370>)
 8003e8c:	f8bc 2006 	ldrh.w	r2, [ip, #6]
 8003e90:	fb83 0301 	smull	r0, r3, r3, r1
 8003e94:	eba3 71e1 	sub.w	r1, r3, r1, asr #31
 8003e98:	4848      	ldr	r0, [pc, #288]	@ (8003fbc <RI_SetRegisterMotor1+0x374>)
 8003e9a:	b209      	sxth	r1, r1
 8003e9c:	f7fe fb78 	bl	8002590 <MCI_ExecSpeedRamp>
  uint8_t retVal = MCP_CMD_OK;
 8003ea0:	2000      	movs	r0, #0
 8003ea2:	e6f0      	b.n	8003c86 <RI_SetRegisterMotor1+0x3e>
            currComp.q = *((int16_t *) rawData); //cstat !MISRAC2012-Rule-11.3
 8003ea4:	f8dc 1002 	ldr.w	r1, [ip, #2]
            MCI_SetCurrentReferences(pMCIN, currComp);
 8003ea8:	4844      	ldr	r0, [pc, #272]	@ (8003fbc <RI_SetRegisterMotor1+0x374>)
            currComp.q = *((int16_t *) rawData); //cstat !MISRAC2012-Rule-11.3
 8003eaa:	9101      	str	r1, [sp, #4]
            MCI_SetCurrentReferences(pMCIN, currComp);
 8003eac:	f7fe fba4 	bl	80025f8 <MCI_SetCurrentReferences>
            break;
 8003eb0:	e7f6      	b.n	8003ea0 <RI_SetRegisterMotor1+0x258>
            MCI_ExecTorqueRamp(pMCIN, (int16_t)torque, duration);
 8003eb2:	f8bc 2006 	ldrh.w	r2, [ip, #6]
 8003eb6:	f9bc 1002 	ldrsh.w	r1, [ip, #2]
 8003eba:	4840      	ldr	r0, [pc, #256]	@ (8003fbc <RI_SetRegisterMotor1+0x374>)
 8003ebc:	f7fe fb82 	bl	80025c4 <MCI_ExecTorqueRamp>
            break;
 8003ec0:	e7ee      	b.n	8003ea0 <RI_SetRegisterMotor1+0x258>
      switch (regID)
 8003ec2:	f5b0 6f3d 	cmp.w	r0, #3024	@ 0xbd0
 8003ec6:	f000 80e7 	beq.w	8004098 <RI_SetRegisterMotor1+0x450>
 8003eca:	d847      	bhi.n	8003f5c <RI_SetRegisterMotor1+0x314>
 8003ecc:	f5b0 6f19 	cmp.w	r0, #2448	@ 0x990
 8003ed0:	f040 80f4 	bne.w	80040bc <RI_SetRegisterMotor1+0x474>
          currComp = MCI_GetIqdref(pMCIN);
 8003ed4:	4839      	ldr	r0, [pc, #228]	@ (8003fbc <RI_SetRegisterMotor1+0x374>)
 8003ed6:	f7fe fc79 	bl	80027cc <MCI_GetIqdref>
 8003eda:	4603      	mov	r3, r0
 8003edc:	9301      	str	r3, [sp, #4]
          currComp.d = (int16_t)regdata16;
 8003ede:	f8ad 5006 	strh.w	r5, [sp, #6]
          MCI_SetCurrentReferences(pMCIN,currComp);
 8003ee2:	4836      	ldr	r0, [pc, #216]	@ (8003fbc <RI_SetRegisterMotor1+0x374>)
 8003ee4:	9901      	ldr	r1, [sp, #4]
 8003ee6:	f7fe fb87 	bl	80025f8 <MCI_SetCurrentReferences>
          break;
 8003eea:	e75f      	b.n	8003dac <RI_SetRegisterMotor1+0x164>
      switch (regID)
 8003eec:	f5b0 6f92 	cmp.w	r0, #1168	@ 0x490
 8003ef0:	d076      	beq.n	8003fe0 <RI_SetRegisterMotor1+0x398>
 8003ef2:	f200 80d3 	bhi.w	800409c <RI_SetRegisterMotor1+0x454>
 8003ef6:	f5b0 6f8a 	cmp.w	r0, #1104	@ 0x450
 8003efa:	f040 80cb 	bne.w	8004094 <RI_SetRegisterMotor1+0x44c>
          PID_SetKI (&(&STO_PLL_M1)->PIRegulator, (int16_t)regdata16);
 8003efe:	4830      	ldr	r0, [pc, #192]	@ (8003fc0 <RI_SetRegisterMotor1+0x378>)
 8003f00:	b229      	sxth	r1, r5
 8003f02:	f005 fcef 	bl	80098e4 <PID_SetKI>
          break;
 8003f06:	e751      	b.n	8003dac <RI_SetRegisterMotor1+0x164>
      switch (regID)
 8003f08:	f641 1310 	movw	r3, #6416	@ 0x1910
 8003f0c:	4298      	cmp	r0, r3
 8003f0e:	f000 80a6 	beq.w	800405e <RI_SetRegisterMotor1+0x416>
 8003f12:	f641 3358 	movw	r3, #7000	@ 0x1b58
 8003f16:	4298      	cmp	r0, r3
 8003f18:	f000 80be 	beq.w	8004098 <RI_SetRegisterMotor1+0x450>
 8003f1c:	f641 03d0 	movw	r3, #6352	@ 0x18d0
 8003f20:	4298      	cmp	r0, r3
 8003f22:	f040 80b7 	bne.w	8004094 <RI_SetRegisterMotor1+0x44c>
          PID_SetKIDivisorPOW2 (&(&STO_PLL_M1)->PIRegulator,regdata16);
 8003f26:	4826      	ldr	r0, [pc, #152]	@ (8003fc0 <RI_SetRegisterMotor1+0x378>)
 8003f28:	4629      	mov	r1, r5
 8003f2a:	f005 fcf5 	bl	8009918 <PID_SetKIDivisorPOW2>
          break;
 8003f2e:	e73d      	b.n	8003dac <RI_SetRegisterMotor1+0x164>
      switch (regID)
 8003f30:	f5b0 7fe8 	cmp.w	r0, #464	@ 0x1d0
 8003f34:	f000 809d 	beq.w	8004072 <RI_SetRegisterMotor1+0x42a>
 8003f38:	f5b0 7f04 	cmp.w	r0, #528	@ 0x210
 8003f3c:	f040 80aa 	bne.w	8004094 <RI_SetRegisterMotor1+0x44c>
          PID_SetKD(&PIDIqHandle_M1, (int16_t)regdata16);
 8003f40:	4820      	ldr	r0, [pc, #128]	@ (8003fc4 <RI_SetRegisterMotor1+0x37c>)
 8003f42:	b229      	sxth	r1, r5
 8003f44:	f005 fcfc 	bl	8009940 <PID_SetKD>
          break;
 8003f48:	e730      	b.n	8003dac <RI_SetRegisterMotor1+0x164>
            MCI_ExecSpeedRamp(pMCIN, MCI_GetMecSpeedRefUnit(pMCIN), 0);
 8003f4a:	481c      	ldr	r0, [pc, #112]	@ (8003fbc <RI_SetRegisterMotor1+0x374>)
 8003f4c:	f7fe fc1c 	bl	8002788 <MCI_GetMecSpeedRefUnit>
 8003f50:	2200      	movs	r2, #0
 8003f52:	4601      	mov	r1, r0
 8003f54:	4819      	ldr	r0, [pc, #100]	@ (8003fbc <RI_SetRegisterMotor1+0x374>)
 8003f56:	f7fe fb1b 	bl	8002590 <MCI_ExecSpeedRamp>
 8003f5a:	e6a3      	b.n	8003ca4 <RI_SetRegisterMotor1+0x5c>
      switch (regID)
 8003f5c:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 8003f60:	f43f af24 	beq.w	8003dac <RI_SetRegisterMotor1+0x164>
 8003f64:	f240 80c7 	bls.w	80040f6 <RI_SetRegisterMotor1+0x4ae>
 8003f68:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 8003f6c:	f43f af1e 	beq.w	8003dac <RI_SetRegisterMotor1+0x164>
 8003f70:	f0c0 8090 	bcc.w	8004094 <RI_SetRegisterMotor1+0x44c>
 8003f74:	f5b0 6f6d 	cmp.w	r0, #3792	@ 0xed0
 8003f78:	f000 808e 	beq.w	8004098 <RI_SetRegisterMotor1+0x450>
 8003f7c:	f5b0 6f71 	cmp.w	r0, #3856	@ 0xf10
 8003f80:	bf14      	ite	ne
 8003f82:	2005      	movne	r0, #5
 8003f84:	2004      	moveq	r0, #4
 8003f86:	e712      	b.n	8003dae <RI_SetRegisterMotor1+0x166>
        switch (regID)
 8003f88:	28e8      	cmp	r0, #232	@ 0xe8
 8003f8a:	f43f aeed 	beq.w	8003d68 <RI_SetRegisterMotor1+0x120>
 8003f8e:	e73f      	b.n	8003e10 <RI_SetRegisterMotor1+0x1c8>
          STO_PLL_GetObserverGains(&STO_PLL_M1, &hC1, &hC2);
 8003f90:	aa01      	add	r2, sp, #4
 8003f92:	f10d 0102 	add.w	r1, sp, #2
 8003f96:	480c      	ldr	r0, [pc, #48]	@ (8003fc8 <RI_SetRegisterMotor1+0x380>)
 8003f98:	f007 f83e 	bl	800b018 <STO_PLL_GetObserverGains>
          STO_PLL_SetObserverGains(&STO_PLL_M1, hC1, (int16_t)regdata16);
 8003f9c:	480a      	ldr	r0, [pc, #40]	@ (8003fc8 <RI_SetRegisterMotor1+0x380>)
 8003f9e:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8003fa2:	b22a      	sxth	r2, r5
 8003fa4:	f007 f840 	bl	800b028 <STO_PLL_SetObserverGains>
          break;
 8003fa8:	e700      	b.n	8003dac <RI_SetRegisterMotor1+0x164>
 8003faa:	bf00      	nop
 8003fac:	20000334 	.word	0x20000334
 8003fb0:	20000440 	.word	0x20000440
 8003fb4:	2000038c 	.word	0x2000038c
 8003fb8:	2aaaaaab 	.word	0x2aaaaaab
 8003fbc:	20000010 	.word	0x20000010
 8003fc0:	20000168 	.word	0x20000168
 8003fc4:	20000360 	.word	0x20000360
 8003fc8:	20000134 	.word	0x20000134
          PID_SetKIDivisorPOW2(&PIDIqHandle_M1, regdata16);
 8003fcc:	485a      	ldr	r0, [pc, #360]	@ (8004138 <RI_SetRegisterMotor1+0x4f0>)
 8003fce:	4629      	mov	r1, r5
 8003fd0:	f005 fca2 	bl	8009918 <PID_SetKIDivisorPOW2>
          break;
 8003fd4:	e6ea      	b.n	8003dac <RI_SetRegisterMotor1+0x164>
          PID_SetKPDivisorPOW2(&PIDIqHandle_M1, regdata16);
 8003fd6:	4858      	ldr	r0, [pc, #352]	@ (8004138 <RI_SetRegisterMotor1+0x4f0>)
 8003fd8:	4629      	mov	r1, r5
 8003fda:	f005 fc91 	bl	8009900 <PID_SetKPDivisorPOW2>
          break;
 8003fde:	e6e5      	b.n	8003dac <RI_SetRegisterMotor1+0x164>
          PID_SetKP (&(&STO_PLL_M1)->PIRegulator, (int16_t)regdata16);
 8003fe0:	4856      	ldr	r0, [pc, #344]	@ (800413c <RI_SetRegisterMotor1+0x4f4>)
 8003fe2:	b229      	sxth	r1, r5
 8003fe4:	f005 fc7c 	bl	80098e0 <PID_SetKP>
          break;
 8003fe8:	e6e0      	b.n	8003dac <RI_SetRegisterMotor1+0x164>
          PID_SetKP(&PIDIdHandle_M1, (int16_t)regdata16);
 8003fea:	4855      	ldr	r0, [pc, #340]	@ (8004140 <RI_SetRegisterMotor1+0x4f8>)
 8003fec:	b229      	sxth	r1, r5
 8003fee:	f005 fc77 	bl	80098e0 <PID_SetKP>
          break;
 8003ff2:	e6db      	b.n	8003dac <RI_SetRegisterMotor1+0x164>
          PID_SetKPDivisorPOW2(&PIDIdHandle_M1, regdata16);
 8003ff4:	4852      	ldr	r0, [pc, #328]	@ (8004140 <RI_SetRegisterMotor1+0x4f8>)
 8003ff6:	4629      	mov	r1, r5
 8003ff8:	f005 fc82 	bl	8009900 <PID_SetKPDivisorPOW2>
          break;
 8003ffc:	e6d6      	b.n	8003dac <RI_SetRegisterMotor1+0x164>
          PID_SetKDDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 8003ffe:	4851      	ldr	r0, [pc, #324]	@ (8004144 <RI_SetRegisterMotor1+0x4fc>)
 8004000:	4629      	mov	r1, r5
 8004002:	f005 fca5 	bl	8009950 <PID_SetKDDivisorPOW2>
          break;
 8004006:	e6d1      	b.n	8003dac <RI_SetRegisterMotor1+0x164>
          STO_PLL_GetObserverGains(&STO_PLL_M1, &hC1, &hC2);
 8004008:	aa01      	add	r2, sp, #4
 800400a:	f10d 0102 	add.w	r1, sp, #2
 800400e:	484e      	ldr	r0, [pc, #312]	@ (8004148 <RI_SetRegisterMotor1+0x500>)
 8004010:	f007 f802 	bl	800b018 <STO_PLL_GetObserverGains>
          STO_PLL_SetObserverGains(&STO_PLL_M1, (int16_t)regdata16, hC2);
 8004014:	484c      	ldr	r0, [pc, #304]	@ (8004148 <RI_SetRegisterMotor1+0x500>)
 8004016:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 800401a:	b229      	sxth	r1, r5
 800401c:	f007 f804 	bl	800b028 <STO_PLL_SetObserverGains>
          break;
 8004020:	e6c4      	b.n	8003dac <RI_SetRegisterMotor1+0x164>
          PID_SetKD(&PIDIdHandle_M1, (int16_t)regdata16);
 8004022:	4847      	ldr	r0, [pc, #284]	@ (8004140 <RI_SetRegisterMotor1+0x4f8>)
 8004024:	b229      	sxth	r1, r5
 8004026:	f005 fc8b 	bl	8009940 <PID_SetKD>
          break;
 800402a:	e6bf      	b.n	8003dac <RI_SetRegisterMotor1+0x164>
          PID_SetKPDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 800402c:	4845      	ldr	r0, [pc, #276]	@ (8004144 <RI_SetRegisterMotor1+0x4fc>)
 800402e:	4629      	mov	r1, r5
 8004030:	f005 fc66 	bl	8009900 <PID_SetKPDivisorPOW2>
          break;
 8004034:	e6ba      	b.n	8003dac <RI_SetRegisterMotor1+0x164>
          PID_SetKDDivisorPOW2(&PIDIqHandle_M1, regdata16);
 8004036:	4840      	ldr	r0, [pc, #256]	@ (8004138 <RI_SetRegisterMotor1+0x4f0>)
 8004038:	4629      	mov	r1, r5
 800403a:	f005 fc89 	bl	8009950 <PID_SetKDDivisorPOW2>
          break;
 800403e:	e6b5      	b.n	8003dac <RI_SetRegisterMotor1+0x164>
          PID_SetKD(&PIDSpeedHandle_M1, (int16_t)regdata16);
 8004040:	4840      	ldr	r0, [pc, #256]	@ (8004144 <RI_SetRegisterMotor1+0x4fc>)
 8004042:	b229      	sxth	r1, r5
 8004044:	f005 fc7c 	bl	8009940 <PID_SetKD>
          break;
 8004048:	e6b0      	b.n	8003dac <RI_SetRegisterMotor1+0x164>
          PID_SetKI(&PIDSpeedHandle_M1, (int16_t)regdata16);
 800404a:	483e      	ldr	r0, [pc, #248]	@ (8004144 <RI_SetRegisterMotor1+0x4fc>)
 800404c:	b229      	sxth	r1, r5
 800404e:	f005 fc49 	bl	80098e4 <PID_SetKI>
          break;
 8004052:	e6ab      	b.n	8003dac <RI_SetRegisterMotor1+0x164>
          PID_SetKP(&PIDIqHandle_M1, (int16_t)regdata16);
 8004054:	4838      	ldr	r0, [pc, #224]	@ (8004138 <RI_SetRegisterMotor1+0x4f0>)
 8004056:	b229      	sxth	r1, r5
 8004058:	f005 fc42 	bl	80098e0 <PID_SetKP>
          break;
 800405c:	e6a6      	b.n	8003dac <RI_SetRegisterMotor1+0x164>
          PID_SetKPDivisorPOW2 (&(&STO_PLL_M1)->PIRegulator,regdata16);
 800405e:	4837      	ldr	r0, [pc, #220]	@ (800413c <RI_SetRegisterMotor1+0x4f4>)
 8004060:	4629      	mov	r1, r5
 8004062:	f005 fc4d 	bl	8009900 <PID_SetKPDivisorPOW2>
          break;
 8004066:	e6a1      	b.n	8003dac <RI_SetRegisterMotor1+0x164>
          PID_SetKIDivisorPOW2(&PIDIdHandle_M1, regdata16);
 8004068:	4835      	ldr	r0, [pc, #212]	@ (8004140 <RI_SetRegisterMotor1+0x4f8>)
 800406a:	4629      	mov	r1, r5
 800406c:	f005 fc54 	bl	8009918 <PID_SetKIDivisorPOW2>
          break;
 8004070:	e69c      	b.n	8003dac <RI_SetRegisterMotor1+0x164>
          PID_SetKI(&PIDIqHandle_M1, (int16_t)regdata16);
 8004072:	4831      	ldr	r0, [pc, #196]	@ (8004138 <RI_SetRegisterMotor1+0x4f0>)
 8004074:	b229      	sxth	r1, r5
 8004076:	f005 fc35 	bl	80098e4 <PID_SetKI>
          break;
 800407a:	e697      	b.n	8003dac <RI_SetRegisterMotor1+0x164>
          currComp = MCI_GetIqdref(pMCIN);
 800407c:	4833      	ldr	r0, [pc, #204]	@ (800414c <RI_SetRegisterMotor1+0x504>)
 800407e:	f7fe fba5 	bl	80027cc <MCI_GetIqdref>
 8004082:	4603      	mov	r3, r0
 8004084:	9301      	str	r3, [sp, #4]
          currComp.q = (int16_t)regdata16;
 8004086:	f8ad 5004 	strh.w	r5, [sp, #4]
          MCI_SetCurrentReferences(pMCIN,currComp);
 800408a:	4830      	ldr	r0, [pc, #192]	@ (800414c <RI_SetRegisterMotor1+0x504>)
 800408c:	9901      	ldr	r1, [sp, #4]
 800408e:	f7fe fab3 	bl	80025f8 <MCI_SetCurrentReferences>
          break;
 8004092:	e68b      	b.n	8003dac <RI_SetRegisterMotor1+0x164>
          retVal = MCP_ERROR_UNKNOWN_REG;
 8004094:	2005      	movs	r0, #5
 8004096:	e68a      	b.n	8003dae <RI_SetRegisterMotor1+0x166>
      switch (regID)
 8004098:	2004      	movs	r0, #4
 800409a:	e688      	b.n	8003dae <RI_SetRegisterMotor1+0x166>
 800409c:	f5b0 6f01 	cmp.w	r0, #2064	@ 0x810
 80040a0:	d0fa      	beq.n	8004098 <RI_SetRegisterMotor1+0x450>
 80040a2:	d81b      	bhi.n	80040dc <RI_SetRegisterMotor1+0x494>
 80040a4:	f5b0 6ff2 	cmp.w	r0, #1936	@ 0x790
 80040a8:	d0f6      	beq.n	8004098 <RI_SetRegisterMotor1+0x450>
 80040aa:	d83e      	bhi.n	800412a <RI_SetRegisterMotor1+0x4e2>
 80040ac:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 80040b0:	f5b0 6fb2 	cmp.w	r0, #1424	@ 0x590
 80040b4:	bf14      	ite	ne
 80040b6:	2005      	movne	r0, #5
 80040b8:	2004      	moveq	r0, #4
 80040ba:	e678      	b.n	8003dae <RI_SetRegisterMotor1+0x166>
 80040bc:	d3ea      	bcc.n	8004094 <RI_SetRegisterMotor1+0x44c>
 80040be:	f5b0 6f29 	cmp.w	r0, #2704	@ 0xa90
 80040c2:	d0e9      	beq.n	8004098 <RI_SetRegisterMotor1+0x450>
 80040c4:	d822      	bhi.n	800410c <RI_SetRegisterMotor1+0x4c4>
 80040c6:	f020 0340 	bic.w	r3, r0, #64	@ 0x40
 80040ca:	f5b3 6f21 	cmp.w	r3, #2576	@ 0xa10
 80040ce:	d0e3      	beq.n	8004098 <RI_SetRegisterMotor1+0x450>
 80040d0:	f5b0 6f1d 	cmp.w	r0, #2512	@ 0x9d0
 80040d4:	bf14      	ite	ne
 80040d6:	2005      	movne	r0, #5
 80040d8:	2004      	moveq	r0, #4
 80040da:	e668      	b.n	8003dae <RI_SetRegisterMotor1+0x166>
 80040dc:	f5b0 6f0d 	cmp.w	r0, #2256	@ 0x8d0
 80040e0:	d0da      	beq.n	8004098 <RI_SetRegisterMotor1+0x450>
 80040e2:	d81c      	bhi.n	800411e <RI_SetRegisterMotor1+0x4d6>
 80040e4:	f5b0 6f05 	cmp.w	r0, #2128	@ 0x850
 80040e8:	d0d6      	beq.n	8004098 <RI_SetRegisterMotor1+0x450>
 80040ea:	f5b0 6f09 	cmp.w	r0, #2192	@ 0x890
 80040ee:	bf14      	ite	ne
 80040f0:	2005      	movne	r0, #5
 80040f2:	2004      	moveq	r0, #4
 80040f4:	e65b      	b.n	8003dae <RI_SetRegisterMotor1+0x166>
 80040f6:	f020 0340 	bic.w	r3, r0, #64	@ 0x40
 80040fa:	f5b3 6f41 	cmp.w	r3, #3088	@ 0xc10
 80040fe:	d0cb      	beq.n	8004098 <RI_SetRegisterMotor1+0x450>
 8004100:	f5b0 6f49 	cmp.w	r0, #3216	@ 0xc90
 8004104:	bf14      	ite	ne
 8004106:	2005      	movne	r0, #5
 8004108:	2004      	moveq	r0, #4
 800410a:	e650      	b.n	8003dae <RI_SetRegisterMotor1+0x166>
 800410c:	f5b0 6f35 	cmp.w	r0, #2896	@ 0xb50
 8004110:	d0c2      	beq.n	8004098 <RI_SetRegisterMotor1+0x450>
 8004112:	f5b0 6f39 	cmp.w	r0, #2960	@ 0xb90
 8004116:	bf14      	ite	ne
 8004118:	2005      	movne	r0, #5
 800411a:	2004      	moveq	r0, #4
 800411c:	e647      	b.n	8003dae <RI_SetRegisterMotor1+0x166>
 800411e:	f5b0 6f11 	cmp.w	r0, #2320	@ 0x910
 8004122:	bf14      	ite	ne
 8004124:	2005      	movne	r0, #5
 8004126:	2004      	moveq	r0, #4
 8004128:	e641      	b.n	8003dae <RI_SetRegisterMotor1+0x166>
 800412a:	f5b0 6ffa 	cmp.w	r0, #2000	@ 0x7d0
 800412e:	bf14      	ite	ne
 8004130:	2005      	movne	r0, #5
 8004132:	2004      	moveq	r0, #4
 8004134:	e63b      	b.n	8003dae <RI_SetRegisterMotor1+0x166>
 8004136:	bf00      	nop
 8004138:	20000360 	.word	0x20000360
 800413c:	20000168 	.word	0x20000168
 8004140:	20000334 	.word	0x20000334
 8004144:	2000038c 	.word	0x2000038c
 8004148:	20000134 	.word	0x20000134
 800414c:	20000010 	.word	0x20000010

08004150 <RI_GetRegisterGlobal>:
uint8_t RI_GetRegisterGlobal(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace){
 8004150:	b530      	push	{r4, r5, lr}
 8004152:	b083      	sub	sp, #12
 8004154:	461c      	mov	r4, r3
    switch (typeID)
 8004156:	f1a1 0308 	sub.w	r3, r1, #8
uint8_t RI_GetRegisterGlobal(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace){
 800415a:	f9bd c018 	ldrsh.w	ip, [sp, #24]
 800415e:	4615      	mov	r5, r2
    switch (typeID)
 8004160:	2b20      	cmp	r3, #32
 8004162:	d812      	bhi.n	800418a <RI_GetRegisterGlobal+0x3a>
 8004164:	e8df f003 	tbb	[pc, r3]
 8004168:	1111111d 	.word	0x1111111d
 800416c:	11111111 	.word	0x11111111
 8004170:	11111141 	.word	0x11111141
 8004174:	11111111 	.word	0x11111111
 8004178:	11111124 	.word	0x11111124
 800417c:	11111111 	.word	0x11111111
 8004180:	11111150 	.word	0x11111150
 8004184:	11111111 	.word	0x11111111
 8004188:	14          	.byte	0x14
 8004189:	00          	.byte	0x00
 800418a:	2007      	movs	r0, #7
}
 800418c:	b003      	add	sp, #12
 800418e:	bd30      	pop	{r4, r5, pc}
        switch (regID)
 8004190:	2828      	cmp	r0, #40	@ 0x28
 8004192:	d044      	beq.n	800421e <RI_GetRegisterGlobal+0xce>
        *size = (*rawSize) + 2U;
 8004194:	882b      	ldrh	r3, [r5, #0]
 8004196:	3302      	adds	r3, #2
            retVal = MCP_ERROR_UNKNOWN_REG;
 8004198:	2005      	movs	r0, #5
        *size = (*rawSize) + 2U;
 800419a:	b29b      	uxth	r3, r3
 800419c:	8023      	strh	r3, [r4, #0]
}
 800419e:	b003      	add	sp, #12
 80041a0:	bd30      	pop	{r4, r5, pc}
        if (freeSpace > 0)
 80041a2:	f1bc 0f00 	cmp.w	ip, #0
 80041a6:	dd38      	ble.n	800421a <RI_GetRegisterGlobal+0xca>
 80041a8:	2301      	movs	r3, #1
          *size = 1;
 80041aa:	8023      	strh	r3, [r4, #0]
              retVal = MCP_ERROR_UNKNOWN_REG;
 80041ac:	2005      	movs	r0, #5
 80041ae:	e7ed      	b.n	800418c <RI_GetRegisterGlobal+0x3c>
        if (freeSpace >= 4)
 80041b0:	f1bc 0f03 	cmp.w	ip, #3
 80041b4:	dd2e      	ble.n	8004214 <RI_GetRegisterGlobal+0xc4>
          switch (regID)
 80041b6:	f241 6358 	movw	r3, #5720	@ 0x1658
 80041ba:	4298      	cmp	r0, r3
 80041bc:	f000 8082 	beq.w	80042c4 <RI_GetRegisterGlobal+0x174>
 80041c0:	f241 6398 	movw	r3, #5784	@ 0x1698
 80041c4:	4298      	cmp	r0, r3
 80041c6:	d075      	beq.n	80042b4 <RI_GetRegisterGlobal+0x164>
 80041c8:	f241 6318 	movw	r3, #5656	@ 0x1618
 80041cc:	4298      	cmp	r0, r3
 80041ce:	d16d      	bne.n	80042ac <RI_GetRegisterGlobal+0x15c>
              ReadVal.Float_Val = MC_Perf_GetCPU_Load(pMCIN->pPerfMeasure);
 80041d0:	4b40      	ldr	r3, [pc, #256]	@ (80042d4 <RI_GetRegisterGlobal+0x184>)
 80041d2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80041d4:	f7fe fc5e 	bl	8002a94 <MC_Perf_GetCPU_Load>
 80041d8:	ed8d 0a01 	vstr	s0, [sp, #4]
 80041dc:	9b01      	ldr	r3, [sp, #4]
              *regdataU32 = ReadVal.U32_Val;
 80041de:	602b      	str	r3, [r5, #0]
    uint8_t retVal = MCP_CMD_OK;
 80041e0:	2000      	movs	r0, #0
          *size = 4;
 80041e2:	2304      	movs	r3, #4
 80041e4:	8023      	strh	r3, [r4, #0]
}
 80041e6:	b003      	add	sp, #12
 80041e8:	bd30      	pop	{r4, r5, pc}
        if (freeSpace >= 2)
 80041ea:	f1bc 0f01 	cmp.w	ip, #1
 80041ee:	dd11      	ble.n	8004214 <RI_GetRegisterGlobal+0xc4>
          switch (regID)
 80041f0:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 80041f4:	d05c      	beq.n	80042b0 <RI_GetRegisterGlobal+0x160>
    uint8_t retVal = MCP_CMD_OK;
 80041f6:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 80041fa:	bf14      	ite	ne
 80041fc:	2005      	movne	r0, #5
 80041fe:	2000      	moveq	r0, #0
          *size = 2;
 8004200:	2302      	movs	r3, #2
 8004202:	8023      	strh	r3, [r4, #0]
}
 8004204:	b003      	add	sp, #12
 8004206:	bd30      	pop	{r4, r5, pc}
        switch (regID)
 8004208:	2820      	cmp	r0, #32
 800420a:	d02c      	beq.n	8004266 <RI_GetRegisterGlobal+0x116>
 800420c:	2860      	cmp	r0, #96	@ 0x60
 800420e:	d010      	beq.n	8004232 <RI_GetRegisterGlobal+0xe2>
 8004210:	2300      	movs	r3, #0
 8004212:	e7ca      	b.n	80041aa <RI_GetRegisterGlobal+0x5a>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8004214:	2008      	movs	r0, #8
}
 8004216:	b003      	add	sp, #12
 8004218:	bd30      	pop	{r4, r5, pc}
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 800421a:	4608      	mov	r0, r1
 800421c:	e7b6      	b.n	800418c <RI_GetRegisterGlobal+0x3c>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 800421e:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 8004222:	230a      	movs	r3, #10
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8004224:	f1bc 0f0b 	cmp.w	ip, #11
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 8004228:	802b      	strh	r3, [r5, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 800422a:	d833      	bhi.n	8004294 <RI_GetRegisterGlobal+0x144>
 800422c:	230c      	movs	r3, #12
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 800422e:	2008      	movs	r0, #8
 8004230:	e7b4      	b.n	800419c <RI_GetRegisterGlobal+0x4c>
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8004232:	4929      	ldr	r1, [pc, #164]	@ (80042d8 <RI_GetRegisterGlobal+0x188>)
 8004234:	f991 2000 	ldrsb.w	r2, [r1]
  *size= 1U ; /* /0 is the min String size */
 8004238:	2301      	movs	r3, #1
 800423a:	8023      	strh	r3, [r4, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 800423c:	b17a      	cbz	r2, 800425e <RI_GetRegisterGlobal+0x10e>
 800423e:	fa1f fc8c 	uxth.w	ip, ip
 8004242:	e008      	b.n	8004256 <RI_GetRegisterGlobal+0x106>
    *tempdestString = *tempsrcString;
 8004244:	f805 2b01 	strb.w	r2, [r5], #1
    *size = *size + 1U;
 8004248:	8823      	ldrh	r3, [r4, #0]
 800424a:	3301      	adds	r3, #1
 800424c:	b29b      	uxth	r3, r3
 800424e:	8023      	strh	r3, [r4, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8004250:	f911 2f01 	ldrsb.w	r2, [r1, #1]!
 8004254:	b11a      	cbz	r2, 800425e <RI_GetRegisterGlobal+0x10e>
 8004256:	4563      	cmp	r3, ip
 8004258:	d3f4      	bcc.n	8004244 <RI_GetRegisterGlobal+0xf4>
    retVal = MCP_ERROR_STRING_FORMAT;
 800425a:	2006      	movs	r0, #6
 800425c:	e796      	b.n	800418c <RI_GetRegisterGlobal+0x3c>
    *tempdestString = (int8_t)0;
 800425e:	2300      	movs	r3, #0
 8004260:	702b      	strb	r3, [r5, #0]
  uint8_t retVal = MCP_CMD_OK;
 8004262:	2000      	movs	r0, #0
 8004264:	e792      	b.n	800418c <RI_GetRegisterGlobal+0x3c>
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8004266:	491d      	ldr	r1, [pc, #116]	@ (80042dc <RI_GetRegisterGlobal+0x18c>)
 8004268:	f991 2000 	ldrsb.w	r2, [r1]
  *size= 1U ; /* /0 is the min String size */
 800426c:	2301      	movs	r3, #1
 800426e:	8023      	strh	r3, [r4, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8004270:	2a00      	cmp	r2, #0
 8004272:	d0f4      	beq.n	800425e <RI_GetRegisterGlobal+0x10e>
 8004274:	fa1f fc8c 	uxth.w	ip, ip
 8004278:	e009      	b.n	800428e <RI_GetRegisterGlobal+0x13e>
    *tempdestString = *tempsrcString;
 800427a:	f805 2b01 	strb.w	r2, [r5], #1
    *size = *size + 1U;
 800427e:	8823      	ldrh	r3, [r4, #0]
 8004280:	3301      	adds	r3, #1
 8004282:	b29b      	uxth	r3, r3
 8004284:	8023      	strh	r3, [r4, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8004286:	f911 2f01 	ldrsb.w	r2, [r1, #1]!
 800428a:	2a00      	cmp	r2, #0
 800428c:	d0e7      	beq.n	800425e <RI_GetRegisterGlobal+0x10e>
 800428e:	459c      	cmp	ip, r3
 8004290:	d8f3      	bhi.n	800427a <RI_GetRegisterGlobal+0x12a>
 8004292:	e7e2      	b.n	800425a <RI_GetRegisterGlobal+0x10a>
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 8004294:	4b12      	ldr	r3, [pc, #72]	@ (80042e0 <RI_GetRegisterGlobal+0x190>)
 8004296:	6819      	ldr	r1, [r3, #0]
 8004298:	685a      	ldr	r2, [r3, #4]
 800429a:	891b      	ldrh	r3, [r3, #8]
 800429c:	816b      	strh	r3, [r5, #10]
 800429e:	f8c5 1002 	str.w	r1, [r5, #2]
 80042a2:	f8c5 2006 	str.w	r2, [r5, #6]
 80042a6:	230c      	movs	r3, #12
    uint8_t retVal = MCP_CMD_OK;
 80042a8:	2000      	movs	r0, #0
 80042aa:	e777      	b.n	800419c <RI_GetRegisterGlobal+0x4c>
          switch (regID)
 80042ac:	2005      	movs	r0, #5
 80042ae:	e798      	b.n	80041e2 <RI_GetRegisterGlobal+0x92>
    uint8_t retVal = MCP_CMD_OK;
 80042b0:	2000      	movs	r0, #0
 80042b2:	e7a5      	b.n	8004200 <RI_GetRegisterGlobal+0xb0>
              ReadVal.Float_Val = MC_Perf_GetMaxCPU_Load(pMCIN->pPerfMeasure);
 80042b4:	4b07      	ldr	r3, [pc, #28]	@ (80042d4 <RI_GetRegisterGlobal+0x184>)
 80042b6:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80042b8:	f7fe fc10 	bl	8002adc <MC_Perf_GetMaxCPU_Load>
 80042bc:	ed8d 0a01 	vstr	s0, [sp, #4]
 80042c0:	9b01      	ldr	r3, [sp, #4]
              break;
 80042c2:	e78c      	b.n	80041de <RI_GetRegisterGlobal+0x8e>
              ReadVal.Float_Val = MC_Perf_GetMinCPU_Load(pMCIN->pPerfMeasure);
 80042c4:	4b03      	ldr	r3, [pc, #12]	@ (80042d4 <RI_GetRegisterGlobal+0x184>)
 80042c6:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80042c8:	f7fe fc2c 	bl	8002b24 <MC_Perf_GetMinCPU_Load>
 80042cc:	ed8d 0a01 	vstr	s0, [sp, #4]
 80042d0:	9b01      	ldr	r3, [sp, #4]
              break;
 80042d2:	e784      	b.n	80041de <RI_GetRegisterGlobal+0x8e>
 80042d4:	20000010 	.word	0x20000010
 80042d8:	0800b258 	.word	0x0800b258
 80042dc:	0800b234 	.word	0x0800b234
 80042e0:	0800b228 	.word	0x0800b228

080042e4 <RI_GetRegisterMotor1>:
  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 80042e4:	b530      	push	{r4, r5, lr}
 80042e6:	b095      	sub	sp, #84	@ 0x54
 80042e8:	461d      	mov	r5, r3
    switch (typeID)
 80042ea:	f1a1 0308 	sub.w	r3, r1, #8
  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 80042ee:	f9bd c060 	ldrsh.w	ip, [sp, #96]	@ 0x60
 80042f2:	4614      	mov	r4, r2
    switch (typeID)
 80042f4:	2b20      	cmp	r3, #32
 80042f6:	d812      	bhi.n	800431e <RI_GetRegisterMotor1+0x3a>
 80042f8:	e8df f003 	tbb	[pc, r3]
 80042fc:	11111131 	.word	0x11111131
 8004300:	11111111 	.word	0x11111111
 8004304:	11111167 	.word	0x11111167
 8004308:	11111111 	.word	0x11111111
 800430c:	11111144 	.word	0x11111144
 8004310:	11111111 	.word	0x11111111
 8004314:	1111115e 	.word	0x1111115e
 8004318:	11111111 	.word	0x11111111
 800431c:	14          	.byte	0x14
 800431d:	00          	.byte	0x00
 800431e:	2007      	movs	r0, #7
  }
 8004320:	b015      	add	sp, #84	@ 0x54
 8004322:	bd30      	pop	{r4, r5, pc}
        switch (regID)
 8004324:	f5b0 7f94 	cmp.w	r0, #296	@ 0x128
 8004328:	f000 816f 	beq.w	800460a <RI_GetRegisterMotor1+0x326>
 800432c:	d87b      	bhi.n	8004426 <RI_GetRegisterMotor1+0x142>
 800432e:	28a8      	cmp	r0, #168	@ 0xa8
        rawData++;
 8004330:	f104 0202 	add.w	r2, r4, #2
        switch (regID)
 8004334:	f000 8159 	beq.w	80045ea <RI_GetRegisterMotor1+0x306>
 8004338:	28e8      	cmp	r0, #232	@ 0xe8
 800433a:	f000 811a 	beq.w	8004572 <RI_GetRegisterMotor1+0x28e>
 800433e:	2868      	cmp	r0, #104	@ 0x68
 8004340:	f040 815e 	bne.w	8004600 <RI_GetRegisterMotor1+0x31c>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8004344:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 8004348:	233c      	movs	r3, #60	@ 0x3c
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 800434a:	f1bc 0f3d 	cmp.w	ip, #61	@ 0x3d
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 800434e:	8023      	strh	r3, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8004350:	f200 8206 	bhi.w	8004760 <RI_GetRegisterMotor1+0x47c>
 8004354:	233e      	movs	r3, #62	@ 0x3e
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8004356:	2008      	movs	r0, #8
        *size = (*rawSize) + 2U;
 8004358:	802b      	strh	r3, [r5, #0]
  }
 800435a:	b015      	add	sp, #84	@ 0x54
 800435c:	bd30      	pop	{r4, r5, pc}
        if (freeSpace > 0)
 800435e:	f1bc 0f00 	cmp.w	ip, #0
 8004362:	f340 812c 	ble.w	80045be <RI_GetRegisterMotor1+0x2da>
          switch (regID)
 8004366:	2848      	cmp	r0, #72	@ 0x48
 8004368:	f000 812b 	beq.w	80045c2 <RI_GetRegisterMotor1+0x2de>
 800436c:	2888      	cmp	r0, #136	@ 0x88
 800436e:	f040 80ca 	bne.w	8004506 <RI_GetRegisterMotor1+0x222>
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 8004372:	48b2      	ldr	r0, [pc, #712]	@ (800463c <RI_GetRegisterMotor1+0x358>)
 8004374:	f7fe f9e2 	bl	800273c <MCI_GetControlMode>
 8004378:	7020      	strb	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 800437a:	2000      	movs	r0, #0
          *size = 1;
 800437c:	2301      	movs	r3, #1
 800437e:	802b      	strh	r3, [r5, #0]
  }
 8004380:	b015      	add	sp, #84	@ 0x54
 8004382:	bd30      	pop	{r4, r5, pc}
        if (freeSpace >= 4)
 8004384:	f1bc 0f03 	cmp.w	ip, #3
 8004388:	dd4a      	ble.n	8004420 <RI_GetRegisterMotor1+0x13c>
          switch (regID)
 800438a:	28d8      	cmp	r0, #216	@ 0xd8
 800438c:	f000 817f 	beq.w	800468e <RI_GetRegisterMotor1+0x3aa>
 8004390:	f200 811b 	bhi.w	80045ca <RI_GetRegisterMotor1+0x2e6>
 8004394:	2858      	cmp	r0, #88	@ 0x58
 8004396:	f000 810a 	beq.w	80045ae <RI_GetRegisterMotor1+0x2ca>
 800439a:	2898      	cmp	r0, #152	@ 0x98
 800439c:	f000 816f 	beq.w	800467e <RI_GetRegisterMotor1+0x39a>
 80043a0:	2818      	cmp	r0, #24
 80043a2:	f040 816a 	bne.w	800467a <RI_GetRegisterMotor1+0x396>
              *regdataU32 = MCI_GetFaultState(pMCIN);
 80043a6:	48a5      	ldr	r0, [pc, #660]	@ (800463c <RI_GetRegisterMotor1+0x358>)
 80043a8:	f7fe f9c2 	bl	8002730 <MCI_GetFaultState>
 80043ac:	6020      	str	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 80043ae:	2000      	movs	r0, #0
          *size = 4;
 80043b0:	2304      	movs	r3, #4
 80043b2:	802b      	strh	r3, [r5, #0]
  }
 80043b4:	b015      	add	sp, #84	@ 0x54
 80043b6:	bd30      	pop	{r4, r5, pc}
        switch (regID)
 80043b8:	28a0      	cmp	r0, #160	@ 0xa0
 80043ba:	f000 808c 	beq.w	80044d6 <RI_GetRegisterMotor1+0x1f2>
 80043be:	28e0      	cmp	r0, #224	@ 0xe0
 80043c0:	d06c      	beq.n	800449c <RI_GetRegisterMotor1+0x1b8>
            *size= 0 ; /* */
 80043c2:	2300      	movs	r3, #0
 80043c4:	802b      	strh	r3, [r5, #0]
            retVal = MCP_ERROR_UNKNOWN_REG;
 80043c6:	2005      	movs	r0, #5
            break;
 80043c8:	e7aa      	b.n	8004320 <RI_GetRegisterMotor1+0x3c>
        if (freeSpace >= 2)
 80043ca:	f1bc 0f01 	cmp.w	ip, #1
 80043ce:	dd27      	ble.n	8004420 <RI_GetRegisterMotor1+0x13c>
          switch (regID)
 80043d0:	f5b0 6f1d 	cmp.w	r0, #2512	@ 0x9d0
 80043d4:	f000 8278 	beq.w	80048c8 <RI_GetRegisterMotor1+0x5e4>
 80043d8:	d842      	bhi.n	8004460 <RI_GetRegisterMotor1+0x17c>
 80043da:	f5b0 6f8a 	cmp.w	r0, #1104	@ 0x450
 80043de:	f000 826e 	beq.w	80048be <RI_GetRegisterMotor1+0x5da>
 80043e2:	f240 8092 	bls.w	800450a <RI_GetRegisterMotor1+0x226>
 80043e6:	f5b0 6f05 	cmp.w	r0, #2128	@ 0x850
 80043ea:	f000 8272 	beq.w	80048d2 <RI_GetRegisterMotor1+0x5ee>
 80043ee:	f200 8158 	bhi.w	80046a2 <RI_GetRegisterMotor1+0x3be>
 80043f2:	f5b0 6fba 	cmp.w	r0, #1488	@ 0x5d0
 80043f6:	f000 8276 	beq.w	80048e6 <RI_GetRegisterMotor1+0x602>
 80043fa:	f200 81e9 	bhi.w	80047d0 <RI_GetRegisterMotor1+0x4ec>
 80043fe:	f5b0 6f92 	cmp.w	r0, #1168	@ 0x490
 8004402:	f000 82b6 	beq.w	8004972 <RI_GetRegisterMotor1+0x68e>
 8004406:	f5b0 6fb2 	cmp.w	r0, #1424	@ 0x590
 800440a:	f040 82b0 	bne.w	800496e <RI_GetRegisterMotor1+0x68a>
              *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor);
 800440e:	488c      	ldr	r0, [pc, #560]	@ (8004640 <RI_GetRegisterMotor1+0x35c>)
 8004410:	f005 f872 	bl	80094f8 <VBS_GetAvBusVoltage_V>
 8004414:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8004416:	2000      	movs	r0, #0
          *size = 2;
 8004418:	2302      	movs	r3, #2
 800441a:	802b      	strh	r3, [r5, #0]
  }
 800441c:	b015      	add	sp, #84	@ 0x54
 800441e:	bd30      	pop	{r4, r5, pc}
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8004420:	2008      	movs	r0, #8
  }
 8004422:	b015      	add	sp, #84	@ 0x54
 8004424:	bd30      	pop	{r4, r5, pc}
        switch (regID)
 8004426:	f5b0 7ff4 	cmp.w	r0, #488	@ 0x1e8
 800442a:	f000 8115 	beq.w	8004658 <RI_GetRegisterMotor1+0x374>
 800442e:	f5b0 7f5a 	cmp.w	r0, #872	@ 0x368
 8004432:	f000 80a9 	beq.w	8004588 <RI_GetRegisterMotor1+0x2a4>
 8004436:	f5b0 7fd4 	cmp.w	r0, #424	@ 0x1a8
 800443a:	f040 80e1 	bne.w	8004600 <RI_GetRegisterMotor1+0x31c>
            *rpm = (((int32_t)MCI_GetLastRampFinalSpeed(pMCIN) * U_RPM) / (int32_t)SPEED_UNIT);
 800443e:	487f      	ldr	r0, [pc, #508]	@ (800463c <RI_GetRegisterMotor1+0x358>)
 8004440:	f7fe f980 	bl	8002744 <MCI_GetLastRampFinalSpeed>
 8004444:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8004448:	0043      	lsls	r3, r0, #1
 800444a:	f8c4 3002 	str.w	r3, [r4, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 800444e:	487b      	ldr	r0, [pc, #492]	@ (800463c <RI_GetRegisterMotor1+0x358>)
 8004450:	f7fe f980 	bl	8002754 <MCI_GetLastRampFinalDuration>
            *rawSize = 6;
 8004454:	2306      	movs	r3, #6
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 8004456:	80e0      	strh	r0, [r4, #6]
            *rawSize = 6;
 8004458:	8023      	strh	r3, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 800445a:	2000      	movs	r0, #0
            break;
 800445c:	2308      	movs	r3, #8
 800445e:	e77b      	b.n	8004358 <RI_GetRegisterMotor1+0x74>
          switch (regID)
 8004460:	f5b0 6f71 	cmp.w	r0, #3856	@ 0xf10
 8004464:	f000 823a 	beq.w	80048dc <RI_GetRegisterMotor1+0x5f8>
 8004468:	d866      	bhi.n	8004538 <RI_GetRegisterMotor1+0x254>
 800446a:	f5b0 6f3d 	cmp.w	r0, #3024	@ 0xbd0
 800446e:	f000 828f 	beq.w	8004990 <RI_GetRegisterMotor1+0x6ac>
 8004472:	f200 8152 	bhi.w	800471a <RI_GetRegisterMotor1+0x436>
 8004476:	f5b0 6f29 	cmp.w	r0, #2704	@ 0xa90
 800447a:	f000 8252 	beq.w	8004922 <RI_GetRegisterMotor1+0x63e>
 800447e:	f200 81d2 	bhi.w	8004826 <RI_GetRegisterMotor1+0x542>
 8004482:	f5b0 6f21 	cmp.w	r0, #2576	@ 0xa10
 8004486:	f000 82ab 	beq.w	80049e0 <RI_GetRegisterMotor1+0x6fc>
 800448a:	f5b0 6f25 	cmp.w	r0, #2640	@ 0xa50
 800448e:	f040 826e 	bne.w	800496e <RI_GetRegisterMotor1+0x68a>
              *regdata16 = MCI_GetValphabeta(pMCIN).alpha;
 8004492:	486a      	ldr	r0, [pc, #424]	@ (800463c <RI_GetRegisterMotor1+0x358>)
 8004494:	f7fe f9ae 	bl	80027f4 <MCI_GetValphabeta>
 8004498:	8020      	strh	r0, [r4, #0]
              break;
 800449a:	e7bc      	b.n	8004416 <RI_GetRegisterMotor1+0x132>
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 800449c:	4b69      	ldr	r3, [pc, #420]	@ (8004644 <RI_GetRegisterMotor1+0x360>)
 800449e:	681a      	ldr	r2, [r3, #0]
  *size= 1U ; /* /0 is the min String size */
 80044a0:	2301      	movs	r3, #1
 80044a2:	802b      	strh	r3, [r5, #0]
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 80044a4:	f102 0124 	add.w	r1, r2, #36	@ 0x24
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80044a8:	f992 2024 	ldrsb.w	r2, [r2, #36]	@ 0x24
 80044ac:	b17a      	cbz	r2, 80044ce <RI_GetRegisterMotor1+0x1ea>
 80044ae:	fa1f fc8c 	uxth.w	ip, ip
 80044b2:	e008      	b.n	80044c6 <RI_GetRegisterMotor1+0x1e2>
    *tempdestString = *tempsrcString;
 80044b4:	f804 2b01 	strb.w	r2, [r4], #1
    *size = *size + 1U;
 80044b8:	882b      	ldrh	r3, [r5, #0]
 80044ba:	3301      	adds	r3, #1
 80044bc:	b29b      	uxth	r3, r3
 80044be:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80044c0:	f911 2f01 	ldrsb.w	r2, [r1, #1]!
 80044c4:	b11a      	cbz	r2, 80044ce <RI_GetRegisterMotor1+0x1ea>
 80044c6:	459c      	cmp	ip, r3
 80044c8:	d8f4      	bhi.n	80044b4 <RI_GetRegisterMotor1+0x1d0>
    retVal = MCP_ERROR_STRING_FORMAT;
 80044ca:	2006      	movs	r0, #6
 80044cc:	e728      	b.n	8004320 <RI_GetRegisterMotor1+0x3c>
    *tempdestString = (int8_t)0;
 80044ce:	2300      	movs	r3, #0
 80044d0:	7023      	strb	r3, [r4, #0]
  uint8_t retVal = MCP_CMD_OK;
 80044d2:	2000      	movs	r0, #0
 80044d4:	e724      	b.n	8004320 <RI_GetRegisterMotor1+0x3c>
            retVal = RI_MovString (PWR_BOARD_NAME[motorID], charData, size, freeSpace);
 80044d6:	4a5c      	ldr	r2, [pc, #368]	@ (8004648 <RI_GetRegisterMotor1+0x364>)
  *size= 1U ; /* /0 is the min String size */
 80044d8:	2301      	movs	r3, #1
            retVal = RI_MovString (PWR_BOARD_NAME[motorID], charData, size, freeSpace);
 80044da:	6811      	ldr	r1, [r2, #0]
  *size= 1U ; /* /0 is the min String size */
 80044dc:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80044de:	f991 2000 	ldrsb.w	r2, [r1]
 80044e2:	2a00      	cmp	r2, #0
 80044e4:	d0f3      	beq.n	80044ce <RI_GetRegisterMotor1+0x1ea>
 80044e6:	fa1f fc8c 	uxth.w	ip, ip
 80044ea:	e009      	b.n	8004500 <RI_GetRegisterMotor1+0x21c>
    *tempdestString = *tempsrcString;
 80044ec:	f804 2b01 	strb.w	r2, [r4], #1
    *size = *size + 1U;
 80044f0:	882b      	ldrh	r3, [r5, #0]
 80044f2:	3301      	adds	r3, #1
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80044f8:	f911 2f01 	ldrsb.w	r2, [r1, #1]!
 80044fc:	2a00      	cmp	r2, #0
 80044fe:	d0e6      	beq.n	80044ce <RI_GetRegisterMotor1+0x1ea>
 8004500:	459c      	cmp	ip, r3
 8004502:	d8f3      	bhi.n	80044ec <RI_GetRegisterMotor1+0x208>
 8004504:	e7e1      	b.n	80044ca <RI_GetRegisterMotor1+0x1e6>
          switch (regID)
 8004506:	2005      	movs	r0, #5
 8004508:	e738      	b.n	800437c <RI_GetRegisterMotor1+0x98>
          switch (regID)
 800450a:	f5b0 7f04 	cmp.w	r0, #528	@ 0x210
 800450e:	f000 81ca 	beq.w	80048a6 <RI_GetRegisterMotor1+0x5c2>
 8004512:	f200 80d9 	bhi.w	80046c8 <RI_GetRegisterMotor1+0x3e4>
 8004516:	f5b0 7f88 	cmp.w	r0, #272	@ 0x110
 800451a:	f000 81ee 	beq.w	80048fa <RI_GetRegisterMotor1+0x616>
 800451e:	f200 8175 	bhi.w	800480c <RI_GetRegisterMotor1+0x528>
 8004522:	2890      	cmp	r0, #144	@ 0x90
 8004524:	f000 822a 	beq.w	800497c <RI_GetRegisterMotor1+0x698>
 8004528:	28d0      	cmp	r0, #208	@ 0xd0
 800452a:	f040 8220 	bne.w	800496e <RI_GetRegisterMotor1+0x68a>
              *regdata16 = PID_GetKI(&PIDSpeedHandle_M1);
 800452e:	4847      	ldr	r0, [pc, #284]	@ (800464c <RI_GetRegisterMotor1+0x368>)
 8004530:	f005 f9de 	bl	80098f0 <PID_GetKI>
 8004534:	8020      	strh	r0, [r4, #0]
              break;
 8004536:	e76e      	b.n	8004416 <RI_GetRegisterMotor1+0x132>
          switch (regID)
 8004538:	f241 5390 	movw	r3, #5520	@ 0x1590
 800453c:	4298      	cmp	r0, r3
 800453e:	f000 823b 	beq.w	80049b8 <RI_GetRegisterMotor1+0x6d4>
 8004542:	f200 80d4 	bhi.w	80046ee <RI_GetRegisterMotor1+0x40a>
 8004546:	f241 43d0 	movw	r3, #5328	@ 0x14d0
 800454a:	4298      	cmp	r0, r3
 800454c:	f000 81df 	beq.w	800490e <RI_GetRegisterMotor1+0x62a>
 8004550:	f200 814d 	bhi.w	80047ee <RI_GetRegisterMotor1+0x50a>
 8004554:	f241 4350 	movw	r3, #5200	@ 0x1450
 8004558:	4298      	cmp	r0, r3
 800455a:	f000 8214 	beq.w	8004986 <RI_GetRegisterMotor1+0x6a2>
 800455e:	f241 4390 	movw	r3, #5264	@ 0x1490
 8004562:	4298      	cmp	r0, r3
 8004564:	f040 8203 	bne.w	800496e <RI_GetRegisterMotor1+0x68a>
              *regdataU16 = (uint16_t)PID_GetKIDivisorPOW2(&PIDSpeedHandle_M1);
 8004568:	4838      	ldr	r0, [pc, #224]	@ (800464c <RI_GetRegisterMotor1+0x368>)
 800456a:	f005 f9cf 	bl	800990c <PID_GetKIDivisorPOW2>
 800456e:	8020      	strh	r0, [r4, #0]
              break;
 8004570:	e751      	b.n	8004416 <RI_GetRegisterMotor1+0x132>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8004572:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 8004576:	230e      	movs	r3, #14
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8004578:	f1bc 0f0f 	cmp.w	ip, #15
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 800457c:	8023      	strh	r3, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 800457e:	f200 80e2 	bhi.w	8004746 <RI_GetRegisterMotor1+0x462>
 8004582:	2310      	movs	r3, #16
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8004584:	2008      	movs	r0, #8
 8004586:	e6e7      	b.n	8004358 <RI_GetRegisterMotor1+0x74>
            *rawSize = 4;
 8004588:	2304      	movs	r3, #4
 800458a:	8023      	strh	r3, [r4, #0]
            *iqref = (uint16_t)MCI_GetIqdref(pMCIN).q;
 800458c:	482b      	ldr	r0, [pc, #172]	@ (800463c <RI_GetRegisterMotor1+0x358>)
 800458e:	f7fe f91d 	bl	80027cc <MCI_GetIqdref>
 8004592:	4603      	mov	r3, r0
 8004594:	8063      	strh	r3, [r4, #2]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8004596:	4829      	ldr	r0, [pc, #164]	@ (800463c <RI_GetRegisterMotor1+0x358>)
            *iqref = (uint16_t)MCI_GetIqdref(pMCIN).q;
 8004598:	9312      	str	r3, [sp, #72]	@ 0x48
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 800459a:	f7fe f917 	bl	80027cc <MCI_GetIqdref>
        *size = (*rawSize) + 2U;
 800459e:	8823      	ldrh	r3, [r4, #0]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 80045a0:	f3c0 400f 	ubfx	r0, r0, #16, #16
        *size = (*rawSize) + 2U;
 80045a4:	3302      	adds	r3, #2
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 80045a6:	80a0      	strh	r0, [r4, #4]
        *size = (*rawSize) + 2U;
 80045a8:	b29b      	uxth	r3, r3
    uint8_t retVal = MCP_CMD_OK;
 80045aa:	2000      	movs	r0, #0
            break;
 80045ac:	e6d4      	b.n	8004358 <RI_GetRegisterMotor1+0x74>
              *regdata32 = (((int32_t)MCI_GetAvrgMecSpeedUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 80045ae:	4823      	ldr	r0, [pc, #140]	@ (800463c <RI_GetRegisterMotor1+0x358>)
 80045b0:	f7fe f8d8 	bl	8002764 <MCI_GetAvrgMecSpeedUnit>
 80045b4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80045b8:	0040      	lsls	r0, r0, #1
 80045ba:	6020      	str	r0, [r4, #0]
              break;
 80045bc:	e6f7      	b.n	80043ae <RI_GetRegisterMotor1+0xca>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80045be:	4608      	mov	r0, r1
 80045c0:	e6ae      	b.n	8004320 <RI_GetRegisterMotor1+0x3c>
              *data = (uint8_t)MCI_GetSTMState(pMCIN);
 80045c2:	481e      	ldr	r0, [pc, #120]	@ (800463c <RI_GetRegisterMotor1+0x358>)
 80045c4:	f7fe f86a 	bl	800269c <MCI_GetSTMState>
              break;
 80045c8:	e6d6      	b.n	8004378 <RI_GetRegisterMotor1+0x94>
          switch (regID)
 80045ca:	f5b0 7f8c 	cmp.w	r0, #280	@ 0x118
 80045ce:	d063      	beq.n	8004698 <RI_GetRegisterMotor1+0x3b4>
 80045d0:	f641 3358 	movw	r3, #7000	@ 0x1b58
 80045d4:	4298      	cmp	r0, r3
 80045d6:	d150      	bne.n	800467a <RI_GetRegisterMotor1+0x396>
              ReadVal.Float_Val = PQD_GetAvrgElMotorPowerW(pMPM[M1]);
 80045d8:	4b1d      	ldr	r3, [pc, #116]	@ (8004650 <RI_GetRegisterMotor1+0x36c>)
 80045da:	6818      	ldr	r0, [r3, #0]
 80045dc:	f005 fa1a 	bl	8009a14 <PQD_GetAvrgElMotorPowerW>
 80045e0:	ed8d 0a01 	vstr	s0, [sp, #4]
              *regdataU32 = ReadVal.U32_Val; //cstat !UNION-type-punning
 80045e4:	9b01      	ldr	r3, [sp, #4]
 80045e6:	6023      	str	r3, [r4, #0]
              break;
 80045e8:	e6e1      	b.n	80043ae <RI_GetRegisterMotor1+0xca>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80045ea:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(ApplicationConfig_reg_t);
 80045ee:	2310      	movs	r3, #16
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80045f0:	f1bc 0f11 	cmp.w	ip, #17
            *rawSize = (uint16_t)sizeof(ApplicationConfig_reg_t);
 80045f4:	8023      	strh	r3, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80045f6:	f200 80cf 	bhi.w	8004798 <RI_GetRegisterMotor1+0x4b4>
 80045fa:	2312      	movs	r3, #18
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80045fc:	2008      	movs	r0, #8
 80045fe:	e6ab      	b.n	8004358 <RI_GetRegisterMotor1+0x74>
        *size = (*rawSize) + 2U;
 8004600:	8823      	ldrh	r3, [r4, #0]
 8004602:	3302      	adds	r3, #2
            retVal = MCP_ERROR_UNKNOWN_REG;
 8004604:	2005      	movs	r0, #5
        *size = (*rawSize) + 2U;
 8004606:	b29b      	uxth	r3, r3
 8004608:	e6a6      	b.n	8004358 <RI_GetRegisterMotor1+0x74>
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 800460a:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = 12;
 800460e:	230c      	movs	r3, #12
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 8004610:	f1bc 0f0d 	cmp.w	ip, #13
            *rawSize = 12;
 8004614:	8023      	strh	r3, [r4, #0]
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 8004616:	f240 8093 	bls.w	8004740 <RI_GetRegisterMotor1+0x45c>
              memcpy(rawData, &scaleParams_M1, sizeof(ScaleParams_t) );
 800461a:	4b0e      	ldr	r3, [pc, #56]	@ (8004654 <RI_GetRegisterMotor1+0x370>)
 800461c:	6818      	ldr	r0, [r3, #0]
 800461e:	6859      	ldr	r1, [r3, #4]
 8004620:	689a      	ldr	r2, [r3, #8]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	f8c4 300e 	str.w	r3, [r4, #14]
 8004628:	f8c4 0002 	str.w	r0, [r4, #2]
 800462c:	f8c4 1006 	str.w	r1, [r4, #6]
 8004630:	f8c4 200a 	str.w	r2, [r4, #10]
 8004634:	230e      	movs	r3, #14
    uint8_t retVal = MCP_CMD_OK;
 8004636:	2000      	movs	r0, #0
 8004638:	e68e      	b.n	8004358 <RI_GetRegisterMotor1+0x74>
 800463a:	bf00      	nop
 800463c:	20000010 	.word	0x20000010
 8004640:	200003c8 	.word	0x200003c8
 8004644:	20000424 	.word	0x20000424
 8004648:	2000042c 	.word	0x2000042c
 800464c:	2000038c 	.word	0x2000038c
 8004650:	2000003c 	.word	0x2000003c
 8004654:	20000430 	.word	0x20000430
            *rawSize = 4;
 8004658:	2304      	movs	r3, #4
 800465a:	8023      	strh	r3, [r4, #0]
            *torque = MCI_GetLastRampFinalTorque(pMCIN);
 800465c:	48b4      	ldr	r0, [pc, #720]	@ (8004930 <RI_GetRegisterMotor1+0x64c>)
 800465e:	f7fe f875 	bl	800274c <MCI_GetLastRampFinalTorque>
 8004662:	4603      	mov	r3, r0
 8004664:	8063      	strh	r3, [r4, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 8004666:	48b2      	ldr	r0, [pc, #712]	@ (8004930 <RI_GetRegisterMotor1+0x64c>)
 8004668:	f7fe f874 	bl	8002754 <MCI_GetLastRampFinalDuration>
        *size = (*rawSize) + 2U;
 800466c:	8823      	ldrh	r3, [r4, #0]
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 800466e:	4602      	mov	r2, r0
        *size = (*rawSize) + 2U;
 8004670:	3302      	adds	r3, #2
    uint8_t retVal = MCP_CMD_OK;
 8004672:	2000      	movs	r0, #0
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 8004674:	80a2      	strh	r2, [r4, #4]
        *size = (*rawSize) + 2U;
 8004676:	b29b      	uxth	r3, r3
            break;
 8004678:	e66e      	b.n	8004358 <RI_GetRegisterMotor1+0x74>
          switch (regID)
 800467a:	2005      	movs	r0, #5
 800467c:	e698      	b.n	80043b0 <RI_GetRegisterMotor1+0xcc>
              *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 800467e:	48ac      	ldr	r0, [pc, #688]	@ (8004930 <RI_GetRegisterMotor1+0x64c>)
 8004680:	f7fe f882 	bl	8002788 <MCI_GetMecSpeedRefUnit>
 8004684:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8004688:	0040      	lsls	r0, r0, #1
 800468a:	6020      	str	r0, [r4, #0]
              break;
 800468c:	e68f      	b.n	80043ae <RI_GetRegisterMotor1+0xca>
static inline int32_t STO_PLL_GetEstimatedBemfLevel(STO_PLL_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  return ((MC_NULL == pHandle) ? 0 : pHandle->Est_Bemf_Level);
#else
  return (pHandle->Est_Bemf_Level);
 800468e:	4ba9      	ldr	r3, [pc, #676]	@ (8004934 <RI_GetRegisterMotor1+0x650>)
 8004690:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
              *regdata32 = STO_PLL_GetEstimatedBemfLevel(&STO_PLL_M1);
 8004694:	6023      	str	r3, [r4, #0]
              break;
 8004696:	e68a      	b.n	80043ae <RI_GetRegisterMotor1+0xca>
static inline int32_t STO_PLL_GetObservedBemfLevel(STO_PLL_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  return ((MC_NULL == pHandle) ? 0 : pHandle->Obs_Bemf_Level);
#else
  return (pHandle->Obs_Bemf_Level);
 8004698:	4ba6      	ldr	r3, [pc, #664]	@ (8004934 <RI_GetRegisterMotor1+0x650>)
 800469a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
              *regdata32 = STO_PLL_GetObservedBemfLevel(&STO_PLL_M1);
 800469e:	6023      	str	r3, [r4, #0]
              break;
 80046a0:	e685      	b.n	80043ae <RI_GetRegisterMotor1+0xca>
          switch (regID)
 80046a2:	f5b0 6f11 	cmp.w	r0, #2320	@ 0x910
 80046a6:	f000 80f7 	beq.w	8004898 <RI_GetRegisterMotor1+0x5b4>
 80046aa:	f200 8082 	bhi.w	80047b2 <RI_GetRegisterMotor1+0x4ce>
 80046ae:	f5b0 6f09 	cmp.w	r0, #2192	@ 0x890
 80046b2:	f000 80fd 	beq.w	80048b0 <RI_GetRegisterMotor1+0x5cc>
 80046b6:	f5b0 6f0d 	cmp.w	r0, #2256	@ 0x8d0
 80046ba:	f040 8158 	bne.w	800496e <RI_GetRegisterMotor1+0x68a>
              *regdata16 = MCI_GetIqd(pMCIN).q;
 80046be:	489c      	ldr	r0, [pc, #624]	@ (8004930 <RI_GetRegisterMotor1+0x64c>)
 80046c0:	f7fe f87a 	bl	80027b8 <MCI_GetIqd>
 80046c4:	8020      	strh	r0, [r4, #0]
              break;
 80046c6:	e6a6      	b.n	8004416 <RI_GetRegisterMotor1+0x132>
          switch (regID)
 80046c8:	f5b0 7f44 	cmp.w	r0, #784	@ 0x310
 80046cc:	f000 817e 	beq.w	80049cc <RI_GetRegisterMotor1+0x6e8>
 80046d0:	f200 80c5 	bhi.w	800485e <RI_GetRegisterMotor1+0x57a>
 80046d4:	f5b0 7f24 	cmp.w	r0, #656	@ 0x290
 80046d8:	f000 8173 	beq.w	80049c2 <RI_GetRegisterMotor1+0x6de>
 80046dc:	f5b0 7f34 	cmp.w	r0, #720	@ 0x2d0
 80046e0:	f040 8145 	bne.w	800496e <RI_GetRegisterMotor1+0x68a>
              *regdata16 = PID_GetKI(&PIDIdHandle_M1);
 80046e4:	4894      	ldr	r0, [pc, #592]	@ (8004938 <RI_GetRegisterMotor1+0x654>)
 80046e6:	f005 f903 	bl	80098f0 <PID_GetKI>
 80046ea:	8020      	strh	r0, [r4, #0]
              break;
 80046ec:	e693      	b.n	8004416 <RI_GetRegisterMotor1+0x132>
          switch (regID)
 80046ee:	f241 6350 	movw	r3, #5712	@ 0x1650
 80046f2:	4298      	cmp	r0, r3
 80046f4:	f000 8156 	beq.w	80049a4 <RI_GetRegisterMotor1+0x6c0>
 80046f8:	f200 80a2 	bhi.w	8004840 <RI_GetRegisterMotor1+0x55c>
 80046fc:	f241 53d0 	movw	r3, #5584	@ 0x15d0
 8004700:	4298      	cmp	r0, r3
 8004702:	f000 814a 	beq.w	800499a <RI_GetRegisterMotor1+0x6b6>
 8004706:	f241 6310 	movw	r3, #5648	@ 0x1610
 800470a:	4298      	cmp	r0, r3
 800470c:	f040 812f 	bne.w	800496e <RI_GetRegisterMotor1+0x68a>
              *regdataU16 = PID_GetKIDivisorPOW2(&PIDIqHandle_M1);
 8004710:	488a      	ldr	r0, [pc, #552]	@ (800493c <RI_GetRegisterMotor1+0x658>)
 8004712:	f005 f8fb 	bl	800990c <PID_GetKIDivisorPOW2>
 8004716:	8020      	strh	r0, [r4, #0]
              break;
 8004718:	e67d      	b.n	8004416 <RI_GetRegisterMotor1+0x132>
          switch (regID)
 800471a:	f5b0 6f49 	cmp.w	r0, #3216	@ 0xc90
 800471e:	f000 816d 	beq.w	80049fc <RI_GetRegisterMotor1+0x718>
 8004722:	f200 80ad 	bhi.w	8004880 <RI_GetRegisterMotor1+0x59c>
 8004726:	f5b0 6f41 	cmp.w	r0, #3088	@ 0xc10
 800472a:	f000 8160 	beq.w	80049ee <RI_GetRegisterMotor1+0x70a>
 800472e:	f5b0 6f45 	cmp.w	r0, #3152	@ 0xc50
 8004732:	f040 811c 	bne.w	800496e <RI_GetRegisterMotor1+0x68a>
              *regdata16 = STO_PLL_GetEstimatedBemf(&STO_PLL_M1).alpha;
 8004736:	487f      	ldr	r0, [pc, #508]	@ (8004934 <RI_GetRegisterMotor1+0x650>)
 8004738:	f006 fc58 	bl	800afec <STO_PLL_GetEstimatedBemf>
 800473c:	8020      	strh	r0, [r4, #0]
              break;
 800473e:	e66a      	b.n	8004416 <RI_GetRegisterMotor1+0x132>
 8004740:	230e      	movs	r3, #14
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8004742:	2008      	movs	r0, #8
 8004744:	e608      	b.n	8004358 <RI_GetRegisterMotor1+0x74>
              FOCFwConfig_reg_t const *pFOCConfig_reg = FOCConfig_reg[motorID];
 8004746:	4b7e      	ldr	r3, [pc, #504]	@ (8004940 <RI_GetRegisterMotor1+0x65c>)
              (void)memcpy(rawData, (const uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	6818      	ldr	r0, [r3, #0]
 800474c:	6859      	ldr	r1, [r3, #4]
 800474e:	689c      	ldr	r4, [r3, #8]
 8004750:	6094      	str	r4, [r2, #8]
 8004752:	6010      	str	r0, [r2, #0]
 8004754:	6051      	str	r1, [r2, #4]
 8004756:	899b      	ldrh	r3, [r3, #12]
 8004758:	8193      	strh	r3, [r2, #12]
    uint8_t retVal = MCP_CMD_OK;
 800475a:	2000      	movs	r0, #0
              (void)memcpy(rawData, (const uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 800475c:	2310      	movs	r3, #16
 800475e:	e5fb      	b.n	8004358 <RI_GetRegisterMotor1+0x74>
              MotorConfig_reg_t const *pMotorConfig_reg = MotorConfig_reg[motorID];
 8004760:	4b78      	ldr	r3, [pc, #480]	@ (8004944 <RI_GetRegisterMotor1+0x660>)
              (void)memcpy(rawData, (const uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f103 0e30 	add.w	lr, r3, #48	@ 0x30
 8004768:	681c      	ldr	r4, [r3, #0]
 800476a:	6858      	ldr	r0, [r3, #4]
 800476c:	6899      	ldr	r1, [r3, #8]
 800476e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8004772:	f8c2 c00c 	str.w	ip, [r2, #12]
 8004776:	3310      	adds	r3, #16
 8004778:	4573      	cmp	r3, lr
 800477a:	6014      	str	r4, [r2, #0]
 800477c:	6050      	str	r0, [r2, #4]
 800477e:	6091      	str	r1, [r2, #8]
 8004780:	f102 0210 	add.w	r2, r2, #16
 8004784:	d1f0      	bne.n	8004768 <RI_GetRegisterMotor1+0x484>
 8004786:	6818      	ldr	r0, [r3, #0]
 8004788:	6859      	ldr	r1, [r3, #4]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	6093      	str	r3, [r2, #8]
 800478e:	6010      	str	r0, [r2, #0]
 8004790:	6051      	str	r1, [r2, #4]
 8004792:	233e      	movs	r3, #62	@ 0x3e
    uint8_t retVal = MCP_CMD_OK;
 8004794:	2000      	movs	r0, #0
 8004796:	e5df      	b.n	8004358 <RI_GetRegisterMotor1+0x74>
              ApplicationConfig_reg_t const *pApplicationConfig_reg = ApplicationConfig_reg[motorID];
 8004798:	4b6b      	ldr	r3, [pc, #428]	@ (8004948 <RI_GetRegisterMotor1+0x664>)
              (void)memcpy(rawData, (const uint8_t *)pApplicationConfig_reg, sizeof(ApplicationConfig_reg_t));
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6858      	ldr	r0, [r3, #4]
 800479e:	681c      	ldr	r4, [r3, #0]
 80047a0:	6899      	ldr	r1, [r3, #8]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	60d3      	str	r3, [r2, #12]
 80047a6:	6050      	str	r0, [r2, #4]
 80047a8:	6014      	str	r4, [r2, #0]
 80047aa:	6091      	str	r1, [r2, #8]
 80047ac:	2312      	movs	r3, #18
    uint8_t retVal = MCP_CMD_OK;
 80047ae:	2000      	movs	r0, #0
 80047b0:	e5d2      	b.n	8004358 <RI_GetRegisterMotor1+0x74>
          switch (regID)
 80047b2:	f5b0 6f15 	cmp.w	r0, #2384	@ 0x950
 80047b6:	f000 809b 	beq.w	80048f0 <RI_GetRegisterMotor1+0x60c>
 80047ba:	f5b0 6f19 	cmp.w	r0, #2448	@ 0x990
 80047be:	f040 80d6 	bne.w	800496e <RI_GetRegisterMotor1+0x68a>
              *regdata16 = MCI_GetIqdref(pMCIN).d;
 80047c2:	485b      	ldr	r0, [pc, #364]	@ (8004930 <RI_GetRegisterMotor1+0x64c>)
 80047c4:	f7fe f802 	bl	80027cc <MCI_GetIqdref>
 80047c8:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80047cc:	8023      	strh	r3, [r4, #0]
              break;
 80047ce:	e622      	b.n	8004416 <RI_GetRegisterMotor1+0x132>
          switch (regID)
 80047d0:	f5b0 6ffa 	cmp.w	r0, #2000	@ 0x7d0
 80047d4:	f000 80a0 	beq.w	8004918 <RI_GetRegisterMotor1+0x634>
 80047d8:	f5b0 6f01 	cmp.w	r0, #2064	@ 0x810
 80047dc:	f040 80c7 	bne.w	800496e <RI_GetRegisterMotor1+0x68a>
              *regdata16 = MCI_GetIab(pMCIN).b;
 80047e0:	4853      	ldr	r0, [pc, #332]	@ (8004930 <RI_GetRegisterMotor1+0x64c>)
 80047e2:	f7fd ffd5 	bl	8002790 <MCI_GetIab>
 80047e6:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80047ea:	8023      	strh	r3, [r4, #0]
              break;
 80047ec:	e613      	b.n	8004416 <RI_GetRegisterMotor1+0x132>
          switch (regID)
 80047ee:	f241 5310 	movw	r3, #5392	@ 0x1510
 80047f2:	4298      	cmp	r0, r3
 80047f4:	f000 8086 	beq.w	8004904 <RI_GetRegisterMotor1+0x620>
 80047f8:	f241 5350 	movw	r3, #5456	@ 0x1550
 80047fc:	4298      	cmp	r0, r3
 80047fe:	f040 80b6 	bne.w	800496e <RI_GetRegisterMotor1+0x68a>
              *regdataU16 = PID_GetKIDivisorPOW2(&PIDIdHandle_M1);
 8004802:	484d      	ldr	r0, [pc, #308]	@ (8004938 <RI_GetRegisterMotor1+0x654>)
 8004804:	f005 f882 	bl	800990c <PID_GetKIDivisorPOW2>
 8004808:	8020      	strh	r0, [r4, #0]
              break;
 800480a:	e604      	b.n	8004416 <RI_GetRegisterMotor1+0x132>
          switch (regID)
 800480c:	f5b0 7fc8 	cmp.w	r0, #400	@ 0x190
 8004810:	f000 80a4 	beq.w	800495c <RI_GetRegisterMotor1+0x678>
 8004814:	f5b0 7fe8 	cmp.w	r0, #464	@ 0x1d0
 8004818:	f040 80a9 	bne.w	800496e <RI_GetRegisterMotor1+0x68a>
              *regdata16 = PID_GetKI(&PIDIqHandle_M1);
 800481c:	4847      	ldr	r0, [pc, #284]	@ (800493c <RI_GetRegisterMotor1+0x658>)
 800481e:	f005 f867 	bl	80098f0 <PID_GetKI>
 8004822:	8020      	strh	r0, [r4, #0]
              break;
 8004824:	e5f7      	b.n	8004416 <RI_GetRegisterMotor1+0x132>
          switch (regID)
 8004826:	f5b0 6f35 	cmp.w	r0, #2896	@ 0xb50
 800482a:	f000 80c0 	beq.w	80049ae <RI_GetRegisterMotor1+0x6ca>
 800482e:	f5b0 6f39 	cmp.w	r0, #2960	@ 0xb90
 8004832:	f040 809c 	bne.w	800496e <RI_GetRegisterMotor1+0x68a>
              *regdata16 = SPD_GetS16Speed((SpeednPosFdbk_Handle_t *)&STO_PLL_M1);
 8004836:	483f      	ldr	r0, [pc, #252]	@ (8004934 <RI_GetRegisterMotor1+0x650>)
 8004838:	f006 f8f4 	bl	800aa24 <SPD_GetS16Speed>
 800483c:	8020      	strh	r0, [r4, #0]
              break;
 800483e:	e5ea      	b.n	8004416 <RI_GetRegisterMotor1+0x132>
          switch (regID)
 8004840:	f641 03d0 	movw	r3, #6352	@ 0x18d0
 8004844:	4298      	cmp	r0, r3
 8004846:	f000 80c6 	beq.w	80049d6 <RI_GetRegisterMotor1+0x6f2>
 800484a:	f641 1310 	movw	r3, #6416	@ 0x1910
 800484e:	4298      	cmp	r0, r3
 8004850:	f040 808d 	bne.w	800496e <RI_GetRegisterMotor1+0x68a>
              *regdataU16 = PID_GetKPDivisorPOW2(&(&STO_PLL_M1)->PIRegulator);
 8004854:	483d      	ldr	r0, [pc, #244]	@ (800494c <RI_GetRegisterMotor1+0x668>)
 8004856:	f005 f851 	bl	80098fc <PID_GetKPDivisorPOW2>
 800485a:	8020      	strh	r0, [r4, #0]
              break;
 800485c:	e5db      	b.n	8004416 <RI_GetRegisterMotor1+0x132>
          switch (regID)
 800485e:	f5b0 7f54 	cmp.w	r0, #848	@ 0x350
 8004862:	f000 80d2 	beq.w	8004a0a <RI_GetRegisterMotor1+0x726>
 8004866:	f5b0 7f64 	cmp.w	r0, #912	@ 0x390
 800486a:	f040 8080 	bne.w	800496e <RI_GetRegisterMotor1+0x68a>
              STO_PLL_GetObserverGains(&STO_PLL_M1, &hC1, &hC2);
 800486e:	4831      	ldr	r0, [pc, #196]	@ (8004934 <RI_GetRegisterMotor1+0x650>)
 8004870:	aa13      	add	r2, sp, #76	@ 0x4c
 8004872:	a912      	add	r1, sp, #72	@ 0x48
 8004874:	f006 fbd0 	bl	800b018 <STO_PLL_GetObserverGains>
              *regdata16 = hC2;
 8004878:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800487c:	8023      	strh	r3, [r4, #0]
              break;
 800487e:	e5ca      	b.n	8004416 <RI_GetRegisterMotor1+0x132>
          switch (regID)
 8004880:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 8004884:	f43f adc7 	beq.w	8004416 <RI_GetRegisterMotor1+0x132>
 8004888:	f5b0 6f6d 	cmp.w	r0, #3792	@ 0xed0
 800488c:	d16b      	bne.n	8004966 <RI_GetRegisterMotor1+0x682>
 800488e:	4b30      	ldr	r3, [pc, #192]	@ (8004950 <RI_GetRegisterMotor1+0x66c>)
 8004890:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
              *regdata16 = SPD_GetElAngle ((SpeednPosFdbk_Handle_t*) &HALL_M1);
 8004894:	8023      	strh	r3, [r4, #0]
              break;
 8004896:	e5be      	b.n	8004416 <RI_GetRegisterMotor1+0x132>
              *regdata16 = MCI_GetIqd(pMCIN).d;
 8004898:	4825      	ldr	r0, [pc, #148]	@ (8004930 <RI_GetRegisterMotor1+0x64c>)
 800489a:	f7fd ff8d 	bl	80027b8 <MCI_GetIqd>
 800489e:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80048a2:	8023      	strh	r3, [r4, #0]
              break;
 80048a4:	e5b7      	b.n	8004416 <RI_GetRegisterMotor1+0x132>
              *regdata16 = PID_GetKD(&PIDIqHandle_M1);
 80048a6:	4825      	ldr	r0, [pc, #148]	@ (800493c <RI_GetRegisterMotor1+0x658>)
 80048a8:	f005 f84c 	bl	8009944 <PID_GetKD>
 80048ac:	8020      	strh	r0, [r4, #0]
              break;
 80048ae:	e5b2      	b.n	8004416 <RI_GetRegisterMotor1+0x132>
              *regdata16 = MCI_GetIalphabeta(pMCIN).beta;
 80048b0:	481f      	ldr	r0, [pc, #124]	@ (8004930 <RI_GetRegisterMotor1+0x64c>)
 80048b2:	f7fd ff77 	bl	80027a4 <MCI_GetIalphabeta>
 80048b6:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80048ba:	8023      	strh	r3, [r4, #0]
              break;
 80048bc:	e5ab      	b.n	8004416 <RI_GetRegisterMotor1+0x132>
              *regdata16 = PID_GetKI (&(&STO_PLL_M1)->PIRegulator);
 80048be:	4823      	ldr	r0, [pc, #140]	@ (800494c <RI_GetRegisterMotor1+0x668>)
 80048c0:	f005 f816 	bl	80098f0 <PID_GetKI>
 80048c4:	8020      	strh	r0, [r4, #0]
              break;
 80048c6:	e5a6      	b.n	8004416 <RI_GetRegisterMotor1+0x132>
              *regdata16 = MCI_GetVqd(pMCIN).q;
 80048c8:	4819      	ldr	r0, [pc, #100]	@ (8004930 <RI_GetRegisterMotor1+0x64c>)
 80048ca:	f7fd ff89 	bl	80027e0 <MCI_GetVqd>
 80048ce:	8020      	strh	r0, [r4, #0]
              break;
 80048d0:	e5a1      	b.n	8004416 <RI_GetRegisterMotor1+0x132>
              *regdata16 = MCI_GetIalphabeta(pMCIN).alpha;
 80048d2:	4817      	ldr	r0, [pc, #92]	@ (8004930 <RI_GetRegisterMotor1+0x64c>)
 80048d4:	f7fd ff66 	bl	80027a4 <MCI_GetIalphabeta>
 80048d8:	8020      	strh	r0, [r4, #0]
              break;
 80048da:	e59c      	b.n	8004416 <RI_GetRegisterMotor1+0x132>
              *regdata16 = SPD_GetS16Speed ((SpeednPosFdbk_Handle_t*) &HALL_M1);
 80048dc:	481c      	ldr	r0, [pc, #112]	@ (8004950 <RI_GetRegisterMotor1+0x66c>)
 80048de:	f006 f8a1 	bl	800aa24 <SPD_GetS16Speed>
 80048e2:	8020      	strh	r0, [r4, #0]
              break;
 80048e4:	e597      	b.n	8004416 <RI_GetRegisterMotor1+0x132>
              *regdata16 = NTC_GetAvTemp_C(&TempSensor_M1);
 80048e6:	481b      	ldr	r0, [pc, #108]	@ (8004954 <RI_GetRegisterMotor1+0x670>)
 80048e8:	f004 ffe0 	bl	80098ac <NTC_GetAvTemp_C>
 80048ec:	8020      	strh	r0, [r4, #0]
              break;
 80048ee:	e592      	b.n	8004416 <RI_GetRegisterMotor1+0x132>
              *regdata16 = MCI_GetIqdref(pMCIN).q;
 80048f0:	480f      	ldr	r0, [pc, #60]	@ (8004930 <RI_GetRegisterMotor1+0x64c>)
 80048f2:	f7fd ff6b 	bl	80027cc <MCI_GetIqdref>
 80048f6:	8020      	strh	r0, [r4, #0]
              break;
 80048f8:	e58d      	b.n	8004416 <RI_GetRegisterMotor1+0x132>
              *regdata16 = PID_GetKD(&PIDSpeedHandle_M1);
 80048fa:	4817      	ldr	r0, [pc, #92]	@ (8004958 <RI_GetRegisterMotor1+0x674>)
 80048fc:	f005 f822 	bl	8009944 <PID_GetKD>
 8004900:	8020      	strh	r0, [r4, #0]
              break;
 8004902:	e588      	b.n	8004416 <RI_GetRegisterMotor1+0x132>
              *regdataU16 = PID_GetKPDivisorPOW2(&PIDIdHandle_M1);
 8004904:	480c      	ldr	r0, [pc, #48]	@ (8004938 <RI_GetRegisterMotor1+0x654>)
 8004906:	f004 fff9 	bl	80098fc <PID_GetKPDivisorPOW2>
 800490a:	8020      	strh	r0, [r4, #0]
              break;
 800490c:	e583      	b.n	8004416 <RI_GetRegisterMotor1+0x132>
              *regdataU16 = PID_GetKDDivisorPOW2(&PIDSpeedHandle_M1);
 800490e:	4812      	ldr	r0, [pc, #72]	@ (8004958 <RI_GetRegisterMotor1+0x674>)
 8004910:	f005 f81c 	bl	800994c <PID_GetKDDivisorPOW2>
 8004914:	8020      	strh	r0, [r4, #0]
              break;
 8004916:	e57e      	b.n	8004416 <RI_GetRegisterMotor1+0x132>
              *regdata16 = MCI_GetIab(pMCIN).a;
 8004918:	4805      	ldr	r0, [pc, #20]	@ (8004930 <RI_GetRegisterMotor1+0x64c>)
 800491a:	f7fd ff39 	bl	8002790 <MCI_GetIab>
 800491e:	8020      	strh	r0, [r4, #0]
              break;
 8004920:	e579      	b.n	8004416 <RI_GetRegisterMotor1+0x132>
              *regdata16 = MCI_GetValphabeta(pMCIN).beta;
 8004922:	4803      	ldr	r0, [pc, #12]	@ (8004930 <RI_GetRegisterMotor1+0x64c>)
 8004924:	f7fd ff66 	bl	80027f4 <MCI_GetValphabeta>
 8004928:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800492c:	8023      	strh	r3, [r4, #0]
              break;
 800492e:	e572      	b.n	8004416 <RI_GetRegisterMotor1+0x132>
 8004930:	20000010 	.word	0x20000010
 8004934:	20000134 	.word	0x20000134
 8004938:	20000334 	.word	0x20000334
 800493c:	20000360 	.word	0x20000360
 8004940:	20000428 	.word	0x20000428
 8004944:	20000424 	.word	0x20000424
 8004948:	20000420 	.word	0x20000420
 800494c:	20000168 	.word	0x20000168
 8004950:	20000068 	.word	0x20000068
 8004954:	200003f4 	.word	0x200003f4
 8004958:	2000038c 	.word	0x2000038c
              *regdata16 = PID_GetKP(&PIDIqHandle_M1);
 800495c:	482f      	ldr	r0, [pc, #188]	@ (8004a1c <RI_GetRegisterMotor1+0x738>)
 800495e:	f004 ffc3 	bl	80098e8 <PID_GetKP>
 8004962:	8020      	strh	r0, [r4, #0]
              break;
 8004964:	e557      	b.n	8004416 <RI_GetRegisterMotor1+0x132>
          switch (regID)
 8004966:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 800496a:	f43f ad54 	beq.w	8004416 <RI_GetRegisterMotor1+0x132>
 800496e:	2005      	movs	r0, #5
 8004970:	e552      	b.n	8004418 <RI_GetRegisterMotor1+0x134>
              *regdata16 = PID_GetKP (&(&STO_PLL_M1)->PIRegulator);
 8004972:	482b      	ldr	r0, [pc, #172]	@ (8004a20 <RI_GetRegisterMotor1+0x73c>)
 8004974:	f004 ffb8 	bl	80098e8 <PID_GetKP>
 8004978:	8020      	strh	r0, [r4, #0]
              break;
 800497a:	e54c      	b.n	8004416 <RI_GetRegisterMotor1+0x132>
              *regdata16 = PID_GetKP(&PIDSpeedHandle_M1);
 800497c:	4829      	ldr	r0, [pc, #164]	@ (8004a24 <RI_GetRegisterMotor1+0x740>)
 800497e:	f004 ffb3 	bl	80098e8 <PID_GetKP>
 8004982:	8020      	strh	r0, [r4, #0]
              break;
 8004984:	e547      	b.n	8004416 <RI_GetRegisterMotor1+0x132>
              *regdataU16 = (uint16_t)PID_GetKPDivisorPOW2(&PIDSpeedHandle_M1);
 8004986:	4827      	ldr	r0, [pc, #156]	@ (8004a24 <RI_GetRegisterMotor1+0x740>)
 8004988:	f004 ffb8 	bl	80098fc <PID_GetKPDivisorPOW2>
 800498c:	8020      	strh	r0, [r4, #0]
              break;
 800498e:	e542      	b.n	8004416 <RI_GetRegisterMotor1+0x132>
              *regdata16 = STO_PLL_GetEstimatedCurrent(&STO_PLL_M1).alpha;
 8004990:	4825      	ldr	r0, [pc, #148]	@ (8004a28 <RI_GetRegisterMotor1+0x744>)
 8004992:	f006 fb2f 	bl	800aff4 <STO_PLL_GetEstimatedCurrent>
 8004996:	8020      	strh	r0, [r4, #0]
              break;
 8004998:	e53d      	b.n	8004416 <RI_GetRegisterMotor1+0x132>
              *regdataU16 = PID_GetKPDivisorPOW2(&PIDIqHandle_M1);
 800499a:	4820      	ldr	r0, [pc, #128]	@ (8004a1c <RI_GetRegisterMotor1+0x738>)
 800499c:	f004 ffae 	bl	80098fc <PID_GetKPDivisorPOW2>
 80049a0:	8020      	strh	r0, [r4, #0]
              break;
 80049a2:	e538      	b.n	8004416 <RI_GetRegisterMotor1+0x132>
              *regdataU16 = PID_GetKDDivisorPOW2(&PIDIqHandle_M1);
 80049a4:	481d      	ldr	r0, [pc, #116]	@ (8004a1c <RI_GetRegisterMotor1+0x738>)
 80049a6:	f004 ffd1 	bl	800994c <PID_GetKDDivisorPOW2>
 80049aa:	8020      	strh	r0, [r4, #0]
              break;
 80049ac:	e533      	b.n	8004416 <RI_GetRegisterMotor1+0x132>
 80049ae:	4b1e      	ldr	r3, [pc, #120]	@ (8004a28 <RI_GetRegisterMotor1+0x744>)
 80049b0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
              *regdata16 = SPD_GetElAngle((SpeednPosFdbk_Handle_t *)&STO_PLL_M1);
 80049b4:	8023      	strh	r3, [r4, #0]
              break;
 80049b6:	e52e      	b.n	8004416 <RI_GetRegisterMotor1+0x132>
              *regdataU16 = PID_GetKDDivisorPOW2(&PIDIdHandle_M1);
 80049b8:	481c      	ldr	r0, [pc, #112]	@ (8004a2c <RI_GetRegisterMotor1+0x748>)
 80049ba:	f004 ffc7 	bl	800994c <PID_GetKDDivisorPOW2>
 80049be:	8020      	strh	r0, [r4, #0]
              break;
 80049c0:	e529      	b.n	8004416 <RI_GetRegisterMotor1+0x132>
              *regdata16 = PID_GetKP(&PIDIdHandle_M1);
 80049c2:	481a      	ldr	r0, [pc, #104]	@ (8004a2c <RI_GetRegisterMotor1+0x748>)
 80049c4:	f004 ff90 	bl	80098e8 <PID_GetKP>
 80049c8:	8020      	strh	r0, [r4, #0]
              break;
 80049ca:	e524      	b.n	8004416 <RI_GetRegisterMotor1+0x132>
              *regdata16 = PID_GetKD(&PIDIdHandle_M1);
 80049cc:	4817      	ldr	r0, [pc, #92]	@ (8004a2c <RI_GetRegisterMotor1+0x748>)
 80049ce:	f004 ffb9 	bl	8009944 <PID_GetKD>
 80049d2:	8020      	strh	r0, [r4, #0]
              break;
 80049d4:	e51f      	b.n	8004416 <RI_GetRegisterMotor1+0x132>
              *regdataU16 = PID_GetKIDivisorPOW2(&(&STO_PLL_M1)->PIRegulator);
 80049d6:	4812      	ldr	r0, [pc, #72]	@ (8004a20 <RI_GetRegisterMotor1+0x73c>)
 80049d8:	f004 ff98 	bl	800990c <PID_GetKIDivisorPOW2>
 80049dc:	8020      	strh	r0, [r4, #0]
              break;
 80049de:	e51a      	b.n	8004416 <RI_GetRegisterMotor1+0x132>
              *regdata16 = MCI_GetVqd(pMCIN).d;
 80049e0:	4813      	ldr	r0, [pc, #76]	@ (8004a30 <RI_GetRegisterMotor1+0x74c>)
 80049e2:	f7fd fefd 	bl	80027e0 <MCI_GetVqd>
 80049e6:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80049ea:	8023      	strh	r3, [r4, #0]
              break;
 80049ec:	e513      	b.n	8004416 <RI_GetRegisterMotor1+0x132>
              *regdata16 = STO_PLL_GetEstimatedCurrent(&STO_PLL_M1).beta;
 80049ee:	480e      	ldr	r0, [pc, #56]	@ (8004a28 <RI_GetRegisterMotor1+0x744>)
 80049f0:	f006 fb00 	bl	800aff4 <STO_PLL_GetEstimatedCurrent>
 80049f4:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80049f8:	8023      	strh	r3, [r4, #0]
              break;
 80049fa:	e50c      	b.n	8004416 <RI_GetRegisterMotor1+0x132>
              *regdata16 = STO_PLL_GetEstimatedBemf(&STO_PLL_M1).beta;
 80049fc:	480a      	ldr	r0, [pc, #40]	@ (8004a28 <RI_GetRegisterMotor1+0x744>)
 80049fe:	f006 faf5 	bl	800afec <STO_PLL_GetEstimatedBemf>
 8004a02:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8004a06:	8023      	strh	r3, [r4, #0]
              break;
 8004a08:	e505      	b.n	8004416 <RI_GetRegisterMotor1+0x132>
              STO_PLL_GetObserverGains(&STO_PLL_M1, &hC1, &hC2);
 8004a0a:	4807      	ldr	r0, [pc, #28]	@ (8004a28 <RI_GetRegisterMotor1+0x744>)
 8004a0c:	aa13      	add	r2, sp, #76	@ 0x4c
 8004a0e:	a912      	add	r1, sp, #72	@ 0x48
 8004a10:	f006 fb02 	bl	800b018 <STO_PLL_GetObserverGains>
              *regdata16 = hC1;
 8004a14:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8004a18:	8023      	strh	r3, [r4, #0]
              break;
 8004a1a:	e4fc      	b.n	8004416 <RI_GetRegisterMotor1+0x132>
 8004a1c:	20000360 	.word	0x20000360
 8004a20:	20000168 	.word	0x20000168
 8004a24:	2000038c 	.word	0x2000038c
 8004a28:	20000134 	.word	0x20000134
 8004a2c:	20000334 	.word	0x20000334
 8004a30:	20000010 	.word	0x20000010

08004a34 <RI_GetIDSize>:
  return (retVal);
}

uint8_t RI_GetIDSize(uint16_t dataID)
{
  uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;
 8004a34:	f000 0038 	and.w	r0, r0, #56	@ 0x38
 8004a38:	3808      	subs	r0, #8
 8004a3a:	b2c0      	uxtb	r0, r0
 8004a3c:	2810      	cmp	r0, #16
 8004a3e:	bf9a      	itte	ls
 8004a40:	4b01      	ldrls	r3, [pc, #4]	@ (8004a48 <RI_GetIDSize+0x14>)
 8004a42:	5c18      	ldrbls	r0, [r3, r0]
 8004a44:	2000      	movhi	r0, #0
      break;
    }
  }

  return (result);
}
 8004a46:	4770      	bx	lr
 8004a48:	0800b318 	.word	0x0800b318

08004a4c <RI_GetPtrReg>:

    MCI_Handle_t *pMCIN = &Mci[0];
    uint16_t regID = dataID & REG_MASK;
    uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;

    switch (typeID)
 8004a4c:	f000 0338 	and.w	r3, r0, #56	@ 0x38
 8004a50:	2b10      	cmp	r3, #16
 8004a52:	d003      	beq.n	8004a5c <RI_GetPtrReg+0x10>
 8004a54:	4b4b      	ldr	r3, [pc, #300]	@ (8004b84 <RI_GetPtrReg+0x138>)
      }

      default:
      {
        *dataPtr = &nullData16;
        retVal = MCP_ERROR_UNKNOWN_REG;
 8004a56:	2005      	movs	r0, #5
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 8004a58:	600b      	str	r3, [r1, #0]
    }
#ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 8004a5a:	4770      	bx	lr
    uint16_t regID = dataID & REG_MASK;
 8004a5c:	f020 0007 	bic.w	r0, r0, #7
        switch (regID)
 8004a60:	f5b0 6f21 	cmp.w	r0, #2576	@ 0xa10
    uint16_t regID = dataID & REG_MASK;
 8004a64:	b282      	uxth	r2, r0
        switch (regID)
 8004a66:	d07c      	beq.n	8004b62 <RI_GetPtrReg+0x116>
 8004a68:	d813      	bhi.n	8004a92 <RI_GetPtrReg+0x46>
 8004a6a:	f5b2 6f0d 	cmp.w	r2, #2256	@ 0x8d0
 8004a6e:	f000 8083 	beq.w	8004b78 <RI_GetPtrReg+0x12c>
 8004a72:	d821      	bhi.n	8004ab8 <RI_GetPtrReg+0x6c>
 8004a74:	f5b2 6f05 	cmp.w	r2, #2128	@ 0x850
 8004a78:	d069      	beq.n	8004b4e <RI_GetPtrReg+0x102>
 8004a7a:	d84f      	bhi.n	8004b1c <RI_GetPtrReg+0xd0>
 8004a7c:	f5b2 6ffa 	cmp.w	r2, #2000	@ 0x7d0
 8004a80:	d040      	beq.n	8004b04 <RI_GetPtrReg+0xb8>
 8004a82:	f5b2 6f01 	cmp.w	r2, #2064	@ 0x810
 8004a86:	d1e5      	bne.n	8004a54 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 8004a88:	4b3f      	ldr	r3, [pc, #252]	@ (8004b88 <RI_GetPtrReg+0x13c>)
 8004a8a:	685b      	ldr	r3, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8004a8c:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 8004a8e:	3302      	adds	r3, #2
            break;
 8004a90:	e7e2      	b.n	8004a58 <RI_GetPtrReg+0xc>
        switch (regID)
 8004a92:	f5b2 6f45 	cmp.w	r2, #3152	@ 0xc50
 8004a96:	d032      	beq.n	8004afe <RI_GetPtrReg+0xb2>
 8004a98:	d81d      	bhi.n	8004ad6 <RI_GetPtrReg+0x8a>
 8004a9a:	f5b2 6f35 	cmp.w	r2, #2896	@ 0xb50
 8004a9e:	d068      	beq.n	8004b72 <RI_GetPtrReg+0x126>
 8004aa0:	d84c      	bhi.n	8004b3c <RI_GetPtrReg+0xf0>
 8004aa2:	f5b2 6f25 	cmp.w	r2, #2640	@ 0xa50
 8004aa6:	d031      	beq.n	8004b0c <RI_GetPtrReg+0xc0>
 8004aa8:	f5b2 6f29 	cmp.w	r2, #2704	@ 0xa90
 8004aac:	d1d2      	bne.n	8004a54 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.beta);
 8004aae:	4b36      	ldr	r3, [pc, #216]	@ (8004b88 <RI_GetPtrReg+0x13c>)
 8004ab0:	685b      	ldr	r3, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8004ab2:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.beta);
 8004ab4:	331c      	adds	r3, #28
            break;
 8004ab6:	e7cf      	b.n	8004a58 <RI_GetPtrReg+0xc>
        switch (regID)
 8004ab8:	f5b2 6f19 	cmp.w	r2, #2448	@ 0x990
 8004abc:	d04c      	beq.n	8004b58 <RI_GetPtrReg+0x10c>
 8004abe:	d835      	bhi.n	8004b2c <RI_GetPtrReg+0xe0>
 8004ac0:	f5b2 6f11 	cmp.w	r2, #2320	@ 0x910
 8004ac4:	d016      	beq.n	8004af4 <RI_GetPtrReg+0xa8>
 8004ac6:	f5b2 6f15 	cmp.w	r2, #2384	@ 0x950
 8004aca:	d1c3      	bne.n	8004a54 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.q);
 8004acc:	4b2e      	ldr	r3, [pc, #184]	@ (8004b88 <RI_GetPtrReg+0x13c>)
 8004ace:	685b      	ldr	r3, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8004ad0:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.q);
 8004ad2:	3310      	adds	r3, #16
            break;
 8004ad4:	e7c0      	b.n	8004a58 <RI_GetPtrReg+0xc>
        switch (regID)
 8004ad6:	f5b2 6f6d 	cmp.w	r2, #3792	@ 0xed0
 8004ada:	d047      	beq.n	8004b6c <RI_GetPtrReg+0x120>
 8004adc:	f5b2 6f71 	cmp.w	r2, #3856	@ 0xf10
 8004ae0:	d019      	beq.n	8004b16 <RI_GetPtrReg+0xca>
 8004ae2:	482a      	ldr	r0, [pc, #168]	@ (8004b8c <RI_GetPtrReg+0x140>)
 8004ae4:	4b27      	ldr	r3, [pc, #156]	@ (8004b84 <RI_GetPtrReg+0x138>)
 8004ae6:	f5b2 6f49 	cmp.w	r2, #3216	@ 0xc90
 8004aea:	bf0a      	itet	eq
 8004aec:	4603      	moveq	r3, r0
 8004aee:	2005      	movne	r0, #5
 8004af0:	2000      	moveq	r0, #0
 8004af2:	e7b1      	b.n	8004a58 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iqd.d);
 8004af4:	4b24      	ldr	r3, [pc, #144]	@ (8004b88 <RI_GetPtrReg+0x13c>)
 8004af6:	685b      	ldr	r3, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8004af8:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqd.d);
 8004afa:	330e      	adds	r3, #14
            break;
 8004afc:	e7ac      	b.n	8004a58 <RI_GetPtrReg+0xc>
        switch (regID)
 8004afe:	4b24      	ldr	r3, [pc, #144]	@ (8004b90 <RI_GetPtrReg+0x144>)
  uint8_t retVal = MCP_CMD_OK;
 8004b00:	2000      	movs	r0, #0
 8004b02:	e7a9      	b.n	8004a58 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 8004b04:	4b20      	ldr	r3, [pc, #128]	@ (8004b88 <RI_GetPtrReg+0x13c>)
  uint8_t retVal = MCP_CMD_OK;
 8004b06:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 8004b08:	685b      	ldr	r3, [r3, #4]
             break;
 8004b0a:	e7a5      	b.n	8004a58 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.alpha);
 8004b0c:	4b1e      	ldr	r3, [pc, #120]	@ (8004b88 <RI_GetPtrReg+0x13c>)
 8004b0e:	685b      	ldr	r3, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8004b10:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.alpha);
 8004b12:	331a      	adds	r3, #26
            break;
 8004b14:	e7a0      	b.n	8004a58 <RI_GetPtrReg+0xc>
        switch (regID)
 8004b16:	4b1f      	ldr	r3, [pc, #124]	@ (8004b94 <RI_GetPtrReg+0x148>)
 8004b18:	2000      	movs	r0, #0
 8004b1a:	e79d      	b.n	8004a58 <RI_GetPtrReg+0xc>
 8004b1c:	f5b2 6f09 	cmp.w	r2, #2192	@ 0x890
 8004b20:	d198      	bne.n	8004a54 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.beta);
 8004b22:	4b19      	ldr	r3, [pc, #100]	@ (8004b88 <RI_GetPtrReg+0x13c>)
 8004b24:	685b      	ldr	r3, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8004b26:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.beta);
 8004b28:	3306      	adds	r3, #6
            break;
 8004b2a:	e795      	b.n	8004a58 <RI_GetPtrReg+0xc>
        switch (regID)
 8004b2c:	f5b2 6f1d 	cmp.w	r2, #2512	@ 0x9d0
 8004b30:	d190      	bne.n	8004a54 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Vqd.q);
 8004b32:	4b15      	ldr	r3, [pc, #84]	@ (8004b88 <RI_GetPtrReg+0x13c>)
 8004b34:	685b      	ldr	r3, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8004b36:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Vqd.q);
 8004b38:	3316      	adds	r3, #22
            break;
 8004b3a:	e78d      	b.n	8004a58 <RI_GetPtrReg+0xc>
        switch (regID)
 8004b3c:	4816      	ldr	r0, [pc, #88]	@ (8004b98 <RI_GetPtrReg+0x14c>)
 8004b3e:	4b11      	ldr	r3, [pc, #68]	@ (8004b84 <RI_GetPtrReg+0x138>)
 8004b40:	f5b2 6f39 	cmp.w	r2, #2960	@ 0xb90
 8004b44:	bf0a      	itet	eq
 8004b46:	4603      	moveq	r3, r0
 8004b48:	2005      	movne	r0, #5
 8004b4a:	2000      	moveq	r0, #0
 8004b4c:	e784      	b.n	8004a58 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.alpha);
 8004b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8004b88 <RI_GetPtrReg+0x13c>)
 8004b50:	685b      	ldr	r3, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8004b52:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.alpha);
 8004b54:	3304      	adds	r3, #4
            break;
 8004b56:	e77f      	b.n	8004a58 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.d);
 8004b58:	4b0b      	ldr	r3, [pc, #44]	@ (8004b88 <RI_GetPtrReg+0x13c>)
 8004b5a:	685b      	ldr	r3, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8004b5c:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.d);
 8004b5e:	3312      	adds	r3, #18
            break;
 8004b60:	e77a      	b.n	8004a58 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Vqd.d);
 8004b62:	4b09      	ldr	r3, [pc, #36]	@ (8004b88 <RI_GetPtrReg+0x13c>)
 8004b64:	685b      	ldr	r3, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8004b66:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Vqd.d);
 8004b68:	3318      	adds	r3, #24
            break;
 8004b6a:	e775      	b.n	8004a58 <RI_GetPtrReg+0xc>
        switch (regID)
 8004b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8004b9c <RI_GetPtrReg+0x150>)
  uint8_t retVal = MCP_CMD_OK;
 8004b6e:	2000      	movs	r0, #0
 8004b70:	e772      	b.n	8004a58 <RI_GetPtrReg+0xc>
        switch (regID)
 8004b72:	4b0b      	ldr	r3, [pc, #44]	@ (8004ba0 <RI_GetPtrReg+0x154>)
  uint8_t retVal = MCP_CMD_OK;
 8004b74:	2000      	movs	r0, #0
 8004b76:	e76f      	b.n	8004a58 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iqd.q);
 8004b78:	4b03      	ldr	r3, [pc, #12]	@ (8004b88 <RI_GetPtrReg+0x13c>)
 8004b7a:	685b      	ldr	r3, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8004b7c:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqd.q);
 8004b7e:	330c      	adds	r3, #12
            break;
 8004b80:	e76a      	b.n	8004a58 <RI_GetPtrReg+0xc>
 8004b82:	bf00      	nop
 8004b84:	20001c24 	.word	0x20001c24
 8004b88:	20000010 	.word	0x20000010
 8004b8c:	200001a6 	.word	0x200001a6
 8004b90:	200001a4 	.word	0x200001a4
 8004b94:	20000074 	.word	0x20000074
 8004b98:	20000140 	.word	0x20000140
 8004b9c:	2000006c 	.word	0x2000006c
 8004ba0:	20000138 	.word	0x20000138

08004ba4 <RCM_RegisterRegConv>:
  * @param  regConv Pointer to the regular conversion parameters.
  *         Contains ADC, Channel and sampling time to be used.
  *
  */
void RCM_RegisterRegConv(RegConv_t *regConv)
{
 8004ba4:	b570      	push	{r4, r5, r6, lr}

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004ba6:	4c8c      	ldr	r4, [pc, #560]	@ (8004dd8 <RCM_RegisterRegConv+0x234>)
 8004ba8:	6822      	ldr	r2, [r4, #0]
 8004baa:	2a00      	cmp	r2, #0
 8004bac:	d033      	beq.n	8004c16 <RCM_RegisterRegConv+0x72>
        /* Nothing to do */
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault */
      if (RCM_handle_array [i] != 0)
      {
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8004bae:	f890 c004 	ldrb.w	ip, [r0, #4]
 8004bb2:	7913      	ldrb	r3, [r2, #4]
 8004bb4:	4563      	cmp	r3, ip
 8004bb6:	d01e      	beq.n	8004bf6 <RCM_RegisterRegConv+0x52>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004bb8:	6861      	ldr	r1, [r4, #4]
 8004bba:	2900      	cmp	r1, #0
 8004bbc:	f000 80d3 	beq.w	8004d66 <RCM_RegisterRegConv+0x1c2>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8004bc0:	790b      	ldrb	r3, [r1, #4]
 8004bc2:	4563      	cmp	r3, ip
 8004bc4:	d036      	beq.n	8004c34 <RCM_RegisterRegConv+0x90>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004bc6:	68a5      	ldr	r5, [r4, #8]
 8004bc8:	2d00      	cmp	r5, #0
 8004bca:	f000 80ad 	beq.w	8004d28 <RCM_RegisterRegConv+0x184>
  uint8_t handle = 255U;
 8004bce:	22ff      	movs	r2, #255	@ 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8004bd0:	792b      	ldrb	r3, [r5, #4]
 8004bd2:	4563      	cmp	r3, ip
 8004bd4:	f000 80b8 	beq.w	8004d48 <RCM_RegisterRegConv+0x1a4>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004bd8:	68e5      	ldr	r5, [r4, #12]
 8004bda:	2d00      	cmp	r5, #0
 8004bdc:	f000 80bc 	beq.w	8004d58 <RCM_RegisterRegConv+0x1b4>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8004be0:	792b      	ldrb	r3, [r5, #4]
 8004be2:	4563      	cmp	r3, ip
 8004be4:	f000 80ce 	beq.w	8004d84 <RCM_RegisterRegConv+0x1e0>
      {
        /* Nothing to do */
      }
      i++;
    }
    if (handle < RCM_MAX_CONV)
 8004be8:	2a03      	cmp	r2, #3
 8004bea:	bf98      	it	ls
 8004bec:	6803      	ldrls	r3, [r0, #0]
 8004bee:	d936      	bls.n	8004c5e <RCM_RegisterRegConv+0xba>
 8004bf0:	22ff      	movs	r2, #255	@ 0xff
      /* Nothing to do handle is already set to error value : 255 */
    }
#ifdef NULL_PTR_CHECK_REG_CON_MNG
  }
#endif
  regConv->convHandle = handle;
 8004bf2:	7302      	strb	r2, [r0, #12]
}
 8004bf4:	bd70      	pop	{r4, r5, r6, pc}
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8004bf6:	6803      	ldr	r3, [r0, #0]
 8004bf8:	6812      	ldr	r2, [r2, #0]
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d031      	beq.n	8004c62 <RCM_RegisterRegConv+0xbe>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004bfe:	6861      	ldr	r1, [r4, #4]
 8004c00:	2900      	cmp	r1, #0
 8004c02:	f000 80da 	beq.w	8004dba <RCM_RegisterRegConv+0x216>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8004c06:	790a      	ldrb	r2, [r1, #4]
 8004c08:	4562      	cmp	r2, ip
 8004c0a:	f000 80cb 	beq.w	8004da4 <RCM_RegisterRegConv+0x200>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004c0e:	68a5      	ldr	r5, [r4, #8]
 8004c10:	2d00      	cmp	r5, #0
 8004c12:	d1dc      	bne.n	8004bce <RCM_RegisterRegConv+0x2a>
 8004c14:	e089      	b.n	8004d2a <RCM_RegisterRegConv+0x186>
 8004c16:	6861      	ldr	r1, [r4, #4]
 8004c18:	2900      	cmp	r1, #0
 8004c1a:	f000 80a8 	beq.w	8004d6e <RCM_RegisterRegConv+0x1ca>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8004c1e:	f890 c004 	ldrb.w	ip, [r0, #4]
 8004c22:	790b      	ldrb	r3, [r1, #4]
 8004c24:	4563      	cmp	r3, ip
 8004c26:	d006      	beq.n	8004c36 <RCM_RegisterRegConv+0x92>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004c28:	68a5      	ldr	r5, [r4, #8]
 8004c2a:	2d00      	cmp	r5, #0
 8004c2c:	d1d0      	bne.n	8004bd0 <RCM_RegisterRegConv+0x2c>
 8004c2e:	6803      	ldr	r3, [r0, #0]
 8004c30:	462a      	mov	r2, r5
 8004c32:	e00b      	b.n	8004c4c <RCM_RegisterRegConv+0xa8>
  uint8_t handle = 255U;
 8004c34:	22ff      	movs	r2, #255	@ 0xff
 8004c36:	6803      	ldr	r3, [r0, #0]
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8004c38:	6809      	ldr	r1, [r1, #0]
 8004c3a:	4299      	cmp	r1, r3
 8004c3c:	f000 80a8 	beq.w	8004d90 <RCM_RegisterRegConv+0x1ec>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004c40:	68a5      	ldr	r5, [r4, #8]
 8004c42:	2d00      	cmp	r5, #0
 8004c44:	d1c4      	bne.n	8004bd0 <RCM_RegisterRegConv+0x2c>
 8004c46:	2a04      	cmp	r2, #4
 8004c48:	d86f      	bhi.n	8004d2a <RCM_RegisterRegConv+0x186>
 8004c4a:	462a      	mov	r2, r5
 8004c4c:	68e1      	ldr	r1, [r4, #12]
 8004c4e:	b131      	cbz	r1, 8004c5e <RCM_RegisterRegConv+0xba>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8004c50:	790d      	ldrb	r5, [r1, #4]
 8004c52:	4565      	cmp	r5, ip
 8004c54:	d103      	bne.n	8004c5e <RCM_RegisterRegConv+0xba>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8004c56:	6809      	ldr	r1, [r1, #0]
 8004c58:	4299      	cmp	r1, r3
 8004c5a:	f000 8081 	beq.w	8004d60 <RCM_RegisterRegConv+0x1bc>
      RCM_handle_array [handle] = regConv;
 8004c5e:	4611      	mov	r1, r2
 8004c60:	e001      	b.n	8004c66 <RCM_RegisterRegConv+0xc2>
    uint8_t i = 0;
 8004c62:	2200      	movs	r2, #0
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004c64:	4611      	mov	r1, r2
      RCM_CB_array [handle].cb = NULL; /* If a previous callback was attached, it is cleared */
 8004c66:	4d5d      	ldr	r5, [pc, #372]	@ (8004ddc <RCM_RegisterRegConv+0x238>)
      RCM_handle_array [handle] = regConv;
 8004c68:	f844 0021 	str.w	r0, [r4, r1, lsl #2]
 8004c6c:	2400      	movs	r4, #0
 8004c6e:	46a6      	mov	lr, r4
      RCM_CB_array [handle].cb = NULL; /* If a previous callback was attached, it is cleared */
 8004c70:	f845 4031 	str.w	r4, [r5, r1, lsl #3]
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004c74:	689c      	ldr	r4, [r3, #8]
 8004c76:	f362 0e07 	bfi	lr, r2, #0, #8
 8004c7a:	07e6      	lsls	r6, r4, #31
 8004c7c:	f362 2e0f 	bfi	lr, r2, #8, #8
 8004c80:	d422      	bmi.n	8004cc8 <RCM_RegisterRegConv+0x124>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8004c82:	685c      	ldr	r4, [r3, #4]
 8004c84:	f024 0404 	bic.w	r4, r4, #4
 8004c88:	605c      	str	r4, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8004c8a:	2404      	movs	r4, #4
 8004c8c:	601c      	str	r4, [r3, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8004c8e:	685c      	ldr	r4, [r3, #4]
 8004c90:	f024 0420 	bic.w	r4, r4, #32
 8004c94:	605c      	str	r4, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8004c96:	2420      	movs	r4, #32
 8004c98:	601c      	str	r4, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8004c9a:	689c      	ldr	r4, [r3, #8]
 8004c9c:	f024 4440 	bic.w	r4, r4, #3221225472	@ 0xc0000000
 8004ca0:	f024 043f 	bic.w	r4, r4, #63	@ 0x3f
 8004ca4:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 8004ca8:	609c      	str	r4, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004caa:	689c      	ldr	r4, [r3, #8]
 8004cac:	2c00      	cmp	r4, #0
 8004cae:	dbfc      	blt.n	8004caa <RCM_RegisterRegConv+0x106>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8004cb0:	681c      	ldr	r4, [r3, #0]
 8004cb2:	07e5      	lsls	r5, r4, #31
 8004cb4:	d408      	bmi.n	8004cc8 <RCM_RegisterRegConv+0x124>
  MODIFY_REG(ADCx->CR,
 8004cb6:	4d4a      	ldr	r5, [pc, #296]	@ (8004de0 <RCM_RegisterRegConv+0x23c>)
 8004cb8:	689c      	ldr	r4, [r3, #8]
 8004cba:	402c      	ands	r4, r5
 8004cbc:	f044 0401 	orr.w	r4, r4, #1
 8004cc0:	609c      	str	r4, [r3, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8004cc2:	681c      	ldr	r4, [r3, #0]
 8004cc4:	07e4      	lsls	r4, r4, #31
 8004cc6:	d5f7      	bpl.n	8004cb8 <RCM_RegisterRegConv+0x114>
      RCM_NoInj_array[handle].enable = false;
 8004cc8:	4d46      	ldr	r5, [pc, #280]	@ (8004de4 <RCM_RegisterRegConv+0x240>)
 8004cca:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8004cce:	004c      	lsls	r4, r1, #1
      RCM_NoInj_array[handle].prev = handle;
 8004cd0:	1d2e      	adds	r6, r5, #4
      LL_ADC_SetChannelSamplingTime(regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 8004cd2:	2101      	movs	r1, #1
      RCM_NoInj_array[handle].prev = handle;
 8004cd4:	f826 e004 	strh.w	lr, [r6, r4]
      RCM_NoInj_array[handle].enable = false;
 8004cd8:	f04f 0e00 	mov.w	lr, #0
 8004cdc:	f805 e004 	strb.w	lr, [r5, r4]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8004ce0:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
      LL_ADC_SetChannelSamplingTime(regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 8004ce2:	fa01 f10c 	lsl.w	r1, r1, ip
 8004ce6:	f024 040f 	bic.w	r4, r4, #15
 8004cea:	f1bc 0f09 	cmp.w	ip, #9
 8004cee:	631c      	str	r4, [r3, #48]	@ 0x30
 8004cf0:	ea41 618c 	orr.w	r1, r1, ip, lsl #26
 8004cf4:	eb0c 044c 	add.w	r4, ip, ip, lsl #1
 8004cf8:	d81f      	bhi.n	8004d3a <RCM_RegisterRegConv+0x196>
 8004cfa:	ea41 5104 	orr.w	r1, r1, r4, lsl #20
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004cfe:	0dcd      	lsrs	r5, r1, #23
 8004d00:	f005 0504 	and.w	r5, r5, #4
 8004d04:	3314      	adds	r3, #20
  MODIFY_REG(*preg,
 8004d06:	6886      	ldr	r6, [r0, #8]
 8004d08:	595c      	ldr	r4, [r3, r5]
 8004d0a:	f3c1 5104 	ubfx	r1, r1, #20, #5
 8004d0e:	f04f 0e07 	mov.w	lr, #7
 8004d12:	fa06 fc01 	lsl.w	ip, r6, r1
 8004d16:	fa0e f101 	lsl.w	r1, lr, r1
 8004d1a:	ea24 0101 	bic.w	r1, r4, r1
 8004d1e:	ea41 010c 	orr.w	r1, r1, ip
 8004d22:	5159      	str	r1, [r3, r5]
  regConv->convHandle = handle;
 8004d24:	7302      	strb	r2, [r0, #12]
}
 8004d26:	bd70      	pop	{r4, r5, r6, pc}
 8004d28:	6803      	ldr	r3, [r0, #0]
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004d2a:	68e2      	ldr	r2, [r4, #12]
 8004d2c:	b112      	cbz	r2, 8004d34 <RCM_RegisterRegConv+0x190>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8004d2e:	7911      	ldrb	r1, [r2, #4]
 8004d30:	4561      	cmp	r1, ip
 8004d32:	d03e      	beq.n	8004db2 <RCM_RegisterRegConv+0x20e>
        handle = i; /* First location available, but still looping to check that this config does not already exist */
 8004d34:	2202      	movs	r2, #2
      RCM_handle_array [handle] = regConv;
 8004d36:	4611      	mov	r1, r2
 8004d38:	e795      	b.n	8004c66 <RCM_RegisterRegConv+0xc2>
      LL_ADC_SetChannelSamplingTime(regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 8004d3a:	3c1e      	subs	r4, #30
 8004d3c:	ea41 5104 	orr.w	r1, r1, r4, lsl #20
 8004d40:	f041 7100 	orr.w	r1, r1, #33554432	@ 0x2000000
 8004d44:	e7db      	b.n	8004cfe <RCM_RegisterRegConv+0x15a>
        handle = i; /* First location available, but still looping to check that this config does not already exist */
 8004d46:	460a      	mov	r2, r1
 8004d48:	6803      	ldr	r3, [r0, #0]
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8004d4a:	6829      	ldr	r1, [r5, #0]
 8004d4c:	4299      	cmp	r1, r3
 8004d4e:	f47f af43 	bne.w	8004bd8 <RCM_RegisterRegConv+0x34>
      i++;
 8004d52:	2202      	movs	r2, #2
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004d54:	4611      	mov	r1, r2
 8004d56:	e786      	b.n	8004c66 <RCM_RegisterRegConv+0xc2>
 8004d58:	2a04      	cmp	r2, #4
 8004d5a:	6803      	ldr	r3, [r0, #0]
 8004d5c:	f67f af7f 	bls.w	8004c5e <RCM_RegisterRegConv+0xba>
 8004d60:	2203      	movs	r2, #3
      RCM_handle_array [handle] = regConv;
 8004d62:	4611      	mov	r1, r2
 8004d64:	e77f      	b.n	8004c66 <RCM_RegisterRegConv+0xc2>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004d66:	68a5      	ldr	r5, [r4, #8]
 8004d68:	b1cd      	cbz	r5, 8004d9e <RCM_RegisterRegConv+0x1fa>
        handle = i; /* First location available, but still looping to check that this config does not already exist */
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	e730      	b.n	8004bd0 <RCM_RegisterRegConv+0x2c>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004d6e:	68a5      	ldr	r5, [r4, #8]
 8004d70:	b1d5      	cbz	r5, 8004da8 <RCM_RegisterRegConv+0x204>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8004d72:	f890 c004 	ldrb.w	ip, [r0, #4]
 8004d76:	792b      	ldrb	r3, [r5, #4]
 8004d78:	4563      	cmp	r3, ip
 8004d7a:	d0e4      	beq.n	8004d46 <RCM_RegisterRegConv+0x1a2>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004d7c:	68e5      	ldr	r5, [r4, #12]
 8004d7e:	b155      	cbz	r5, 8004d96 <RCM_RegisterRegConv+0x1f2>
        handle = i; /* First location available, but still looping to check that this config does not already exist */
 8004d80:	460a      	mov	r2, r1
 8004d82:	e72d      	b.n	8004be0 <RCM_RegisterRegConv+0x3c>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8004d84:	6829      	ldr	r1, [r5, #0]
 8004d86:	6803      	ldr	r3, [r0, #0]
 8004d88:	4299      	cmp	r1, r3
 8004d8a:	f47f af2d 	bne.w	8004be8 <RCM_RegisterRegConv+0x44>
 8004d8e:	e7e7      	b.n	8004d60 <RCM_RegisterRegConv+0x1bc>
      i++;
 8004d90:	2201      	movs	r2, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004d92:	4611      	mov	r1, r2
 8004d94:	e767      	b.n	8004c66 <RCM_RegisterRegConv+0xc2>
        handle = i; /* First location available, but still looping to check that this config does not already exist */
 8004d96:	462a      	mov	r2, r5
 8004d98:	6803      	ldr	r3, [r0, #0]
      RCM_handle_array [handle] = regConv;
 8004d9a:	4611      	mov	r1, r2
 8004d9c:	e763      	b.n	8004c66 <RCM_RegisterRegConv+0xc2>
 8004d9e:	6803      	ldr	r3, [r0, #0]
        handle = i; /* First location available, but still looping to check that this config does not already exist */
 8004da0:	2201      	movs	r2, #1
 8004da2:	e753      	b.n	8004c4c <RCM_RegisterRegConv+0xa8>
  uint8_t handle = 255U;
 8004da4:	22ff      	movs	r2, #255	@ 0xff
 8004da6:	e747      	b.n	8004c38 <RCM_RegisterRegConv+0x94>
 8004da8:	f890 c004 	ldrb.w	ip, [r0, #4]
 8004dac:	6803      	ldr	r3, [r0, #0]
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004dae:	462a      	mov	r2, r5
 8004db0:	e74c      	b.n	8004c4c <RCM_RegisterRegConv+0xa8>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8004db2:	6812      	ldr	r2, [r2, #0]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d0d3      	beq.n	8004d60 <RCM_RegisterRegConv+0x1bc>
 8004db8:	e7bc      	b.n	8004d34 <RCM_RegisterRegConv+0x190>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004dba:	68a5      	ldr	r5, [r4, #8]
 8004dbc:	2d00      	cmp	r5, #0
 8004dbe:	d0ef      	beq.n	8004da0 <RCM_RegisterRegConv+0x1fc>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8004dc0:	792a      	ldrb	r2, [r5, #4]
 8004dc2:	4562      	cmp	r2, ip
 8004dc4:	d006      	beq.n	8004dd4 <RCM_RegisterRegConv+0x230>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004dc6:	68e5      	ldr	r5, [r4, #12]
        handle = i; /* First location available, but still looping to check that this config does not already exist */
 8004dc8:	2201      	movs	r2, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004dca:	2d00      	cmp	r5, #0
 8004dcc:	f47f af08 	bne.w	8004be0 <RCM_RegisterRegConv+0x3c>
      RCM_handle_array [handle] = regConv;
 8004dd0:	4611      	mov	r1, r2
 8004dd2:	e748      	b.n	8004c66 <RCM_RegisterRegConv+0xc2>
        handle = i; /* First location available, but still looping to check that this config does not already exist */
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	e7b8      	b.n	8004d4a <RCM_RegisterRegConv+0x1a6>
 8004dd8:	20001c6c 	.word	0x20001c6c
 8004ddc:	20001c4c 	.word	0x20001c4c
 8004de0:	7fffffc0 	.word	0x7fffffc0
 8004de4:	20001c34 	.word	0x20001c34

08004de8 <RCM_ExecRegularConv>:
 * Otherwise, the latest stored conversion result will be returned.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
uint16_t RCM_ExecRegularConv (RegConv_t *regConv)
{
 8004de8:	b530      	push	{r4, r5, lr}
  uint16_t retVal;
  uint8_t handle = regConv->convHandle;
 8004dea:	7b03      	ldrb	r3, [r0, #12]
  uint8_t formerNext;
  uint8_t i=0;
  uint8_t LastEnable = RCM_MAX_CONV;

  if (false == RCM_NoInj_array [handle].enable)
 8004dec:	4a5e      	ldr	r2, [pc, #376]	@ (8004f68 <RCM_ExecRegularConv+0x180>)
 8004dee:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8004df2:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004df6:	f812 0011 	ldrb.w	r0, [r2, r1, lsl #1]
 8004dfa:	2800      	cmp	r0, #0
 8004dfc:	d138      	bne.n	8004e70 <RCM_ExecRegularConv+0x88>
  {
    /* Find position in the list */
    while (i < RCM_MAX_CONV)
    {
      if (true == RCM_NoInj_array [i].enable)
 8004dfe:	7811      	ldrb	r1, [r2, #0]
 8004e00:	b991      	cbnz	r1, 8004e28 <RCM_ExecRegularConv+0x40>
  uint8_t LastEnable = RCM_MAX_CONV;
 8004e02:	2004      	movs	r0, #4
      if (true == RCM_NoInj_array [i].enable)
 8004e04:	7991      	ldrb	r1, [r2, #6]
 8004e06:	2900      	cmp	r1, #0
 8004e08:	d175      	bne.n	8004ef6 <RCM_ExecRegularConv+0x10e>
 8004e0a:	7b11      	ldrb	r1, [r2, #12]
 8004e0c:	2900      	cmp	r1, #0
 8004e0e:	d177      	bne.n	8004f00 <RCM_ExecRegularConv+0x118>
 8004e10:	7c91      	ldrb	r1, [r2, #18]
 8004e12:	2900      	cmp	r1, #0
 8004e14:	f000 809a 	beq.w	8004f4c <RCM_ExecRegularConv+0x164>
      {
        if (RCM_NoInj_array[i].next > handle)
 8004e18:	7dd1      	ldrb	r1, [r2, #23]
 8004e1a:	4299      	cmp	r1, r3
 8004e1c:	f240 80a0 	bls.w	8004f60 <RCM_ExecRegularConv+0x178>
 8004e20:	f04f 0e03 	mov.w	lr, #3
 8004e24:	4670      	mov	r0, lr
 8004e26:	e003      	b.n	8004e30 <RCM_ExecRegularConv+0x48>
 8004e28:	7951      	ldrb	r1, [r2, #5]
 8004e2a:	428b      	cmp	r3, r1
 8004e2c:	d2ea      	bcs.n	8004e04 <RCM_ExecRegularConv+0x1c>
  uint8_t i=0;
 8004e2e:	4686      	mov	lr, r0
        /* We found a previous reg conv to link with */
        {
          formerNext = RCM_NoInj_array [i].next;
          RCM_NoInj_array[handle].next = formerNext;
 8004e30:	eb0c 0403 	add.w	r4, ip, r3
 8004e34:	eb02 0444 	add.w	r4, r2, r4, lsl #1
          RCM_NoInj_array[handle].prev = i;
          RCM_NoInj_array[i].next = handle;
 8004e38:	eb00 0040 	add.w	r0, r0, r0, lsl #1
          RCM_NoInj_array[handle].next = formerNext;
 8004e3c:	7161      	strb	r1, [r4, #5]
          RCM_NoInj_array[formerNext].prev = handle;
 8004e3e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
          RCM_NoInj_array[handle].prev = i;
 8004e42:	f884 e004 	strb.w	lr, [r4, #4]
          RCM_NoInj_array[formerNext].prev = handle;
 8004e46:	eb02 0141 	add.w	r1, r2, r1, lsl #1
      }
    }
    /* The handle is now linked with others, we can set the enable flag */
    RCM_NoInj_array[handle].enable = true;
    RCM_NoInj_array[handle].status = notvalid;
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8004e4a:	4c48      	ldr	r4, [pc, #288]	@ (8004f6c <RCM_ExecRegularConv+0x184>)
          RCM_NoInj_array[formerNext].prev = handle;
 8004e4c:	710b      	strb	r3, [r1, #4]
          RCM_NoInj_array[i].next = handle;
 8004e4e:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8004e52:	7821      	ldrb	r1, [r4, #0]
          RCM_NoInj_array[i].next = handle;
 8004e54:	7143      	strb	r3, [r0, #5]
    RCM_NoInj_array[handle].enable = true;
 8004e56:	eb0c 0003 	add.w	r0, ip, r3
 8004e5a:	2501      	movs	r5, #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8004e5c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    RCM_NoInj_array[handle].enable = true;
 8004e60:	f822 5010 	strh.w	r5, [r2, r0, lsl #1]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8004e64:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8004e68:	7849      	ldrb	r1, [r1, #1]
 8004e6a:	42a9      	cmp	r1, r5
    {/* Select the new conversion to be the next scheduled only if a conversion is not ongoing */
      RCM_currentHandle = handle;
 8004e6c:	bf18      	it	ne
 8004e6e:	7023      	strbne	r3, [r4, #0]
  }
  else
  {
    /* Nothing to do the current handle is already scheduled */
  }
  if (false == PWM_Handle_M1.ADCRegularLocked)
 8004e70:	493f      	ldr	r1, [pc, #252]	@ (8004f70 <RCM_ExecRegularConv+0x188>)
 8004e72:	f891 10a0 	ldrb.w	r1, [r1, #160]	@ 0xa0
 8004e76:	2900      	cmp	r1, #0
 8004e78:	d138      	bne.n	8004eec <RCM_ExecRegularConv+0x104>
  /* The ADC is free to be used asynchronously */
  {
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8004e7a:	493e      	ldr	r1, [pc, #248]	@ (8004f74 <RCM_ExecRegularConv+0x18c>)
 8004e7c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
                                 LL_ADC_REG_RANK_1,
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8004e80:	790c      	ldrb	r4, [r1, #4]
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8004e82:	6808      	ldr	r0, [r1, #0]
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8004e84:	2101      	movs	r1, #1
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8004e86:	2c09      	cmp	r4, #9
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8004e88:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8004e8c:	fa01 f104 	lsl.w	r1, r1, r4
 8004e90:	ea41 6184 	orr.w	r1, r1, r4, lsl #26
 8004e94:	bf84      	itt	hi
 8004e96:	3d1e      	subhi	r5, #30
 8004e98:	ea41 5105 	orrhi.w	r1, r1, r5, lsl #20
  MODIFY_REG(*preg,
 8004e9c:	6b04      	ldr	r4, [r0, #48]	@ 0x30
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8004e9e:	bf94      	ite	ls
 8004ea0:	ea41 5105 	orrls.w	r1, r1, r5, lsl #20
 8004ea4:	f041 7100 	orrhi.w	r1, r1, #33554432	@ 0x2000000
 8004ea8:	0d09      	lsrs	r1, r1, #20
 8004eaa:	f401 61f8 	and.w	r1, r1, #1984	@ 0x7c0
 8004eae:	f424 64f8 	bic.w	r4, r4, #1984	@ 0x7c0
 8004eb2:	4321      	orrs	r1, r4
 8004eb4:	6301      	str	r1, [r0, #48]	@ 0x30
* param  ADCx ADC instance
* retval Value between Min_Data=0x0000 and Max_Data=0xFFF0
*/
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12L(const ADC_TypeDef *ADCx)
{
  return (uint16_t)(READ_REG(ADCx->DR) & 0x0000FFF0UL);
 8004eb6:	6c01      	ldr	r1, [r0, #64]	@ 0x40
  MODIFY_REG(ADCx->CR,
 8004eb8:	6881      	ldr	r1, [r0, #8]
 8004eba:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8004ebe:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8004ec2:	f041 0104 	orr.w	r1, r1, #4
 8004ec6:	6081      	str	r1, [r0, #8]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8004ec8:	6801      	ldr	r1, [r0, #0]
 8004eca:	0749      	lsls	r1, r1, #29
 8004ecc:	d5fc      	bpl.n	8004ec8 <RCM_ExecRegularConv+0xe0>
    {
      /* Nothing to do */
    }

    /* Read the "Regular" conversion (Not related to current sampling) */
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12L(RCM_handle_array[handle]->regADC);
 8004ece:	eb0c 0103 	add.w	r1, ip, r3
 8004ed2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8004ed6:	6c00      	ldr	r0, [r0, #64]	@ 0x40
    RCM_currentHandle = RCM_NoInj_array[handle].next;
 8004ed8:	4d24      	ldr	r5, [pc, #144]	@ (8004f6c <RCM_ExecRegularConv+0x184>)
 8004eda:	f891 e005 	ldrb.w	lr, [r1, #5]
 8004ede:	f885 e000 	strb.w	lr, [r5]
 8004ee2:	f020 000f 	bic.w	r0, r0, #15
    RCM_NoInj_array[handle].status = valid;
 8004ee6:	2402      	movs	r4, #2
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12L(RCM_handle_array[handle]->regADC);
 8004ee8:	8048      	strh	r0, [r1, #2]
    RCM_NoInj_array[handle].status = valid;
 8004eea:	704c      	strb	r4, [r1, #1]
  }
  else
  {
    /* Nothing to do */
  }
  retVal = RCM_NoInj_array[handle].value;
 8004eec:	449c      	add	ip, r3
 8004eee:	eb02 024c 	add.w	r2, r2, ip, lsl #1
  return (retVal);
}
 8004ef2:	8850      	ldrh	r0, [r2, #2]
 8004ef4:	bd30      	pop	{r4, r5, pc}
        if (RCM_NoInj_array[i].next > handle)
 8004ef6:	7ad1      	ldrb	r1, [r2, #11]
 8004ef8:	428b      	cmp	r3, r1
 8004efa:	d31d      	bcc.n	8004f38 <RCM_ExecRegularConv+0x150>
      if (true == RCM_NoInj_array [i].enable)
 8004efc:	7b11      	ldrb	r1, [r2, #12]
 8004efe:	b1f9      	cbz	r1, 8004f40 <RCM_ExecRegularConv+0x158>
        if (RCM_NoInj_array[i].next > handle)
 8004f00:	7c51      	ldrb	r1, [r2, #17]
 8004f02:	4299      	cmp	r1, r3
 8004f04:	d828      	bhi.n	8004f58 <RCM_ExecRegularConv+0x170>
      if (true == RCM_NoInj_array [i].enable)
 8004f06:	7c91      	ldrb	r1, [r2, #18]
 8004f08:	2900      	cmp	r1, #0
 8004f0a:	d185      	bne.n	8004e18 <RCM_ExecRegularConv+0x30>
          LastEnable = i;
 8004f0c:	2102      	movs	r1, #2
         formerNext = RCM_NoInj_array[LastEnable].next;
 8004f0e:	4608      	mov	r0, r1
 8004f10:	eb00 0040 	add.w	r0, r0, r0, lsl #1
         RCM_NoInj_array[handle].next = formerNext;
 8004f14:	eb0c 0403 	add.w	r4, ip, r3
 8004f18:	eb02 0444 	add.w	r4, r2, r4, lsl #1
         formerNext = RCM_NoInj_array[LastEnable].next;
 8004f1c:	eb02 0040 	add.w	r0, r2, r0, lsl #1
         RCM_NoInj_array[handle].prev = LastEnable;
 8004f20:	7121      	strb	r1, [r4, #4]
         formerNext = RCM_NoInj_array[LastEnable].next;
 8004f22:	7941      	ldrb	r1, [r0, #5]
         RCM_NoInj_array[handle].next = formerNext;
 8004f24:	7161      	strb	r1, [r4, #5]
         RCM_NoInj_array[formerNext].prev = handle;
 8004f26:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8004f2a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8004f2e:	4c0f      	ldr	r4, [pc, #60]	@ (8004f6c <RCM_ExecRegularConv+0x184>)
         RCM_NoInj_array[formerNext].prev = handle;
 8004f30:	710b      	strb	r3, [r1, #4]
         RCM_NoInj_array[LastEnable].next = handle;
 8004f32:	7143      	strb	r3, [r0, #5]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8004f34:	7821      	ldrb	r1, [r4, #0]
 8004f36:	e78e      	b.n	8004e56 <RCM_ExecRegularConv+0x6e>
        if (RCM_NoInj_array[i].next > handle)
 8004f38:	f04f 0e01 	mov.w	lr, #1
      if (true == RCM_NoInj_array [i].enable)
 8004f3c:	4670      	mov	r0, lr
 8004f3e:	e777      	b.n	8004e30 <RCM_ExecRegularConv+0x48>
 8004f40:	7c91      	ldrb	r1, [r2, #18]
 8004f42:	2900      	cmp	r1, #0
 8004f44:	f47f af68 	bne.w	8004e18 <RCM_ExecRegularConv+0x30>
          LastEnable = i;
 8004f48:	2101      	movs	r1, #1
 8004f4a:	e7e0      	b.n	8004f0e <RCM_ExecRegularConv+0x126>
       if (LastEnable != RCM_MAX_CONV )
 8004f4c:	2800      	cmp	r0, #0
 8004f4e:	d0de      	beq.n	8004f0e <RCM_ExecRegularConv+0x126>
         RCM_currentHandle = handle;
 8004f50:	4c06      	ldr	r4, [pc, #24]	@ (8004f6c <RCM_ExecRegularConv+0x184>)
 8004f52:	4619      	mov	r1, r3
 8004f54:	7023      	strb	r3, [r4, #0]
    while (i < RCM_MAX_CONV)
 8004f56:	e77e      	b.n	8004e56 <RCM_ExecRegularConv+0x6e>
        if (RCM_NoInj_array[i].next > handle)
 8004f58:	f04f 0e02 	mov.w	lr, #2
      if (true == RCM_NoInj_array [i].enable)
 8004f5c:	4670      	mov	r0, lr
 8004f5e:	e767      	b.n	8004e30 <RCM_ExecRegularConv+0x48>
 8004f60:	2003      	movs	r0, #3
          LastEnable = i;
 8004f62:	4601      	mov	r1, r0
 8004f64:	e7d4      	b.n	8004f10 <RCM_ExecRegularConv+0x128>
 8004f66:	bf00      	nop
 8004f68:	20001c34 	.word	0x20001c34
 8004f6c:	20001c30 	.word	0x20001c30
 8004f70:	2000025c 	.word	0x2000025c
 8004f74:	20001c6c 	.word	0x20001c6c

08004f78 <RCM_ExecUserConv>:
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv()
{
  uint8_t handle;
  if (RCM_UserConvHandle != NULL)
 8004f78:	4b14      	ldr	r3, [pc, #80]	@ (8004fcc <RCM_ExecUserConv+0x54>)
{
 8004f7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (RCM_UserConvHandle != NULL)
 8004f7e:	681c      	ldr	r4, [r3, #0]
 8004f80:	b124      	cbz	r4, 8004f8c <RCM_ExecUserConv+0x14>
  {
    handle = RCM_UserConvHandle->convHandle;
    if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 8004f82:	4d13      	ldr	r5, [pc, #76]	@ (8004fd0 <RCM_ExecUserConv+0x58>)
    handle = RCM_UserConvHandle->convHandle;
 8004f84:	7b26      	ldrb	r6, [r4, #12]
    if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 8004f86:	782b      	ldrb	r3, [r5, #0]
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d001      	beq.n	8004f90 <RCM_ExecUserConv+0x18>
  }
  else
  {
     /* Nothing to do */
  }
}
 8004f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8004f90:	4620      	mov	r0, r4
 8004f92:	f7ff ff29 	bl	8004de8 <RCM_ExecRegularConv>
 8004f96:	4b0f      	ldr	r3, [pc, #60]	@ (8004fd4 <RCM_ExecUserConv+0x5c>)
 8004f98:	8018      	strh	r0, [r3, #0]
      if (RCM_NoInj_array [handle].status != notvalid)
 8004f9a:	4b0f      	ldr	r3, [pc, #60]	@ (8004fd8 <RCM_ExecUserConv+0x60>)
 8004f9c:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8004fa0:	eb03 0342 	add.w	r3, r3, r2, lsl #1
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8004fa4:	4601      	mov	r1, r0
      if (RCM_NoInj_array [handle].status != notvalid)
 8004fa6:	785b      	ldrb	r3, [r3, #1]
 8004fa8:	b10b      	cbz	r3, 8004fae <RCM_ExecUserConv+0x36>
        RCM_UserConvState = RCM_USERCONV_EOC;
 8004faa:	2302      	movs	r3, #2
 8004fac:	702b      	strb	r3, [r5, #0]
      if (RCM_CB_array[handle].cb != NULL)
 8004fae:	4b0b      	ldr	r3, [pc, #44]	@ (8004fdc <RCM_ExecUserConv+0x64>)
 8004fb0:	f853 7036 	ldr.w	r7, [r3, r6, lsl #3]
 8004fb4:	2f00      	cmp	r7, #0
 8004fb6:	d0e9      	beq.n	8004f8c <RCM_ExecUserConv+0x14>
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8004fb8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004fbc:	4620      	mov	r0, r4
 8004fbe:	685a      	ldr	r2, [r3, #4]
        RCM_UserConvState = RCM_USERCONV_IDLE;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	702b      	strb	r3, [r5, #0]
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8004fc4:	463b      	mov	r3, r7
}
 8004fc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8004fca:	4718      	bx	r3
 8004fcc:	20001c28 	.word	0x20001c28
 8004fd0:	20001c2c 	.word	0x20001c2c
 8004fd4:	20001c2e 	.word	0x20001c2e
 8004fd8:	20001c34 	.word	0x20001c34
 8004fdc:	20001c4c 	.word	0x20001c4c

08004fe0 <RCM_ExecNextConv>:
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecNextConv(void)
{
  if (true == RCM_NoInj_array [RCM_currentHandle].enable)
 8004fe0:	4b1e      	ldr	r3, [pc, #120]	@ (800505c <RCM_ExecNextConv+0x7c>)
 8004fe2:	491f      	ldr	r1, [pc, #124]	@ (8005060 <RCM_ExecNextConv+0x80>)
 8004fe4:	781a      	ldrb	r2, [r3, #0]
 8004fe6:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8004fea:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8004fee:	b3a3      	cbz	r3, 800505a <RCM_ExecNextConv+0x7a>
    /* When this function is called, the ADC conversions triggered by External
       event for current reading has been completed.
       ADC is therefore ready to be started because already stopped */

    /* Clear EOC */
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8004ff0:	4b1c      	ldr	r3, [pc, #112]	@ (8005064 <RCM_ExecNextConv+0x84>)
{
 8004ff2:	b510      	push	{r4, lr}
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8004ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ff8:	6818      	ldr	r0, [r3, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8004ffa:	2404      	movs	r4, #4
 8004ffc:	6004      	str	r4, [r0, #0]
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
                                 LL_ADC_REG_RANK_1,
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 8004ffe:	f893 c004 	ldrb.w	ip, [r3, #4]
 8005002:	2301      	movs	r3, #1
 8005004:	eb0c 044c 	add.w	r4, ip, ip, lsl #1
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 8005008:	f1bc 0f09 	cmp.w	ip, #9
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 800500c:	fa03 f30c 	lsl.w	r3, r3, ip
 8005010:	ea43 638c 	orr.w	r3, r3, ip, lsl #26
 8005014:	bf84      	itt	hi
 8005016:	3c1e      	subhi	r4, #30
 8005018:	ea43 5304 	orrhi.w	r3, r3, r4, lsl #20
 800501c:	ea4f 0e42 	mov.w	lr, r2, lsl #1
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 8005020:	bf98      	it	ls
 8005022:	ea43 5304 	orrls.w	r3, r3, r4, lsl #20

    (void)LL_ADC_REG_ReadConversionData12L(RCM_handle_array[RCM_currentHandle]->regADC);

    /* Start ADC for regular conversion */
    LL_ADC_REG_StartConversion(RCM_handle_array[RCM_currentHandle]->regADC);
    RCM_NoInj_array[RCM_currentHandle].status = ongoing;
 8005026:	4496      	add	lr, r2
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 8005028:	bf88      	it	hi
 800502a:	f043 7300 	orrhi.w	r3, r3, #33554432	@ 0x2000000
  MODIFY_REG(*preg,
 800502e:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8005030:	0d1b      	lsrs	r3, r3, #20
 8005032:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8005036:	f422 62f8 	bic.w	r2, r2, #1984	@ 0x7c0
 800503a:	4313      	orrs	r3, r2
 800503c:	6303      	str	r3, [r0, #48]	@ 0x30
 800503e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
  MODIFY_REG(ADCx->CR,
 8005040:	6883      	ldr	r3, [r0, #8]
 8005042:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
    RCM_NoInj_array[RCM_currentHandle].status = ongoing;
 8005046:	eb01 014e 	add.w	r1, r1, lr, lsl #1
 800504a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800504e:	2401      	movs	r4, #1
 8005050:	f043 0304 	orr.w	r3, r3, #4
 8005054:	6083      	str	r3, [r0, #8]
 8005056:	704c      	strb	r4, [r1, #1]
  }
  else
  {
    /* Nothing to do, conversion not enabled have already notvalid status */
  }
}
 8005058:	bd10      	pop	{r4, pc}
 800505a:	4770      	bx	lr
 800505c:	20001c30 	.word	0x20001c30
 8005060:	20001c34 	.word	0x20001c34
 8005064:	20001c6c 	.word	0x20001c6c

08005068 <RCM_ReadOngoingConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ReadOngoingConv(void)
{
 8005068:	b430      	push	{r4, r5}
  uint32_t result;
  RCM_status_t status;

  if (true == RCM_NoInj_array [RCM_currentHandle].enable)
 800506a:	4812      	ldr	r0, [pc, #72]	@ (80050b4 <RCM_ReadOngoingConv+0x4c>)
 800506c:	4a12      	ldr	r2, [pc, #72]	@ (80050b8 <RCM_ReadOngoingConv+0x50>)
 800506e:	7803      	ldrb	r3, [r0, #0]
 8005070:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8005074:	f812 4011 	ldrb.w	r4, [r2, r1, lsl #1]
 8005078:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800507c:	b16c      	cbz	r4, 800509a <RCM_ReadOngoingConv+0x32>
  {
    status = RCM_NoInj_array[RCM_currentHandle].status;
    result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 800507e:	4c0f      	ldr	r4, [pc, #60]	@ (80050bc <RCM_ReadOngoingConv+0x54>)
 8005080:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8005084:	6824      	ldr	r4, [r4, #0]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8005086:	6825      	ldr	r5, [r4, #0]
 8005088:	076d      	lsls	r5, r5, #29
 800508a:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800508e:	d406      	bmi.n	800509e <RCM_ReadOngoingConv+0x36>
      RCM_NoInj_array[RCM_currentHandle].status = valid;
      /* Restore back DMA configuration */
    }

    /* Prepare next conversion */
    RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 8005090:	449c      	add	ip, r3
 8005092:	eb02 024c 	add.w	r2, r2, ip, lsl #1
 8005096:	7953      	ldrb	r3, [r2, #5]
 8005098:	7003      	strb	r3, [r0, #0]
    }
    else
    {
      /* Nothing to do */
    }
}
 800509a:	bc30      	pop	{r4, r5}
 800509c:	4770      	bx	lr
    if (( valid == status ) || ( notvalid == status ) || ( 0U == result ))
 800509e:	784d      	ldrb	r5, [r1, #1]
 80050a0:	f015 0ffd 	tst.w	r5, #253	@ 0xfd
 80050a4:	d0f4      	beq.n	8005090 <RCM_ReadOngoingConv+0x28>
 80050a6:	6c24      	ldr	r4, [r4, #64]	@ 0x40
 80050a8:	f024 040f 	bic.w	r4, r4, #15
                    = LL_ADC_REG_ReadConversionData12L(RCM_handle_array[RCM_currentHandle]->regADC);
 80050ac:	804c      	strh	r4, [r1, #2]
      RCM_NoInj_array[RCM_currentHandle].status = valid;
 80050ae:	2402      	movs	r4, #2
 80050b0:	704c      	strb	r4, [r1, #1]
 80050b2:	e7ed      	b.n	8005090 <RCM_ReadOngoingConv+0x28>
 80050b4:	20001c30 	.word	0x20001c30
 80050b8:	20001c34 	.word	0x20001c34
 80050bc:	20001c6c 	.word	0x20001c6c

080050c0 <USART2_IRQHandler>:
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 80050c0:	4b44      	ldr	r3, [pc, #272]	@ (80051d4 <USART2_IRQHandler+0x114>)
 80050c2:	69da      	ldr	r2, [r3, #28]
 80050c4:	0652      	lsls	r2, r2, #25
  * @brief  This function handles USART interrupt request.
  * @param  None
  */
//cstat !MISRAC2012-Rule-8.4
void USART2_IRQHandler(void)
{
 80050c6:	b510      	push	{r4, lr}
 80050c8:	d509      	bpl.n	80050de <USART2_IRQHandler+0x1e>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 80050ca:	4943      	ldr	r1, [pc, #268]	@ (80051d8 <USART2_IRQHandler+0x118>)
    /* Disable the DMA channel to prepare the next chunck of data*/
    LL_DMA_DisableChannel(DMA_TX_A, DMACH_TX_A);
    LL_USART_ClearFlag_TC(USARTA);
    /* Data Sent by UART*/
    /* Need to free the buffer, and to check pending transfer*/
    ASPEP_HWDataTransmittedIT(&aspepOverUartA);
 80050cc:	4843      	ldr	r0, [pc, #268]	@ (80051dc <USART2_IRQHandler+0x11c>)
 80050ce:	69ca      	ldr	r2, [r1, #28]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 80050d0:	2440      	movs	r4, #64	@ 0x40
 80050d2:	f022 0201 	bic.w	r2, r2, #1
 80050d6:	61ca      	str	r2, [r1, #28]
 80050d8:	621c      	str	r4, [r3, #32]
 80050da:	f7fb ff27 	bl	8000f2c <ASPEP_HWDataTransmittedIT>
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 80050de:	4b3d      	ldr	r3, [pc, #244]	@ (80051d4 <USART2_IRQHandler+0x114>)
 80050e0:	69d8      	ldr	r0, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 80050e2:	69da      	ldr	r2, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 80050e4:	69d9      	ldr	r1, [r3, #28]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_ERROR(const USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 80050e6:	689b      	ldr	r3, [r3, #8]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 80050e8:	074c      	lsls	r4, r1, #29
 80050ea:	d56a      	bpl.n	80051c2 <USART2_IRQHandler+0x102>
  return ((READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 80050ec:	07d8      	lsls	r0, r3, #31
 80050ee:	d51e      	bpl.n	800512e <USART2_IRQHandler+0x6e>
  {
    /* Nothing to do */
  }
  else
  { /* Stopping the debugger will generate an OverRun error*/
    WRITE_REG(USARTA->ICR, USART_ICR_FECF | USART_ICR_ORECF | USART_ICR_NECF);
 80050f0:	4b38      	ldr	r3, [pc, #224]	@ (80051d4 <USART2_IRQHandler+0x114>)
 80050f2:	220e      	movs	r2, #14
 80050f4:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f6:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80050fa:	f502 6381 	add.w	r3, r2, #1032	@ 0x408
 80050fe:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 8005102:	f023 0301 	bic.w	r3, r3, #1
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005106:	f502 6081 	add.w	r0, r2, #1032	@ 0x408
 800510a:	e840 3100 	strex	r1, r3, [r0]
 800510e:	2900      	cmp	r1, #0
 8005110:	d1f3      	bne.n	80050fa <USART2_IRQHandler+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005112:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8005116:	f502 6380 	add.w	r3, r2, #1024	@ 0x400
 800511a:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 800511e:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005122:	f502 6080 	add.w	r0, r2, #1024	@ 0x400
 8005126:	e840 3100 	strex	r1, r3, [r0]
 800512a:	2900      	cmp	r1, #0
 800512c:	d1f3      	bne.n	8005116 <USART2_IRQHandler+0x56>
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 800512e:	4b29      	ldr	r3, [pc, #164]	@ (80051d4 <USART2_IRQHandler+0x114>)
 8005130:	69da      	ldr	r2, [r3, #28]
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 8005132:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8005134:	06d2      	lsls	r2, r2, #27
 8005136:	d543      	bpl.n	80051c0 <USART2_IRQHandler+0x100>
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 8005138:	06db      	lsls	r3, r3, #27
 800513a:	d541      	bpl.n	80051c0 <USART2_IRQHandler+0x100>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800513c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8005140:	f502 6380 	add.w	r3, r2, #1024	@ 0x400
 8005144:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8005148:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800514c:	f502 6080 	add.w	r0, r2, #1024	@ 0x400
 8005150:	e840 3100 	strex	r1, r3, [r0]
 8005154:	2900      	cmp	r1, #0
 8005156:	d1f3      	bne.n	8005140 <USART2_IRQHandler+0x80>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005158:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800515c:	f502 6381 	add.w	r3, r2, #1032	@ 0x408
 8005160:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8005164:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005168:	f502 6081 	add.w	r0, r2, #1032	@ 0x408
 800516c:	e840 3100 	strex	r1, r3, [r0]
 8005170:	2900      	cmp	r1, #0
 8005172:	d1f3      	bne.n	800515c <USART2_IRQHandler+0x9c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005174:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8005178:	f502 6381 	add.w	r3, r2, #1032	@ 0x408
 800517c:	e853 3f00 	ldrex	r3, [r3]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableDMAReq_RX(USART_TypeDef *USARTx)
{
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_DMAR);
 8005180:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005184:	f502 6081 	add.w	r0, r2, #1032	@ 0x408
 8005188:	e840 3100 	strex	r1, r3, [r0]
 800518c:	2900      	cmp	r1, #0
 800518e:	d1f3      	bne.n	8005178 <USART2_IRQHandler+0xb8>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8005190:	4b10      	ldr	r3, [pc, #64]	@ (80051d4 <USART2_IRQHandler+0x114>)
 8005192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005194:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8005198:	f502 6381 	add.w	r3, r2, #1032	@ 0x408
 800519c:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 80051a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a4:	f502 6081 	add.w	r0, r2, #1032	@ 0x408
 80051a8:	e840 3100 	strex	r1, r3, [r0]
 80051ac:	2900      	cmp	r1, #0
 80051ae:	d1f3      	bne.n	8005198 <USART2_IRQHandler+0xd8>
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 80051b0:	4b09      	ldr	r3, [pc, #36]	@ (80051d8 <USART2_IRQHandler+0x118>)
    LL_USART_DisableDMAReq_RX(USARTA);
    (void)LL_USART_ReceiveData8(USARTA);
    LL_USART_EnableDMAReq_RX(USARTA);
    /* Clear pending DMA TC to process only new received packet */
    LL_DMA_ClearFlag_TC(DMA_RX_A, DMACH_RX_A);
    ASPEP_HWReset(&aspepOverUartA);
 80051b2:	480a      	ldr	r0, [pc, #40]	@ (80051dc <USART2_IRQHandler+0x11c>)
 80051b4:	2202      	movs	r2, #2
  }

  /* USER CODE BEGIN USART2_IRQHandler 1 */

  /* USER CODE END USART2_IRQHandler 1 */
}
 80051b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051ba:	605a      	str	r2, [r3, #4]
    ASPEP_HWReset(&aspepOverUartA);
 80051bc:	f7fc b8ac 	b.w	8001318 <ASPEP_HWReset>
}
 80051c0:	bd10      	pop	{r4, pc}
  return ((READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 80051c2:	07d9      	lsls	r1, r3, #31
 80051c4:	d5b3      	bpl.n	800512e <USART2_IRQHandler+0x6e>
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 80051c6:	f002 0202 	and.w	r2, r2, #2
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 80051ca:	f000 0008 	and.w	r0, r0, #8
  if (0U == flags)
 80051ce:	4302      	orrs	r2, r0
 80051d0:	d18e      	bne.n	80050f0 <USART2_IRQHandler+0x30>
 80051d2:	e7ac      	b.n	800512e <USART2_IRQHandler+0x6e>
 80051d4:	40004400 	.word	0x40004400
 80051d8:	40020000 	.word	0x40020000
 80051dc:	2000047c 	.word	0x2000047c

080051e0 <HardFault_Handler>:
/**
  * @brief  This function handles Hard Fault exception.
  * @param  None
  */
void HardFault_Handler(void)
{
 80051e0:	b508      	push	{r3, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */

  TSK_HardwareFaultTask();
 80051e2:	f7fd fe01 	bl	8002de8 <TSK_HardwareFaultTask>

  /* Go to infinite loop when Hard Fault exception occurs */
  while (true)
 80051e6:	e7fe      	b.n	80051e6 <HardFault_Handler+0x6>

080051e8 <SysTick_Handler>:

 /* USER CODE END HardFault_IRQn 1 */
}

void SysTick_Handler(void)
{
 80051e8:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 80051ea:	4c0d      	ldr	r4, [pc, #52]	@ (8005220 <SysTick_Handler+0x38>)
 80051ec:	7823      	ldrb	r3, [r4, #0]
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d00f      	beq.n	8005212 <SysTick_Handler+0x2a>
  else
  {
    /* Nothing to do */
  }

  SystickDividerCounter ++;
 80051f2:	3301      	adds	r3, #1
 80051f4:	b2db      	uxtb	r3, r3
  return ((NULL == DMAx) ? 0U : ((READ_BIT(DMAx->ISR,
 80051f6:	4a0b      	ldr	r2, [pc, #44]	@ (8005224 <SysTick_Handler+0x3c>)
 80051f8:	7023      	strb	r3, [r4, #0]
 80051fa:	6813      	ldr	r3, [r2, #0]
 80051fc:	079b      	lsls	r3, r3, #30
 80051fe:	d504      	bpl.n	800520a <SysTick_Handler+0x22>
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 8005200:	2302      	movs	r3, #2
  /* Buffer is ready by the HW layer to be processed */
  /* NO DMA interrupt */
  if (LL_DMA_IsActiveFlag_TC(DMA_RX_A, DMACH_RX_A))
  {
    LL_DMA_ClearFlag_TC(DMA_RX_A, DMACH_RX_A);
    ASPEP_HWDataReceivedIT(&aspepOverUartA);
 8005202:	4809      	ldr	r0, [pc, #36]	@ (8005228 <SysTick_Handler+0x40>)
 8005204:	6053      	str	r3, [r2, #4]
 8005206:	f7fc f837 	bl	8001278 <ASPEP_HWDataReceivedIT>
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */

  /* USER CODE END SysTick_IRQn 2 */
}
 800520a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 800520e:	f7fd bd99 	b.w	8002d44 <MC_RunMotorControlTasks>
    HAL_IncTick();
 8005212:	f000 fbdf 	bl	80059d4 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8005216:	f001 fd3d 	bl	8006c94 <HAL_SYSTICK_IRQHandler>
    SystickDividerCounter = 0;
 800521a:	2301      	movs	r3, #1
 800521c:	e7eb      	b.n	80051f6 <SysTick_Handler+0xe>
 800521e:	bf00      	nop
 8005220:	20000504 	.word	0x20000504
 8005224:	40020000 	.word	0x40020000
 8005228:	2000047c 	.word	0x2000047c

0800522c <EXTI15_10_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 800522c:	4b04      	ldr	r3, [pc, #16]	@ (8005240 <EXTI15_10_IRQHandler+0x14>)
 800522e:	695a      	ldr	r2, [r3, #20]

  */
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN START_STOP_BTN */
  if (LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_13))
 8005230:	0492      	lsls	r2, r2, #18
 8005232:	d400      	bmi.n	8005236 <EXTI15_10_IRQHandler+0xa>
  else
  {
    /* Nothing to do */
  }

}
 8005234:	4770      	bx	lr
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8005236:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800523a:	615a      	str	r2, [r3, #20]
    (void)UI_HandleStartStopButton_cb();
 800523c:	f7fd bde2 	b.w	8002e04 <UI_HandleStartStopButton_cb>
 8005240:	40010400 	.word	0x40010400

08005244 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005244:	b500      	push	{lr}

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005246:	4b0e      	ldr	r3, [pc, #56]	@ (8005280 <HAL_MspInit+0x3c>)
 8005248:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800524a:	f042 0201 	orr.w	r2, r2, #1
{
 800524e:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005250:	661a      	str	r2, [r3, #96]	@ 0x60
 8005252:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005254:	f002 0201 	and.w	r2, r2, #1
 8005258:	9200      	str	r2, [sp, #0]
 800525a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800525c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800525e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8005262:	659a      	str	r2, [r3, #88]	@ 0x58
 8005264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005266:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800526a:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 800526c:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 800526e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8005270:	f001 fc86 	bl	8006b80 <HAL_NVIC_SetPriorityGrouping>
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005274:	b003      	add	sp, #12
 8005276:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_PWREx_DisableUCPDDeadBattery();
 800527a:	f002 b87d 	b.w	8007378 <HAL_PWREx_DisableUCPDDeadBattery>
 800527e:	bf00      	nop
 8005280:	40021000 	.word	0x40021000
 8005284:	00000000 	.word	0x00000000

08005288 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005288:	b510      	push	{r4, lr}
 800528a:	4604      	mov	r4, r0
 800528c:	b0a4      	sub	sp, #144	@ 0x90
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800528e:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005290:	2254      	movs	r2, #84	@ 0x54
 8005292:	a80f      	add	r0, sp, #60	@ 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005294:	e9cd 110a 	strd	r1, r1, [sp, #40]	@ 0x28
 8005298:	e9cd 110c 	strd	r1, r1, [sp, #48]	@ 0x30
 800529c:	910e      	str	r1, [sp, #56]	@ 0x38
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800529e:	f005 fec7 	bl	800b030 <memset>
  if(hadc->Instance==ADC1)
 80052a2:	6823      	ldr	r3, [r4, #0]
 80052a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80052a8:	d03c      	beq.n	8005324 <HAL_ADC_MspInit+0x9c>

    /* USER CODE BEGIN ADC1_MspInit 1 */

    /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 80052aa:	4a7d      	ldr	r2, [pc, #500]	@ (80054a0 <HAL_ADC_MspInit+0x218>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d07e      	beq.n	80053ae <HAL_ADC_MspInit+0x126>

    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }
  else if(hadc->Instance==ADC3)
 80052b0:	4a7c      	ldr	r2, [pc, #496]	@ (80054a4 <HAL_ADC_MspInit+0x21c>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	f000 80ac 	beq.w	8005410 <HAL_ADC_MspInit+0x188>

    /* USER CODE BEGIN ADC3_MspInit 1 */

    /* USER CODE END ADC3_MspInit 1 */
  }
  else if(hadc->Instance==ADC4)
 80052b8:	4a7b      	ldr	r2, [pc, #492]	@ (80054a8 <HAL_ADC_MspInit+0x220>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d001      	beq.n	80052c2 <HAL_ADC_MspInit+0x3a>
    /* USER CODE BEGIN ADC4_MspInit 1 */

    /* USER CODE END ADC4_MspInit 1 */
  }

}
 80052be:	b024      	add	sp, #144	@ 0x90
 80052c0:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80052c2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 80052c6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80052ca:	a80f      	add	r0, sp, #60	@ 0x3c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80052cc:	920f      	str	r2, [sp, #60]	@ 0x3c
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 80052ce:	9321      	str	r3, [sp, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80052d0:	f002 fc0e 	bl	8007af0 <HAL_RCCEx_PeriphCLKConfig>
 80052d4:	2800      	cmp	r0, #0
 80052d6:	f040 80d4 	bne.w	8005482 <HAL_ADC_MspInit+0x1fa>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80052da:	4a74      	ldr	r2, [pc, #464]	@ (80054ac <HAL_ADC_MspInit+0x224>)
 80052dc:	6813      	ldr	r3, [r2, #0]
 80052de:	3301      	adds	r3, #1
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80052e0:	2b01      	cmp	r3, #1
    HAL_RCC_ADC345_CLK_ENABLED++;
 80052e2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80052e4:	d109      	bne.n	80052fa <HAL_ADC_MspInit+0x72>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80052e6:	4b72      	ldr	r3, [pc, #456]	@ (80054b0 <HAL_ADC_MspInit+0x228>)
 80052e8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80052ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80052ee:	64da      	str	r2, [r3, #76]	@ 0x4c
 80052f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80052f6:	9308      	str	r3, [sp, #32]
 80052f8:	9b08      	ldr	r3, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052fa:	4b6d      	ldr	r3, [pc, #436]	@ (80054b0 <HAL_ADC_MspInit+0x228>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052fc:	486d      	ldr	r0, [pc, #436]	@ (80054b4 <HAL_ADC_MspInit+0x22c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005300:	f042 0202 	orr.w	r2, r2, #2
 8005304:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005306:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8005308:	ed9f 7b5f 	vldr	d7, [pc, #380]	@ 8005488 <HAL_ADC_MspInit+0x200>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800530c:	f003 0302 	and.w	r3, r3, #2
 8005310:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005312:	a90a      	add	r1, sp, #40	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005314:	2300      	movs	r3, #0
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8005316:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800531a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800531c:	930c      	str	r3, [sp, #48]	@ 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800531e:	f001 fdf5 	bl	8006f0c <HAL_GPIO_Init>
}
 8005322:	e7cc      	b.n	80052be <HAL_ADC_MspInit+0x36>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8005324:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8005328:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800532c:	a80f      	add	r0, sp, #60	@ 0x3c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800532e:	920f      	str	r2, [sp, #60]	@ 0x3c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8005330:	9320      	str	r3, [sp, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005332:	f002 fbdd 	bl	8007af0 <HAL_RCCEx_PeriphCLKConfig>
 8005336:	2800      	cmp	r0, #0
 8005338:	f040 809a 	bne.w	8005470 <HAL_ADC_MspInit+0x1e8>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800533c:	4a5e      	ldr	r2, [pc, #376]	@ (80054b8 <HAL_ADC_MspInit+0x230>)
 800533e:	6813      	ldr	r3, [r2, #0]
 8005340:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8005342:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8005344:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8005346:	d109      	bne.n	800535c <HAL_ADC_MspInit+0xd4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8005348:	4b59      	ldr	r3, [pc, #356]	@ (80054b0 <HAL_ADC_MspInit+0x228>)
 800534a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800534c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005350:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005352:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005354:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005358:	9301      	str	r3, [sp, #4]
 800535a:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800535c:	4b54      	ldr	r3, [pc, #336]	@ (80054b0 <HAL_ADC_MspInit+0x228>)
 800535e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005360:	f042 0204 	orr.w	r2, r2, #4
 8005364:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005366:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005368:	f002 0204 	and.w	r2, r2, #4
 800536c:	9202      	str	r2, [sp, #8]
 800536e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005370:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005372:	f042 0201 	orr.w	r2, r2, #1
 8005376:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin|M1_TEMPERATURE_Pin;
 800537a:	2006      	movs	r0, #6
 800537c:	2103      	movs	r1, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800537e:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin|M1_TEMPERATURE_Pin;
 8005382:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005386:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005388:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800538a:	a90a      	add	r1, sp, #40	@ 0x28
 800538c:	484b      	ldr	r0, [pc, #300]	@ (80054bc <HAL_ADC_MspInit+0x234>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800538e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005390:	940c      	str	r4, [sp, #48]	@ 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005392:	f001 fdbb 	bl	8006f0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin|M1_BUS_VOLTAGE_Pin;
 8005396:	2203      	movs	r2, #3
 8005398:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800539a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800539e:	a90a      	add	r1, sp, #40	@ 0x28
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin|M1_BUS_VOLTAGE_Pin;
 80053a0:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053a4:	940c      	str	r4, [sp, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053a6:	f001 fdb1 	bl	8006f0c <HAL_GPIO_Init>
}
 80053aa:	b024      	add	sp, #144	@ 0x90
 80053ac:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80053ae:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80053b2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80053b6:	a80f      	add	r0, sp, #60	@ 0x3c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80053b8:	920f      	str	r2, [sp, #60]	@ 0x3c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80053ba:	9320      	str	r3, [sp, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80053bc:	f002 fb98 	bl	8007af0 <HAL_RCCEx_PeriphCLKConfig>
 80053c0:	2800      	cmp	r0, #0
 80053c2:	d158      	bne.n	8005476 <HAL_ADC_MspInit+0x1ee>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80053c4:	4a3c      	ldr	r2, [pc, #240]	@ (80054b8 <HAL_ADC_MspInit+0x230>)
 80053c6:	6813      	ldr	r3, [r2, #0]
 80053c8:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80053ca:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 80053cc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80053ce:	d109      	bne.n	80053e4 <HAL_ADC_MspInit+0x15c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80053d0:	4b37      	ldr	r3, [pc, #220]	@ (80054b0 <HAL_ADC_MspInit+0x228>)
 80053d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80053d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80053d8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80053da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80053e0:	9304      	str	r3, [sp, #16]
 80053e2:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80053e4:	4b32      	ldr	r3, [pc, #200]	@ (80054b0 <HAL_ADC_MspInit+0x228>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80053e6:	4835      	ldr	r0, [pc, #212]	@ (80054bc <HAL_ADC_MspInit+0x234>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80053e8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80053ea:	f042 0204 	orr.w	r2, r2, #4
 80053ee:	64da      	str	r2, [r3, #76]	@ 0x4c
 80053f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin;
 80053f2:	ed9f 7b27 	vldr	d7, [pc, #156]	@ 8005490 <HAL_ADC_MspInit+0x208>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80053f6:	f003 0304 	and.w	r3, r3, #4
 80053fa:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80053fc:	a90a      	add	r1, sp, #40	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053fe:	2300      	movs	r3, #0
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin;
 8005400:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005404:	9a05      	ldr	r2, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005406:	930c      	str	r3, [sp, #48]	@ 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005408:	f001 fd80 	bl	8006f0c <HAL_GPIO_Init>
}
 800540c:	b024      	add	sp, #144	@ 0x90
 800540e:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8005410:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 8005414:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005418:	a80f      	add	r0, sp, #60	@ 0x3c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800541a:	920f      	str	r2, [sp, #60]	@ 0x3c
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 800541c:	9321      	str	r3, [sp, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800541e:	f002 fb67 	bl	8007af0 <HAL_RCCEx_PeriphCLKConfig>
 8005422:	bb58      	cbnz	r0, 800547c <HAL_ADC_MspInit+0x1f4>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8005424:	4a21      	ldr	r2, [pc, #132]	@ (80054ac <HAL_ADC_MspInit+0x224>)
 8005426:	6813      	ldr	r3, [r2, #0]
 8005428:	3301      	adds	r3, #1
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 800542a:	2b01      	cmp	r3, #1
    HAL_RCC_ADC345_CLK_ENABLED++;
 800542c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 800542e:	d109      	bne.n	8005444 <HAL_ADC_MspInit+0x1bc>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8005430:	4b1f      	ldr	r3, [pc, #124]	@ (80054b0 <HAL_ADC_MspInit+0x228>)
 8005432:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005434:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005438:	64da      	str	r2, [r3, #76]	@ 0x4c
 800543a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800543c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005440:	9306      	str	r3, [sp, #24]
 8005442:	9b06      	ldr	r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005444:	4b1a      	ldr	r3, [pc, #104]	@ (80054b0 <HAL_ADC_MspInit+0x228>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005446:	481b      	ldr	r0, [pc, #108]	@ (80054b4 <HAL_ADC_MspInit+0x22c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005448:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800544a:	f042 0202 	orr.w	r2, r2, #2
 800544e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005452:	ed9f 7b11 	vldr	d7, [pc, #68]	@ 8005498 <HAL_ADC_MspInit+0x210>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005456:	f003 0302 	and.w	r3, r3, #2
 800545a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800545c:	a90a      	add	r1, sp, #40	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800545e:	2300      	movs	r3, #0
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005460:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005464:	9a07      	ldr	r2, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005466:	930c      	str	r3, [sp, #48]	@ 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005468:	f001 fd50 	bl	8006f0c <HAL_GPIO_Init>
}
 800546c:	b024      	add	sp, #144	@ 0x90
 800546e:	bd10      	pop	{r4, pc}
      Error_Handler();
 8005470:	f7fd f852 	bl	8002518 <Error_Handler>
 8005474:	e762      	b.n	800533c <HAL_ADC_MspInit+0xb4>
      Error_Handler();
 8005476:	f7fd f84f 	bl	8002518 <Error_Handler>
 800547a:	e7a3      	b.n	80053c4 <HAL_ADC_MspInit+0x13c>
      Error_Handler();
 800547c:	f7fd f84c 	bl	8002518 <Error_Handler>
 8005480:	e7d0      	b.n	8005424 <HAL_ADC_MspInit+0x19c>
      Error_Handler();
 8005482:	f7fd f849 	bl	8002518 <Error_Handler>
 8005486:	e728      	b.n	80052da <HAL_ADC_MspInit+0x52>
 8005488:	00004000 	.word	0x00004000
 800548c:	00000003 	.word	0x00000003
 8005490:	00000003 	.word	0x00000003
 8005494:	00000003 	.word	0x00000003
 8005498:	00002000 	.word	0x00002000
 800549c:	00000003 	.word	0x00000003
 80054a0:	50000100 	.word	0x50000100
 80054a4:	50000400 	.word	0x50000400
 80054a8:	50000500 	.word	0x50000500
 80054ac:	20001c7c 	.word	0x20001c7c
 80054b0:	40021000 	.word	0x40021000
 80054b4:	48000400 	.word	0x48000400
 80054b8:	20001c80 	.word	0x20001c80
 80054bc:	48000800 	.word	0x48000800

080054c0 <HAL_CORDIC_MspInit>:
  * @param hcordic: CORDIC handle pointer
  * @retval None
  */
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
  if(hcordic->Instance==CORDIC)
 80054c0:	4b09      	ldr	r3, [pc, #36]	@ (80054e8 <HAL_CORDIC_MspInit+0x28>)
 80054c2:	6802      	ldr	r2, [r0, #0]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d000      	beq.n	80054ca <HAL_CORDIC_MspInit+0xa>
 80054c8:	4770      	bx	lr
  {
    /* USER CODE BEGIN CORDIC_MspInit 0 */

    /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80054ca:	f8d3 2448 	ldr.w	r2, [r3, #1096]	@ 0x448
 80054ce:	f042 0208 	orr.w	r2, r2, #8
{
 80054d2:	b082      	sub	sp, #8
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80054d4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80054d8:	649a      	str	r2, [r3, #72]	@ 0x48
 80054da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054dc:	f003 0308 	and.w	r3, r3, #8
 80054e0:	9301      	str	r3, [sp, #4]
 80054e2:	9b01      	ldr	r3, [sp, #4]

    /* USER CODE END CORDIC_MspInit 1 */

  }

}
 80054e4:	b002      	add	sp, #8
 80054e6:	4770      	bx	lr
 80054e8:	40020c00 	.word	0x40020c00
 80054ec:	00000000 	.word	0x00000000

080054f0 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80054f0:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_pwm->Instance==TIM1)
 80054f2:	4a1b      	ldr	r2, [pc, #108]	@ (8005560 <HAL_TIM_PWM_MspInit+0x70>)
 80054f4:	6801      	ldr	r1, [r0, #0]
{
 80054f6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054f8:	2300      	movs	r3, #0
  if(htim_pwm->Instance==TIM1)
 80054fa:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054fc:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005500:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8005504:	9306      	str	r3, [sp, #24]
  if(htim_pwm->Instance==TIM1)
 8005506:	d001      	beq.n	800550c <HAL_TIM_PWM_MspInit+0x1c>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8005508:	b008      	add	sp, #32
 800550a:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 800550c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005510:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Pin = M1_DP_Pin;
 8005514:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8005558 <HAL_TIM_PWM_MspInit+0x68>
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005518:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800551a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800551e:	661a      	str	r2, [r3, #96]	@ 0x60
 8005520:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005522:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005526:	9200      	str	r2, [sp, #0]
 8005528:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800552a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800552c:	f042 0201 	orr.w	r2, r2, #1
 8005530:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005532:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005534:	f003 0301 	and.w	r3, r3, #1
 8005538:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800553a:	2201      	movs	r2, #1
    GPIO_InitStruct.Alternate = GPIO_AF12_TIM1_COMP1;
 800553c:	230c      	movs	r3, #12
    HAL_GPIO_Init(M1_DP_GPIO_Port, &GPIO_InitStruct);
 800553e:	a902      	add	r1, sp, #8
 8005540:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_DP_Pin;
 8005544:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005548:	9c01      	ldr	r4, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800554a:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_TIM1_COMP1;
 800554c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(M1_DP_GPIO_Port, &GPIO_InitStruct);
 800554e:	f001 fcdd 	bl	8006f0c <HAL_GPIO_Init>
}
 8005552:	b008      	add	sp, #32
 8005554:	bd10      	pop	{r4, pc}
 8005556:	bf00      	nop
 8005558:	00000800 	.word	0x00000800
 800555c:	00000012 	.word	0x00000012
 8005560:	40012c00 	.word	0x40012c00

08005564 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005564:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM2)
 8005566:	6803      	ldr	r3, [r0, #0]
{
 8005568:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800556a:	2400      	movs	r4, #0
  if(htim_base->Instance==TIM2)
 800556c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005570:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8005574:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8005578:	9408      	str	r4, [sp, #32]
  if(htim_base->Instance==TIM2)
 800557a:	d001      	beq.n	8005580 <HAL_TIM_Base_MspInit+0x1c>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 800557c:	b00a      	add	sp, #40	@ 0x28
 800557e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005580:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005584:	2502      	movs	r5, #2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005586:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005588:	4819      	ldr	r0, [pc, #100]	@ (80055f0 <HAL_TIM_Base_MspInit+0x8c>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 800558a:	f042 0201 	orr.w	r2, r2, #1
 800558e:	659a      	str	r2, [r3, #88]	@ 0x58
 8005590:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005592:	f002 0201 	and.w	r2, r2, #1
 8005596:	9201      	str	r2, [sp, #4]
 8005598:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800559a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800559c:	f042 0202 	orr.w	r2, r2, #2
 80055a0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80055a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80055a4:	f002 0202 	and.w	r2, r2, #2
 80055a8:	9202      	str	r2, [sp, #8]
 80055aa:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055ac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80055ae:	f042 0201 	orr.w	r2, r2, #1
 80055b2:	64da      	str	r2, [r3, #76]	@ 0x4c
 80055b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055b6:	f003 0301 	and.w	r3, r3, #1
 80055ba:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_HALL_H3_Pin|M1_HALL_H2_Pin;
 80055bc:	f44f 6281 	mov.w	r2, #1032	@ 0x408
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80055c0:	2601      	movs	r6, #1
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055c2:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_HALL_H3_Pin|M1_HALL_H2_Pin;
 80055c4:	2302      	movs	r3, #2
 80055c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80055ca:	e9cd 5607 	strd	r5, r6, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055ce:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055d0:	f001 fc9c 	bl	8006f0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_HALL_H1_Pin;
 80055d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
    HAL_GPIO_Init(M1_HALL_H1_GPIO_Port, &GPIO_InitStruct);
 80055d8:	a904      	add	r1, sp, #16
 80055da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055de:	e9cd 5405 	strd	r5, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80055e2:	e9cd 5607 	strd	r5, r6, [sp, #28]
    GPIO_InitStruct.Pin = M1_HALL_H1_Pin;
 80055e6:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(M1_HALL_H1_GPIO_Port, &GPIO_InitStruct);
 80055e8:	f001 fc90 	bl	8006f0c <HAL_GPIO_Init>
}
 80055ec:	b00a      	add	sp, #40	@ 0x28
 80055ee:	bd70      	pop	{r4, r5, r6, pc}
 80055f0:	48000400 	.word	0x48000400

080055f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80055f4:	b5d0      	push	{r4, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 80055f6:	4a20      	ldr	r2, [pc, #128]	@ (8005678 <HAL_TIM_MspPostInit+0x84>)
 80055f8:	6801      	ldr	r1, [r0, #0]
{
 80055fa:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055fc:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 80055fe:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005600:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005604:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8005608:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM1)
 800560a:	d001      	beq.n	8005610 <HAL_TIM_MspPostInit+0x1c>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800560c:	b008      	add	sp, #32
 800560e:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005610:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005614:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8005618:	f44f 60f0 	mov.w	r0, #1920	@ 0x780
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800561c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800561e:	f042 0201 	orr.w	r2, r2, #1
 8005622:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005624:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005626:	f002 0201 	and.w	r2, r2, #1
 800562a:	9200      	str	r2, [sp, #0]
 800562c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800562e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005630:	f042 0202 	orr.w	r2, r2, #2
 8005634:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005636:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8005638:	2102      	movs	r1, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800563a:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 800563e:	e9cd 0102 	strd	r0, r1, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005642:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8005644:	2602      	movs	r6, #2
 8005646:	2702      	movs	r7, #2
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8005648:	2406      	movs	r4, #6
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800564a:	a902      	add	r1, sp, #8
 800564c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005650:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8005652:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8005654:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005658:	f001 fc58 	bl	8006f0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 800565c:	2203      	movs	r2, #3
 800565e:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005660:	4806      	ldr	r0, [pc, #24]	@ (800567c <HAL_TIM_MspPostInit+0x88>)
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8005662:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005664:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8005666:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800566a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800566e:	f001 fc4d 	bl	8006f0c <HAL_GPIO_Init>
}
 8005672:	b008      	add	sp, #32
 8005674:	bdd0      	pop	{r4, r6, r7, pc}
 8005676:	bf00      	nop
 8005678:	40012c00 	.word	0x40012c00
 800567c:	48000400 	.word	0x48000400

08005680 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005680:	b570      	push	{r4, r5, r6, lr}
 8005682:	4604      	mov	r4, r0
 8005684:	b09c      	sub	sp, #112	@ 0x70
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005686:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005688:	2254      	movs	r2, #84	@ 0x54
 800568a:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800568c:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8005690:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8005694:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005696:	f005 fccb 	bl	800b030 <memset>
  if(huart->Instance==USART2)
 800569a:	4b37      	ldr	r3, [pc, #220]	@ (8005778 <HAL_UART_MspInit+0xf8>)
 800569c:	6822      	ldr	r2, [r4, #0]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d001      	beq.n	80056a6 <HAL_UART_MspInit+0x26>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80056a2:	b01c      	add	sp, #112	@ 0x70
 80056a4:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80056a6:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80056a8:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80056aa:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80056ac:	f002 fa20 	bl	8007af0 <HAL_RCCEx_PeriphCLKConfig>
 80056b0:	2800      	cmp	r0, #0
 80056b2:	d14d      	bne.n	8005750 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80056b4:	4b31      	ldr	r3, [pc, #196]	@ (800577c <HAL_UART_MspInit+0xfc>)
    hdma_usart2_rx.Instance = DMA1_Channel1;
 80056b6:	4e32      	ldr	r6, [pc, #200]	@ (8005780 <HAL_UART_MspInit+0x100>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80056b8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80056ba:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80056be:	659a      	str	r2, [r3, #88]	@ 0x58
 80056c0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80056c2:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 80056c6:	9200      	str	r2, [sp, #0]
 80056c8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80056ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 80056cc:	ed9f 7b26 	vldr	d7, [pc, #152]	@ 8005768 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80056d0:	f042 0201 	orr.w	r2, r2, #1
 80056d4:	64da      	str	r2, [r3, #76]	@ 0x4c
 80056d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 80056d8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80056dc:	ed9f 7b24 	vldr	d7, [pc, #144]	@ 8005770 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80056e0:	f003 0301 	and.w	r3, r3, #1
 80056e4:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056e6:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80056e8:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80056ee:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80056f0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 80056f2:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056f6:	f001 fc09 	bl	8006f0c <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80056fa:	4922      	ldr	r1, [pc, #136]	@ (8005784 <HAL_UART_MspInit+0x104>)
 80056fc:	221a      	movs	r2, #26
 80056fe:	2300      	movs	r3, #0
 8005700:	e9c6 1200 	strd	r1, r2, [r6]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005704:	4630      	mov	r0, r6
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8005706:	2280      	movs	r2, #128	@ 0x80
 8005708:	e9c6 3302 	strd	r3, r3, [r6, #8]
 800570c:	e9c6 2304 	strd	r2, r3, [r6, #16]
 8005710:	e9c6 3306 	strd	r3, r3, [r6, #24]
 8005714:	6233      	str	r3, [r6, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005716:	f001 fac1 	bl	8006c9c <HAL_DMA_Init>
 800571a:	b9f8      	cbnz	r0, 800575c <HAL_UART_MspInit+0xdc>
    hdma_usart2_tx.Instance = DMA1_Channel2;
 800571c:	4d1a      	ldr	r5, [pc, #104]	@ (8005788 <HAL_UART_MspInit+0x108>)
 800571e:	491b      	ldr	r1, [pc, #108]	@ (800578c <HAL_UART_MspInit+0x10c>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8005720:	f8c4 6080 	str.w	r6, [r4, #128]	@ 0x80
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8005724:	221b      	movs	r2, #27
 8005726:	2300      	movs	r3, #0
 8005728:	e9c5 1200 	strd	r1, r2, [r5]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800572c:	4628      	mov	r0, r5
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800572e:	2110      	movs	r1, #16
 8005730:	2280      	movs	r2, #128	@ 0x80
 8005732:	e9c5 1302 	strd	r1, r3, [r5, #8]
 8005736:	e9c5 3305 	strd	r3, r3, [r5, #20]
 800573a:	e9c5 3307 	strd	r3, r3, [r5, #28]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800573e:	62b4      	str	r4, [r6, #40]	@ 0x28
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8005740:	612a      	str	r2, [r5, #16]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005742:	f001 faab 	bl	8006c9c <HAL_DMA_Init>
 8005746:	b930      	cbnz	r0, 8005756 <HAL_UART_MspInit+0xd6>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8005748:	67e5      	str	r5, [r4, #124]	@ 0x7c
 800574a:	62ac      	str	r4, [r5, #40]	@ 0x28
}
 800574c:	b01c      	add	sp, #112	@ 0x70
 800574e:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8005750:	f7fc fee2 	bl	8002518 <Error_Handler>
 8005754:	e7ae      	b.n	80056b4 <HAL_UART_MspInit+0x34>
      Error_Handler();
 8005756:	f7fc fedf 	bl	8002518 <Error_Handler>
 800575a:	e7f5      	b.n	8005748 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 800575c:	f7fc fedc 	bl	8002518 <Error_Handler>
 8005760:	e7dc      	b.n	800571c <HAL_UART_MspInit+0x9c>
 8005762:	bf00      	nop
 8005764:	f3af 8000 	nop.w
 8005768:	0000000c 	.word	0x0000000c
 800576c:	00000002 	.word	0x00000002
	...
 8005778:	40004400 	.word	0x40004400
 800577c:	40021000 	.word	0x40021000
 8005780:	200005c4 	.word	0x200005c4
 8005784:	40020008 	.word	0x40020008
 8005788:	20000564 	.word	0x20000564
 800578c:	4002001c 	.word	0x4002001c

08005790 <DMA1_Channel1_IRQHandler>:
/* USER CODE BEGIN 1 */

void DMA1_Channel1_IRQHandler(void)
{

  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005790:	4801      	ldr	r0, [pc, #4]	@ (8005798 <DMA1_Channel1_IRQHandler+0x8>)
 8005792:	f001 bb6d 	b.w	8006e70 <HAL_DMA_IRQHandler>
 8005796:	bf00      	nop
 8005798:	200005c4 	.word	0x200005c4

0800579c <ADC1_2_IRQHandler>:
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 800579c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80057a0:	2240      	movs	r2, #64	@ 0x40
 80057a2:	601a      	str	r2, [r3, #0]

    /* Clear Flags M1 */
    LL_ADC_ClearFlag_JEOS(ADC1);

  /* Highfrequency task */
  (void)TSK_HighFrequencyTask();
 80057a4:	f7fd ba46 	b.w	8002c34 <TSK_HighFrequencyTask>

080057a8 <TIM2_IRQHandler>:
/**
  * @brief  This function handles TIMx global interrupt request for M1 Speed Sensor.
  * @param  None
  */
void SPD_TIM_M1_IRQHandler(void)
{
 80057a8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 0 */

  /* USER CODE END SPD_TIM_M1_IRQn 0 */

  /* HALL Timer Update IT always enabled, no need to check enable UPDATE state */
  if (0U == LL_TIM_IsActiveFlag_UPDATE(HALL_M1.TIMx))
 80057aa:	4c0c      	ldr	r4, [pc, #48]	@ (80057dc <TIM2_IRQHandler+0x34>)
 80057ac:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80057ae:	691a      	ldr	r2, [r3, #16]
 80057b0:	07d1      	lsls	r1, r2, #31
 80057b2:	d506      	bpl.n	80057c2 <TIM2_IRQHandler+0x1a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80057b4:	f06f 0201 	mvn.w	r2, #1
 80057b8:	611a      	str	r2, [r3, #16]
    /* Nothing to do */
  }
  else
  {
    LL_TIM_ClearFlag_UPDATE(HALL_M1.TIMx);
    (void)HALL_TIMx_UP_IRQHandler(&HALL_M1);
 80057ba:	4620      	mov	r0, r4
 80057bc:	f7fc f906 	bl	80019cc <HALL_TIMx_UP_IRQHandler>

    /* USER CODE END M1 HALL_Update   */
  }

  /* HALL Timer CC1 IT always enabled, no need to check enable CC1 state */
  if (LL_TIM_IsActiveFlag_CC1 (HALL_M1.TIMx) != 0U)
 80057c0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 80057c2:	691a      	ldr	r2, [r3, #16]
 80057c4:	0792      	lsls	r2, r2, #30
 80057c6:	d507      	bpl.n	80057d8 <TIM2_IRQHandler+0x30>
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80057c8:	f06f 0202 	mvn.w	r2, #2
  }

  /* USER CODE BEGIN SPD_TIM_M1_IRQn 1 */

  /* USER CODE END SPD_TIM_M1_IRQn 1 */
}
 80057cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    (void)HALL_TIMx_CC_IRQHandler(&HALL_M1);
 80057d0:	4802      	ldr	r0, [pc, #8]	@ (80057dc <TIM2_IRQHandler+0x34>)
 80057d2:	611a      	str	r2, [r3, #16]
 80057d4:	f7fb bf60 	b.w	8001698 <HALL_TIMx_CC_IRQHandler>
}
 80057d8:	bd10      	pop	{r4, pc}
 80057da:	bf00      	nop
 80057dc:	20000068 	.word	0x20000068

080057e0 <TIM1_UP_TIM16_IRQHandler>:
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80057e0:	4b03      	ldr	r3, [pc, #12]	@ (80057f0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

 /* USER CODE END  TIMx_UP_M1_IRQn 0 */

  LL_TIM_ClearFlag_UPDATE(TIM1);
  (void)R3_2_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 80057e2:	4804      	ldr	r0, [pc, #16]	@ (80057f4 <TIM1_UP_TIM16_IRQHandler+0x14>)
 80057e4:	f06f 0201 	mvn.w	r2, #1
 80057e8:	611a      	str	r2, [r3, #16]
 80057ea:	f004 be9d 	b.w	800a528 <R3_2_TIMx_UP_IRQHandler>
 80057ee:	bf00      	nop
 80057f0:	40012c00 	.word	0x40012c00
 80057f4:	2000025c 	.word	0x2000025c

080057f8 <TIM1_BRK_TIM15_IRQHandler>:
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 80057f8:	490c      	ldr	r1, [pc, #48]	@ (800582c <TIM1_BRK_TIM15_IRQHandler+0x34>)

 /* USER CODE END  TIMx_UP_M1_IRQn 1 */
}

void TIMx_BRK_M1_IRQHandler(void)
{
 80057fa:	b508      	push	{r3, lr}
 80057fc:	690b      	ldr	r3, [r1, #16]
 80057fe:	0618      	lsls	r0, r3, #24
 8005800:	d505      	bpl.n	800580e <TIM1_BRK_TIM15_IRQHandler+0x16>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8005802:	f06f 0380 	mvn.w	r3, #128	@ 0x80
    /* Nothing to do */
  }
  else
  {
    LL_TIM_ClearFlag_BRK(TIM1);
    PWMC_OVP_Handler(&PWM_Handle_M1._Super, TIM1);
 8005806:	480a      	ldr	r0, [pc, #40]	@ (8005830 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8005808:	610b      	str	r3, [r1, #16]
 800580a:	f7fe f973 	bl	8003af4 <PWMC_OVP_Handler>
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 800580e:	4b07      	ldr	r3, [pc, #28]	@ (800582c <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8005810:	691a      	ldr	r2, [r3, #16]
 8005812:	05d2      	lsls	r2, r2, #23
 8005814:	d505      	bpl.n	8005822 <TIM1_BRK_TIM15_IRQHandler+0x2a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 8005816:	f46f 7280 	mvn.w	r2, #256	@ 0x100
    /* Nothing to do */
  }
  else
  {
    LL_TIM_ClearFlag_BRK2(TIM1);
    PWMC_DP_Handler(&PWM_Handle_M1._Super);
 800581a:	4805      	ldr	r0, [pc, #20]	@ (8005830 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 800581c:	611a      	str	r2, [r3, #16]
 800581e:	f7fe f949 	bl	8003ab4 <PWMC_DP_Handler>
  MC_RunMotorControlTasks();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 8005822:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_RunMotorControlTasks();
 8005826:	f7fd ba8d 	b.w	8002d44 <MC_RunMotorControlTasks>
 800582a:	bf00      	nop
 800582c:	40012c00 	.word	0x40012c00
 8005830:	2000025c 	.word	0x2000025c

08005834 <UASPEP_INIT>:
  * @brief  Initialization of the Hardware used for data transmission and reception.
  *
  * @param  pHandle Handler of the current instance of the UASPEP component
  */
void UASPEP_INIT(void *pHWHandle)
{
 8005834:	b430      	push	{r4, r5}
#endif
    /* DMA interrupt not used for all families */
    /* Enable DMA end of transfer on UART RX channel completion */
    /* LL_DMA_EnableIT_TC(pHandle->rxDMA, pHandle->rxChannel) */
    /* Enable Error interrupt (EIE) to unmask Overrun interrupt */
    LL_USART_EnableIT_ERROR(pHandle->USARTx);
 8005836:	6802      	ldr	r2, [r0, #0]
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
 8005838:	f102 0108 	add.w	r1, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583c:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8005840:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005844:	e841 3400 	strex	r4, r3, [r1]
 8005848:	2c00      	cmp	r4, #0
 800584a:	d1f7      	bne.n	800583c <UASPEP_INIT+0x8>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 800584c:	68c1      	ldr	r1, [r0, #12]
 800584e:	4d19      	ldr	r5, [pc, #100]	@ (80058b4 <UASPEP_INIT+0x80>)
 8005850:	6843      	ldr	r3, [r0, #4]
 8005852:	5c6c      	ldrb	r4, [r5, r1]
 8005854:	4423      	add	r3, r4

    /* Write the USART_RDR register address in the DMA control register to configure it as
     * the source of the transfer */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)&pHandle->USARTx->RDR);
 8005856:	f102 0124 	add.w	r1, r2, #36	@ 0x24
 800585a:	6099      	str	r1, [r3, #8]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 800585c:	2340      	movs	r3, #64	@ 0x40
 800585e:	6213      	str	r3, [r2, #32]
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
 8005860:	f102 0108 	add.w	r1, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005864:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8005868:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586c:	e841 3400 	strex	r4, r3, [r1]
 8005870:	2c00      	cmp	r4, #0
 8005872:	d1f7      	bne.n	8005864 <UASPEP_INIT+0x30>
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8005874:	2340      	movs	r3, #64	@ 0x40
 8005876:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005878:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 800587c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005880:	e842 3100 	strex	r1, r3, [r2]
 8005884:	2900      	cmp	r1, #0
 8005886:	d1f7      	bne.n	8005878 <UASPEP_INIT+0x44>
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
 8005888:	f102 0108 	add.w	r1, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588c:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8005890:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005894:	e841 3400 	strex	r4, r3, [r1]
 8005898:	2c00      	cmp	r4, #0
 800589a:	d1f7      	bne.n	800588c <UASPEP_INIT+0x58>
 800589c:	6901      	ldr	r1, [r0, #16]
 800589e:	6883      	ldr	r3, [r0, #8]
 80058a0:	5c69      	ldrb	r1, [r5, r1]
 80058a2:	440b      	add	r3, r1
    LL_DMA_SetPeriphAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)&pHandle->USARTx->TDR);
 80058a4:	f102 0028 	add.w	r0, r2, #40	@ 0x28
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 80058a8:	2140      	movs	r1, #64	@ 0x40
 80058aa:	6098      	str	r0, [r3, #8]
}
 80058ac:	bc30      	pop	{r4, r5}
 80058ae:	6211      	str	r1, [r2, #32]
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop
 80058b4:	0800b32c 	.word	0x0800b32c

080058b8 <UASPEP_CFG_TRANSMISSION>:
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 80058b8:	6903      	ldr	r3, [r0, #16]
 80058ba:	6880      	ldr	r0, [r0, #8]
  * @param  pHWHandle Hardware components chosen for communication
  * @param  data Data to be transmitted to controller
  * @param  length Length of the data to be transmitted
  */
void UASPEP_CFG_TRANSMISSION(void *pHWHandle, void *data, uint16_t length)
{
 80058bc:	b410      	push	{r4}
 80058be:	4c0b      	ldr	r4, [pc, #44]	@ (80058ec <UASPEP_CFG_TRANSMISSION+0x34>)
 80058c0:	5ce3      	ldrb	r3, [r4, r3]
 80058c2:	58c4      	ldr	r4, [r0, r3]
                    DMA_CCR_EN) == (DMA_CCR_EN)) ? 1UL : 0UL);
 80058c4:	07e4      	lsls	r4, r4, #31
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 80058c6:	eb00 0c03 	add.w	ip, r0, r3
                    DMA_CCR_EN) == (DMA_CCR_EN)) ? 1UL : 0UL);
 80058ca:	d40c      	bmi.n	80058e6 <UASPEP_CFG_TRANSMISSION+0x2e>
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 80058cc:	f8cc 100c 	str.w	r1, [ip, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 80058d0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80058d4:	f36f 010f 	bfc	r1, #0, #16
 80058d8:	430a      	orrs	r2, r1
 80058da:	f8cc 2004 	str.w	r2, [ip, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 80058de:	58c2      	ldr	r2, [r0, r3]
 80058e0:	f042 0201 	orr.w	r2, r2, #1
 80058e4:	50c2      	str	r2, [r0, r3]
  }
  else
  {
    /* Nothing to do */
  }
}
 80058e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058ea:	4770      	bx	lr
 80058ec:	0800b32c 	.word	0x0800b32c

080058f0 <UASPEP_CFG_RECEPTION>:
  * @param  pHWHandle Hardware components chosen for communication
  * @param  buffer Buffer which will receive the communicated data
  * @param  length Length of the received data
  */
void UASPEP_CFG_RECEPTION(void *pHWHandle, void* buffer, uint16_t length)
{
 80058f0:	b410      	push	{r4}
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 80058f2:	68c3      	ldr	r3, [r0, #12]
 80058f4:	4c0c      	ldr	r4, [pc, #48]	@ (8005928 <UASPEP_CFG_RECEPTION+0x38>)
 80058f6:	6840      	ldr	r0, [r0, #4]
 80058f8:	5ce3      	ldrb	r3, [r4, r3]
 80058fa:	58c4      	ldr	r4, [r0, r3]
 80058fc:	eb00 0c03 	add.w	ip, r0, r3
 8005900:	f024 0401 	bic.w	r4, r4, #1
 8005904:	50c4      	str	r4, [r0, r3]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 8005906:	f8cc 100c 	str.w	r1, [ip, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 800590a:	f8dc 1004 	ldr.w	r1, [ip, #4]
  //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
  LL_DMA_SetMemoryAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)buffer);
  LL_DMA_SetDataLength(pHandle->rxDMA, pHandle->rxChannel, length);

  LL_DMA_EnableChannel(pHandle->rxDMA, pHandle->rxChannel);
}
 800590e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005912:	f36f 010f 	bfc	r1, #0, #16
 8005916:	4311      	orrs	r1, r2
 8005918:	f8cc 1004 	str.w	r1, [ip, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 800591c:	58c2      	ldr	r2, [r0, r3]
 800591e:	f042 0201 	orr.w	r2, r2, #1
 8005922:	50c2      	str	r2, [r0, r3]
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	0800b32c 	.word	0x0800b32c

0800592c <UASPEP_IDLE_ENABLE>:
  * @param  pHandle Handler of the current instance of the UASPEP component
  */
void UASPEP_IDLE_ENABLE(void *pHWHandle)
{
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  LL_USART_ClearFlag_IDLE(pHandle->USARTx);
 800592c:	6802      	ldr	r2, [r0, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 800592e:	2310      	movs	r3, #16
 8005930:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005932:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8005936:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593a:	e842 3100 	strex	r1, r3, [r2]
 800593e:	2900      	cmp	r1, #0
 8005940:	d1f7      	bne.n	8005932 <UASPEP_IDLE_ENABLE+0x6>
  LL_USART_EnableIT_IDLE(pHandle->USARTx);
}
 8005942:	4770      	bx	lr

08005944 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005944:	4a03      	ldr	r2, [pc, #12]	@ (8005954 <SystemInit+0x10>)
 8005946:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800594a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800594e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005952:	4770      	bx	lr
 8005954:	e000ed00 	.word	0xe000ed00

08005958 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005958:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 800595a:	4b0f      	ldr	r3, [pc, #60]	@ (8005998 <HAL_InitTick+0x40>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	b90b      	cbnz	r3, 8005964 <HAL_InitTick+0xc>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8005960:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 8005962:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005964:	490d      	ldr	r1, [pc, #52]	@ (800599c <HAL_InitTick+0x44>)
 8005966:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800596a:	4605      	mov	r5, r0
 800596c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005970:	6808      	ldr	r0, [r1, #0]
 8005972:	fbb0 f0f3 	udiv	r0, r0, r3
 8005976:	f001 f971 	bl	8006c5c <HAL_SYSTICK_Config>
 800597a:	4604      	mov	r4, r0
 800597c:	2800      	cmp	r0, #0
 800597e:	d1ef      	bne.n	8005960 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005980:	2d0f      	cmp	r5, #15
 8005982:	d8ed      	bhi.n	8005960 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005984:	4602      	mov	r2, r0
 8005986:	4629      	mov	r1, r5
 8005988:	f04f 30ff 	mov.w	r0, #4294967295
 800598c:	f001 f90a 	bl	8006ba4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005990:	4b03      	ldr	r3, [pc, #12]	@ (80059a0 <HAL_InitTick+0x48>)
 8005992:	4620      	mov	r0, r4
 8005994:	601d      	str	r5, [r3, #0]
}
 8005996:	bd38      	pop	{r3, r4, r5, pc}
 8005998:	2000050c 	.word	0x2000050c
 800599c:	20000508 	.word	0x20000508
 80059a0:	20000510 	.word	0x20000510

080059a4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80059a4:	4a0a      	ldr	r2, [pc, #40]	@ (80059d0 <HAL_Init+0x2c>)
 80059a6:	6813      	ldr	r3, [r2, #0]
 80059a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
{
 80059ac:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80059ae:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80059b0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80059b2:	f001 f8e5 	bl	8006b80 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80059b6:	2004      	movs	r0, #4
 80059b8:	f7ff ffce 	bl	8005958 <HAL_InitTick>
 80059bc:	b110      	cbz	r0, 80059c4 <HAL_Init+0x20>
    status = HAL_ERROR;
 80059be:	2401      	movs	r4, #1
}
 80059c0:	4620      	mov	r0, r4
 80059c2:	bd10      	pop	{r4, pc}
 80059c4:	4604      	mov	r4, r0
    HAL_MspInit();
 80059c6:	f7ff fc3d 	bl	8005244 <HAL_MspInit>
}
 80059ca:	4620      	mov	r0, r4
 80059cc:	bd10      	pop	{r4, pc}
 80059ce:	bf00      	nop
 80059d0:	40022000 	.word	0x40022000

080059d4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80059d4:	4a03      	ldr	r2, [pc, #12]	@ (80059e4 <HAL_IncTick+0x10>)
 80059d6:	4904      	ldr	r1, [pc, #16]	@ (80059e8 <HAL_IncTick+0x14>)
 80059d8:	6813      	ldr	r3, [r2, #0]
 80059da:	6809      	ldr	r1, [r1, #0]
 80059dc:	440b      	add	r3, r1
 80059de:	6013      	str	r3, [r2, #0]
}
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	20001c84 	.word	0x20001c84
 80059e8:	2000050c 	.word	0x2000050c

080059ec <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80059ec:	4b01      	ldr	r3, [pc, #4]	@ (80059f4 <HAL_GetTick+0x8>)
 80059ee:	6818      	ldr	r0, [r3, #0]
}
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop
 80059f4:	20001c84 	.word	0x20001c84

080059f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80059f8:	b538      	push	{r3, r4, r5, lr}
 80059fa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80059fc:	f7ff fff6 	bl	80059ec <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005a00:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8005a02:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8005a04:	d002      	beq.n	8005a0c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8005a06:	4b04      	ldr	r3, [pc, #16]	@ (8005a18 <HAL_Delay+0x20>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005a0c:	f7ff ffee 	bl	80059ec <HAL_GetTick>
 8005a10:	1b40      	subs	r0, r0, r5
 8005a12:	42a0      	cmp	r0, r4
 8005a14:	d3fa      	bcc.n	8005a0c <HAL_Delay+0x14>
  {
  }
}
 8005a16:	bd38      	pop	{r3, r4, r5, pc}
 8005a18:	2000050c 	.word	0x2000050c

08005a1c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005a1c:	b530      	push	{r4, r5, lr}
 8005a1e:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8005a20:	2300      	movs	r3, #0
 8005a22:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8005a24:	2800      	cmp	r0, #0
 8005a26:	d05c      	beq.n	8005ae2 <HAL_ADC_Init+0xc6>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005a28:	6dc5      	ldr	r5, [r0, #92]	@ 0x5c
 8005a2a:	4604      	mov	r4, r0
 8005a2c:	2d00      	cmp	r5, #0
 8005a2e:	f000 80c1 	beq.w	8005bb4 <HAL_ADC_Init+0x198>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005a32:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005a34:	6893      	ldr	r3, [r2, #8]
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	d505      	bpl.n	8005a46 <HAL_ADC_Init+0x2a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005a3a:	6893      	ldr	r3, [r2, #8]
 8005a3c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8005a40:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005a44:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005a46:	6893      	ldr	r3, [r2, #8]
 8005a48:	00dd      	lsls	r5, r3, #3
 8005a4a:	d419      	bmi.n	8005a80 <HAL_ADC_Init+0x64>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005a4c:	4b6f      	ldr	r3, [pc, #444]	@ (8005c0c <HAL_ADC_Init+0x1f0>)
 8005a4e:	4870      	ldr	r0, [pc, #448]	@ (8005c10 <HAL_ADC_Init+0x1f4>)
 8005a50:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8005a52:	6891      	ldr	r1, [r2, #8]
 8005a54:	099b      	lsrs	r3, r3, #6
 8005a56:	fba0 0303 	umull	r0, r3, r0, r3
 8005a5a:	f021 4110 	bic.w	r1, r1, #2415919104	@ 0x90000000
 8005a5e:	099b      	lsrs	r3, r3, #6
 8005a60:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8005a64:	3301      	adds	r3, #1
 8005a66:	005b      	lsls	r3, r3, #1
 8005a68:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8005a6c:	6091      	str	r1, [r2, #8]
 8005a6e:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8005a70:	9b01      	ldr	r3, [sp, #4]
 8005a72:	b12b      	cbz	r3, 8005a80 <HAL_ADC_Init+0x64>
    {
      wait_loop_index--;
 8005a74:	9b01      	ldr	r3, [sp, #4]
 8005a76:	3b01      	subs	r3, #1
 8005a78:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8005a7a:	9b01      	ldr	r3, [sp, #4]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d1f9      	bne.n	8005a74 <HAL_ADC_Init+0x58>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005a80:	6893      	ldr	r3, [r2, #8]
 8005a82:	00d8      	lsls	r0, r3, #3
 8005a84:	d430      	bmi.n	8005ae8 <HAL_ADC_Init+0xcc>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a86:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005a88:	f043 0310 	orr.w	r3, r3, #16
 8005a8c:	65e3      	str	r3, [r4, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a8e:	6e23      	ldr	r3, [r4, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8005a90:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a92:	4303      	orrs	r3, r0
 8005a94:	6623      	str	r3, [r4, #96]	@ 0x60
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005a96:	6893      	ldr	r3, [r2, #8]
 8005a98:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005a9c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005a9e:	d11c      	bne.n	8005ada <HAL_ADC_Init+0xbe>
 8005aa0:	06d9      	lsls	r1, r3, #27
 8005aa2:	d41a      	bmi.n	8005ada <HAL_ADC_Init+0xbe>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005aa4:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005aa6:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8005aaa:	f043 0302 	orr.w	r3, r3, #2
 8005aae:	65e3      	str	r3, [r4, #92]	@ 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005ab0:	6893      	ldr	r3, [r2, #8]
 8005ab2:	07db      	lsls	r3, r3, #31
 8005ab4:	d429      	bmi.n	8005b0a <HAL_ADC_Init+0xee>
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005ab6:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8005aba:	d017      	beq.n	8005aec <HAL_ADC_Init+0xd0>
 8005abc:	4b55      	ldr	r3, [pc, #340]	@ (8005c14 <HAL_ADC_Init+0x1f8>)
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d014      	beq.n	8005aec <HAL_ADC_Init+0xd0>
 8005ac2:	4955      	ldr	r1, [pc, #340]	@ (8005c18 <HAL_ADC_Init+0x1fc>)
 8005ac4:	4b55      	ldr	r3, [pc, #340]	@ (8005c1c <HAL_ADC_Init+0x200>)
 8005ac6:	6889      	ldr	r1, [r1, #8]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	430b      	orrs	r3, r1
 8005acc:	4954      	ldr	r1, [pc, #336]	@ (8005c20 <HAL_ADC_Init+0x204>)
 8005ace:	6889      	ldr	r1, [r1, #8]
 8005ad0:	430b      	orrs	r3, r1
 8005ad2:	07d9      	lsls	r1, r3, #31
 8005ad4:	d419      	bmi.n	8005b0a <HAL_ADC_Init+0xee>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005ad6:	4953      	ldr	r1, [pc, #332]	@ (8005c24 <HAL_ADC_Init+0x208>)
 8005ad8:	e011      	b.n	8005afe <HAL_ADC_Init+0xe2>
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ada:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005adc:	f043 0310 	orr.w	r3, r3, #16
 8005ae0:	65e3      	str	r3, [r4, #92]	@ 0x5c
    return HAL_ERROR;
 8005ae2:	2001      	movs	r0, #1
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8005ae4:	b003      	add	sp, #12
 8005ae6:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ae8:	2000      	movs	r0, #0
 8005aea:	e7d4      	b.n	8005a96 <HAL_ADC_Init+0x7a>
 8005aec:	4b49      	ldr	r3, [pc, #292]	@ (8005c14 <HAL_ADC_Init+0x1f8>)
 8005aee:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
 8005af2:	6889      	ldr	r1, [r1, #8]
 8005af4:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005af6:	430b      	orrs	r3, r1
 8005af8:	07dd      	lsls	r5, r3, #31
 8005afa:	d406      	bmi.n	8005b0a <HAL_ADC_Init+0xee>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005afc:	494a      	ldr	r1, [pc, #296]	@ (8005c28 <HAL_ADC_Init+0x20c>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005afe:	688b      	ldr	r3, [r1, #8]
 8005b00:	6865      	ldr	r5, [r4, #4]
 8005b02:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8005b06:	432b      	orrs	r3, r5
 8005b08:	608b      	str	r3, [r1, #8]
                 hadc->Init.DataAlign                                                   |
 8005b0a:	68e5      	ldr	r5, [r4, #12]
 8005b0c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005b0e:	f894 1024 	ldrb.w	r1, [r4, #36]	@ 0x24
                 hadc->Init.DataAlign                                                   |
 8005b12:	432b      	orrs	r3, r5
 8005b14:	68a5      	ldr	r5, [r4, #8]
 8005b16:	432b      	orrs	r3, r5
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005b18:	7f65      	ldrb	r5, [r4, #29]
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005b1a:	2901      	cmp	r1, #1
                 hadc->Init.DataAlign                                                   |
 8005b1c:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005b20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005b24:	d04c      	beq.n	8005bc0 <HAL_ADC_Init+0x1a4>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005b26:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005b28:	b121      	cbz	r1, 8005b34 <HAL_ADC_Init+0x118>
                   | hadc->Init.ExternalTrigConvEdge
 8005b2a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005b2c:	f401 7178 	and.w	r1, r1, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8005b30:	4329      	orrs	r1, r5
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005b32:	430b      	orrs	r3, r1
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8005b34:	68d5      	ldr	r5, [r2, #12]
 8005b36:	493d      	ldr	r1, [pc, #244]	@ (8005c2c <HAL_ADC_Init+0x210>)
 8005b38:	4029      	ands	r1, r5
 8005b3a:	4319      	orrs	r1, r3
 8005b3c:	60d1      	str	r1, [r2, #12]
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005b3e:	6913      	ldr	r3, [r2, #16]
 8005b40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005b42:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8005b46:	430b      	orrs	r3, r1
 8005b48:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005b4a:	6893      	ldr	r3, [r2, #8]
 8005b4c:	071b      	lsls	r3, r3, #28
 8005b4e:	d422      	bmi.n	8005b96 <HAL_ADC_Init+0x17a>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005b50:	68d1      	ldr	r1, [r2, #12]
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005b52:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005b56:	7f25      	ldrb	r5, [r4, #28]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005b58:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005b5c:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005b5e:	f021 0102 	bic.w	r1, r1, #2
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005b62:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005b66:	430b      	orrs	r3, r1
      if (hadc->Init.GainCompensation != 0UL)
 8005b68:	6921      	ldr	r1, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005b6a:	60d3      	str	r3, [r2, #12]
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005b6c:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 8005b6e:	2900      	cmp	r1, #0
 8005b70:	d033      	beq.n	8005bda <HAL_ADC_Init+0x1be>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005b72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b76:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8005b78:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8005b7c:	f36f 030d 	bfc	r3, #0, #14
 8005b80:	430b      	orrs	r3, r1
 8005b82:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      if (hadc->Init.OversamplingMode == ENABLE)
 8005b86:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d02f      	beq.n	8005bee <HAL_ADC_Init+0x1d2>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005b8e:	6913      	ldr	r3, [r2, #16]
 8005b90:	f023 0301 	bic.w	r3, r3, #1
 8005b94:	6113      	str	r3, [r2, #16]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005b96:	6963      	ldr	r3, [r4, #20]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d016      	beq.n	8005bca <HAL_ADC_Init+0x1ae>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005b9c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8005b9e:	f023 030f 	bic.w	r3, r3, #15
 8005ba2:	6313      	str	r3, [r2, #48]	@ 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005ba4:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005ba6:	f023 0303 	bic.w	r3, r3, #3
 8005baa:	f043 0301 	orr.w	r3, r3, #1
 8005bae:	65e3      	str	r3, [r4, #92]	@ 0x5c
}
 8005bb0:	b003      	add	sp, #12
 8005bb2:	bd30      	pop	{r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 8005bb4:	f7ff fb68 	bl	8005288 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8005bb8:	6625      	str	r5, [r4, #96]	@ 0x60
    hadc->Lock = HAL_UNLOCKED;
 8005bba:	f884 5058 	strb.w	r5, [r4, #88]	@ 0x58
 8005bbe:	e738      	b.n	8005a32 <HAL_ADC_Init+0x16>
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005bc0:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8005bc2:	3901      	subs	r1, #1
 8005bc4:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8005bc8:	e7ad      	b.n	8005b26 <HAL_ADC_Init+0x10a>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005bca:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8005bcc:	6a23      	ldr	r3, [r4, #32]
 8005bce:	f021 010f 	bic.w	r1, r1, #15
 8005bd2:	3b01      	subs	r3, #1
 8005bd4:	430b      	orrs	r3, r1
 8005bd6:	6313      	str	r3, [r2, #48]	@ 0x30
 8005bd8:	e7e4      	b.n	8005ba4 <HAL_ADC_Init+0x188>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005bda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bde:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005be0:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8005be4:	f36f 030d 	bfc	r3, #0, #14
 8005be8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8005bec:	e7cb      	b.n	8005b86 <HAL_ADC_Init+0x16a>
        MODIFY_REG(hadc->Instance->CFGR2,
 8005bee:	6911      	ldr	r1, [r2, #16]
 8005bf0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8005bf2:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 8005bf4:	f36f 018a 	bfc	r1, #2, #9
 8005bf8:	432b      	orrs	r3, r5
 8005bfa:	430b      	orrs	r3, r1
 8005bfc:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8005bfe:	430b      	orrs	r3, r1
 8005c00:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8005c02:	430b      	orrs	r3, r1
 8005c04:	f043 0301 	orr.w	r3, r3, #1
 8005c08:	6113      	str	r3, [r2, #16]
 8005c0a:	e7c4      	b.n	8005b96 <HAL_ADC_Init+0x17a>
 8005c0c:	20000508 	.word	0x20000508
 8005c10:	053e2d63 	.word	0x053e2d63
 8005c14:	50000100 	.word	0x50000100
 8005c18:	50000400 	.word	0x50000400
 8005c1c:	50000500 	.word	0x50000500
 8005c20:	50000600 	.word	0x50000600
 8005c24:	50000700 	.word	0x50000700
 8005c28:	50000300 	.word	0x50000300
 8005c2c:	fff04007 	.word	0xfff04007

08005c30 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8005c30:	6803      	ldr	r3, [r0, #0]
 8005c32:	6c18      	ldr	r0, [r3, #64]	@ 0x40
}
 8005c34:	4770      	bx	lr
 8005c36:	bf00      	nop

08005c38 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005c3c:	f890 2058 	ldrb.w	r2, [r0, #88]	@ 0x58
{
 8005c40:	b082      	sub	sp, #8
 8005c42:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8005c44:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 8005c46:	f04f 0000 	mov.w	r0, #0
 8005c4a:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8005c4c:	f000 8168 	beq.w	8005f20 <HAL_ADC_ConfigChannel+0x2e8>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005c50:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8005c52:	2001      	movs	r0, #1
 8005c54:	f883 0058 	strb.w	r0, [r3, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005c58:	6894      	ldr	r4, [r2, #8]
 8005c5a:	0767      	lsls	r7, r4, #29
 8005c5c:	d467      	bmi.n	8005d2e <HAL_ADC_ConfigChannel+0xf6>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8005c5e:	6848      	ldr	r0, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8005c60:	ea4f 1e90 	mov.w	lr, r0, lsr #6
  MODIFY_REG(*preg,
 8005c64:	f000 0c1f 	and.w	ip, r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8005c68:	f00e 0e0c 	and.w	lr, lr, #12
  MODIFY_REG(*preg,
 8005c6c:	6808      	ldr	r0, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8005c6e:	f102 0430 	add.w	r4, r2, #48	@ 0x30
  MODIFY_REG(*preg,
 8005c72:	261f      	movs	r6, #31
 8005c74:	f854 500e 	ldr.w	r5, [r4, lr]
 8005c78:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8005c7c:	fa00 f00c 	lsl.w	r0, r0, ip
 8005c80:	fa06 fc0c 	lsl.w	ip, r6, ip
 8005c84:	ea25 0c0c 	bic.w	ip, r5, ip
 8005c88:	ea40 000c 	orr.w	r0, r0, ip
 8005c8c:	f844 000e 	str.w	r0, [r4, lr]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005c90:	6890      	ldr	r0, [r2, #8]
 8005c92:	0746      	lsls	r6, r0, #29
 8005c94:	d555      	bpl.n	8005d42 <HAL_ADC_ConfigChannel+0x10a>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005c96:	6890      	ldr	r0, [r2, #8]
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005c98:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005c9a:	6894      	ldr	r4, [r2, #8]
 8005c9c:	07e4      	lsls	r4, r4, #31
 8005c9e:	d412      	bmi.n	8005cc6 <HAL_ADC_ConfigChannel+0x8e>
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005ca0:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8005ca2:	4cb2      	ldr	r4, [pc, #712]	@ (8005f6c <HAL_ADC_ConfigChannel+0x334>)
 8005ca4:	f8d2 50b0 	ldr.w	r5, [r2, #176]	@ 0xb0
 8005ca8:	f006 0718 	and.w	r7, r6, #24
 8005cac:	40fc      	lsrs	r4, r7
 8005cae:	f3c0 0712 	ubfx	r7, r0, #0, #19
 8005cb2:	4004      	ands	r4, r0
 8005cb4:	ea25 0507 	bic.w	r5, r5, r7
 8005cb8:	432c      	orrs	r4, r5
 8005cba:	f8c2 40b0 	str.w	r4, [r2, #176]	@ 0xb0

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005cbe:	4cac      	ldr	r4, [pc, #688]	@ (8005f70 <HAL_ADC_ConfigChannel+0x338>)
 8005cc0:	42a6      	cmp	r6, r4
 8005cc2:	f000 8091 	beq.w	8005de8 <HAL_ADC_ConfigChannel+0x1b0>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005cc6:	49ab      	ldr	r1, [pc, #684]	@ (8005f74 <HAL_ADC_ConfigChannel+0x33c>)
 8005cc8:	4208      	tst	r0, r1
 8005cca:	d02e      	beq.n	8005d2a <HAL_ADC_ConfigChannel+0xf2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005ccc:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8005cd0:	f000 80db 	beq.w	8005e8a <HAL_ADC_ConfigChannel+0x252>
 8005cd4:	49a8      	ldr	r1, [pc, #672]	@ (8005f78 <HAL_ADC_ConfigChannel+0x340>)
 8005cd6:	428a      	cmp	r2, r1
 8005cd8:	f000 80f0 	beq.w	8005ebc <HAL_ADC_ConfigChannel+0x284>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005cdc:	f501 61c0 	add.w	r1, r1, #1536	@ 0x600

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005ce0:	4ca6      	ldr	r4, [pc, #664]	@ (8005f7c <HAL_ADC_ConfigChannel+0x344>)
 8005ce2:	6889      	ldr	r1, [r1, #8]
 8005ce4:	42a0      	cmp	r0, r4
 8005ce6:	f001 75e0 	and.w	r5, r1, #29360128	@ 0x1c00000
 8005cea:	f000 80f3 	beq.w	8005ed4 <HAL_ADC_ConfigChannel+0x29c>
 8005cee:	4ca4      	ldr	r4, [pc, #656]	@ (8005f80 <HAL_ADC_ConfigChannel+0x348>)
 8005cf0:	42a0      	cmp	r0, r4
 8005cf2:	f000 80ef 	beq.w	8005ed4 <HAL_ADC_ConfigChannel+0x29c>
          {
            wait_loop_index--;
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005cf6:	4ca3      	ldr	r4, [pc, #652]	@ (8005f84 <HAL_ADC_ConfigChannel+0x34c>)
 8005cf8:	42a0      	cmp	r0, r4
 8005cfa:	f000 812a 	beq.w	8005f52 <HAL_ADC_ConfigChannel+0x31a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005cfe:	4ca2      	ldr	r4, [pc, #648]	@ (8005f88 <HAL_ADC_ConfigChannel+0x350>)
 8005d00:	42a0      	cmp	r0, r4
 8005d02:	d112      	bne.n	8005d2a <HAL_ADC_ConfigChannel+0xf2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005d04:	0249      	lsls	r1, r1, #9
 8005d06:	d410      	bmi.n	8005d2a <HAL_ADC_ConfigChannel+0xf2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005d08:	499b      	ldr	r1, [pc, #620]	@ (8005f78 <HAL_ADC_ConfigChannel+0x340>)
 8005d0a:	428a      	cmp	r2, r1
 8005d0c:	d00d      	beq.n	8005d2a <HAL_ADC_ConfigChannel+0xf2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005d0e:	489f      	ldr	r0, [pc, #636]	@ (8005f8c <HAL_ADC_ConfigChannel+0x354>)
 8005d10:	f501 61c0 	add.w	r1, r1, #1536	@ 0x600
 8005d14:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8005d18:	bf08      	it	eq
 8005d1a:	4601      	moveq	r1, r0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005d1c:	688a      	ldr	r2, [r1, #8]
 8005d1e:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8005d22:	432a      	orrs	r2, r5
 8005d24:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8005d28:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005d2a:	2000      	movs	r0, #0
 8005d2c:	e003      	b.n	8005d36 <HAL_ADC_ConfigChannel+0xfe>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d2e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005d30:	f042 0220 	orr.w	r2, r2, #32
 8005d34:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005d36:	2200      	movs	r2, #0
 8005d38:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8005d3c:	b002      	add	sp, #8
 8005d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005d42:	6894      	ldr	r4, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005d44:	6808      	ldr	r0, [r1, #0]
 8005d46:	0725      	lsls	r5, r4, #28
 8005d48:	d4a7      	bmi.n	8005c9a <HAL_ADC_ConfigChannel+0x62>
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005d4a:	688d      	ldr	r5, [r1, #8]
  MODIFY_REG(*preg,
 8005d4c:	f3c0 5604 	ubfx	r6, r0, #20, #5
 8005d50:	2407      	movs	r4, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005d52:	0dc0      	lsrs	r0, r0, #23
  MODIFY_REG(*preg,
 8005d54:	40b4      	lsls	r4, r6
 8005d56:	f1b5 4f00 	cmp.w	r5, #2147483648	@ 0x80000000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005d5a:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 8005d5e:	ea6f 0404 	mvn.w	r4, r4
 8005d62:	f000 814b 	beq.w	8005ffc <HAL_ADC_ConfigChannel+0x3c4>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005d66:	f102 0714 	add.w	r7, r2, #20
  MODIFY_REG(*preg,
 8005d6a:	40b5      	lsls	r5, r6
 8005d6c:	583e      	ldr	r6, [r7, r0]
 8005d6e:	4034      	ands	r4, r6
 8005d70:	432c      	orrs	r4, r5
 8005d72:	503c      	str	r4, [r7, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005d74:	6950      	ldr	r0, [r2, #20]
 8005d76:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8005d7a:	6150      	str	r0, [r2, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8005d7c:	e9d1 6404 	ldrd	r6, r4, [r1, #16]
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8005d80:	6808      	ldr	r0, [r1, #0]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8005d82:	68d5      	ldr	r5, [r2, #12]
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005d84:	2e04      	cmp	r6, #4
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8005d86:	4607      	mov	r7, r0
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005d88:	f000 810c 	beq.w	8005fa4 <HAL_ADC_ConfigChannel+0x36c>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8005d8c:	f3c5 05c1 	ubfx	r5, r5, #3, #2
 8005d90:	006d      	lsls	r5, r5, #1
  MODIFY_REG(*preg,
 8005d92:	f000 47f8 	and.w	r7, r0, #2080374784	@ 0x7c000000
 8005d96:	fa04 f005 	lsl.w	r0, r4, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005d9a:	f102 0460 	add.w	r4, r2, #96	@ 0x60
  MODIFY_REG(*preg,
 8005d9e:	4d7c      	ldr	r5, [pc, #496]	@ (8005f90 <HAL_ADC_ConfigChannel+0x358>)
 8005da0:	f854 c026 	ldr.w	ip, [r4, r6, lsl #2]
 8005da4:	ea0c 0505 	and.w	r5, ip, r5
 8005da8:	433d      	orrs	r5, r7
 8005daa:	4328      	orrs	r0, r5
 8005dac:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8005db0:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005db4:	690d      	ldr	r5, [r1, #16]
  MODIFY_REG(*preg,
 8005db6:	698e      	ldr	r6, [r1, #24]
 8005db8:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8005dbc:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
 8005dc0:	4330      	orrs	r0, r6
 8005dc2:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005dc6:	690e      	ldr	r6, [r1, #16]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005dc8:	7f0d      	ldrb	r5, [r1, #28]
  MODIFY_REG(*preg,
 8005dca:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8005dce:	f1a5 0501 	sub.w	r5, r5, #1
 8005dd2:	fab5 f585 	clz	r5, r5
 8005dd6:	096d      	lsrs	r5, r5, #5
 8005dd8:	f020 7000 	bic.w	r0, r0, #33554432	@ 0x2000000
 8005ddc:	ea40 6045 	orr.w	r0, r0, r5, lsl #25
 8005de0:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005de4:	6808      	ldr	r0, [r1, #0]
}
 8005de6:	e758      	b.n	8005c9a <HAL_ADC_ConfigChannel+0x62>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005de8:	2f00      	cmp	r7, #0
 8005dea:	f000 809d 	beq.w	8005f28 <HAL_ADC_ConfigChannel+0x2f0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dee:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8005df2:	2c00      	cmp	r4, #0
 8005df4:	f000 810c 	beq.w	8006010 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8005df8:	fab4 f484 	clz	r4, r4
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005dfc:	3401      	adds	r4, #1
 8005dfe:	f004 041f 	and.w	r4, r4, #31
 8005e02:	2c09      	cmp	r4, #9
 8005e04:	f240 8104 	bls.w	8006010 <HAL_ADC_ConfigChannel+0x3d8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e08:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8005e0c:	2c00      	cmp	r4, #0
 8005e0e:	f000 81a5 	beq.w	800615c <HAL_ADC_ConfigChannel+0x524>
  return __builtin_clz(value);
 8005e12:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005e16:	3401      	adds	r4, #1
 8005e18:	06a4      	lsls	r4, r4, #26
 8005e1a:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e1e:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8005e22:	2d00      	cmp	r5, #0
 8005e24:	f000 81a4 	beq.w	8006170 <HAL_ADC_ConfigChannel+0x538>
  return __builtin_clz(value);
 8005e28:	fab5 f585 	clz	r5, r5
 8005e2c:	3501      	adds	r5, #1
 8005e2e:	f005 051f 	and.w	r5, r5, #31
 8005e32:	2601      	movs	r6, #1
 8005e34:	fa06 f505 	lsl.w	r5, r6, r5
 8005e38:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e3a:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8005e3e:	2800      	cmp	r0, #0
 8005e40:	f000 8194 	beq.w	800616c <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8005e44:	fab0 f080 	clz	r0, r0
 8005e48:	1c45      	adds	r5, r0, #1
 8005e4a:	f005 051f 	and.w	r5, r5, #31
 8005e4e:	2003      	movs	r0, #3
 8005e50:	f06f 061d 	mvn.w	r6, #29
 8005e54:	fb10 6005 	smlabb	r0, r0, r5, r6
 8005e58:	0500      	lsls	r0, r0, #20
 8005e5a:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005e5e:	4320      	orrs	r0, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005e60:	0dc5      	lsrs	r5, r0, #23
  MODIFY_REG(*preg,
 8005e62:	688c      	ldr	r4, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005e64:	f005 0504 	and.w	r5, r5, #4
 8005e68:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 8005e6c:	f3c0 5004 	ubfx	r0, r0, #20, #5
 8005e70:	fa04 f700 	lsl.w	r7, r4, r0
 8005e74:	f04f 0c07 	mov.w	ip, #7
 8005e78:	5974      	ldr	r4, [r6, r5]
 8005e7a:	fa0c f000 	lsl.w	r0, ip, r0
 8005e7e:	ea24 0000 	bic.w	r0, r4, r0
 8005e82:	4338      	orrs	r0, r7
 8005e84:	5170      	str	r0, [r6, r5]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005e86:	6808      	ldr	r0, [r1, #0]
}
 8005e88:	e71d      	b.n	8005cc6 <HAL_ADC_ConfigChannel+0x8e>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005e8a:	4c40      	ldr	r4, [pc, #256]	@ (8005f8c <HAL_ADC_ConfigChannel+0x354>)
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005e8c:	4e3b      	ldr	r6, [pc, #236]	@ (8005f7c <HAL_ADC_ConfigChannel+0x344>)
 8005e8e:	68a1      	ldr	r1, [r4, #8]
 8005e90:	42b0      	cmp	r0, r6
 8005e92:	f001 75e0 	and.w	r5, r1, #29360128	@ 0x1c00000
 8005e96:	d066      	beq.n	8005f66 <HAL_ADC_ConfigChannel+0x32e>
 8005e98:	4e39      	ldr	r6, [pc, #228]	@ (8005f80 <HAL_ADC_ConfigChannel+0x348>)
 8005e9a:	42b0      	cmp	r0, r6
 8005e9c:	d063      	beq.n	8005f66 <HAL_ADC_ConfigChannel+0x32e>
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005e9e:	4e39      	ldr	r6, [pc, #228]	@ (8005f84 <HAL_ADC_ConfigChannel+0x34c>)
 8005ea0:	42b0      	cmp	r0, r6
 8005ea2:	f47f af2c 	bne.w	8005cfe <HAL_ADC_ConfigChannel+0xc6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005ea6:	01ce      	lsls	r6, r1, #7
 8005ea8:	f53f af3f 	bmi.w	8005d2a <HAL_ADC_ConfigChannel+0xf2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005eac:	68a2      	ldr	r2, [r4, #8]
 8005eae:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8005eb2:	432a      	orrs	r2, r5
 8005eb4:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8005eb8:	60a2      	str	r2, [r4, #8]
}
 8005eba:	e736      	b.n	8005d2a <HAL_ADC_ConfigChannel+0xf2>
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005ebc:	4c2f      	ldr	r4, [pc, #188]	@ (8005f7c <HAL_ADC_ConfigChannel+0x344>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005ebe:	4933      	ldr	r1, [pc, #204]	@ (8005f8c <HAL_ADC_ConfigChannel+0x354>)
 8005ec0:	42a0      	cmp	r0, r4
 8005ec2:	6889      	ldr	r1, [r1, #8]
 8005ec4:	f43f af31 	beq.w	8005d2a <HAL_ADC_ConfigChannel+0xf2>
 8005ec8:	4c2d      	ldr	r4, [pc, #180]	@ (8005f80 <HAL_ADC_ConfigChannel+0x348>)
 8005eca:	42a0      	cmp	r0, r4
 8005ecc:	f001 75e0 	and.w	r5, r1, #29360128	@ 0x1c00000
 8005ed0:	f47f af11 	bne.w	8005cf6 <HAL_ADC_ConfigChannel+0xbe>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005ed4:	0209      	lsls	r1, r1, #8
 8005ed6:	f53f af28 	bmi.w	8005d2a <HAL_ADC_ConfigChannel+0xf2>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005eda:	492e      	ldr	r1, [pc, #184]	@ (8005f94 <HAL_ADC_ConfigChannel+0x35c>)
 8005edc:	428a      	cmp	r2, r1
 8005ede:	f47f af24 	bne.w	8005d2a <HAL_ADC_ConfigChannel+0xf2>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005ee2:	4c2d      	ldr	r4, [pc, #180]	@ (8005f98 <HAL_ADC_ConfigChannel+0x360>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005ee4:	4a2d      	ldr	r2, [pc, #180]	@ (8005f9c <HAL_ADC_ConfigChannel+0x364>)
 8005ee6:	482e      	ldr	r0, [pc, #184]	@ (8005fa0 <HAL_ADC_ConfigChannel+0x368>)
 8005ee8:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005eea:	68a1      	ldr	r1, [r4, #8]
 8005eec:	0992      	lsrs	r2, r2, #6
 8005eee:	fba0 0202 	umull	r0, r2, r0, r2
 8005ef2:	0992      	lsrs	r2, r2, #6
 8005ef4:	f021 71e0 	bic.w	r1, r1, #29360128	@ 0x1c00000
 8005ef8:	3201      	adds	r2, #1
 8005efa:	4329      	orrs	r1, r5
 8005efc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8005f00:	0092      	lsls	r2, r2, #2
 8005f02:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8005f06:	60a1      	str	r1, [r4, #8]
 8005f08:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8005f0a:	9a01      	ldr	r2, [sp, #4]
 8005f0c:	2a00      	cmp	r2, #0
 8005f0e:	f43f af0c 	beq.w	8005d2a <HAL_ADC_ConfigChannel+0xf2>
            wait_loop_index--;
 8005f12:	9a01      	ldr	r2, [sp, #4]
 8005f14:	3a01      	subs	r2, #1
 8005f16:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8005f18:	9a01      	ldr	r2, [sp, #4]
 8005f1a:	2a00      	cmp	r2, #0
 8005f1c:	d1f9      	bne.n	8005f12 <HAL_ADC_ConfigChannel+0x2da>
 8005f1e:	e704      	b.n	8005d2a <HAL_ADC_ConfigChannel+0xf2>
  __HAL_LOCK(hadc);
 8005f20:	2002      	movs	r0, #2
}
 8005f22:	b002      	add	sp, #8
 8005f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005f28:	0e80      	lsrs	r0, r0, #26
 8005f2a:	3001      	adds	r0, #1
 8005f2c:	f000 051f 	and.w	r5, r0, #31
 8005f30:	2401      	movs	r4, #1
 8005f32:	0680      	lsls	r0, r0, #26
 8005f34:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8005f38:	40ac      	lsls	r4, r5
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005f3a:	2d09      	cmp	r5, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005f3c:	ea44 0400 	orr.w	r4, r4, r0
 8005f40:	eb05 0045 	add.w	r0, r5, r5, lsl #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005f44:	f240 8089 	bls.w	800605a <HAL_ADC_ConfigChannel+0x422>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005f48:	381e      	subs	r0, #30
 8005f4a:	0500      	lsls	r0, r0, #20
 8005f4c:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
 8005f50:	e785      	b.n	8005e5e <HAL_ADC_ConfigChannel+0x226>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005f52:	01c8      	lsls	r0, r1, #7
 8005f54:	f53f aee9 	bmi.w	8005d2a <HAL_ADC_ConfigChannel+0xf2>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005f58:	4807      	ldr	r0, [pc, #28]	@ (8005f78 <HAL_ADC_ConfigChannel+0x340>)
 8005f5a:	4c0c      	ldr	r4, [pc, #48]	@ (8005f8c <HAL_ADC_ConfigChannel+0x354>)
 8005f5c:	490e      	ldr	r1, [pc, #56]	@ (8005f98 <HAL_ADC_ConfigChannel+0x360>)
 8005f5e:	4282      	cmp	r2, r0
 8005f60:	bf18      	it	ne
 8005f62:	460c      	movne	r4, r1
 8005f64:	e7a2      	b.n	8005eac <HAL_ADC_ConfigChannel+0x274>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005f66:	020f      	lsls	r7, r1, #8
 8005f68:	d5bc      	bpl.n	8005ee4 <HAL_ADC_ConfigChannel+0x2ac>
 8005f6a:	e6de      	b.n	8005d2a <HAL_ADC_ConfigChannel+0xf2>
 8005f6c:	0007ffff 	.word	0x0007ffff
 8005f70:	407f0000 	.word	0x407f0000
 8005f74:	80080000 	.word	0x80080000
 8005f78:	50000100 	.word	0x50000100
 8005f7c:	c3210000 	.word	0xc3210000
 8005f80:	90c00010 	.word	0x90c00010
 8005f84:	c7520000 	.word	0xc7520000
 8005f88:	cb840000 	.word	0xcb840000
 8005f8c:	50000300 	.word	0x50000300
 8005f90:	03fff000 	.word	0x03fff000
 8005f94:	50000600 	.word	0x50000600
 8005f98:	50000700 	.word	0x50000700
 8005f9c:	20000508 	.word	0x20000508
 8005fa0:	053e2d63 	.word	0x053e2d63
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005fa4:	6e14      	ldr	r4, [r2, #96]	@ 0x60
 8005fa6:	6e14      	ldr	r4, [r2, #96]	@ 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005fa8:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005fac:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005fb0:	2d00      	cmp	r5, #0
 8005fb2:	d154      	bne.n	800605e <HAL_ADC_ConfigChannel+0x426>
 8005fb4:	f3c0 6084 	ubfx	r0, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005fb8:	4284      	cmp	r4, r0
 8005fba:	f000 8088 	beq.w	80060ce <HAL_ADC_ConfigChannel+0x496>
 8005fbe:	6e54      	ldr	r4, [r2, #100]	@ 0x64
 8005fc0:	6e55      	ldr	r5, [r2, #100]	@ 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005fc2:	f102 0460 	add.w	r4, r2, #96	@ 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005fc6:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8005fca:	f102 0e64 	add.w	lr, r2, #100	@ 0x64
 8005fce:	4285      	cmp	r5, r0
 8005fd0:	f000 80a8 	beq.w	8006124 <HAL_ADC_ConfigChannel+0x4ec>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005fd4:	68a5      	ldr	r5, [r4, #8]
 8005fd6:	68a5      	ldr	r5, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005fd8:	f104 0c08 	add.w	ip, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005fdc:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8005fe0:	4285      	cmp	r5, r0
 8005fe2:	f000 8089 	beq.w	80060f8 <HAL_ADC_ConfigChannel+0x4c0>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005fe6:	68e5      	ldr	r5, [r4, #12]
 8005fe8:	68e5      	ldr	r5, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005fea:	f104 060c 	add.w	r6, r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005fee:	f3c5 6484 	ubfx	r4, r5, #26, #5
 8005ff2:	42a0      	cmp	r0, r4
 8005ff4:	f000 80ac 	beq.w	8006150 <HAL_ADC_ConfigChannel+0x518>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005ff8:	4638      	mov	r0, r7
 8005ffa:	e64e      	b.n	8005c9a <HAL_ADC_ConfigChannel+0x62>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005ffc:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 8006000:	5835      	ldr	r5, [r6, r0]
 8006002:	402c      	ands	r4, r5
 8006004:	5034      	str	r4, [r6, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006006:	6950      	ldr	r0, [r2, #20]
 8006008:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800600c:	6150      	str	r0, [r2, #20]
}
 800600e:	e6b5      	b.n	8005d7c <HAL_ADC_ConfigChannel+0x144>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006010:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8006014:	2c00      	cmp	r4, #0
 8006016:	f000 80b7 	beq.w	8006188 <HAL_ADC_ConfigChannel+0x550>
  return __builtin_clz(value);
 800601a:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800601e:	3401      	adds	r4, #1
 8006020:	06a4      	lsls	r4, r4, #26
 8006022:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006026:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800602a:	2d00      	cmp	r5, #0
 800602c:	f000 80aa 	beq.w	8006184 <HAL_ADC_ConfigChannel+0x54c>
  return __builtin_clz(value);
 8006030:	fab5 f585 	clz	r5, r5
 8006034:	3501      	adds	r5, #1
 8006036:	f005 051f 	and.w	r5, r5, #31
 800603a:	2601      	movs	r6, #1
 800603c:	fa06 f505 	lsl.w	r5, r6, r5
 8006040:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006042:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8006046:	2800      	cmp	r0, #0
 8006048:	f000 8099 	beq.w	800617e <HAL_ADC_ConfigChannel+0x546>
  return __builtin_clz(value);
 800604c:	fab0 f080 	clz	r0, r0
 8006050:	3001      	adds	r0, #1
 8006052:	f000 001f 	and.w	r0, r0, #31
 8006056:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800605a:	0500      	lsls	r0, r0, #20
 800605c:	e6ff      	b.n	8005e5e <HAL_ADC_ConfigChannel+0x226>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800605e:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8006062:	b11d      	cbz	r5, 800606c <HAL_ADC_ConfigChannel+0x434>
  return __builtin_clz(value);
 8006064:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006068:	42ac      	cmp	r4, r5
 800606a:	d030      	beq.n	80060ce <HAL_ADC_ConfigChannel+0x496>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800606c:	6e54      	ldr	r4, [r2, #100]	@ 0x64
 800606e:	6e55      	ldr	r5, [r2, #100]	@ 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006070:	f102 0460 	add.w	r4, r2, #96	@ 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006074:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8006078:	f102 0e64 	add.w	lr, r2, #100	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800607c:	fa97 f6a7 	rbit	r6, r7
 8006080:	f104 0c08 	add.w	ip, r4, #8
 8006084:	46e0      	mov	r8, ip
  if (value == 0U)
 8006086:	2e00      	cmp	r6, #0
 8006088:	d074      	beq.n	8006174 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 800608a:	fab6 f686 	clz	r6, r6
 800608e:	42ae      	cmp	r6, r5
 8006090:	d04a      	beq.n	8006128 <HAL_ADC_ConfigChannel+0x4f0>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006092:	f8dc 5000 	ldr.w	r5, [ip]
 8006096:	f8dc 5000 	ldr.w	r5, [ip]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800609a:	f3c5 6584 	ubfx	r5, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800609e:	fa97 fea7 	rbit	lr, r7
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80060a2:	f104 060c 	add.w	r6, r4, #12
 80060a6:	46b0      	mov	r8, r6
  if (value == 0U)
 80060a8:	f1be 0f00 	cmp.w	lr, #0
 80060ac:	d059      	beq.n	8006162 <HAL_ADC_ConfigChannel+0x52a>
  return __builtin_clz(value);
 80060ae:	fabe fe8e 	clz	lr, lr
 80060b2:	45ae      	cmp	lr, r5
 80060b4:	d022      	beq.n	80060fc <HAL_ADC_ConfigChannel+0x4c4>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80060b6:	6834      	ldr	r4, [r6, #0]
 80060b8:	6834      	ldr	r4, [r6, #0]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80060ba:	f3c4 6484 	ubfx	r4, r4, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060be:	fa97 f5a7 	rbit	r5, r7
  if (value == 0U)
 80060c2:	2d00      	cmp	r5, #0
 80060c4:	f43f ade9 	beq.w	8005c9a <HAL_ADC_ConfigChannel+0x62>
  return __builtin_clz(value);
 80060c8:	fab5 f085 	clz	r0, r5
 80060cc:	e791      	b.n	8005ff2 <HAL_ADC_ConfigChannel+0x3ba>
  MODIFY_REG(*preg,
 80060ce:	6e10      	ldr	r0, [r2, #96]	@ 0x60
 80060d0:	4614      	mov	r4, r2
 80060d2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80060d6:	f844 0f60 	str.w	r0, [r4, #96]!
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80060da:	680f      	ldr	r7, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80060dc:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 80060de:	6e55      	ldr	r5, [r2, #100]	@ 0x64
 80060e0:	f3c7 0612 	ubfx	r6, r7, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80060e4:	f102 0e64 	add.w	lr, r2, #100	@ 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80060e8:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80060ec:	4638      	mov	r0, r7
 80060ee:	2e00      	cmp	r6, #0
 80060f0:	d1c4      	bne.n	800607c <HAL_ADC_ConfigChannel+0x444>
 80060f2:	f3c7 6084 	ubfx	r0, r7, #26, #5
 80060f6:	e76a      	b.n	8005fce <HAL_ADC_ConfigChannel+0x396>
 80060f8:	f104 080c 	add.w	r8, r4, #12
  MODIFY_REG(*preg,
 80060fc:	f8dc 0000 	ldr.w	r0, [ip]
 8006100:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8006104:	f8cc 0000 	str.w	r0, [ip]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006108:	680f      	ldr	r7, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800610a:	68e0      	ldr	r0, [r4, #12]
 800610c:	68e4      	ldr	r4, [r4, #12]
 800610e:	f3c7 0512 	ubfx	r5, r7, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006112:	4646      	mov	r6, r8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006114:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006118:	4638      	mov	r0, r7
 800611a:	2d00      	cmp	r5, #0
 800611c:	d1cf      	bne.n	80060be <HAL_ADC_ConfigChannel+0x486>
 800611e:	f3c7 6084 	ubfx	r0, r7, #26, #5
 8006122:	e766      	b.n	8005ff2 <HAL_ADC_ConfigChannel+0x3ba>
 8006124:	f104 0808 	add.w	r8, r4, #8
  MODIFY_REG(*preg,
 8006128:	f8de 0000 	ldr.w	r0, [lr]
 800612c:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8006130:	f8ce 0000 	str.w	r0, [lr]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006134:	680f      	ldr	r7, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006136:	68a0      	ldr	r0, [r4, #8]
 8006138:	68a5      	ldr	r5, [r4, #8]
 800613a:	f3c7 0612 	ubfx	r6, r7, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800613e:	46c4      	mov	ip, r8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006140:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006144:	4638      	mov	r0, r7
 8006146:	2e00      	cmp	r6, #0
 8006148:	d1a9      	bne.n	800609e <HAL_ADC_ConfigChannel+0x466>
 800614a:	f3c7 6084 	ubfx	r0, r7, #26, #5
 800614e:	e747      	b.n	8005fe0 <HAL_ADC_ConfigChannel+0x3a8>
  MODIFY_REG(*preg,
 8006150:	6830      	ldr	r0, [r6, #0]
 8006152:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8006156:	6030      	str	r0, [r6, #0]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8006158:	6808      	ldr	r0, [r1, #0]
}
 800615a:	e59e      	b.n	8005c9a <HAL_ADC_ConfigChannel+0x62>
 800615c:	f04f 6480 	mov.w	r4, #67108864	@ 0x4000000
 8006160:	e65d      	b.n	8005e1e <HAL_ADC_ConfigChannel+0x1e6>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006162:	68e5      	ldr	r5, [r4, #12]
 8006164:	68e4      	ldr	r4, [r4, #12]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006166:	f3c4 6484 	ubfx	r4, r4, #26, #5
 800616a:	e7a8      	b.n	80060be <HAL_ADC_ConfigChannel+0x486>
 800616c:	4808      	ldr	r0, [pc, #32]	@ (8006190 <HAL_ADC_ConfigChannel+0x558>)
 800616e:	e676      	b.n	8005e5e <HAL_ADC_ConfigChannel+0x226>
 8006170:	2502      	movs	r5, #2
 8006172:	e661      	b.n	8005e38 <HAL_ADC_ConfigChannel+0x200>
 8006174:	68a5      	ldr	r5, [r4, #8]
 8006176:	68a5      	ldr	r5, [r4, #8]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006178:	f3c5 6584 	ubfx	r5, r5, #26, #5
 800617c:	e78f      	b.n	800609e <HAL_ADC_ConfigChannel+0x466>
 800617e:	f44f 1040 	mov.w	r0, #3145728	@ 0x300000
 8006182:	e66c      	b.n	8005e5e <HAL_ADC_ConfigChannel+0x226>
 8006184:	2502      	movs	r5, #2
 8006186:	e75b      	b.n	8006040 <HAL_ADC_ConfigChannel+0x408>
 8006188:	f04f 6480 	mov.w	r4, #67108864	@ 0x4000000
 800618c:	e74b      	b.n	8006026 <HAL_ADC_ConfigChannel+0x3ee>
 800618e:	bf00      	nop
 8006190:	fe500000 	.word	0xfe500000

08006194 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006194:	b570      	push	{r4, r5, r6, lr}
 8006196:	b082      	sub	sp, #8
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8006198:	2200      	movs	r2, #0

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800619a:	6803      	ldr	r3, [r0, #0]
  __IO uint32_t wait_loop_index = 0UL;
 800619c:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800619e:	689a      	ldr	r2, [r3, #8]
 80061a0:	07d2      	lsls	r2, r2, #31
 80061a2:	d434      	bmi.n	800620e <ADC_Enable+0x7a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80061a4:	6899      	ldr	r1, [r3, #8]
 80061a6:	4a2d      	ldr	r2, [pc, #180]	@ (800625c <ADC_Enable+0xc8>)
 80061a8:	4211      	tst	r1, r2
 80061aa:	4604      	mov	r4, r0
 80061ac:	d132      	bne.n	8006214 <ADC_Enable+0x80>
  MODIFY_REG(ADCx->CR,
 80061ae:	689a      	ldr	r2, [r3, #8]
 80061b0:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80061b4:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80061b8:	f042 0201 	orr.w	r2, r2, #1
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80061bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80061c0:	609a      	str	r2, [r3, #8]
 80061c2:	d048      	beq.n	8006256 <ADC_Enable+0xc2>
 80061c4:	4826      	ldr	r0, [pc, #152]	@ (8006260 <ADC_Enable+0xcc>)
 80061c6:	4a27      	ldr	r2, [pc, #156]	@ (8006264 <ADC_Enable+0xd0>)
 80061c8:	4927      	ldr	r1, [pc, #156]	@ (8006268 <ADC_Enable+0xd4>)
 80061ca:	4283      	cmp	r3, r0
 80061cc:	bf18      	it	ne
 80061ce:	460a      	movne	r2, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80061d0:	6893      	ldr	r3, [r2, #8]
 80061d2:	021b      	lsls	r3, r3, #8
 80061d4:	d429      	bmi.n	800622a <ADC_Enable+0x96>
        wait_loop_index--;
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80061d6:	f7ff fc09 	bl	80059ec <HAL_GetTick>

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80061da:	6823      	ldr	r3, [r4, #0]
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	07d6      	lsls	r6, r2, #31
    tickstart = HAL_GetTick();
 80061e0:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80061e2:	d414      	bmi.n	800620e <ADC_Enable+0x7a>
  MODIFY_REG(ADCx->CR,
 80061e4:	4e21      	ldr	r6, [pc, #132]	@ (800626c <ADC_Enable+0xd8>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80061e6:	689a      	ldr	r2, [r3, #8]
 80061e8:	07d0      	lsls	r0, r2, #31
 80061ea:	d404      	bmi.n	80061f6 <ADC_Enable+0x62>
  MODIFY_REG(ADCx->CR,
 80061ec:	689a      	ldr	r2, [r3, #8]
 80061ee:	4032      	ands	r2, r6
 80061f0:	f042 0201 	orr.w	r2, r2, #1
 80061f4:	609a      	str	r2, [r3, #8]
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
      {
        LL_ADC_Enable(hadc->Instance);
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80061f6:	f7ff fbf9 	bl	80059ec <HAL_GetTick>
 80061fa:	1b43      	subs	r3, r0, r5
 80061fc:	2b02      	cmp	r3, #2
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80061fe:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006200:	d902      	bls.n	8006208 <ADC_Enable+0x74>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	07d1      	lsls	r1, r2, #31
 8006206:	d505      	bpl.n	8006214 <ADC_Enable+0x80>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	07d2      	lsls	r2, r2, #31
 800620c:	d5eb      	bpl.n	80061e6 <ADC_Enable+0x52>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800620e:	2000      	movs	r0, #0
}
 8006210:	b002      	add	sp, #8
 8006212:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006214:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8006216:	f043 0310 	orr.w	r3, r3, #16
 800621a:	65e3      	str	r3, [r4, #92]	@ 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800621c:	6e23      	ldr	r3, [r4, #96]	@ 0x60
      return HAL_ERROR;
 800621e:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006220:	f043 0301 	orr.w	r3, r3, #1
 8006224:	6623      	str	r3, [r4, #96]	@ 0x60
}
 8006226:	b002      	add	sp, #8
 8006228:	bd70      	pop	{r4, r5, r6, pc}
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800622a:	4b11      	ldr	r3, [pc, #68]	@ (8006270 <ADC_Enable+0xdc>)
 800622c:	4a11      	ldr	r2, [pc, #68]	@ (8006274 <ADC_Enable+0xe0>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	099b      	lsrs	r3, r3, #6
 8006232:	fba2 2303 	umull	r2, r3, r2, r3
 8006236:	099b      	lsrs	r3, r3, #6
 8006238:	3301      	adds	r3, #1
 800623a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8006242:	9b01      	ldr	r3, [sp, #4]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d0c6      	beq.n	80061d6 <ADC_Enable+0x42>
        wait_loop_index--;
 8006248:	9b01      	ldr	r3, [sp, #4]
 800624a:	3b01      	subs	r3, #1
 800624c:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 800624e:	9b01      	ldr	r3, [sp, #4]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d1f9      	bne.n	8006248 <ADC_Enable+0xb4>
 8006254:	e7bf      	b.n	80061d6 <ADC_Enable+0x42>
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006256:	4a03      	ldr	r2, [pc, #12]	@ (8006264 <ADC_Enable+0xd0>)
 8006258:	e7ba      	b.n	80061d0 <ADC_Enable+0x3c>
 800625a:	bf00      	nop
 800625c:	8000003f 	.word	0x8000003f
 8006260:	50000100 	.word	0x50000100
 8006264:	50000300 	.word	0x50000300
 8006268:	50000700 	.word	0x50000700
 800626c:	7fffffc0 	.word	0x7fffffc0
 8006270:	20000508 	.word	0x20000508
 8006274:	053e2d63 	.word	0x053e2d63

08006278 <HAL_ADC_Start>:
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006278:	6803      	ldr	r3, [r0, #0]
 800627a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
{
 800627e:	b570      	push	{r4, r5, r6, lr}
 8006280:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006282:	d052      	beq.n	800632a <HAL_ADC_Start+0xb2>
 8006284:	4839      	ldr	r0, [pc, #228]	@ (800636c <HAL_ADC_Start+0xf4>)
 8006286:	4a3a      	ldr	r2, [pc, #232]	@ (8006370 <HAL_ADC_Start+0xf8>)
 8006288:	493a      	ldr	r1, [pc, #232]	@ (8006374 <HAL_ADC_Start+0xfc>)
 800628a:	4283      	cmp	r3, r0
 800628c:	bf18      	it	ne
 800628e:	460a      	movne	r2, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006290:	6896      	ldr	r6, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006292:	689d      	ldr	r5, [r3, #8]
 8006294:	f015 0504 	ands.w	r5, r5, #4
 8006298:	d145      	bne.n	8006326 <HAL_ADC_Start+0xae>
    __HAL_LOCK(hadc);
 800629a:	f894 3058 	ldrb.w	r3, [r4, #88]	@ 0x58
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d041      	beq.n	8006326 <HAL_ADC_Start+0xae>
 80062a2:	2301      	movs	r3, #1
 80062a4:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
    tmp_hal_status = ADC_Enable(hadc);
 80062a8:	4620      	mov	r0, r4
 80062aa:	f7ff ff73 	bl	8006194 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80062ae:	2800      	cmp	r0, #0
 80062b0:	d13d      	bne.n	800632e <HAL_ADC_Start+0xb6>
      ADC_STATE_CLR_SET(hadc->State,
 80062b2:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80062b4:	6822      	ldr	r2, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 80062b6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80062ba:	f023 0301 	bic.w	r3, r3, #1
 80062be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062c2:	65e3      	str	r3, [r4, #92]	@ 0x5c
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80062c4:	4b29      	ldr	r3, [pc, #164]	@ (800636c <HAL_ADC_Start+0xf4>)
 80062c6:	429a      	cmp	r2, r3
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80062c8:	f006 061f 	and.w	r6, r6, #31
 80062cc:	d044      	beq.n	8006358 <HAL_ADC_Start+0xe0>
 80062ce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d045      	beq.n	8006362 <HAL_ADC_Start+0xea>
 80062d6:	4611      	mov	r1, r2
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80062d8:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80062da:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80062de:	65e3      	str	r3, [r4, #92]	@ 0x5c
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80062e0:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80062e2:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80062e6:	bf1c      	itt	ne
 80062e8:	6e23      	ldrne	r3, [r4, #96]	@ 0x60
 80062ea:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 80062ee:	6623      	str	r3, [r4, #96]	@ 0x60
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80062f0:	231c      	movs	r3, #28
 80062f2:	6013      	str	r3, [r2, #0]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80062f4:	428a      	cmp	r2, r1
      __HAL_UNLOCK(hadc);
 80062f6:	f04f 0300 	mov.w	r3, #0
 80062fa:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80062fe:	d019      	beq.n	8006334 <HAL_ADC_Start+0xbc>
 8006300:	f240 2321 	movw	r3, #545	@ 0x221
 8006304:	40f3      	lsrs	r3, r6
 8006306:	07dd      	lsls	r5, r3, #31
 8006308:	d414      	bmi.n	8006334 <HAL_ADC_Start+0xbc>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800630a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800630c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006310:	65e3      	str	r3, [r4, #92]	@ 0x5c
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8006312:	68cb      	ldr	r3, [r1, #12]
 8006314:	019b      	lsls	r3, r3, #6
 8006316:	d505      	bpl.n	8006324 <HAL_ADC_Start+0xac>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006318:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800631a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800631e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006322:	65e3      	str	r3, [r4, #92]	@ 0x5c
}
 8006324:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LOCK(hadc);
 8006326:	2002      	movs	r0, #2
}
 8006328:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800632a:	4a11      	ldr	r2, [pc, #68]	@ (8006370 <HAL_ADC_Start+0xf8>)
 800632c:	e7b0      	b.n	8006290 <HAL_ADC_Start+0x18>
      __HAL_UNLOCK(hadc);
 800632e:	f884 5058 	strb.w	r5, [r4, #88]	@ 0x58
}
 8006332:	bd70      	pop	{r4, r5, r6, pc}
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8006334:	68d3      	ldr	r3, [r2, #12]
 8006336:	0199      	lsls	r1, r3, #6
 8006338:	d505      	bpl.n	8006346 <HAL_ADC_Start+0xce>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800633a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800633c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006340:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006344:	65e3      	str	r3, [r4, #92]	@ 0x5c
  MODIFY_REG(ADCx->CR,
 8006346:	6893      	ldr	r3, [r2, #8]
 8006348:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800634c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006350:	f043 0304 	orr.w	r3, r3, #4
 8006354:	6093      	str	r3, [r2, #8]
}
 8006356:	bd70      	pop	{r4, r5, r6, pc}
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006358:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800635c:	2e00      	cmp	r6, #0
 800635e:	d1bf      	bne.n	80062e0 <HAL_ADC_Start+0x68>
 8006360:	e7ba      	b.n	80062d8 <HAL_ADC_Start+0x60>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006362:	4905      	ldr	r1, [pc, #20]	@ (8006378 <HAL_ADC_Start+0x100>)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006364:	2e00      	cmp	r6, #0
 8006366:	d1bb      	bne.n	80062e0 <HAL_ADC_Start+0x68>
 8006368:	e7b6      	b.n	80062d8 <HAL_ADC_Start+0x60>
 800636a:	bf00      	nop
 800636c:	50000100 	.word	0x50000100
 8006370:	50000300 	.word	0x50000300
 8006374:	50000700 	.word	0x50000700
 8006378:	50000400 	.word	0x50000400

0800637c <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 800637c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006380:	f890 3058 	ldrb.w	r3, [r0, #88]	@ 0x58
{
 8006384:	b083      	sub	sp, #12
 8006386:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 8006388:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0;
 800638a:	f04f 0000 	mov.w	r0, #0
 800638e:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8006390:	f000 81ca 	beq.w	8006728 <HAL_ADCEx_InjectedConfigChannel+0x3ac>
 8006394:	2301      	movs	r3, #1
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8006396:	6955      	ldr	r5, [r2, #20]
  __HAL_LOCK(hadc);
 8006398:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 800639c:	e9d1 4000 	ldrd	r4, r0, [r1]

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 80063a0:	6813      	ldr	r3, [r2, #0]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80063a2:	2d00      	cmp	r5, #0
 80063a4:	f000 8083 	beq.w	80064ae <HAL_ADCEx_InjectedConfigChannel+0x132>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 80063a8:	6a0d      	ldr	r5, [r1, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80063aa:	2d01      	cmp	r5, #1
 80063ac:	d07f      	beq.n	80064ae <HAL_ADCEx_InjectedConfigChannel+0x132>
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80063ae:	6e97      	ldr	r7, [r2, #104]	@ 0x68
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 80063b0:	f000 001f 	and.w	r0, r0, #31
 80063b4:	f3c4 6684 	ubfx	r6, r4, #26, #5
 80063b8:	4086      	lsls	r6, r0
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80063ba:	2f00      	cmp	r7, #0
 80063bc:	f040 8102 	bne.w	80065c4 <HAL_ADCEx_InjectedConfigChannel+0x248>
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80063c0:	6a88      	ldr	r0, [r1, #40]	@ 0x28
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 80063c2:	3d01      	subs	r5, #1
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80063c4:	2800      	cmp	r0, #0
 80063c6:	f000 824a 	beq.w	800685e <HAL_ADCEx_InjectedConfigChannel+0x4e2>
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 80063ca:	6acf      	ldr	r7, [r1, #44]	@ 0x2c
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80063cc:	f000 007c 	and.w	r0, r0, #124	@ 0x7c
 80063d0:	4328      	orrs	r0, r5
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 80063d2:	4338      	orrs	r0, r7
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 80063d4:	4330      	orrs	r0, r6
 80063d6:	e9c2 0519 	strd	r0, r5, [r2, #100]	@ 0x64
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80063da:	6898      	ldr	r0, [r3, #8]
 80063dc:	0707      	lsls	r7, r0, #28
 80063de:	d410      	bmi.n	8006402 <HAL_ADCEx_InjectedConfigChannel+0x86>
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
    {
      MODIFY_REG(hadc->Instance->CFGR,
 80063e0:	f891 0026 	ldrb.w	r0, [r1, #38]	@ 0x26
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 80063e4:	f891 5025 	ldrb.w	r5, [r1, #37]	@ 0x25
      MODIFY_REG(hadc->Instance->CFGR,
 80063e8:	0540      	lsls	r0, r0, #21
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 80063ea:	2d00      	cmp	r5, #0
 80063ec:	f040 80e0 	bne.w	80065b0 <HAL_ADCEx_InjectedConfigChannel+0x234>
      MODIFY_REG(hadc->Instance->CFGR,
 80063f0:	68dd      	ldr	r5, [r3, #12]
 80063f2:	f891 6024 	ldrb.w	r6, [r1, #36]	@ 0x24
 80063f6:	f425 1540 	bic.w	r5, r5, #3145728	@ 0x300000
 80063fa:	ea40 5006 	orr.w	r0, r0, r6, lsl #20
 80063fe:	4328      	orrs	r0, r5
 8006400:	60d8      	str	r0, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006402:	6898      	ldr	r0, [r3, #8]
 8006404:	f010 0004 	ands.w	r0, r0, #4
 8006408:	d067      	beq.n	80064da <HAL_ADCEx_InjectedConfigChannel+0x15e>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800640a:	6898      	ldr	r0, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800640c:	2000      	movs	r0, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800640e:	689d      	ldr	r5, [r3, #8]
 8006410:	07ed      	lsls	r5, r5, #31
 8006412:	d414      	bmi.n	800643e <HAL_ADCEx_InjectedConfigChannel+0xc2>
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8006414:	68cf      	ldr	r7, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8006416:	4db5      	ldr	r5, [pc, #724]	@ (80066ec <HAL_ADCEx_InjectedConfigChannel+0x370>)
 8006418:	f8d3 60b0 	ldr.w	r6, [r3, #176]	@ 0xb0
 800641c:	f007 0c18 	and.w	ip, r7, #24
 8006420:	fa25 f50c 	lsr.w	r5, r5, ip
 8006424:	f3c4 0e12 	ubfx	lr, r4, #0, #19
 8006428:	4025      	ands	r5, r4
 800642a:	ea26 0c0e 	bic.w	ip, r6, lr
 800642e:	ea45 050c 	orr.w	r5, r5, ip
 8006432:	f8c3 50b0 	str.w	r5, [r3, #176]	@ 0xb0

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006436:	4dae      	ldr	r5, [pc, #696]	@ (80066f0 <HAL_ADCEx_InjectedConfigChannel+0x374>)
 8006438:	42af      	cmp	r7, r5
 800643a:	f000 8110 	beq.w	800665e <HAL_ADCEx_InjectedConfigChannel+0x2e2>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 800643e:	49ad      	ldr	r1, [pc, #692]	@ (80066f4 <HAL_ADCEx_InjectedConfigChannel+0x378>)
 8006440:	420c      	tst	r4, r1
 8006442:	d02e      	beq.n	80064a2 <HAL_ADCEx_InjectedConfigChannel+0x126>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006444:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006448:	f000 8134 	beq.w	80066b4 <HAL_ADCEx_InjectedConfigChannel+0x338>
 800644c:	49aa      	ldr	r1, [pc, #680]	@ (80066f8 <HAL_ADCEx_InjectedConfigChannel+0x37c>)
 800644e:	428b      	cmp	r3, r1
 8006450:	f000 80d3 	beq.w	80065fa <HAL_ADCEx_InjectedConfigChannel+0x27e>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8006454:	f501 61c0 	add.w	r1, r1, #1536	@ 0x600

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8006458:	4da8      	ldr	r5, [pc, #672]	@ (80066fc <HAL_ADCEx_InjectedConfigChannel+0x380>)
 800645a:	6889      	ldr	r1, [r1, #8]
 800645c:	42ac      	cmp	r4, r5
 800645e:	f001 76e0 	and.w	r6, r1, #29360128	@ 0x1c00000
 8006462:	f000 80d6 	beq.w	8006612 <HAL_ADCEx_InjectedConfigChannel+0x296>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8006466:	4da6      	ldr	r5, [pc, #664]	@ (8006700 <HAL_ADCEx_InjectedConfigChannel+0x384>)
 8006468:	42ac      	cmp	r4, r5
 800646a:	f000 80d2 	beq.w	8006612 <HAL_ADCEx_InjectedConfigChannel+0x296>
        {
          wait_loop_index--;
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 800646e:	4da5      	ldr	r5, [pc, #660]	@ (8006704 <HAL_ADCEx_InjectedConfigChannel+0x388>)
 8006470:	42ac      	cmp	r4, r5
 8006472:	f000 8249 	beq.w	8006908 <HAL_ADCEx_InjectedConfigChannel+0x58c>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8006476:	4da4      	ldr	r5, [pc, #656]	@ (8006708 <HAL_ADCEx_InjectedConfigChannel+0x38c>)
 8006478:	42ac      	cmp	r4, r5
 800647a:	d112      	bne.n	80064a2 <HAL_ADCEx_InjectedConfigChannel+0x126>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800647c:	0249      	lsls	r1, r1, #9
 800647e:	d410      	bmi.n	80064a2 <HAL_ADCEx_InjectedConfigChannel+0x126>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8006480:	499d      	ldr	r1, [pc, #628]	@ (80066f8 <HAL_ADCEx_InjectedConfigChannel+0x37c>)
 8006482:	428b      	cmp	r3, r1
 8006484:	d00d      	beq.n	80064a2 <HAL_ADCEx_InjectedConfigChannel+0x126>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006486:	4ca1      	ldr	r4, [pc, #644]	@ (800670c <HAL_ADCEx_InjectedConfigChannel+0x390>)
 8006488:	f501 61c0 	add.w	r1, r1, #1536	@ 0x600
 800648c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006490:	bf08      	it	eq
 8006492:	4621      	moveq	r1, r4
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8006494:	688b      	ldr	r3, [r1, #8]
 8006496:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 800649a:	4333      	orrs	r3, r6
 800649c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80064a0:	608b      	str	r3, [r1, #8]
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80064a2:	2300      	movs	r3, #0
 80064a4:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
}
 80064a8:	b003      	add	sp, #12
 80064aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80064ae:	2809      	cmp	r0, #9
 80064b0:	d193      	bne.n	80063da <HAL_ADCEx_InjectedConfigChannel+0x5e>
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80064b2:	6a88      	ldr	r0, [r1, #40]	@ 0x28
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80064b4:	0c65      	lsrs	r5, r4, #17
 80064b6:	f405 5578 	and.w	r5, r5, #15872	@ 0x3e00
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80064ba:	b120      	cbz	r0, 80064c6 <HAL_ADCEx_InjectedConfigChannel+0x14a>
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80064bc:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80064be:	f000 007c 	and.w	r0, r0, #124	@ 0x7c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80064c2:	4330      	orrs	r0, r6
 80064c4:	4305      	orrs	r5, r0
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 80064c6:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80064c8:	4e91      	ldr	r6, [pc, #580]	@ (8006710 <HAL_ADCEx_InjectedConfigChannel+0x394>)
 80064ca:	4030      	ands	r0, r6
 80064cc:	4328      	orrs	r0, r5
 80064ce:	64d8      	str	r0, [r3, #76]	@ 0x4c
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80064d0:	6898      	ldr	r0, [r3, #8]
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 80064d2:	6655      	str	r5, [r2, #100]	@ 0x64
 80064d4:	0707      	lsls	r7, r0, #28
 80064d6:	d494      	bmi.n	8006402 <HAL_ADCEx_InjectedConfigChannel+0x86>
 80064d8:	e782      	b.n	80063e0 <HAL_ADCEx_InjectedConfigChannel+0x64>
 80064da:	689d      	ldr	r5, [r3, #8]
 80064dc:	072e      	lsls	r6, r5, #28
 80064de:	d496      	bmi.n	800640e <HAL_ADCEx_InjectedConfigChannel+0x92>
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80064e0:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 80064e2:	f891 0025 	ldrb.w	r0, [r1, #37]	@ 0x25
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80064e6:	2d00      	cmp	r5, #0
 80064e8:	d17e      	bne.n	80065e8 <HAL_ADCEx_InjectedConfigChannel+0x26c>
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80064ea:	2801      	cmp	r0, #1
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80064ec:	68d8      	ldr	r0, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80064ee:	f000 81b8 	beq.w	8006862 <HAL_ADCEx_InjectedConfigChannel+0x4e6>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80064f2:	f020 7000 	bic.w	r0, r0, #33554432	@ 0x2000000
 80064f6:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80064f8:	2000      	movs	r0, #0
    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 80064fa:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 80064fe:	2d01      	cmp	r5, #1
 8006500:	f000 8159 	beq.w	80067b6 <HAL_ADCEx_InjectedConfigChannel+0x43a>
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8006504:	691d      	ldr	r5, [r3, #16]
 8006506:	f025 0502 	bic.w	r5, r5, #2
 800650a:	611d      	str	r5, [r3, #16]
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800650c:	688e      	ldr	r6, [r1, #8]
  MODIFY_REG(*preg,
 800650e:	f3c4 5704 	ubfx	r7, r4, #20, #5
 8006512:	2507      	movs	r5, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8006514:	0de4      	lsrs	r4, r4, #23
  MODIFY_REG(*preg,
 8006516:	40bd      	lsls	r5, r7
 8006518:	f1b6 4f00 	cmp.w	r6, #2147483648	@ 0x80000000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800651c:	f004 0404 	and.w	r4, r4, #4
  MODIFY_REG(*preg,
 8006520:	ea6f 0505 	mvn.w	r5, r5
 8006524:	f000 813d 	beq.w	80067a2 <HAL_ADCEx_InjectedConfigChannel+0x426>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8006528:	f103 0c14 	add.w	ip, r3, #20
  MODIFY_REG(*preg,
 800652c:	40be      	lsls	r6, r7
 800652e:	f85c 7004 	ldr.w	r7, [ip, r4]
 8006532:	403d      	ands	r5, r7
 8006534:	4335      	orrs	r5, r6
 8006536:	f84c 5004 	str.w	r5, [ip, r4]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800653a:	695c      	ldr	r4, [r3, #20]
 800653c:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8006540:	615c      	str	r4, [r3, #20]
    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8006542:	690f      	ldr	r7, [r1, #16]
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 8006544:	680c      	ldr	r4, [r1, #0]
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 8006546:	694d      	ldr	r5, [r1, #20]
 8006548:	68de      	ldr	r6, [r3, #12]
    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 800654a:	2f04      	cmp	r7, #4
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 800654c:	46a4      	mov	ip, r4
    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 800654e:	f000 813d 	beq.w	80067cc <HAL_ADCEx_InjectedConfigChannel+0x450>
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 8006552:	f3c6 06c1 	ubfx	r6, r6, #3, #2
 8006556:	0076      	lsls	r6, r6, #1
  MODIFY_REG(*preg,
 8006558:	f004 4cf8 	and.w	ip, r4, #2080374784	@ 0x7c000000
 800655c:	fa05 f406 	lsl.w	r4, r5, r6
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006560:	f103 0560 	add.w	r5, r3, #96	@ 0x60
  MODIFY_REG(*preg,
 8006564:	4e6b      	ldr	r6, [pc, #428]	@ (8006714 <HAL_ADCEx_InjectedConfigChannel+0x398>)
 8006566:	f855 e027 	ldr.w	lr, [r5, r7, lsl #2]
 800656a:	ea0e 0606 	and.w	r6, lr, r6
 800656e:	ea46 060c 	orr.w	r6, r6, ip
 8006572:	4334      	orrs	r4, r6
 8006574:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 8006578:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800657c:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(*preg,
 800657e:	698e      	ldr	r6, [r1, #24]
 8006580:	f855 4027 	ldr.w	r4, [r5, r7, lsl #2]
 8006584:	f024 7480 	bic.w	r4, r4, #16777216	@ 0x1000000
 8006588:	4334      	orrs	r4, r6
 800658a:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800658e:	690f      	ldr	r7, [r1, #16]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8006590:	7f0e      	ldrb	r6, [r1, #28]
  MODIFY_REG(*preg,
 8006592:	f855 4027 	ldr.w	r4, [r5, r7, lsl #2]
 8006596:	f1a6 0601 	sub.w	r6, r6, #1
 800659a:	fab6 f686 	clz	r6, r6
 800659e:	0976      	lsrs	r6, r6, #5
 80065a0:	f024 7400 	bic.w	r4, r4, #33554432	@ 0x2000000
 80065a4:	ea44 6446 	orr.w	r4, r4, r6, lsl #25
 80065a8:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 80065ac:	680c      	ldr	r4, [r1, #0]
}
 80065ae:	e72e      	b.n	800640e <HAL_ADCEx_InjectedConfigChannel+0x92>
      MODIFY_REG(hadc->Instance->CFGR,
 80065b0:	68dd      	ldr	r5, [r3, #12]
 80065b2:	f425 1540 	bic.w	r5, r5, #3145728	@ 0x300000
 80065b6:	4328      	orrs	r0, r5
 80065b8:	60d8      	str	r0, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80065ba:	6898      	ldr	r0, [r3, #8]
 80065bc:	f010 0004 	ands.w	r0, r0, #4
 80065c0:	d08b      	beq.n	80064da <HAL_ADCEx_InjectedConfigChannel+0x15e>
 80065c2:	e722      	b.n	800640a <HAL_ADCEx_InjectedConfigChannel+0x8e>
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 80065c4:	6e55      	ldr	r5, [r2, #100]	@ 0x64
    hadc->InjectionConfig.ChannelCount--;
 80065c6:	3f01      	subs	r7, #1
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 80065c8:	4335      	orrs	r5, r6
    hadc->InjectionConfig.ChannelCount--;
 80065ca:	6697      	str	r7, [r2, #104]	@ 0x68
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 80065cc:	6655      	str	r5, [r2, #100]	@ 0x64
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80065ce:	2f00      	cmp	r7, #0
 80065d0:	f47f af03 	bne.w	80063da <HAL_ADCEx_InjectedConfigChannel+0x5e>
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 80065d4:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80065d6:	4e4e      	ldr	r6, [pc, #312]	@ (8006710 <HAL_ADCEx_InjectedConfigChannel+0x394>)
 80065d8:	4030      	ands	r0, r6
 80065da:	4328      	orrs	r0, r5
 80065dc:	64d8      	str	r0, [r3, #76]	@ 0x4c
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80065de:	6898      	ldr	r0, [r3, #8]
 80065e0:	0707      	lsls	r7, r0, #28
 80065e2:	f53f af0e 	bmi.w	8006402 <HAL_ADCEx_InjectedConfigChannel+0x86>
 80065e6:	e6fb      	b.n	80063e0 <HAL_ADCEx_InjectedConfigChannel+0x64>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 80065e8:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
 80065ea:	2d00      	cmp	r5, #0
 80065ec:	f43f af7d 	beq.w	80064ea <HAL_ADCEx_InjectedConfigChannel+0x16e>
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80065f0:	2801      	cmp	r0, #1
 80065f2:	f000 8160 	beq.w	80068b6 <HAL_ADCEx_InjectedConfigChannel+0x53a>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80065f6:	68d8      	ldr	r0, [r3, #12]
 80065f8:	e77b      	b.n	80064f2 <HAL_ADCEx_InjectedConfigChannel+0x176>
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 80065fa:	4d40      	ldr	r5, [pc, #256]	@ (80066fc <HAL_ADCEx_InjectedConfigChannel+0x380>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80065fc:	4943      	ldr	r1, [pc, #268]	@ (800670c <HAL_ADCEx_InjectedConfigChannel+0x390>)
 80065fe:	42ac      	cmp	r4, r5
 8006600:	6889      	ldr	r1, [r1, #8]
 8006602:	f43f af4e 	beq.w	80064a2 <HAL_ADCEx_InjectedConfigChannel+0x126>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8006606:	4d3e      	ldr	r5, [pc, #248]	@ (8006700 <HAL_ADCEx_InjectedConfigChannel+0x384>)
 8006608:	42ac      	cmp	r4, r5
 800660a:	f001 76e0 	and.w	r6, r1, #29360128	@ 0x1c00000
 800660e:	f47f af2e 	bne.w	800646e <HAL_ADCEx_InjectedConfigChannel+0xf2>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006612:	0209      	lsls	r1, r1, #8
 8006614:	f53f af45 	bmi.w	80064a2 <HAL_ADCEx_InjectedConfigChannel+0x126>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006618:	493f      	ldr	r1, [pc, #252]	@ (8006718 <HAL_ADCEx_InjectedConfigChannel+0x39c>)
 800661a:	428b      	cmp	r3, r1
 800661c:	f47f af41 	bne.w	80064a2 <HAL_ADCEx_InjectedConfigChannel+0x126>
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006620:	4d3e      	ldr	r5, [pc, #248]	@ (800671c <HAL_ADCEx_InjectedConfigChannel+0x3a0>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8006622:	68a9      	ldr	r1, [r5, #8]
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8006624:	4b3e      	ldr	r3, [pc, #248]	@ (8006720 <HAL_ADCEx_InjectedConfigChannel+0x3a4>)
 8006626:	f021 71e0 	bic.w	r1, r1, #29360128	@ 0x1c00000
 800662a:	4331      	orrs	r1, r6
 800662c:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	60a9      	str	r1, [r5, #8]
 8006634:	493b      	ldr	r1, [pc, #236]	@ (8006724 <HAL_ADCEx_InjectedConfigChannel+0x3a8>)
 8006636:	099b      	lsrs	r3, r3, #6
 8006638:	fba1 1303 	umull	r1, r3, r1, r3
 800663c:	099b      	lsrs	r3, r3, #6
 800663e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8006646:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 8006648:	9b01      	ldr	r3, [sp, #4]
 800664a:	2b00      	cmp	r3, #0
 800664c:	f43f af29 	beq.w	80064a2 <HAL_ADCEx_InjectedConfigChannel+0x126>
          wait_loop_index--;
 8006650:	9b01      	ldr	r3, [sp, #4]
 8006652:	3b01      	subs	r3, #1
 8006654:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 8006656:	9b01      	ldr	r3, [sp, #4]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d1f9      	bne.n	8006650 <HAL_ADCEx_InjectedConfigChannel+0x2d4>
 800665c:	e721      	b.n	80064a2 <HAL_ADCEx_InjectedConfigChannel+0x126>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800665e:	f1be 0f00 	cmp.w	lr, #0
 8006662:	d165      	bne.n	8006730 <HAL_ADCEx_InjectedConfigChannel+0x3b4>
 8006664:	0ea4      	lsrs	r4, r4, #26
 8006666:	3401      	adds	r4, #1
 8006668:	f004 061f 	and.w	r6, r4, #31
 800666c:	2501      	movs	r5, #1
 800666e:	06a4      	lsls	r4, r4, #26
 8006670:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
 8006674:	40b5      	lsls	r5, r6
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006676:	2e09      	cmp	r6, #9
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006678:	ea45 0504 	orr.w	r5, r5, r4
 800667c:	eb06 0446 	add.w	r4, r6, r6, lsl #1
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006680:	f200 8114 	bhi.w	80068ac <HAL_ADCEx_InjectedConfigChannel+0x530>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006684:	0524      	lsls	r4, r4, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006686:	432c      	orrs	r4, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8006688:	0de6      	lsrs	r6, r4, #23
  MODIFY_REG(*preg,
 800668a:	688d      	ldr	r5, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800668c:	f006 0604 	and.w	r6, r6, #4
 8006690:	f103 0714 	add.w	r7, r3, #20
  MODIFY_REG(*preg,
 8006694:	f3c4 5404 	ubfx	r4, r4, #20, #5
 8006698:	fa05 fc04 	lsl.w	ip, r5, r4
 800669c:	f04f 0e07 	mov.w	lr, #7
 80066a0:	59bd      	ldr	r5, [r7, r6]
 80066a2:	fa0e f404 	lsl.w	r4, lr, r4
 80066a6:	ea25 0404 	bic.w	r4, r5, r4
 80066aa:	ea44 040c 	orr.w	r4, r4, ip
 80066ae:	51bc      	str	r4, [r7, r6]
  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 80066b0:	680c      	ldr	r4, [r1, #0]
}
 80066b2:	e6c4      	b.n	800643e <HAL_ADCEx_InjectedConfigChannel+0xc2>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80066b4:	4d15      	ldr	r5, [pc, #84]	@ (800670c <HAL_ADCEx_InjectedConfigChannel+0x390>)
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 80066b6:	4f11      	ldr	r7, [pc, #68]	@ (80066fc <HAL_ADCEx_InjectedConfigChannel+0x380>)
 80066b8:	68a9      	ldr	r1, [r5, #8]
 80066ba:	42bc      	cmp	r4, r7
 80066bc:	f001 76e0 	and.w	r6, r1, #29360128	@ 0x1c00000
 80066c0:	f000 80c9 	beq.w	8006856 <HAL_ADCEx_InjectedConfigChannel+0x4da>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80066c4:	4f0e      	ldr	r7, [pc, #56]	@ (8006700 <HAL_ADCEx_InjectedConfigChannel+0x384>)
 80066c6:	42bc      	cmp	r4, r7
 80066c8:	f000 80c5 	beq.w	8006856 <HAL_ADCEx_InjectedConfigChannel+0x4da>
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 80066cc:	4f0d      	ldr	r7, [pc, #52]	@ (8006704 <HAL_ADCEx_InjectedConfigChannel+0x388>)
 80066ce:	42bc      	cmp	r4, r7
 80066d0:	f47f aed1 	bne.w	8006476 <HAL_ADCEx_InjectedConfigChannel+0xfa>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80066d4:	01cf      	lsls	r7, r1, #7
 80066d6:	f53f aee4 	bmi.w	80064a2 <HAL_ADCEx_InjectedConfigChannel+0x126>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80066da:	68ab      	ldr	r3, [r5, #8]
 80066dc:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 80066e0:	4333      	orrs	r3, r6
 80066e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80066e6:	60ab      	str	r3, [r5, #8]
}
 80066e8:	e6db      	b.n	80064a2 <HAL_ADCEx_InjectedConfigChannel+0x126>
 80066ea:	bf00      	nop
 80066ec:	0007ffff 	.word	0x0007ffff
 80066f0:	407f0000 	.word	0x407f0000
 80066f4:	80080000 	.word	0x80080000
 80066f8:	50000100 	.word	0x50000100
 80066fc:	c3210000 	.word	0xc3210000
 8006700:	90c00010 	.word	0x90c00010
 8006704:	c7520000 	.word	0xc7520000
 8006708:	cb840000 	.word	0xcb840000
 800670c:	50000300 	.word	0x50000300
 8006710:	04104000 	.word	0x04104000
 8006714:	03fff000 	.word	0x03fff000
 8006718:	50000600 	.word	0x50000600
 800671c:	50000700 	.word	0x50000700
 8006720:	20000508 	.word	0x20000508
 8006724:	053e2d63 	.word	0x053e2d63
  __HAL_LOCK(hadc);
 8006728:	2002      	movs	r0, #2
}
 800672a:	b003      	add	sp, #12
 800672c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006730:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8006734:	2d00      	cmp	r5, #0
 8006736:	f000 80c3 	beq.w	80068c0 <HAL_ADCEx_InjectedConfigChannel+0x544>
  return __builtin_clz(value);
 800673a:	fab5 f585 	clz	r5, r5
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800673e:	3501      	adds	r5, #1
 8006740:	f005 051f 	and.w	r5, r5, #31
 8006744:	2d09      	cmp	r5, #9
 8006746:	f240 80bb 	bls.w	80068c0 <HAL_ADCEx_InjectedConfigChannel+0x544>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800674a:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 800674e:	2d00      	cmp	r5, #0
 8006750:	f000 813d 	beq.w	80069ce <HAL_ADCEx_InjectedConfigChannel+0x652>
  return __builtin_clz(value);
 8006754:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006758:	3501      	adds	r5, #1
 800675a:	06ad      	lsls	r5, r5, #26
 800675c:	f005 45f8 	and.w	r5, r5, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006760:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 8006764:	2e00      	cmp	r6, #0
 8006766:	f000 8130 	beq.w	80069ca <HAL_ADCEx_InjectedConfigChannel+0x64e>
  return __builtin_clz(value);
 800676a:	fab6 f686 	clz	r6, r6
 800676e:	3601      	adds	r6, #1
 8006770:	f006 061f 	and.w	r6, r6, #31
 8006774:	2701      	movs	r7, #1
 8006776:	fa07 f606 	lsl.w	r6, r7, r6
 800677a:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800677c:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8006780:	2c00      	cmp	r4, #0
 8006782:	f000 8127 	beq.w	80069d4 <HAL_ADCEx_InjectedConfigChannel+0x658>
  return __builtin_clz(value);
 8006786:	fab4 f484 	clz	r4, r4
 800678a:	1c66      	adds	r6, r4, #1
 800678c:	f006 061f 	and.w	r6, r6, #31
 8006790:	2403      	movs	r4, #3
 8006792:	f06f 071d 	mvn.w	r7, #29
 8006796:	fb14 7406 	smlabb	r4, r4, r6, r7
 800679a:	0524      	lsls	r4, r4, #20
 800679c:	f044 7400 	orr.w	r4, r4, #33554432	@ 0x2000000
 80067a0:	e771      	b.n	8006686 <HAL_ADCEx_InjectedConfigChannel+0x30a>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80067a2:	f103 0714 	add.w	r7, r3, #20
  MODIFY_REG(*preg,
 80067a6:	593e      	ldr	r6, [r7, r4]
 80067a8:	4035      	ands	r5, r6
 80067aa:	513d      	str	r5, [r7, r4]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80067ac:	695c      	ldr	r4, [r3, #20]
 80067ae:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 80067b2:	615c      	str	r4, [r3, #20]
}
 80067b4:	e6c5      	b.n	8006542 <HAL_ADCEx_InjectedConfigChannel+0x1c6>
      MODIFY_REG(hadc->Instance->CFGR2,
 80067b6:	e9d1 570d 	ldrd	r5, r7, [r1, #52]	@ 0x34
 80067ba:	691e      	ldr	r6, [r3, #16]
 80067bc:	433d      	orrs	r5, r7
 80067be:	f426 76ff 	bic.w	r6, r6, #510	@ 0x1fe
 80067c2:	4335      	orrs	r5, r6
 80067c4:	f045 0502 	orr.w	r5, r5, #2
 80067c8:	611d      	str	r5, [r3, #16]
 80067ca:	e69f      	b.n	800650c <HAL_ADCEx_InjectedConfigChannel+0x190>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80067cc:	6e1d      	ldr	r5, [r3, #96]	@ 0x60
 80067ce:	6e1d      	ldr	r5, [r3, #96]	@ 0x60
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80067d0:	f3c4 0612 	ubfx	r6, r4, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80067d4:	f3c5 6584 	ubfx	r5, r5, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80067d8:	2e00      	cmp	r6, #0
 80067da:	d046      	beq.n	800686a <HAL_ADCEx_InjectedConfigChannel+0x4ee>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067dc:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 80067e0:	b126      	cbz	r6, 80067ec <HAL_ADCEx_InjectedConfigChannel+0x470>
  return __builtin_clz(value);
 80067e2:	fab6 f686 	clz	r6, r6
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80067e6:	42b5      	cmp	r5, r6
 80067e8:	f000 8098 	beq.w	800691c <HAL_ADCEx_InjectedConfigChannel+0x5a0>
 80067ec:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 80067ee:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80067f0:	f103 0560 	add.w	r5, r3, #96	@ 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80067f4:	f3c6 6684 	ubfx	r6, r6, #26, #5
 80067f8:	f103 0864 	add.w	r8, r3, #100	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067fc:	fa9c f7ac 	rbit	r7, ip
 8006800:	f105 0e08 	add.w	lr, r5, #8
 8006804:	46f1      	mov	r9, lr
  if (value == 0U)
 8006806:	2f00      	cmp	r7, #0
 8006808:	f000 80da 	beq.w	80069c0 <HAL_ADCEx_InjectedConfigChannel+0x644>
  return __builtin_clz(value);
 800680c:	fab7 f787 	clz	r7, r7
 8006810:	42b7      	cmp	r7, r6
 8006812:	f000 80b4 	beq.w	800697e <HAL_ADCEx_InjectedConfigChannel+0x602>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006816:	f8de 6000 	ldr.w	r6, [lr]
 800681a:	f8de 6000 	ldr.w	r6, [lr]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800681e:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006822:	fa9c f8ac 	rbit	r8, ip
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006826:	f105 070c 	add.w	r7, r5, #12
 800682a:	46b9      	mov	r9, r7
  if (value == 0U)
 800682c:	f1b8 0f00 	cmp.w	r8, #0
 8006830:	f000 80c1 	beq.w	80069b6 <HAL_ADCEx_InjectedConfigChannel+0x63a>
  return __builtin_clz(value);
 8006834:	fab8 f888 	clz	r8, r8
 8006838:	45b0      	cmp	r8, r6
 800683a:	f000 8088 	beq.w	800694e <HAL_ADCEx_InjectedConfigChannel+0x5d2>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800683e:	683d      	ldr	r5, [r7, #0]
 8006840:	683d      	ldr	r5, [r7, #0]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006842:	f3c5 6584 	ubfx	r5, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006846:	fa9c f6ac 	rbit	r6, ip
  if (value == 0U)
 800684a:	2e00      	cmp	r6, #0
 800684c:	f43f addf 	beq.w	800640e <HAL_ADCEx_InjectedConfigChannel+0x92>
  return __builtin_clz(value);
 8006850:	fab6 f486 	clz	r4, r6
 8006854:	e025      	b.n	80068a2 <HAL_ADCEx_InjectedConfigChannel+0x526>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006856:	020b      	lsls	r3, r1, #8
 8006858:	f57f aee3 	bpl.w	8006622 <HAL_ADCEx_InjectedConfigChannel+0x2a6>
 800685c:	e621      	b.n	80064a2 <HAL_ADCEx_InjectedConfigChannel+0x126>
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 800685e:	4628      	mov	r0, r5
 8006860:	e5b8      	b.n	80063d4 <HAL_ADCEx_InjectedConfigChannel+0x58>
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8006862:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
 8006866:	60d8      	str	r0, [r3, #12]
 8006868:	e646      	b.n	80064f8 <HAL_ADCEx_InjectedConfigChannel+0x17c>
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 800686a:	f3c4 6484 	ubfx	r4, r4, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800686e:	42a5      	cmp	r5, r4
 8006870:	d054      	beq.n	800691c <HAL_ADCEx_InjectedConfigChannel+0x5a0>
 8006872:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 8006874:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006876:	f103 0560 	add.w	r5, r3, #96	@ 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800687a:	f3c6 6684 	ubfx	r6, r6, #26, #5
 800687e:	f103 0864 	add.w	r8, r3, #100	@ 0x64
 8006882:	42a6      	cmp	r6, r4
 8006884:	d079      	beq.n	800697a <HAL_ADCEx_InjectedConfigChannel+0x5fe>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006886:	68ae      	ldr	r6, [r5, #8]
 8006888:	68ae      	ldr	r6, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800688a:	f105 0e08 	add.w	lr, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800688e:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8006892:	42a6      	cmp	r6, r4
 8006894:	d059      	beq.n	800694a <HAL_ADCEx_InjectedConfigChannel+0x5ce>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006896:	68ee      	ldr	r6, [r5, #12]
 8006898:	68ee      	ldr	r6, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800689a:	f105 070c 	add.w	r7, r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800689e:	f3c6 6584 	ubfx	r5, r6, #26, #5
 80068a2:	42ac      	cmp	r4, r5
 80068a4:	f000 8081 	beq.w	80069aa <HAL_ADCEx_InjectedConfigChannel+0x62e>
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 80068a8:	4664      	mov	r4, ip
 80068aa:	e5b0      	b.n	800640e <HAL_ADCEx_InjectedConfigChannel+0x92>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80068ac:	3c1e      	subs	r4, #30
 80068ae:	0524      	lsls	r4, r4, #20
 80068b0:	f044 7400 	orr.w	r4, r4, #33554432	@ 0x2000000
 80068b4:	e6e7      	b.n	8006686 <HAL_ADCEx_InjectedConfigChannel+0x30a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80068b6:	6dd5      	ldr	r5, [r2, #92]	@ 0x5c
 80068b8:	f045 0520 	orr.w	r5, r5, #32
 80068bc:	65d5      	str	r5, [r2, #92]	@ 0x5c
        tmp_hal_status = HAL_ERROR;
 80068be:	e61c      	b.n	80064fa <HAL_ADCEx_InjectedConfigChannel+0x17e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068c0:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 80068c4:	2d00      	cmp	r5, #0
 80068c6:	f000 808c 	beq.w	80069e2 <HAL_ADCEx_InjectedConfigChannel+0x666>
  return __builtin_clz(value);
 80068ca:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80068ce:	3501      	adds	r5, #1
 80068d0:	06ad      	lsls	r5, r5, #26
 80068d2:	f005 45f8 	and.w	r5, r5, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068d6:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 80068da:	2e00      	cmp	r6, #0
 80068dc:	d07f      	beq.n	80069de <HAL_ADCEx_InjectedConfigChannel+0x662>
  return __builtin_clz(value);
 80068de:	fab6 f686 	clz	r6, r6
 80068e2:	3601      	adds	r6, #1
 80068e4:	f006 061f 	and.w	r6, r6, #31
 80068e8:	2701      	movs	r7, #1
 80068ea:	fa07 f606 	lsl.w	r6, r7, r6
 80068ee:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068f0:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 80068f4:	2c00      	cmp	r4, #0
 80068f6:	d06f      	beq.n	80069d8 <HAL_ADCEx_InjectedConfigChannel+0x65c>
  return __builtin_clz(value);
 80068f8:	fab4 f484 	clz	r4, r4
 80068fc:	3401      	adds	r4, #1
 80068fe:	f004 041f 	and.w	r4, r4, #31
 8006902:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8006906:	e6bd      	b.n	8006684 <HAL_ADCEx_InjectedConfigChannel+0x308>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006908:	01cc      	lsls	r4, r1, #7
 800690a:	f53f adca 	bmi.w	80064a2 <HAL_ADCEx_InjectedConfigChannel+0x126>
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800690e:	4c36      	ldr	r4, [pc, #216]	@ (80069e8 <HAL_ADCEx_InjectedConfigChannel+0x66c>)
 8006910:	4d36      	ldr	r5, [pc, #216]	@ (80069ec <HAL_ADCEx_InjectedConfigChannel+0x670>)
 8006912:	4937      	ldr	r1, [pc, #220]	@ (80069f0 <HAL_ADCEx_InjectedConfigChannel+0x674>)
 8006914:	42a3      	cmp	r3, r4
 8006916:	bf18      	it	ne
 8006918:	460d      	movne	r5, r1
 800691a:	e6de      	b.n	80066da <HAL_ADCEx_InjectedConfigChannel+0x35e>
  MODIFY_REG(*preg,
 800691c:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
 800691e:	461d      	mov	r5, r3
 8006920:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8006924:	f845 4f60 	str.w	r4, [r5, #96]!
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8006928:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800692c:	6e5c      	ldr	r4, [r3, #100]	@ 0x64
 800692e:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
 8006930:	f3cc 0712 	ubfx	r7, ip, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006934:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006938:	f103 0864 	add.w	r8, r3, #100	@ 0x64
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 800693c:	4664      	mov	r4, ip
 800693e:	2f00      	cmp	r7, #0
 8006940:	f47f af5c 	bne.w	80067fc <HAL_ADCEx_InjectedConfigChannel+0x480>
 8006944:	f3cc 6484 	ubfx	r4, ip, #26, #5
 8006948:	e79b      	b.n	8006882 <HAL_ADCEx_InjectedConfigChannel+0x506>
 800694a:	f105 090c 	add.w	r9, r5, #12
  MODIFY_REG(*preg,
 800694e:	f8de 4000 	ldr.w	r4, [lr]
 8006952:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8006956:	f8ce 4000 	str.w	r4, [lr]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 800695a:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800695e:	68ec      	ldr	r4, [r5, #12]
 8006960:	68ed      	ldr	r5, [r5, #12]
 8006962:	f3cc 0612 	ubfx	r6, ip, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006966:	464f      	mov	r7, r9
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006968:	f3c5 6584 	ubfx	r5, r5, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 800696c:	4664      	mov	r4, ip
 800696e:	2e00      	cmp	r6, #0
 8006970:	f47f af69 	bne.w	8006846 <HAL_ADCEx_InjectedConfigChannel+0x4ca>
 8006974:	f3cc 6484 	ubfx	r4, ip, #26, #5
 8006978:	e793      	b.n	80068a2 <HAL_ADCEx_InjectedConfigChannel+0x526>
 800697a:	f105 0908 	add.w	r9, r5, #8
  MODIFY_REG(*preg,
 800697e:	f8d8 4000 	ldr.w	r4, [r8]
 8006982:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8006986:	f8c8 4000 	str.w	r4, [r8]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 800698a:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800698e:	68ac      	ldr	r4, [r5, #8]
 8006990:	68ae      	ldr	r6, [r5, #8]
 8006992:	f3cc 0712 	ubfx	r7, ip, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006996:	46ce      	mov	lr, r9
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006998:	f3c6 6684 	ubfx	r6, r6, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 800699c:	4664      	mov	r4, ip
 800699e:	2f00      	cmp	r7, #0
 80069a0:	f47f af3f 	bne.w	8006822 <HAL_ADCEx_InjectedConfigChannel+0x4a6>
 80069a4:	f3cc 6484 	ubfx	r4, ip, #26, #5
 80069a8:	e773      	b.n	8006892 <HAL_ADCEx_InjectedConfigChannel+0x516>
  MODIFY_REG(*preg,
 80069aa:	683c      	ldr	r4, [r7, #0]
 80069ac:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80069b0:	603c      	str	r4, [r7, #0]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 80069b2:	680c      	ldr	r4, [r1, #0]
}
 80069b4:	e52b      	b.n	800640e <HAL_ADCEx_InjectedConfigChannel+0x92>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80069b6:	68ee      	ldr	r6, [r5, #12]
 80069b8:	68ed      	ldr	r5, [r5, #12]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80069ba:	f3c5 6584 	ubfx	r5, r5, #26, #5
 80069be:	e742      	b.n	8006846 <HAL_ADCEx_InjectedConfigChannel+0x4ca>
 80069c0:	68ae      	ldr	r6, [r5, #8]
 80069c2:	68ae      	ldr	r6, [r5, #8]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80069c4:	f3c6 6684 	ubfx	r6, r6, #26, #5
 80069c8:	e72b      	b.n	8006822 <HAL_ADCEx_InjectedConfigChannel+0x4a6>
 80069ca:	2602      	movs	r6, #2
 80069cc:	e6d5      	b.n	800677a <HAL_ADCEx_InjectedConfigChannel+0x3fe>
 80069ce:	f04f 6580 	mov.w	r5, #67108864	@ 0x4000000
 80069d2:	e6c5      	b.n	8006760 <HAL_ADCEx_InjectedConfigChannel+0x3e4>
 80069d4:	4c07      	ldr	r4, [pc, #28]	@ (80069f4 <HAL_ADCEx_InjectedConfigChannel+0x678>)
 80069d6:	e656      	b.n	8006686 <HAL_ADCEx_InjectedConfigChannel+0x30a>
 80069d8:	f44f 1440 	mov.w	r4, #3145728	@ 0x300000
 80069dc:	e653      	b.n	8006686 <HAL_ADCEx_InjectedConfigChannel+0x30a>
 80069de:	2602      	movs	r6, #2
 80069e0:	e785      	b.n	80068ee <HAL_ADCEx_InjectedConfigChannel+0x572>
 80069e2:	f04f 6580 	mov.w	r5, #67108864	@ 0x4000000
 80069e6:	e776      	b.n	80068d6 <HAL_ADCEx_InjectedConfigChannel+0x55a>
 80069e8:	50000100 	.word	0x50000100
 80069ec:	50000300 	.word	0x50000300
 80069f0:	50000700 	.word	0x50000700
 80069f4:	fe500000 	.word	0xfe500000

080069f8 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80069f8:	f890 2058 	ldrb.w	r2, [r0, #88]	@ 0x58
 80069fc:	2a01      	cmp	r2, #1
 80069fe:	d04c      	beq.n	8006a9a <HAL_ADCEx_MultiModeConfigChannel+0xa2>
{
 8006a00:	b470      	push	{r4, r5, r6}

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8006a02:	6802      	ldr	r2, [r0, #0]
{
 8006a04:	b09d      	sub	sp, #116	@ 0x74
 8006a06:	4603      	mov	r3, r0
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8006a08:	2400      	movs	r4, #0
  __HAL_LOCK(hadc);
 8006a0a:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8006a0c:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8006a10:	9418      	str	r4, [sp, #96]	@ 0x60
  __HAL_LOCK(hadc);
 8006a12:	f883 0058 	strb.w	r0, [r3, #88]	@ 0x58
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8006a16:	9419      	str	r4, [sp, #100]	@ 0x64
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8006a18:	d00b      	beq.n	8006a32 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8006a1a:	4d46      	ldr	r5, [pc, #280]	@ (8006b34 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8006a1c:	42aa      	cmp	r2, r5
 8006a1e:	d03a      	beq.n	8006a96 <HAL_ADCEx_MultiModeConfigChannel+0x9e>

  if (tmp_hadc_slave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006a20:	6dda      	ldr	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006a22:	f883 4058 	strb.w	r4, [r3, #88]	@ 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006a26:	f042 0220 	orr.w	r2, r2, #32
 8006a2a:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8006a2c:	b01d      	add	sp, #116	@ 0x74
 8006a2e:	bc70      	pop	{r4, r5, r6}
 8006a30:	4770      	bx	lr
 8006a32:	4841      	ldr	r0, [pc, #260]	@ (8006b38 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006a34:	6880      	ldr	r0, [r0, #8]
 8006a36:	0740      	lsls	r0, r0, #29
 8006a38:	d50b      	bpl.n	8006a52 <HAL_ADCEx_MultiModeConfigChannel+0x5a>
 8006a3a:	6892      	ldr	r2, [r2, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006a3c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006a3e:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 8006a42:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006a44:	65da      	str	r2, [r3, #92]	@ 0x5c
  __HAL_UNLOCK(hadc);
 8006a46:	2200      	movs	r2, #0
 8006a48:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
}
 8006a4c:	b01d      	add	sp, #116	@ 0x74
 8006a4e:	bc70      	pop	{r4, r5, r6}
 8006a50:	4770      	bx	lr
 8006a52:	6890      	ldr	r0, [r2, #8]
 8006a54:	0740      	lsls	r0, r0, #29
 8006a56:	d4f1      	bmi.n	8006a3c <HAL_ADCEx_MultiModeConfigChannel+0x44>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006a58:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006a5c:	6808      	ldr	r0, [r1, #0]
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006a5e:	d01e      	beq.n	8006a9e <HAL_ADCEx_MultiModeConfigChannel+0xa6>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006a60:	2800      	cmp	r0, #0
 8006a62:	d131      	bne.n	8006ac8 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006a64:	4935      	ldr	r1, [pc, #212]	@ (8006b3c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006a66:	4c33      	ldr	r4, [pc, #204]	@ (8006b34 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8006a68:	688a      	ldr	r2, [r1, #8]
 8006a6a:	4835      	ldr	r0, [pc, #212]	@ (8006b40 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8006a6c:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8006a70:	608a      	str	r2, [r1, #8]
 8006a72:	68a4      	ldr	r4, [r4, #8]
 8006a74:	6882      	ldr	r2, [r0, #8]
 8006a76:	07d6      	lsls	r6, r2, #31
 8006a78:	d458      	bmi.n	8006b2c <HAL_ADCEx_MultiModeConfigChannel+0x134>
 8006a7a:	4a32      	ldr	r2, [pc, #200]	@ (8006b44 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8006a7c:	6892      	ldr	r2, [r2, #8]
 8006a7e:	07d0      	lsls	r0, r2, #31
 8006a80:	d407      	bmi.n	8006a92 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006a82:	07e2      	lsls	r2, r4, #31
 8006a84:	d405      	bmi.n	8006a92 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006a86:	688a      	ldr	r2, [r1, #8]
 8006a88:	f422 6271 	bic.w	r2, r2, #3856	@ 0xf10
 8006a8c:	f022 020f 	bic.w	r2, r2, #15
 8006a90:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006a92:	2000      	movs	r0, #0
 8006a94:	e7d7      	b.n	8006a46 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8006a96:	482a      	ldr	r0, [pc, #168]	@ (8006b40 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8006a98:	e7cc      	b.n	8006a34 <HAL_ADCEx_MultiModeConfigChannel+0x3c>
  __HAL_LOCK(hadc);
 8006a9a:	2002      	movs	r0, #2
}
 8006a9c:	4770      	bx	lr
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006a9e:	2800      	cmp	r0, #0
 8006aa0:	d034      	beq.n	8006b0c <HAL_ADCEx_MultiModeConfigChannel+0x114>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006aa2:	4d29      	ldr	r5, [pc, #164]	@ (8006b48 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8006aa4:	684e      	ldr	r6, [r1, #4]
 8006aa6:	68ac      	ldr	r4, [r5, #8]
 8006aa8:	f893 c038 	ldrb.w	ip, [r3, #56]	@ 0x38
 8006aac:	f424 4460 	bic.w	r4, r4, #57344	@ 0xe000
 8006ab0:	4334      	orrs	r4, r6
 8006ab2:	ea44 344c 	orr.w	r4, r4, ip, lsl #13
 8006ab6:	60ac      	str	r4, [r5, #8]
 8006ab8:	6892      	ldr	r2, [r2, #8]
 8006aba:	07d4      	lsls	r4, r2, #31
 8006abc:	d433      	bmi.n	8006b26 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8006abe:	4a1e      	ldr	r2, [pc, #120]	@ (8006b38 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8006ac0:	6892      	ldr	r2, [r2, #8]
 8006ac2:	07d4      	lsls	r4, r2, #31
 8006ac4:	d518      	bpl.n	8006af8 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8006ac6:	e7e4      	b.n	8006a92 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8006ac8:	4d1c      	ldr	r5, [pc, #112]	@ (8006b3c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8006aca:	684c      	ldr	r4, [r1, #4]
 8006acc:	68aa      	ldr	r2, [r5, #8]
 8006ace:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8006ad2:	4322      	orrs	r2, r4
 8006ad4:	f893 4038 	ldrb.w	r4, [r3, #56]	@ 0x38
 8006ad8:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 8006adc:	60aa      	str	r2, [r5, #8]
 8006ade:	4a15      	ldr	r2, [pc, #84]	@ (8006b34 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8006ae0:	6894      	ldr	r4, [r2, #8]
 8006ae2:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8006ae6:	6892      	ldr	r2, [r2, #8]
 8006ae8:	07d6      	lsls	r6, r2, #31
 8006aea:	d41f      	bmi.n	8006b2c <HAL_ADCEx_MultiModeConfigChannel+0x134>
 8006aec:	4a15      	ldr	r2, [pc, #84]	@ (8006b44 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8006aee:	6892      	ldr	r2, [r2, #8]
 8006af0:	07d2      	lsls	r2, r2, #31
 8006af2:	d4ce      	bmi.n	8006a92 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006af4:	07e6      	lsls	r6, r4, #31
 8006af6:	d4cc      	bmi.n	8006a92 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
        MODIFY_REG(tmpADC_Common->CCR,
 8006af8:	68ac      	ldr	r4, [r5, #8]
 8006afa:	688a      	ldr	r2, [r1, #8]
 8006afc:	f424 6171 	bic.w	r1, r4, #3856	@ 0xf10
 8006b00:	4302      	orrs	r2, r0
 8006b02:	f021 010f 	bic.w	r1, r1, #15
 8006b06:	430a      	orrs	r2, r1
 8006b08:	60aa      	str	r2, [r5, #8]
 8006b0a:	e7c2      	b.n	8006a92 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006b0c:	490e      	ldr	r1, [pc, #56]	@ (8006b48 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8006b0e:	6888      	ldr	r0, [r1, #8]
 8006b10:	f420 4060 	bic.w	r0, r0, #57344	@ 0xe000
 8006b14:	6088      	str	r0, [r1, #8]
 8006b16:	6892      	ldr	r2, [r2, #8]
 8006b18:	07d5      	lsls	r5, r2, #31
 8006b1a:	d404      	bmi.n	8006b26 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8006b1c:	4a06      	ldr	r2, [pc, #24]	@ (8006b38 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8006b1e:	6892      	ldr	r2, [r2, #8]
 8006b20:	07d4      	lsls	r4, r2, #31
 8006b22:	d4b6      	bmi.n	8006a92 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8006b24:	e7af      	b.n	8006a86 <HAL_ADCEx_MultiModeConfigChannel+0x8e>
 8006b26:	4a04      	ldr	r2, [pc, #16]	@ (8006b38 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8006b28:	6892      	ldr	r2, [r2, #8]
 8006b2a:	e7b2      	b.n	8006a92 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8006b2c:	4a05      	ldr	r2, [pc, #20]	@ (8006b44 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8006b2e:	6892      	ldr	r2, [r2, #8]
 8006b30:	e7af      	b.n	8006a92 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8006b32:	bf00      	nop
 8006b34:	50000400 	.word	0x50000400
 8006b38:	50000100 	.word	0x50000100
 8006b3c:	50000700 	.word	0x50000700
 8006b40:	50000500 	.word	0x50000500
 8006b44:	50000600 	.word	0x50000600
 8006b48:	50000300 	.word	0x50000300

08006b4c <HAL_CORDIC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8006b4c:	b1b0      	cbz	r0, 8006b7c <HAL_CORDIC_Init+0x30>
{
 8006b4e:	b510      	push	{r4, lr}

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8006b50:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8006b54:	4604      	mov	r4, r0
 8006b56:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006b5a:	b153      	cbz	r3, 8006b72 <HAL_CORDIC_Init+0x26>
    HAL_CORDIC_MspInit(hcordic);
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8006b5c:	2000      	movs	r0, #0

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8006b5e:	2301      	movs	r3, #1
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8006b60:	6260      	str	r0, [r4, #36]	@ 0x24
  hcordic->State = HAL_CORDIC_STATE_READY;
 8006b62:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
  hcordic->pInBuff = NULL;
 8006b66:	e9c4 0001 	strd	r0, r0, [r4, #4]
  hcordic->NbCalcToOrder = 0U;
 8006b6a:	e9c4 0003 	strd	r0, r0, [r4, #12]
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8006b6e:	6160      	str	r0, [r4, #20]

  /* Return function status */
  return HAL_OK;
}
 8006b70:	bd10      	pop	{r4, pc}
    hcordic->Lock = HAL_UNLOCKED;
 8006b72:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_CORDIC_MspInit(hcordic);
 8006b76:	f7fe fca3 	bl	80054c0 <HAL_CORDIC_MspInit>
 8006b7a:	e7ef      	b.n	8006b5c <HAL_CORDIC_Init+0x10>
    return HAL_ERROR;
 8006b7c:	2001      	movs	r0, #1
}
 8006b7e:	4770      	bx	lr

08006b80 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006b80:	4907      	ldr	r1, [pc, #28]	@ (8006ba0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8006b82:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006b84:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006b86:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006b8a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006b8e:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006b90:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006b92:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006b96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8006b9a:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8006b9c:	4770      	bx	lr
 8006b9e:	bf00      	nop
 8006ba0:	e000ed00 	.word	0xe000ed00

08006ba4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006ba4:	4b1b      	ldr	r3, [pc, #108]	@ (8006c14 <HAL_NVIC_SetPriority+0x70>)
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006bac:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006bae:	f1c3 0e07 	rsb	lr, r3, #7
 8006bb2:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006bb6:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006bba:	bf28      	it	cs
 8006bbc:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006bc0:	f1bc 0f06 	cmp.w	ip, #6
 8006bc4:	d91c      	bls.n	8006c00 <HAL_NVIC_SetPriority+0x5c>
 8006bc6:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006bca:	f04f 33ff 	mov.w	r3, #4294967295
 8006bce:	fa03 f30c 	lsl.w	r3, r3, ip
 8006bd2:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8006bda:	fa03 f30e 	lsl.w	r3, r3, lr
 8006bde:	ea21 0303 	bic.w	r3, r1, r3
 8006be2:	fa03 f30c 	lsl.w	r3, r3, ip
 8006be6:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006be8:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8006bea:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006bec:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8006bee:	db0a      	blt.n	8006c06 <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006bf0:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8006bf4:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8006bf8:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8006bfc:	f85d fb04 	ldr.w	pc, [sp], #4
 8006c00:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006c02:	4694      	mov	ip, r2
 8006c04:	e7e7      	b.n	8006bd6 <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c06:	4a04      	ldr	r2, [pc, #16]	@ (8006c18 <HAL_NVIC_SetPriority+0x74>)
 8006c08:	f000 000f 	and.w	r0, r0, #15
 8006c0c:	4402      	add	r2, r0
 8006c0e:	7613      	strb	r3, [r2, #24]
 8006c10:	f85d fb04 	ldr.w	pc, [sp], #4
 8006c14:	e000ed00 	.word	0xe000ed00
 8006c18:	e000ecfc 	.word	0xe000ecfc

08006c1c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006c1c:	2800      	cmp	r0, #0
 8006c1e:	db07      	blt.n	8006c30 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006c20:	4a04      	ldr	r2, [pc, #16]	@ (8006c34 <HAL_NVIC_EnableIRQ+0x18>)
 8006c22:	0941      	lsrs	r1, r0, #5
 8006c24:	2301      	movs	r3, #1
 8006c26:	f000 001f 	and.w	r0, r0, #31
 8006c2a:	4083      	lsls	r3, r0
 8006c2c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006c30:	4770      	bx	lr
 8006c32:	bf00      	nop
 8006c34:	e000e100 	.word	0xe000e100

08006c38 <HAL_NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8006c38:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006c3c:	4905      	ldr	r1, [pc, #20]	@ (8006c54 <HAL_NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006c3e:	4b06      	ldr	r3, [pc, #24]	@ (8006c58 <HAL_NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006c40:	68ca      	ldr	r2, [r1, #12]
 8006c42:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006c46:	4313      	orrs	r3, r2
 8006c48:	60cb      	str	r3, [r1, #12]
 8006c4a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8006c4e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8006c50:	e7fd      	b.n	8006c4e <HAL_NVIC_SystemReset+0x16>
 8006c52:	bf00      	nop
 8006c54:	e000ed00 	.word	0xe000ed00
 8006c58:	05fa0004 	.word	0x05fa0004

08006c5c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006c5c:	3801      	subs	r0, #1
 8006c5e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8006c62:	d301      	bcc.n	8006c68 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006c64:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8006c66:	4770      	bx	lr
{
 8006c68:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006c6a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c6e:	4c07      	ldr	r4, [pc, #28]	@ (8006c8c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006c70:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c72:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 8006c76:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006c7a:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006c7c:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006c7e:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006c80:	619a      	str	r2, [r3, #24]
}
 8006c82:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006c86:	6119      	str	r1, [r3, #16]
 8006c88:	4770      	bx	lr
 8006c8a:	bf00      	nop
 8006c8c:	e000ed00 	.word	0xe000ed00

08006c90 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop

08006c94 <HAL_SYSTICK_IRQHandler>:
{
 8006c94:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8006c96:	f7ff fffb 	bl	8006c90 <HAL_SYSTICK_Callback>
}
 8006c9a:	bd08      	pop	{r3, pc}

08006c9c <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006c9c:	2800      	cmp	r0, #0
 8006c9e:	d076      	beq.n	8006d8e <HAL_DMA_Init+0xf2>
{
 8006ca0:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006ca2:	4a3c      	ldr	r2, [pc, #240]	@ (8006d94 <HAL_DMA_Init+0xf8>)
 8006ca4:	6804      	ldr	r4, [r0, #0]
 8006ca6:	4294      	cmp	r4, r2
 8006ca8:	4603      	mov	r3, r0
 8006caa:	d95c      	bls.n	8006d66 <HAL_DMA_Init+0xca>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006cac:	493a      	ldr	r1, [pc, #232]	@ (8006d98 <HAL_DMA_Init+0xfc>)
 8006cae:	4a3b      	ldr	r2, [pc, #236]	@ (8006d9c <HAL_DMA_Init+0x100>)
    hdma->DmaBaseAddress = DMA2;
 8006cb0:	483b      	ldr	r0, [pc, #236]	@ (8006da0 <HAL_DMA_Init+0x104>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006cb2:	4421      	add	r1, r4
 8006cb4:	fba2 2101 	umull	r2, r1, r2, r1
 8006cb8:	0909      	lsrs	r1, r1, #4
 8006cba:	0089      	lsls	r1, r1, #2
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006cbc:	2202      	movs	r2, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006cbe:	689d      	ldr	r5, [r3, #8]
  hdma->State = HAL_DMA_STATE_BUSY;
 8006cc0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  tmp |=  hdma->Init.Direction        |
 8006cc4:	68da      	ldr	r2, [r3, #12]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006cc6:	4e35      	ldr	r6, [pc, #212]	@ (8006d9c <HAL_DMA_Init+0x100>)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006cc8:	4f36      	ldr	r7, [pc, #216]	@ (8006da4 <HAL_DMA_Init+0x108>)
 8006cca:	e9c3 0110 	strd	r0, r1, [r3, #64]	@ 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006cce:	6918      	ldr	r0, [r3, #16]
  tmp |=  hdma->Init.Direction        |
 8006cd0:	432a      	orrs	r2, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006cd2:	4302      	orrs	r2, r0
 8006cd4:	6958      	ldr	r0, [r3, #20]
 8006cd6:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006cd8:	6998      	ldr	r0, [r3, #24]
 8006cda:	4302      	orrs	r2, r0
 8006cdc:	69d8      	ldr	r0, [r3, #28]
 8006cde:	4302      	orrs	r2, r0
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006ce0:	b2e0      	uxtb	r0, r4
 8006ce2:	3808      	subs	r0, #8
 8006ce4:	fba6 6000 	umull	r6, r0, r6, r0
  tmp = hdma->Instance->CCR;
 8006ce8:	6826      	ldr	r6, [r4, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006cea:	f426 4cff 	bic.w	ip, r6, #32640	@ 0x7f80
          hdma->Init.Mode                | hdma->Init.Priority;
 8006cee:	6a1e      	ldr	r6, [r3, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006cf0:	f02c 0c70 	bic.w	ip, ip, #112	@ 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8006cf4:	4332      	orrs	r2, r6
  tmp |=  hdma->Init.Direction        |
 8006cf6:	ea42 020c 	orr.w	r2, r2, ip
  hdma->Instance->CCR = tmp;
 8006cfa:	6022      	str	r2, [r4, #0]
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006cfc:	4e25      	ldr	r6, [pc, #148]	@ (8006d94 <HAL_DMA_Init+0xf8>)
 8006cfe:	4a2a      	ldr	r2, [pc, #168]	@ (8006da8 <HAL_DMA_Init+0x10c>)
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006d00:	f3c0 1004 	ubfx	r0, r0, #4, #5
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006d04:	42b4      	cmp	r4, r6
 8006d06:	bf98      	it	ls
 8006d08:	463a      	movls	r2, r7
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006d0a:	f206 4679 	addw	r6, r6, #1145	@ 0x479
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006d0e:	2401      	movs	r4, #1
 8006d10:	fa04 f000 	lsl.w	r0, r4, r0
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006d14:	64de      	str	r6, [r3, #76]	@ 0x4c
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006d16:	f5b5 4f80 	cmp.w	r5, #16384	@ 0x4000
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006d1a:	eb01 0602 	add.w	r6, r1, r2
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006d1e:	6518      	str	r0, [r3, #80]	@ 0x50
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006d20:	649e      	str	r6, [r3, #72]	@ 0x48
 8006d22:	ea4f 0191 	mov.w	r1, r1, lsr #2
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006d26:	d027      	beq.n	8006d78 <HAL_DMA_Init+0xdc>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006d28:	685e      	ldr	r6, [r3, #4]
 8006d2a:	b2f5      	uxtb	r5, r6
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006d2c:	3e01      	subs	r6, #1
 8006d2e:	2e03      	cmp	r6, #3
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006d30:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006d34:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006d38:	d824      	bhi.n	8006d84 <HAL_DMA_Init+0xe8>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006d3a:	4a1c      	ldr	r2, [pc, #112]	@ (8006dac <HAL_DMA_Init+0x110>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006d3c:	481c      	ldr	r0, [pc, #112]	@ (8006db0 <HAL_DMA_Init+0x114>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006d3e:	442a      	add	r2, r5
 8006d40:	0092      	lsls	r2, r2, #2

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006d42:	3d01      	subs	r5, #1
 8006d44:	40ac      	lsls	r4, r5
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006d46:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006d48:	e9c3 2015 	strd	r2, r0, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006d4c:	65dc      	str	r4, [r3, #92]	@ 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006d4e:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006d50:	4a18      	ldr	r2, [pc, #96]	@ (8006db4 <HAL_DMA_Init+0x118>)
 8006d52:	6454      	str	r4, [r2, #68]	@ 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006d54:	2000      	movs	r0, #0
  hdma->State  = HAL_DMA_STATE_READY;
 8006d56:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006d58:	63d8      	str	r0, [r3, #60]	@ 0x3c
  hdma->Lock = HAL_UNLOCKED;
 8006d5a:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 8006d5e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
}
 8006d62:	bcf0      	pop	{r4, r5, r6, r7}
 8006d64:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006d66:	4914      	ldr	r1, [pc, #80]	@ (8006db8 <HAL_DMA_Init+0x11c>)
 8006d68:	4a0c      	ldr	r2, [pc, #48]	@ (8006d9c <HAL_DMA_Init+0x100>)
    hdma->DmaBaseAddress = DMA1;
 8006d6a:	4814      	ldr	r0, [pc, #80]	@ (8006dbc <HAL_DMA_Init+0x120>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006d6c:	4421      	add	r1, r4
 8006d6e:	fba2 2101 	umull	r2, r1, r2, r1
 8006d72:	0909      	lsrs	r1, r1, #4
 8006d74:	0089      	lsls	r1, r1, #2
    hdma->DmaBaseAddress = DMA1;
 8006d76:	e7a1      	b.n	8006cbc <HAL_DMA_Init+0x20>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006d78:	2400      	movs	r4, #0
 8006d7a:	605c      	str	r4, [r3, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006d7c:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006d80:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    hdma->DMAmuxRequestGen = 0U;
 8006d84:	2200      	movs	r2, #0
 8006d86:	e9c3 2215 	strd	r2, r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006d8a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006d8c:	e7e2      	b.n	8006d54 <HAL_DMA_Init+0xb8>
    return HAL_ERROR;
 8006d8e:	2001      	movs	r0, #1
}
 8006d90:	4770      	bx	lr
 8006d92:	bf00      	nop
 8006d94:	40020407 	.word	0x40020407
 8006d98:	bffdfbf8 	.word	0xbffdfbf8
 8006d9c:	cccccccd 	.word	0xcccccccd
 8006da0:	40020400 	.word	0x40020400
 8006da4:	40020800 	.word	0x40020800
 8006da8:	40020820 	.word	0x40020820
 8006dac:	1000823f 	.word	0x1000823f
 8006db0:	40020940 	.word	0x40020940
 8006db4:	40020900 	.word	0x40020900
 8006db8:	bffdfff8 	.word	0xbffdfff8
 8006dbc:	40020000 	.word	0x40020000

08006dc0 <HAL_DMA_Start_IT>:
{
 8006dc0:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 8006dc2:	f890 4024 	ldrb.w	r4, [r0, #36]	@ 0x24
 8006dc6:	2c01      	cmp	r4, #1
 8006dc8:	d009      	beq.n	8006dde <HAL_DMA_Start_IT+0x1e>
 8006dca:	2401      	movs	r4, #1
 8006dcc:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 8006dd0:	f890 4025 	ldrb.w	r4, [r0, #37]	@ 0x25
 8006dd4:	2c01      	cmp	r4, #1
 8006dd6:	d005      	beq.n	8006de4 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma);
 8006dd8:	2300      	movs	r3, #0
 8006dda:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  __HAL_LOCK(hdma);
 8006dde:	2002      	movs	r0, #2
}
 8006de0:	bcf0      	pop	{r4, r5, r6, r7}
 8006de2:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8006de4:	2402      	movs	r4, #2
 8006de6:	f880 4025 	strb.w	r4, [r0, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006dea:	2400      	movs	r4, #0
 8006dec:	63c4      	str	r4, [r0, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 8006dee:	6804      	ldr	r4, [r0, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006df0:	6cc6      	ldr	r6, [r0, #76]	@ 0x4c
    __HAL_DMA_DISABLE(hdma);
 8006df2:	6825      	ldr	r5, [r4, #0]
 8006df4:	f025 0501 	bic.w	r5, r5, #1
 8006df8:	6025      	str	r5, [r4, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006dfa:	e9d0 7514 	ldrd	r7, r5, [r0, #80]	@ 0x50
 8006dfe:	6077      	str	r7, [r6, #4]
  if (hdma->DMAmuxRequestGen != 0U)
 8006e00:	b115      	cbz	r5, 8006e08 <HAL_DMA_Start_IT+0x48>
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006e02:	e9d0 6716 	ldrd	r6, r7, [r0, #88]	@ 0x58
 8006e06:	6077      	str	r7, [r6, #4]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006e08:	6c46      	ldr	r6, [r0, #68]	@ 0x44
 8006e0a:	6c07      	ldr	r7, [r0, #64]	@ 0x40
 8006e0c:	f006 0c1f 	and.w	ip, r6, #31
 8006e10:	2601      	movs	r6, #1
 8006e12:	fa06 f60c 	lsl.w	r6, r6, ip
 8006e16:	607e      	str	r6, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 8006e18:	6063      	str	r3, [r4, #4]
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006e1a:	6883      	ldr	r3, [r0, #8]
 8006e1c:	2b10      	cmp	r3, #16
    if (NULL != hdma->XferHalfCpltCallback)
 8006e1e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    hdma->Instance->CPAR = DstAddress;
 8006e20:	bf0b      	itete	eq
 8006e22:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 8006e24:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8006e26:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 8006e28:	60e2      	strne	r2, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 8006e2a:	b1bb      	cbz	r3, 8006e5c <HAL_DMA_Start_IT+0x9c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006e2c:	6823      	ldr	r3, [r4, #0]
 8006e2e:	f043 030e 	orr.w	r3, r3, #14
 8006e32:	6023      	str	r3, [r4, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006e34:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	03d2      	lsls	r2, r2, #15
 8006e3a:	d503      	bpl.n	8006e44 <HAL_DMA_Start_IT+0x84>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006e42:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8006e44:	b11d      	cbz	r5, 8006e4e <HAL_DMA_Start_IT+0x8e>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006e46:	682b      	ldr	r3, [r5, #0]
 8006e48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e4c:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 8006e4e:	6823      	ldr	r3, [r4, #0]
 8006e50:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8006e54:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8006e56:	6023      	str	r3, [r4, #0]
}
 8006e58:	bcf0      	pop	{r4, r5, r6, r7}
 8006e5a:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006e5c:	6823      	ldr	r3, [r4, #0]
 8006e5e:	f023 0304 	bic.w	r3, r3, #4
 8006e62:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006e64:	6823      	ldr	r3, [r4, #0]
 8006e66:	f043 030a 	orr.w	r3, r3, #10
 8006e6a:	6023      	str	r3, [r4, #0]
 8006e6c:	e7e2      	b.n	8006e34 <HAL_DMA_Start_IT+0x74>
 8006e6e:	bf00      	nop

08006e70 <HAL_DMA_IRQHandler>:
{
 8006e70:	b470      	push	{r4, r5, r6}
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006e72:	6c43      	ldr	r3, [r0, #68]	@ 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006e74:	6c06      	ldr	r6, [r0, #64]	@ 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8006e76:	6805      	ldr	r5, [r0, #0]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006e78:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8006e7a:	682c      	ldr	r4, [r5, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006e7c:	f003 031f 	and.w	r3, r3, #31
 8006e80:	2204      	movs	r2, #4
 8006e82:	409a      	lsls	r2, r3
 8006e84:	420a      	tst	r2, r1
 8006e86:	d00e      	beq.n	8006ea6 <HAL_DMA_IRQHandler+0x36>
 8006e88:	f014 0f04 	tst.w	r4, #4
 8006e8c:	d00b      	beq.n	8006ea6 <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006e8e:	682b      	ldr	r3, [r5, #0]
 8006e90:	069b      	lsls	r3, r3, #26
 8006e92:	d403      	bmi.n	8006e9c <HAL_DMA_IRQHandler+0x2c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006e94:	682b      	ldr	r3, [r5, #0]
 8006e96:	f023 0304 	bic.w	r3, r3, #4
 8006e9a:	602b      	str	r3, [r5, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 8006e9c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006e9e:	6072      	str	r2, [r6, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8006ea0:	b1cb      	cbz	r3, 8006ed6 <HAL_DMA_IRQHandler+0x66>
}
 8006ea2:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8006ea4:	4718      	bx	r3
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006ea6:	2202      	movs	r2, #2
 8006ea8:	409a      	lsls	r2, r3
 8006eaa:	420a      	tst	r2, r1
 8006eac:	d015      	beq.n	8006eda <HAL_DMA_IRQHandler+0x6a>
           && (0U != (source_it & DMA_IT_TC)))
 8006eae:	f014 0f02 	tst.w	r4, #2
 8006eb2:	d012      	beq.n	8006eda <HAL_DMA_IRQHandler+0x6a>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006eb4:	682b      	ldr	r3, [r5, #0]
 8006eb6:	0699      	lsls	r1, r3, #26
 8006eb8:	d406      	bmi.n	8006ec8 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006eba:	682b      	ldr	r3, [r5, #0]
 8006ebc:	f023 030a 	bic.w	r3, r3, #10
 8006ec0:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
    if (hdma->XferCpltCallback != NULL)
 8006ec8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006eca:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 8006ecc:	2100      	movs	r1, #0
 8006ece:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
    if (hdma->XferCpltCallback != NULL)
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d1e5      	bne.n	8006ea2 <HAL_DMA_IRQHandler+0x32>
}
 8006ed6:	bc70      	pop	{r4, r5, r6}
 8006ed8:	4770      	bx	lr
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006eda:	2208      	movs	r2, #8
 8006edc:	409a      	lsls	r2, r3
 8006ede:	420a      	tst	r2, r1
 8006ee0:	d0f9      	beq.n	8006ed6 <HAL_DMA_IRQHandler+0x66>
           && (0U != (source_it & DMA_IT_TE)))
 8006ee2:	0722      	lsls	r2, r4, #28
 8006ee4:	d5f7      	bpl.n	8006ed6 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006ee6:	682a      	ldr	r2, [r5, #0]
    if (hdma->XferErrorCallback != NULL)
 8006ee8:	6b41      	ldr	r1, [r0, #52]	@ 0x34
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006eea:	f022 020e 	bic.w	r2, r2, #14
 8006eee:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	fa02 f303 	lsl.w	r3, r2, r3
    __HAL_UNLOCK(hdma);
 8006ef6:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006ef8:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006efa:	63c2      	str	r2, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8006efc:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24
    hdma->State = HAL_DMA_STATE_READY;
 8006f00:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
    if (hdma->XferErrorCallback != NULL)
 8006f04:	2900      	cmp	r1, #0
 8006f06:	d0e6      	beq.n	8006ed6 <HAL_DMA_IRQHandler+0x66>
}
 8006f08:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8006f0a:	4708      	bx	r1

08006f0c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006f0c:	680b      	ldr	r3, [r1, #0]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	f000 8198 	beq.w	8007244 <HAL_GPIO_Init+0x338>
{
 8006f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f18:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 8006f1c:	b085      	sub	sp, #20
  uint32_t position = 0x00U;
 8006f1e:	f04f 0200 	mov.w	r2, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006f22:	f04f 0b01 	mov.w	fp, #1
 8006f26:	f000 810d 	beq.w	8007144 <HAL_GPIO_Init+0x238>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006f2a:	f8df e34c 	ldr.w	lr, [pc, #844]	@ 8007278 <HAL_GPIO_Init+0x36c>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006f2e:	9300      	str	r3, [sp, #0]
    if (iocurrent != 0x00u)
 8006f30:	9b00      	ldr	r3, [sp, #0]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006f32:	fa0b fc02 	lsl.w	ip, fp, r2
    if (iocurrent != 0x00u)
 8006f36:	ea1c 0a03 	ands.w	sl, ip, r3
 8006f3a:	d077      	beq.n	800702c <HAL_GPIO_Init+0x120>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006f3c:	684d      	ldr	r5, [r1, #4]
 8006f3e:	f005 0703 	and.w	r7, r5, #3
 8006f42:	0054      	lsls	r4, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006f44:	2303      	movs	r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006f46:	f107 38ff 	add.w	r8, r7, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006f4a:	fa03 f604 	lsl.w	r6, r3, r4
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006f4e:	f1b8 0f01 	cmp.w	r8, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006f52:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006f56:	f240 8119 	bls.w	800718c <HAL_GPIO_Init+0x280>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006f5a:	2f03      	cmp	r7, #3
 8006f5c:	f040 8179 	bne.w	8007252 <HAL_GPIO_Init+0x346>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006f60:	fa07 f404 	lsl.w	r4, r7, r4
      temp = GPIOx->MODER;
 8006f64:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006f66:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006f68:	4334      	orrs	r4, r6
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006f6a:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8006f6e:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006f70:	d05c      	beq.n	800702c <HAL_GPIO_Init+0x120>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f72:	4ebe      	ldr	r6, [pc, #760]	@ (800726c <HAL_GPIO_Init+0x360>)
 8006f74:	6e34      	ldr	r4, [r6, #96]	@ 0x60
 8006f76:	f044 0401 	orr.w	r4, r4, #1
 8006f7a:	6634      	str	r4, [r6, #96]	@ 0x60
 8006f7c:	6e34      	ldr	r4, [r6, #96]	@ 0x60
 8006f7e:	f004 0401 	and.w	r4, r4, #1
 8006f82:	9403      	str	r4, [sp, #12]
 8006f84:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8006f86:	f022 0403 	bic.w	r4, r2, #3
 8006f8a:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006f8e:	f002 0703 	and.w	r7, r2, #3
 8006f92:	230f      	movs	r3, #15
 8006f94:	f504 3480 	add.w	r4, r4, #65536	@ 0x10000
 8006f98:	00bf      	lsls	r7, r7, #2
 8006f9a:	fa03 fc07 	lsl.w	ip, r3, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006f9e:	4bb4      	ldr	r3, [pc, #720]	@ (8007270 <HAL_GPIO_Init+0x364>)
        temp = SYSCFG->EXTICR[position >> 2U];
 8006fa0:	68a6      	ldr	r6, [r4, #8]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006fa2:	4298      	cmp	r0, r3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006fa4:	ea26 060c 	bic.w	r6, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006fa8:	f000 8140 	beq.w	800722c <HAL_GPIO_Init+0x320>
 8006fac:	4bb1      	ldr	r3, [pc, #708]	@ (8007274 <HAL_GPIO_Init+0x368>)
 8006fae:	4298      	cmp	r0, r3
 8006fb0:	f000 812d 	beq.w	800720e <HAL_GPIO_Init+0x302>
 8006fb4:	f8df c2c4 	ldr.w	ip, [pc, #708]	@ 800727c <HAL_GPIO_Init+0x370>
 8006fb8:	4560      	cmp	r0, ip
 8006fba:	f000 813d 	beq.w	8007238 <HAL_GPIO_Init+0x32c>
 8006fbe:	f8df c2c0 	ldr.w	ip, [pc, #704]	@ 8007280 <HAL_GPIO_Init+0x374>
 8006fc2:	4560      	cmp	r0, ip
 8006fc4:	f000 813f 	beq.w	8007246 <HAL_GPIO_Init+0x33a>
 8006fc8:	f8df c2b8 	ldr.w	ip, [pc, #696]	@ 8007284 <HAL_GPIO_Init+0x378>
 8006fcc:	4560      	cmp	r0, ip
 8006fce:	bf0c      	ite	eq
 8006fd0:	f04f 0c05 	moveq.w	ip, #5
 8006fd4:	f04f 0c06 	movne.w	ip, #6
 8006fd8:	fa0c f707 	lsl.w	r7, ip, r7
 8006fdc:	433e      	orrs	r6, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006fde:	60a6      	str	r6, [r4, #8]
        temp = EXTI->RTSR1;
 8006fe0:	f8de 4008 	ldr.w	r4, [lr, #8]
        temp &= ~(iocurrent);
 8006fe4:	ea6f 060a 	mvn.w	r6, sl
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006fe8:	02ef      	lsls	r7, r5, #11
        temp &= ~(iocurrent);
 8006fea:	bf54      	ite	pl
 8006fec:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8006fee:	ea4a 0404 	orrmi.w	r4, sl, r4
        }
        EXTI->RTSR1 = temp;
 8006ff2:	f8ce 4008 	str.w	r4, [lr, #8]

        temp = EXTI->FTSR1;
 8006ff6:	f8de 400c 	ldr.w	r4, [lr, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006ffa:	02ab      	lsls	r3, r5, #10
        temp &= ~(iocurrent);
 8006ffc:	bf54      	ite	pl
 8006ffe:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8007000:	ea4a 0404 	orrmi.w	r4, sl, r4
        }
        EXTI->FTSR1 = temp;
 8007004:	f8ce 400c 	str.w	r4, [lr, #12]

        temp = EXTI->EMR1;
 8007008:	f8de 4004 	ldr.w	r4, [lr, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800700c:	03af      	lsls	r7, r5, #14
        temp &= ~(iocurrent);
 800700e:	bf54      	ite	pl
 8007010:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8007012:	ea4a 0404 	orrmi.w	r4, sl, r4
        }
        EXTI->EMR1 = temp;
 8007016:	f8ce 4004 	str.w	r4, [lr, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800701a:	f8de 4000 	ldr.w	r4, [lr]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800701e:	03eb      	lsls	r3, r5, #15
        temp &= ~(iocurrent);
 8007020:	bf54      	ite	pl
 8007022:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8007024:	ea4a 0404 	orrmi.w	r4, sl, r4
        }
        EXTI->IMR1 = temp;
 8007028:	f8ce 4000 	str.w	r4, [lr]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800702c:	9b00      	ldr	r3, [sp, #0]
      }
    }

    position++;
 800702e:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007030:	fa33 f402 	lsrs.w	r4, r3, r2
 8007034:	f47f af7c 	bne.w	8006f30 <HAL_GPIO_Init+0x24>
  }
}
 8007038:	b005      	add	sp, #20
 800703a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 800703e:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007042:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007044:	ea0a 0909 	and.w	r9, sl, r9
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007048:	fa06 f807 	lsl.w	r8, r6, r7
 800704c:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 8007050:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 8007054:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007058:	ea28 080e 	bic.w	r8, r8, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800705c:	f3c5 1e00 	ubfx	lr, r5, #4, #1
 8007060:	fa0e fe02 	lsl.w	lr, lr, r2
 8007064:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->OTYPER = temp;
 8007068:	f8c0 e004 	str.w	lr, [r0, #4]
        temp = GPIOx->PUPDR;
 800706c:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007070:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007072:	ea0a 0808 	and.w	r8, sl, r8
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007076:	fa06 fe07 	lsl.w	lr, r6, r7
 800707a:	ea4e 0e08 	orr.w	lr, lr, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800707e:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8007080:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007084:	d119      	bne.n	80070ba <HAL_GPIO_Init+0x1ae>
        temp = GPIOx->AFR[position >> 3U];
 8007086:	ea4f 0ed2 	mov.w	lr, r2, lsr #3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800708a:	690e      	ldr	r6, [r1, #16]
 800708c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007090:	f002 0807 	and.w	r8, r2, #7
 8007094:	f10e 4e90 	add.w	lr, lr, #1207959552	@ 0x48000000
 8007098:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800709c:	fa06 f608 	lsl.w	r6, r6, r8
        temp = GPIOx->AFR[position >> 3U];
 80070a0:	f8de 9020 	ldr.w	r9, [lr, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80070a4:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80070a6:	260f      	movs	r6, #15
 80070a8:	fa06 f808 	lsl.w	r8, r6, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80070ac:	9e00      	ldr	r6, [sp, #0]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80070ae:	ea29 0908 	bic.w	r9, r9, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80070b2:	ea46 0809 	orr.w	r8, r6, r9
        GPIOx->AFR[position >> 3U] = temp;
 80070b6:	f8ce 8020 	str.w	r8, [lr, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80070ba:	40bc      	lsls	r4, r7
      temp = GPIOx->MODER;
 80070bc:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80070be:	ea07 070a 	and.w	r7, r7, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80070c2:	433c      	orrs	r4, r7
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80070c4:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 80070c8:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80070ca:	d036      	beq.n	800713a <HAL_GPIO_Init+0x22e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80070cc:	4f67      	ldr	r7, [pc, #412]	@ (800726c <HAL_GPIO_Init+0x360>)
 80070ce:	6e3c      	ldr	r4, [r7, #96]	@ 0x60
 80070d0:	f044 0401 	orr.w	r4, r4, #1
 80070d4:	663c      	str	r4, [r7, #96]	@ 0x60
 80070d6:	6e3c      	ldr	r4, [r7, #96]	@ 0x60
 80070d8:	f004 0401 	and.w	r4, r4, #1
 80070dc:	9403      	str	r4, [sp, #12]
 80070de:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 80070e0:	f022 0403 	bic.w	r4, r2, #3
 80070e4:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 80070e8:	f504 3480 	add.w	r4, r4, #65536	@ 0x10000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80070ec:	f002 0703 	and.w	r7, r2, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80070f0:	f8d4 e008 	ldr.w	lr, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80070f4:	260f      	movs	r6, #15
 80070f6:	00bf      	lsls	r7, r7, #2
 80070f8:	fa06 f707 	lsl.w	r7, r6, r7
 80070fc:	ea2e 0707 	bic.w	r7, lr, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007100:	60a7      	str	r7, [r4, #8]
        temp = EXTI->RTSR1;
 8007102:	4c5d      	ldr	r4, [pc, #372]	@ (8007278 <HAL_GPIO_Init+0x36c>)
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007104:	02ee      	lsls	r6, r5, #11
        temp = EXTI->RTSR1;
 8007106:	68a4      	ldr	r4, [r4, #8]
        temp &= ~(iocurrent);
 8007108:	ea6f 070c 	mvn.w	r7, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800710c:	d47c      	bmi.n	8007208 <HAL_GPIO_Init+0x2fc>
        temp &= ~(iocurrent);
 800710e:	403c      	ands	r4, r7
        EXTI->RTSR1 = temp;
 8007110:	4e59      	ldr	r6, [pc, #356]	@ (8007278 <HAL_GPIO_Init+0x36c>)
 8007112:	60b4      	str	r4, [r6, #8]
        temp = EXTI->FTSR1;
 8007114:	68f4      	ldr	r4, [r6, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007116:	02ae      	lsls	r6, r5, #10
 8007118:	f100 8085 	bmi.w	8007226 <HAL_GPIO_Init+0x31a>
        temp &= ~(iocurrent);
 800711c:	403c      	ands	r4, r7
        EXTI->FTSR1 = temp;
 800711e:	4e56      	ldr	r6, [pc, #344]	@ (8007278 <HAL_GPIO_Init+0x36c>)
 8007120:	60f4      	str	r4, [r6, #12]
        temp = EXTI->EMR1;
 8007122:	6874      	ldr	r4, [r6, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007124:	03ae      	lsls	r6, r5, #14
 8007126:	d47b      	bmi.n	8007220 <HAL_GPIO_Init+0x314>
        temp &= ~(iocurrent);
 8007128:	403c      	ands	r4, r7
        EXTI->EMR1 = temp;
 800712a:	4e53      	ldr	r6, [pc, #332]	@ (8007278 <HAL_GPIO_Init+0x36c>)
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800712c:	03ed      	lsls	r5, r5, #15
        EXTI->EMR1 = temp;
 800712e:	6074      	str	r4, [r6, #4]
        temp = EXTI->IMR1;
 8007130:	6834      	ldr	r4, [r6, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007132:	d472      	bmi.n	800721a <HAL_GPIO_Init+0x30e>
        temp &= ~(iocurrent);
 8007134:	403c      	ands	r4, r7
        EXTI->IMR1 = temp;
 8007136:	4d50      	ldr	r5, [pc, #320]	@ (8007278 <HAL_GPIO_Init+0x36c>)
 8007138:	602c      	str	r4, [r5, #0]
    position++;
 800713a:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 800713c:	fa33 f402 	lsrs.w	r4, r3, r2
 8007140:	f43f af7a 	beq.w	8007038 <HAL_GPIO_Init+0x12c>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007144:	fa0b fe02 	lsl.w	lr, fp, r2
    if (iocurrent != 0x00u)
 8007148:	ea13 0c0e 	ands.w	ip, r3, lr
 800714c:	d0f5      	beq.n	800713a <HAL_GPIO_Init+0x22e>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800714e:	684d      	ldr	r5, [r1, #4]
 8007150:	0057      	lsls	r7, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007152:	2603      	movs	r6, #3
 8007154:	fa06 f807 	lsl.w	r8, r6, r7
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007158:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800715c:	ea6f 0a08 	mvn.w	sl, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007160:	f104 38ff 	add.w	r8, r4, #4294967295
 8007164:	f1b8 0f01 	cmp.w	r8, #1
 8007168:	f67f af69 	bls.w	800703e <HAL_GPIO_Init+0x132>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800716c:	2c03      	cmp	r4, #3
 800716e:	d0a4      	beq.n	80070ba <HAL_GPIO_Init+0x1ae>
        temp = GPIOx->PUPDR;
 8007170:	f04f 4890 	mov.w	r8, #1207959552	@ 0x48000000
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007174:	688e      	ldr	r6, [r1, #8]
        temp = GPIOx->PUPDR;
 8007176:	f8d8 900c 	ldr.w	r9, [r8, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800717a:	fa06 fe07 	lsl.w	lr, r6, r7
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800717e:	ea0a 0909 	and.w	r9, sl, r9
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007182:	ea4e 0e09 	orr.w	lr, lr, r9
        GPIOx->PUPDR = temp;
 8007186:	f8c8 e00c 	str.w	lr, [r8, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800718a:	e796      	b.n	80070ba <HAL_GPIO_Init+0x1ae>
        temp = GPIOx->OSPEEDR;
 800718c:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007190:	68cb      	ldr	r3, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007192:	ea09 0906 	and.w	r9, r9, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007196:	fa03 f804 	lsl.w	r8, r3, r4
 800719a:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 800719e:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 80071a2:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80071a6:	688b      	ldr	r3, [r1, #8]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80071a8:	ea28 080c 	bic.w	r8, r8, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80071ac:	f3c5 1c00 	ubfx	ip, r5, #4, #1
 80071b0:	fa0c fc02 	lsl.w	ip, ip, r2
 80071b4:	ea4c 0c08 	orr.w	ip, ip, r8
        GPIOx->OTYPER = temp;
 80071b8:	f8c0 c004 	str.w	ip, [r0, #4]
        temp = GPIOx->PUPDR;
 80071bc:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80071c0:	fa03 fc04 	lsl.w	ip, r3, r4
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80071c4:	ea08 0806 	and.w	r8, r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80071c8:	ea4c 0c08 	orr.w	ip, ip, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80071cc:	2f02      	cmp	r7, #2
        GPIOx->PUPDR = temp;
 80071ce:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80071d2:	f47f aec5 	bne.w	8006f60 <HAL_GPIO_Init+0x54>
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80071d6:	690b      	ldr	r3, [r1, #16]
        temp = GPIOx->AFR[position >> 3U];
 80071d8:	ea4f 08d2 	mov.w	r8, r2, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80071dc:	f002 0c07 	and.w	ip, r2, #7
 80071e0:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 80071e4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80071e8:	fa03 f30c 	lsl.w	r3, r3, ip
        temp = GPIOx->AFR[position >> 3U];
 80071ec:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80071f0:	9301      	str	r3, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80071f2:	230f      	movs	r3, #15
 80071f4:	fa03 fc0c 	lsl.w	ip, r3, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80071f8:	9b01      	ldr	r3, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80071fa:	ea29 090c 	bic.w	r9, r9, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80071fe:	ea43 0c09 	orr.w	ip, r3, r9
        GPIOx->AFR[position >> 3U] = temp;
 8007202:	f8c8 c020 	str.w	ip, [r8, #32]
 8007206:	e6ab      	b.n	8006f60 <HAL_GPIO_Init+0x54>
          temp |= iocurrent;
 8007208:	ea44 040c 	orr.w	r4, r4, ip
 800720c:	e780      	b.n	8007110 <HAL_GPIO_Init+0x204>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800720e:	f04f 0c02 	mov.w	ip, #2
 8007212:	fa0c f707 	lsl.w	r7, ip, r7
 8007216:	433e      	orrs	r6, r7
 8007218:	e6e1      	b.n	8006fde <HAL_GPIO_Init+0xd2>
          temp |= iocurrent;
 800721a:	ea4c 0404 	orr.w	r4, ip, r4
 800721e:	e78a      	b.n	8007136 <HAL_GPIO_Init+0x22a>
          temp |= iocurrent;
 8007220:	ea44 040c 	orr.w	r4, r4, ip
 8007224:	e781      	b.n	800712a <HAL_GPIO_Init+0x21e>
          temp |= iocurrent;
 8007226:	ea4c 0404 	orr.w	r4, ip, r4
 800722a:	e778      	b.n	800711e <HAL_GPIO_Init+0x212>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800722c:	f04f 0c01 	mov.w	ip, #1
 8007230:	fa0c f707 	lsl.w	r7, ip, r7
 8007234:	433e      	orrs	r6, r7
 8007236:	e6d2      	b.n	8006fde <HAL_GPIO_Init+0xd2>
 8007238:	f04f 0c03 	mov.w	ip, #3
 800723c:	fa0c f707 	lsl.w	r7, ip, r7
 8007240:	433e      	orrs	r6, r7
 8007242:	e6cc      	b.n	8006fde <HAL_GPIO_Init+0xd2>
 8007244:	4770      	bx	lr
 8007246:	f04f 0c04 	mov.w	ip, #4
 800724a:	fa0c f707 	lsl.w	r7, ip, r7
 800724e:	433e      	orrs	r6, r7
 8007250:	e6c5      	b.n	8006fde <HAL_GPIO_Init+0xd2>
        temp = GPIOx->PUPDR;
 8007252:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007256:	688b      	ldr	r3, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007258:	ea08 0806 	and.w	r8, r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800725c:	fa03 fc04 	lsl.w	ip, r3, r4
 8007260:	ea4c 0c08 	orr.w	ip, ip, r8
        GPIOx->PUPDR = temp;
 8007264:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007268:	e67a      	b.n	8006f60 <HAL_GPIO_Init+0x54>
 800726a:	bf00      	nop
 800726c:	40021000 	.word	0x40021000
 8007270:	48000400 	.word	0x48000400
 8007274:	48000800 	.word	0x48000800
 8007278:	40010400 	.word	0x40010400
 800727c:	48000c00 	.word	0x48000c00
 8007280:	48001000 	.word	0x48001000
 8007284:	48001400 	.word	0x48001400

08007288 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007288:	6903      	ldr	r3, [r0, #16]
 800728a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800728c:	bf14      	ite	ne
 800728e:	2001      	movne	r0, #1
 8007290:	2000      	moveq	r0, #0
 8007292:	4770      	bx	lr

08007294 <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007294:	4a35      	ldr	r2, [pc, #212]	@ (800736c <HAL_PWREx_ControlVoltageScaling+0xd8>)
 8007296:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007298:	b960      	cbnz	r0, 80072b4 <HAL_PWREx_ControlVoltageScaling+0x20>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800729a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800729e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80072a2:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80072a6:	d01b      	beq.n	80072e0 <HAL_PWREx_ControlVoltageScaling+0x4c>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80072a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80072ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80072b0:	2000      	movs	r0, #0
}
 80072b2:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80072b4:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 80072b8:	d006      	beq.n	80072c8 <HAL_PWREx_ControlVoltageScaling+0x34>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80072ba:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80072be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80072c2:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80072c4:	2000      	movs	r0, #0
}
 80072c6:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80072c8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80072cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80072d0:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80072d4:	d029      	beq.n	800732a <HAL_PWREx_ControlVoltageScaling+0x96>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80072d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072da:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80072de:	e7f1      	b.n	80072c4 <HAL_PWREx_ControlVoltageScaling+0x30>
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80072e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80072e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80072e8:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80072ea:	4821      	ldr	r0, [pc, #132]	@ (8007370 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80072ec:	4921      	ldr	r1, [pc, #132]	@ (8007374 <HAL_PWREx_ControlVoltageScaling+0xe0>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80072ee:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80072f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80072f6:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80072f8:	6803      	ldr	r3, [r0, #0]
 80072fa:	2032      	movs	r0, #50	@ 0x32
 80072fc:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007300:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007302:	fba1 1303 	umull	r1, r3, r1, r3
 8007306:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007308:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800730a:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800730e:	d506      	bpl.n	800731e <HAL_PWREx_ControlVoltageScaling+0x8a>
 8007310:	e000      	b.n	8007314 <HAL_PWREx_ControlVoltageScaling+0x80>
 8007312:	b123      	cbz	r3, 800731e <HAL_PWREx_ControlVoltageScaling+0x8a>
 8007314:	6951      	ldr	r1, [r2, #20]
 8007316:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8007318:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800731c:	d4f9      	bmi.n	8007312 <HAL_PWREx_ControlVoltageScaling+0x7e>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800731e:	4b13      	ldr	r3, [pc, #76]	@ (800736c <HAL_PWREx_ControlVoltageScaling+0xd8>)
 8007320:	695b      	ldr	r3, [r3, #20]
 8007322:	055b      	lsls	r3, r3, #21
 8007324:	d5ce      	bpl.n	80072c4 <HAL_PWREx_ControlVoltageScaling+0x30>
        return HAL_TIMEOUT;
 8007326:	2003      	movs	r0, #3
 8007328:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800732a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800732e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007332:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007334:	480e      	ldr	r0, [pc, #56]	@ (8007370 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8007336:	490f      	ldr	r1, [pc, #60]	@ (8007374 <HAL_PWREx_ControlVoltageScaling+0xe0>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007338:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800733c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007340:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007342:	6803      	ldr	r3, [r0, #0]
 8007344:	2032      	movs	r0, #50	@ 0x32
 8007346:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800734a:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800734c:	fba1 1303 	umull	r1, r3, r1, r3
 8007350:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007352:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007354:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007358:	d5e1      	bpl.n	800731e <HAL_PWREx_ControlVoltageScaling+0x8a>
 800735a:	e001      	b.n	8007360 <HAL_PWREx_ControlVoltageScaling+0xcc>
 800735c:	2b00      	cmp	r3, #0
 800735e:	d0de      	beq.n	800731e <HAL_PWREx_ControlVoltageScaling+0x8a>
 8007360:	6951      	ldr	r1, [r2, #20]
 8007362:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8007364:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007368:	d5d9      	bpl.n	800731e <HAL_PWREx_ControlVoltageScaling+0x8a>
 800736a:	e7f7      	b.n	800735c <HAL_PWREx_ControlVoltageScaling+0xc8>
 800736c:	40007000 	.word	0x40007000
 8007370:	20000508 	.word	0x20000508
 8007374:	431bde83 	.word	0x431bde83

08007378 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007378:	4a02      	ldr	r2, [pc, #8]	@ (8007384 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 800737a:	6893      	ldr	r3, [r2, #8]
 800737c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007380:	6093      	str	r3, [r2, #8]
}
 8007382:	4770      	bx	lr
 8007384:	40007000 	.word	0x40007000

08007388 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007388:	2800      	cmp	r0, #0
 800738a:	f000 81bd 	beq.w	8007708 <HAL_RCC_OscConfig+0x380>
{
 800738e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007392:	6803      	ldr	r3, [r0, #0]
 8007394:	07d9      	lsls	r1, r3, #31
{
 8007396:	b082      	sub	sp, #8
 8007398:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800739a:	d512      	bpl.n	80073c2 <HAL_RCC_OscConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800739c:	49a6      	ldr	r1, [pc, #664]	@ (8007638 <HAL_RCC_OscConfig+0x2b0>)
 800739e:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80073a0:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80073a2:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80073a6:	2a0c      	cmp	r2, #12
 80073a8:	f000 80d0 	beq.w	800754c <HAL_RCC_OscConfig+0x1c4>
 80073ac:	2a08      	cmp	r2, #8
 80073ae:	f040 80d2 	bne.w	8007556 <HAL_RCC_OscConfig+0x1ce>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073b2:	4aa1      	ldr	r2, [pc, #644]	@ (8007638 <HAL_RCC_OscConfig+0x2b0>)
 80073b4:	6812      	ldr	r2, [r2, #0]
 80073b6:	0392      	lsls	r2, r2, #14
 80073b8:	d503      	bpl.n	80073c2 <HAL_RCC_OscConfig+0x3a>
 80073ba:	6862      	ldr	r2, [r4, #4]
 80073bc:	2a00      	cmp	r2, #0
 80073be:	f000 8137 	beq.w	8007630 <HAL_RCC_OscConfig+0x2a8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80073c2:	079a      	lsls	r2, r3, #30
 80073c4:	d522      	bpl.n	800740c <HAL_RCC_OscConfig+0x84>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80073c6:	4a9c      	ldr	r2, [pc, #624]	@ (8007638 <HAL_RCC_OscConfig+0x2b0>)
 80073c8:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80073ca:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80073cc:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80073d0:	2b0c      	cmp	r3, #12
 80073d2:	f000 80f8 	beq.w	80075c6 <HAL_RCC_OscConfig+0x23e>
 80073d6:	2b04      	cmp	r3, #4
 80073d8:	f040 80fa 	bne.w	80075d0 <HAL_RCC_OscConfig+0x248>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80073dc:	4b96      	ldr	r3, [pc, #600]	@ (8007638 <HAL_RCC_OscConfig+0x2b0>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	055b      	lsls	r3, r3, #21
 80073e2:	d503      	bpl.n	80073ec <HAL_RCC_OscConfig+0x64>
 80073e4:	68e3      	ldr	r3, [r4, #12]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	f000 8122 	beq.w	8007630 <HAL_RCC_OscConfig+0x2a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073ec:	4a92      	ldr	r2, [pc, #584]	@ (8007638 <HAL_RCC_OscConfig+0x2b0>)
 80073ee:	6920      	ldr	r0, [r4, #16]
 80073f0:	6853      	ldr	r3, [r2, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80073f2:	4992      	ldr	r1, [pc, #584]	@ (800763c <HAL_RCC_OscConfig+0x2b4>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073f4:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80073f8:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80073fc:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80073fe:	6808      	ldr	r0, [r1, #0]
 8007400:	f7fe faaa 	bl	8005958 <HAL_InitTick>
 8007404:	2800      	cmp	r0, #0
 8007406:	f040 8113 	bne.w	8007630 <HAL_RCC_OscConfig+0x2a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800740a:	6823      	ldr	r3, [r4, #0]
 800740c:	071a      	lsls	r2, r3, #28
 800740e:	d519      	bpl.n	8007444 <HAL_RCC_OscConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007410:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007412:	4d89      	ldr	r5, [pc, #548]	@ (8007638 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007414:	2b00      	cmp	r3, #0
 8007416:	f000 80c2 	beq.w	800759e <HAL_RCC_OscConfig+0x216>
      __HAL_RCC_LSI_ENABLE();
 800741a:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 800741e:	f043 0301 	orr.w	r3, r3, #1
 8007422:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007426:	f7fe fae1 	bl	80059ec <HAL_GetTick>
 800742a:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800742c:	e005      	b.n	800743a <HAL_RCC_OscConfig+0xb2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800742e:	f7fe fadd 	bl	80059ec <HAL_GetTick>
 8007432:	1b80      	subs	r0, r0, r6
 8007434:	2802      	cmp	r0, #2
 8007436:	f200 8117 	bhi.w	8007668 <HAL_RCC_OscConfig+0x2e0>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800743a:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 800743e:	079b      	lsls	r3, r3, #30
 8007440:	d5f5      	bpl.n	800742e <HAL_RCC_OscConfig+0xa6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007442:	6823      	ldr	r3, [r4, #0]
 8007444:	075d      	lsls	r5, r3, #29
 8007446:	d541      	bpl.n	80074cc <HAL_RCC_OscConfig+0x144>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007448:	4b7b      	ldr	r3, [pc, #492]	@ (8007638 <HAL_RCC_OscConfig+0x2b0>)
 800744a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800744c:	00d0      	lsls	r0, r2, #3
 800744e:	f100 810f 	bmi.w	8007670 <HAL_RCC_OscConfig+0x2e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007452:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007454:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8007458:	659a      	str	r2, [r3, #88]	@ 0x58
 800745a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800745c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007460:	9301      	str	r3, [sp, #4]
 8007462:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8007464:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007466:	4e76      	ldr	r6, [pc, #472]	@ (8007640 <HAL_RCC_OscConfig+0x2b8>)
 8007468:	6833      	ldr	r3, [r6, #0]
 800746a:	05d9      	lsls	r1, r3, #23
 800746c:	f140 812e 	bpl.w	80076cc <HAL_RCC_OscConfig+0x344>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007470:	68a3      	ldr	r3, [r4, #8]
 8007472:	2b01      	cmp	r3, #1
 8007474:	f000 80fe 	beq.w	8007674 <HAL_RCC_OscConfig+0x2ec>
 8007478:	2b05      	cmp	r3, #5
 800747a:	f000 8184 	beq.w	8007786 <HAL_RCC_OscConfig+0x3fe>
 800747e:	4e6e      	ldr	r6, [pc, #440]	@ (8007638 <HAL_RCC_OscConfig+0x2b0>)
 8007480:	f8d6 2090 	ldr.w	r2, [r6, #144]	@ 0x90
 8007484:	f022 0201 	bic.w	r2, r2, #1
 8007488:	f8c6 2090 	str.w	r2, [r6, #144]	@ 0x90
 800748c:	f8d6 2090 	ldr.w	r2, [r6, #144]	@ 0x90
 8007490:	f022 0204 	bic.w	r2, r2, #4
 8007494:	f8c6 2090 	str.w	r2, [r6, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007498:	2b00      	cmp	r3, #0
 800749a:	f040 80f2 	bne.w	8007682 <HAL_RCC_OscConfig+0x2fa>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800749e:	f7fe faa5 	bl	80059ec <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074a2:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 80074a6:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80074a8:	e005      	b.n	80074b6 <HAL_RCC_OscConfig+0x12e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074aa:	f7fe fa9f 	bl	80059ec <HAL_GetTick>
 80074ae:	1bc0      	subs	r0, r0, r7
 80074b0:	4540      	cmp	r0, r8
 80074b2:	f200 80d9 	bhi.w	8007668 <HAL_RCC_OscConfig+0x2e0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80074b6:	f8d6 3090 	ldr.w	r3, [r6, #144]	@ 0x90
 80074ba:	0799      	lsls	r1, r3, #30
 80074bc:	d4f5      	bmi.n	80074aa <HAL_RCC_OscConfig+0x122>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80074be:	b125      	cbz	r5, 80074ca <HAL_RCC_OscConfig+0x142>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074c0:	4a5d      	ldr	r2, [pc, #372]	@ (8007638 <HAL_RCC_OscConfig+0x2b0>)
 80074c2:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80074c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80074c8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80074ca:	6823      	ldr	r3, [r4, #0]
 80074cc:	069a      	lsls	r2, r3, #26
 80074ce:	d518      	bpl.n	8007502 <HAL_RCC_OscConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80074d0:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80074d2:	4d59      	ldr	r5, [pc, #356]	@ (8007638 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	f000 80e5 	beq.w	80076a4 <HAL_RCC_OscConfig+0x31c>
      __HAL_RCC_HSI48_ENABLE();
 80074da:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 80074de:	f043 0301 	orr.w	r3, r3, #1
 80074e2:	f8c5 3098 	str.w	r3, [r5, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074e6:	f7fe fa81 	bl	80059ec <HAL_GetTick>
 80074ea:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80074ec:	e005      	b.n	80074fa <HAL_RCC_OscConfig+0x172>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80074ee:	f7fe fa7d 	bl	80059ec <HAL_GetTick>
 80074f2:	1b80      	subs	r0, r0, r6
 80074f4:	2802      	cmp	r0, #2
 80074f6:	f200 80b7 	bhi.w	8007668 <HAL_RCC_OscConfig+0x2e0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80074fa:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 80074fe:	079b      	lsls	r3, r3, #30
 8007500:	d5f5      	bpl.n	80074ee <HAL_RCC_OscConfig+0x166>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007502:	69e3      	ldr	r3, [r4, #28]
 8007504:	b1f3      	cbz	r3, 8007544 <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007506:	4d4c      	ldr	r5, [pc, #304]	@ (8007638 <HAL_RCC_OscConfig+0x2b0>)
 8007508:	68aa      	ldr	r2, [r5, #8]
 800750a:	f002 020c 	and.w	r2, r2, #12
 800750e:	2a0c      	cmp	r2, #12
 8007510:	f000 8147 	beq.w	80077a2 <HAL_RCC_OscConfig+0x41a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007514:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007516:	682b      	ldr	r3, [r5, #0]
 8007518:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800751c:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800751e:	f000 80f5 	beq.w	800770c <HAL_RCC_OscConfig+0x384>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007522:	f7fe fa63 	bl	80059ec <HAL_GetTick>
 8007526:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007528:	e005      	b.n	8007536 <HAL_RCC_OscConfig+0x1ae>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800752a:	f7fe fa5f 	bl	80059ec <HAL_GetTick>
 800752e:	1b00      	subs	r0, r0, r4
 8007530:	2802      	cmp	r0, #2
 8007532:	f200 8099 	bhi.w	8007668 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007536:	682b      	ldr	r3, [r5, #0]
 8007538:	019b      	lsls	r3, r3, #6
 800753a:	d4f6      	bmi.n	800752a <HAL_RCC_OscConfig+0x1a2>
            return HAL_TIMEOUT;
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800753c:	68ea      	ldr	r2, [r5, #12]
 800753e:	4b41      	ldr	r3, [pc, #260]	@ (8007644 <HAL_RCC_OscConfig+0x2bc>)
 8007540:	4013      	ands	r3, r2
 8007542:	60eb      	str	r3, [r5, #12]
      }
    }
  }
  }

  return HAL_OK;
 8007544:	2000      	movs	r0, #0
}
 8007546:	b002      	add	sp, #8
 8007548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800754c:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007550:	2903      	cmp	r1, #3
 8007552:	f43f af2e 	beq.w	80073b2 <HAL_RCC_OscConfig+0x2a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007556:	6863      	ldr	r3, [r4, #4]
 8007558:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800755c:	d055      	beq.n	800760a <HAL_RCC_OscConfig+0x282>
 800755e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007562:	f000 80c4 	beq.w	80076ee <HAL_RCC_OscConfig+0x366>
 8007566:	4d34      	ldr	r5, [pc, #208]	@ (8007638 <HAL_RCC_OscConfig+0x2b0>)
 8007568:	682a      	ldr	r2, [r5, #0]
 800756a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800756e:	602a      	str	r2, [r5, #0]
 8007570:	682a      	ldr	r2, [r5, #0]
 8007572:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007576:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007578:	2b00      	cmp	r3, #0
 800757a:	d14b      	bne.n	8007614 <HAL_RCC_OscConfig+0x28c>
        tickstart = HAL_GetTick();
 800757c:	f7fe fa36 	bl	80059ec <HAL_GetTick>
 8007580:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007582:	e004      	b.n	800758e <HAL_RCC_OscConfig+0x206>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007584:	f7fe fa32 	bl	80059ec <HAL_GetTick>
 8007588:	1b80      	subs	r0, r0, r6
 800758a:	2864      	cmp	r0, #100	@ 0x64
 800758c:	d86c      	bhi.n	8007668 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800758e:	682b      	ldr	r3, [r5, #0]
 8007590:	0399      	lsls	r1, r3, #14
 8007592:	d4f7      	bmi.n	8007584 <HAL_RCC_OscConfig+0x1fc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007594:	6823      	ldr	r3, [r4, #0]
 8007596:	079a      	lsls	r2, r3, #30
 8007598:	f57f af38 	bpl.w	800740c <HAL_RCC_OscConfig+0x84>
 800759c:	e713      	b.n	80073c6 <HAL_RCC_OscConfig+0x3e>
      __HAL_RCC_LSI_DISABLE();
 800759e:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 80075a2:	f023 0301 	bic.w	r3, r3, #1
 80075a6:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94
      tickstart = HAL_GetTick();
 80075aa:	f7fe fa1f 	bl	80059ec <HAL_GetTick>
 80075ae:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80075b0:	e004      	b.n	80075bc <HAL_RCC_OscConfig+0x234>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80075b2:	f7fe fa1b 	bl	80059ec <HAL_GetTick>
 80075b6:	1b80      	subs	r0, r0, r6
 80075b8:	2802      	cmp	r0, #2
 80075ba:	d855      	bhi.n	8007668 <HAL_RCC_OscConfig+0x2e0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80075bc:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 80075c0:	079f      	lsls	r7, r3, #30
 80075c2:	d4f6      	bmi.n	80075b2 <HAL_RCC_OscConfig+0x22a>
 80075c4:	e73d      	b.n	8007442 <HAL_RCC_OscConfig+0xba>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80075c6:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80075ca:	2a02      	cmp	r2, #2
 80075cc:	f43f af06 	beq.w	80073dc <HAL_RCC_OscConfig+0x54>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80075d0:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 80075d2:	4d19      	ldr	r5, [pc, #100]	@ (8007638 <HAL_RCC_OscConfig+0x2b0>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d037      	beq.n	8007648 <HAL_RCC_OscConfig+0x2c0>
        __HAL_RCC_HSI_ENABLE();
 80075d8:	682b      	ldr	r3, [r5, #0]
 80075da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075de:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80075e0:	f7fe fa04 	bl	80059ec <HAL_GetTick>
 80075e4:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80075e6:	e004      	b.n	80075f2 <HAL_RCC_OscConfig+0x26a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80075e8:	f7fe fa00 	bl	80059ec <HAL_GetTick>
 80075ec:	1b80      	subs	r0, r0, r6
 80075ee:	2802      	cmp	r0, #2
 80075f0:	d83a      	bhi.n	8007668 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80075f2:	682b      	ldr	r3, [r5, #0]
 80075f4:	055f      	lsls	r7, r3, #21
 80075f6:	d5f7      	bpl.n	80075e8 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075f8:	686b      	ldr	r3, [r5, #4]
 80075fa:	6922      	ldr	r2, [r4, #16]
 80075fc:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8007600:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007604:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007606:	6823      	ldr	r3, [r4, #0]
 8007608:	e700      	b.n	800740c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800760a:	4a0b      	ldr	r2, [pc, #44]	@ (8007638 <HAL_RCC_OscConfig+0x2b0>)
 800760c:	6813      	ldr	r3, [r2, #0]
 800760e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007612:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8007614:	f7fe f9ea 	bl	80059ec <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007618:	4e07      	ldr	r6, [pc, #28]	@ (8007638 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 800761a:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800761c:	e004      	b.n	8007628 <HAL_RCC_OscConfig+0x2a0>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800761e:	f7fe f9e5 	bl	80059ec <HAL_GetTick>
 8007622:	1b40      	subs	r0, r0, r5
 8007624:	2864      	cmp	r0, #100	@ 0x64
 8007626:	d81f      	bhi.n	8007668 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007628:	6833      	ldr	r3, [r6, #0]
 800762a:	039f      	lsls	r7, r3, #14
 800762c:	d5f7      	bpl.n	800761e <HAL_RCC_OscConfig+0x296>
 800762e:	e7b1      	b.n	8007594 <HAL_RCC_OscConfig+0x20c>
    return HAL_ERROR;
 8007630:	2001      	movs	r0, #1
}
 8007632:	b002      	add	sp, #8
 8007634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007638:	40021000 	.word	0x40021000
 800763c:	20000510 	.word	0x20000510
 8007640:	40007000 	.word	0x40007000
 8007644:	feeefffc 	.word	0xfeeefffc
        __HAL_RCC_HSI_DISABLE();
 8007648:	682b      	ldr	r3, [r5, #0]
 800764a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800764e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007650:	f7fe f9cc 	bl	80059ec <HAL_GetTick>
 8007654:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007656:	682b      	ldr	r3, [r5, #0]
 8007658:	0559      	lsls	r1, r3, #21
 800765a:	f57f aed6 	bpl.w	800740a <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800765e:	f7fe f9c5 	bl	80059ec <HAL_GetTick>
 8007662:	1b80      	subs	r0, r0, r6
 8007664:	2802      	cmp	r0, #2
 8007666:	d9f6      	bls.n	8007656 <HAL_RCC_OscConfig+0x2ce>
            return HAL_TIMEOUT;
 8007668:	2003      	movs	r0, #3
}
 800766a:	b002      	add	sp, #8
 800766c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 8007670:	2500      	movs	r5, #0
 8007672:	e6f8      	b.n	8007466 <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007674:	4a65      	ldr	r2, [pc, #404]	@ (800780c <HAL_RCC_OscConfig+0x484>)
 8007676:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800767a:	f043 0301 	orr.w	r3, r3, #1
 800767e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      tickstart = HAL_GetTick();
 8007682:	f7fe f9b3 	bl	80059ec <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007686:	4f61      	ldr	r7, [pc, #388]	@ (800780c <HAL_RCC_OscConfig+0x484>)
      tickstart = HAL_GetTick();
 8007688:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800768a:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800768e:	e004      	b.n	800769a <HAL_RCC_OscConfig+0x312>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007690:	f7fe f9ac 	bl	80059ec <HAL_GetTick>
 8007694:	1b80      	subs	r0, r0, r6
 8007696:	4540      	cmp	r0, r8
 8007698:	d8e6      	bhi.n	8007668 <HAL_RCC_OscConfig+0x2e0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800769a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800769e:	079b      	lsls	r3, r3, #30
 80076a0:	d5f6      	bpl.n	8007690 <HAL_RCC_OscConfig+0x308>
 80076a2:	e70c      	b.n	80074be <HAL_RCC_OscConfig+0x136>
      __HAL_RCC_HSI48_DISABLE();
 80076a4:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 80076a8:	f023 0301 	bic.w	r3, r3, #1
 80076ac:	f8c5 3098 	str.w	r3, [r5, #152]	@ 0x98
      tickstart = HAL_GetTick();
 80076b0:	f7fe f99c 	bl	80059ec <HAL_GetTick>
 80076b4:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80076b6:	e004      	b.n	80076c2 <HAL_RCC_OscConfig+0x33a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80076b8:	f7fe f998 	bl	80059ec <HAL_GetTick>
 80076bc:	1b80      	subs	r0, r0, r6
 80076be:	2802      	cmp	r0, #2
 80076c0:	d8d2      	bhi.n	8007668 <HAL_RCC_OscConfig+0x2e0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80076c2:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 80076c6:	079f      	lsls	r7, r3, #30
 80076c8:	d4f6      	bmi.n	80076b8 <HAL_RCC_OscConfig+0x330>
 80076ca:	e71a      	b.n	8007502 <HAL_RCC_OscConfig+0x17a>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80076cc:	6833      	ldr	r3, [r6, #0]
 80076ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80076d2:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80076d4:	f7fe f98a 	bl	80059ec <HAL_GetTick>
 80076d8:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80076da:	6833      	ldr	r3, [r6, #0]
 80076dc:	05da      	lsls	r2, r3, #23
 80076de:	f53f aec7 	bmi.w	8007470 <HAL_RCC_OscConfig+0xe8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80076e2:	f7fe f983 	bl	80059ec <HAL_GetTick>
 80076e6:	1bc0      	subs	r0, r0, r7
 80076e8:	2802      	cmp	r0, #2
 80076ea:	d9f6      	bls.n	80076da <HAL_RCC_OscConfig+0x352>
 80076ec:	e7bc      	b.n	8007668 <HAL_RCC_OscConfig+0x2e0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80076ee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80076f2:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 80076f6:	681a      	ldr	r2, [r3, #0]
 80076f8:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80076fc:	601a      	str	r2, [r3, #0]
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8007704:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007706:	e785      	b.n	8007614 <HAL_RCC_OscConfig+0x28c>
    return HAL_ERROR;
 8007708:	2001      	movs	r0, #1
}
 800770a:	4770      	bx	lr
        tickstart = HAL_GetTick();
 800770c:	f7fe f96e 	bl	80059ec <HAL_GetTick>
 8007710:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007712:	e004      	b.n	800771e <HAL_RCC_OscConfig+0x396>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007714:	f7fe f96a 	bl	80059ec <HAL_GetTick>
 8007718:	1b80      	subs	r0, r0, r6
 800771a:	2802      	cmp	r0, #2
 800771c:	d8a4      	bhi.n	8007668 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800771e:	682b      	ldr	r3, [r5, #0]
 8007720:	0199      	lsls	r1, r3, #6
 8007722:	d4f7      	bmi.n	8007714 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007724:	68e9      	ldr	r1, [r5, #12]
 8007726:	4b3a      	ldr	r3, [pc, #232]	@ (8007810 <HAL_RCC_OscConfig+0x488>)
 8007728:	6a22      	ldr	r2, [r4, #32]
 800772a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800772c:	400b      	ands	r3, r1
 800772e:	4313      	orrs	r3, r2
 8007730:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	@ 0x28
 8007734:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007738:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 800773c:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	@ 0x30
 8007740:	3801      	subs	r0, #1
 8007742:	0849      	lsrs	r1, r1, #1
 8007744:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8007748:	3901      	subs	r1, #1
 800774a:	0852      	lsrs	r2, r2, #1
 800774c:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8007750:	3a01      	subs	r2, #1
 8007752:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8007756:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8007758:	682b      	ldr	r3, [r5, #0]
 800775a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800775e:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007760:	68eb      	ldr	r3, [r5, #12]
 8007762:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007766:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8007768:	f7fe f940 	bl	80059ec <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800776c:	4d27      	ldr	r5, [pc, #156]	@ (800780c <HAL_RCC_OscConfig+0x484>)
        tickstart = HAL_GetTick();
 800776e:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007770:	e005      	b.n	800777e <HAL_RCC_OscConfig+0x3f6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007772:	f7fe f93b 	bl	80059ec <HAL_GetTick>
 8007776:	1b00      	subs	r0, r0, r4
 8007778:	2802      	cmp	r0, #2
 800777a:	f63f af75 	bhi.w	8007668 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800777e:	682b      	ldr	r3, [r5, #0]
 8007780:	019a      	lsls	r2, r3, #6
 8007782:	d5f6      	bpl.n	8007772 <HAL_RCC_OscConfig+0x3ea>
 8007784:	e6de      	b.n	8007544 <HAL_RCC_OscConfig+0x1bc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007786:	4b21      	ldr	r3, [pc, #132]	@ (800780c <HAL_RCC_OscConfig+0x484>)
 8007788:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800778c:	f042 0204 	orr.w	r2, r2, #4
 8007790:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8007794:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8007798:	f042 0201 	orr.w	r2, r2, #1
 800779c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80077a0:	e76f      	b.n	8007682 <HAL_RCC_OscConfig+0x2fa>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	f43f af44 	beq.w	8007630 <HAL_RCC_OscConfig+0x2a8>
      temp_pllckcfg = RCC->PLLCFGR;
 80077a8:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077aa:	6a22      	ldr	r2, [r4, #32]
 80077ac:	f003 0103 	and.w	r1, r3, #3
 80077b0:	4291      	cmp	r1, r2
 80077b2:	f47f af3d 	bne.w	8007630 <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80077b6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80077b8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80077bc:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077be:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80077c2:	f47f af35 	bne.w	8007630 <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80077c6:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80077c8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80077cc:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80077d0:	f47f af2e 	bne.w	8007630 <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80077d4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80077d6:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80077da:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 80077de:	f47f af27 	bne.w	8007630 <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80077e2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80077e4:	0852      	lsrs	r2, r2, #1
 80077e6:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 80077ea:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80077ec:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80077f0:	f47f af1e 	bne.w	8007630 <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80077f4:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80077f6:	0852      	lsrs	r2, r2, #1
 80077f8:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 80077fc:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80077fe:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8007802:	bf14      	ite	ne
 8007804:	2001      	movne	r0, #1
 8007806:	2000      	moveq	r0, #0
 8007808:	e69d      	b.n	8007546 <HAL_RCC_OscConfig+0x1be>
 800780a:	bf00      	nop
 800780c:	40021000 	.word	0x40021000
 8007810:	019f800c 	.word	0x019f800c

08007814 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007814:	4b18      	ldr	r3, [pc, #96]	@ (8007878 <HAL_RCC_GetSysClockFreq+0x64>)
 8007816:	689a      	ldr	r2, [r3, #8]
 8007818:	f002 020c 	and.w	r2, r2, #12
 800781c:	2a04      	cmp	r2, #4
 800781e:	d026      	beq.n	800786e <HAL_RCC_GetSysClockFreq+0x5a>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007820:	689a      	ldr	r2, [r3, #8]
 8007822:	f002 020c 	and.w	r2, r2, #12
 8007826:	2a08      	cmp	r2, #8
 8007828:	d023      	beq.n	8007872 <HAL_RCC_GetSysClockFreq+0x5e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800782a:	689a      	ldr	r2, [r3, #8]
 800782c:	f002 020c 	and.w	r2, r2, #12
 8007830:	2a0c      	cmp	r2, #12
 8007832:	d001      	beq.n	8007838 <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 8007834:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 8007836:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007838:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800783a:	68da      	ldr	r2, [r3, #12]
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800783c:	68d8      	ldr	r0, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800783e:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 8007842:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007844:	f3c2 1203 	ubfx	r2, r2, #4, #4
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007848:	f3c0 2006 	ubfx	r0, r0, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800784c:	bf0c      	ite	eq
 800784e:	4b0b      	ldreq	r3, [pc, #44]	@ (800787c <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007850:	4b0b      	ldrne	r3, [pc, #44]	@ (8007880 <HAL_RCC_GetSysClockFreq+0x6c>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007852:	3201      	adds	r2, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007854:	fbb3 f3f2 	udiv	r3, r3, r2
 8007858:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800785c:	4b06      	ldr	r3, [pc, #24]	@ (8007878 <HAL_RCC_GetSysClockFreq+0x64>)
 800785e:	68db      	ldr	r3, [r3, #12]
 8007860:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8007864:	3301      	adds	r3, #1
 8007866:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8007868:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 800786c:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 800786e:	4804      	ldr	r0, [pc, #16]	@ (8007880 <HAL_RCC_GetSysClockFreq+0x6c>)
 8007870:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8007872:	4802      	ldr	r0, [pc, #8]	@ (800787c <HAL_RCC_GetSysClockFreq+0x68>)
 8007874:	4770      	bx	lr
 8007876:	bf00      	nop
 8007878:	40021000 	.word	0x40021000
 800787c:	016e3600 	.word	0x016e3600
 8007880:	00f42400 	.word	0x00f42400

08007884 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8007884:	2800      	cmp	r0, #0
 8007886:	f000 80ee 	beq.w	8007a66 <HAL_RCC_ClockConfig+0x1e2>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800788a:	4a78      	ldr	r2, [pc, #480]	@ (8007a6c <HAL_RCC_ClockConfig+0x1e8>)
{
 800788c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007890:	6813      	ldr	r3, [r2, #0]
 8007892:	f003 030f 	and.w	r3, r3, #15
 8007896:	428b      	cmp	r3, r1
 8007898:	460d      	mov	r5, r1
 800789a:	4604      	mov	r4, r0
 800789c:	d20c      	bcs.n	80078b8 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800789e:	6813      	ldr	r3, [r2, #0]
 80078a0:	f023 030f 	bic.w	r3, r3, #15
 80078a4:	430b      	orrs	r3, r1
 80078a6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80078a8:	6813      	ldr	r3, [r2, #0]
 80078aa:	f003 030f 	and.w	r3, r3, #15
 80078ae:	428b      	cmp	r3, r1
 80078b0:	d002      	beq.n	80078b8 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80078b2:	2001      	movs	r0, #1
}
 80078b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80078b8:	6823      	ldr	r3, [r4, #0]
 80078ba:	07df      	lsls	r7, r3, #31
 80078bc:	d569      	bpl.n	8007992 <HAL_RCC_ClockConfig+0x10e>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80078be:	6867      	ldr	r7, [r4, #4]
 80078c0:	2f03      	cmp	r7, #3
 80078c2:	f000 80a0 	beq.w	8007a06 <HAL_RCC_ClockConfig+0x182>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80078c6:	4b6a      	ldr	r3, [pc, #424]	@ (8007a70 <HAL_RCC_ClockConfig+0x1ec>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80078c8:	2f02      	cmp	r7, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80078ca:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80078cc:	f000 8097 	beq.w	80079fe <HAL_RCC_ClockConfig+0x17a>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80078d0:	055b      	lsls	r3, r3, #21
 80078d2:	d5ee      	bpl.n	80078b2 <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 80078d4:	f7ff ff9e 	bl	8007814 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 80078d8:	4b66      	ldr	r3, [pc, #408]	@ (8007a74 <HAL_RCC_ClockConfig+0x1f0>)
 80078da:	4298      	cmp	r0, r3
 80078dc:	f240 80c0 	bls.w	8007a60 <HAL_RCC_ClockConfig+0x1dc>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80078e0:	4a63      	ldr	r2, [pc, #396]	@ (8007a70 <HAL_RCC_ClockConfig+0x1ec>)
 80078e2:	6893      	ldr	r3, [r2, #8]
 80078e4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80078e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078ec:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80078ee:	f04f 0980 	mov.w	r9, #128	@ 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80078f2:	4e5f      	ldr	r6, [pc, #380]	@ (8007a70 <HAL_RCC_ClockConfig+0x1ec>)
 80078f4:	68b3      	ldr	r3, [r6, #8]
 80078f6:	f023 0303 	bic.w	r3, r3, #3
 80078fa:	433b      	orrs	r3, r7
 80078fc:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80078fe:	f7fe f875 	bl	80059ec <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007902:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8007906:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007908:	e004      	b.n	8007914 <HAL_RCC_ClockConfig+0x90>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800790a:	f7fe f86f 	bl	80059ec <HAL_GetTick>
 800790e:	1bc0      	subs	r0, r0, r7
 8007910:	4540      	cmp	r0, r8
 8007912:	d871      	bhi.n	80079f8 <HAL_RCC_ClockConfig+0x174>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007914:	68b3      	ldr	r3, [r6, #8]
 8007916:	6862      	ldr	r2, [r4, #4]
 8007918:	f003 030c 	and.w	r3, r3, #12
 800791c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8007920:	d1f3      	bne.n	800790a <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007922:	6823      	ldr	r3, [r4, #0]
 8007924:	079f      	lsls	r7, r3, #30
 8007926:	d436      	bmi.n	8007996 <HAL_RCC_ClockConfig+0x112>
    if(hpre == RCC_SYSCLK_DIV2)
 8007928:	f1b9 0f00 	cmp.w	r9, #0
 800792c:	d003      	beq.n	8007936 <HAL_RCC_ClockConfig+0xb2>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800792e:	68b3      	ldr	r3, [r6, #8]
 8007930:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007934:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007936:	4e4d      	ldr	r6, [pc, #308]	@ (8007a6c <HAL_RCC_ClockConfig+0x1e8>)
 8007938:	6833      	ldr	r3, [r6, #0]
 800793a:	f003 030f 	and.w	r3, r3, #15
 800793e:	42ab      	cmp	r3, r5
 8007940:	d846      	bhi.n	80079d0 <HAL_RCC_ClockConfig+0x14c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007942:	6823      	ldr	r3, [r4, #0]
 8007944:	075a      	lsls	r2, r3, #29
 8007946:	d506      	bpl.n	8007956 <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007948:	4949      	ldr	r1, [pc, #292]	@ (8007a70 <HAL_RCC_ClockConfig+0x1ec>)
 800794a:	68e0      	ldr	r0, [r4, #12]
 800794c:	688a      	ldr	r2, [r1, #8]
 800794e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007952:	4302      	orrs	r2, r0
 8007954:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007956:	071b      	lsls	r3, r3, #28
 8007958:	d507      	bpl.n	800796a <HAL_RCC_ClockConfig+0xe6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800795a:	4a45      	ldr	r2, [pc, #276]	@ (8007a70 <HAL_RCC_ClockConfig+0x1ec>)
 800795c:	6921      	ldr	r1, [r4, #16]
 800795e:	6893      	ldr	r3, [r2, #8]
 8007960:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8007964:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8007968:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800796a:	f7ff ff53 	bl	8007814 <HAL_RCC_GetSysClockFreq>
 800796e:	4a40      	ldr	r2, [pc, #256]	@ (8007a70 <HAL_RCC_ClockConfig+0x1ec>)
 8007970:	4c41      	ldr	r4, [pc, #260]	@ (8007a78 <HAL_RCC_ClockConfig+0x1f4>)
 8007972:	6892      	ldr	r2, [r2, #8]
 8007974:	4941      	ldr	r1, [pc, #260]	@ (8007a7c <HAL_RCC_ClockConfig+0x1f8>)
 8007976:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800797a:	4603      	mov	r3, r0
 800797c:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 800797e:	4840      	ldr	r0, [pc, #256]	@ (8007a80 <HAL_RCC_ClockConfig+0x1fc>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007980:	f002 021f 	and.w	r2, r2, #31
 8007984:	40d3      	lsrs	r3, r2
 8007986:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8007988:	6800      	ldr	r0, [r0, #0]
}
 800798a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 800798e:	f7fd bfe3 	b.w	8005958 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007992:	079e      	lsls	r6, r3, #30
 8007994:	d5cf      	bpl.n	8007936 <HAL_RCC_ClockConfig+0xb2>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007996:	0758      	lsls	r0, r3, #29
 8007998:	d504      	bpl.n	80079a4 <HAL_RCC_ClockConfig+0x120>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800799a:	4935      	ldr	r1, [pc, #212]	@ (8007a70 <HAL_RCC_ClockConfig+0x1ec>)
 800799c:	688a      	ldr	r2, [r1, #8]
 800799e:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80079a2:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079a4:	0719      	lsls	r1, r3, #28
 80079a6:	d506      	bpl.n	80079b6 <HAL_RCC_ClockConfig+0x132>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80079a8:	4a31      	ldr	r2, [pc, #196]	@ (8007a70 <HAL_RCC_ClockConfig+0x1ec>)
 80079aa:	6893      	ldr	r3, [r2, #8]
 80079ac:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80079b0:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80079b4:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80079b6:	4a2e      	ldr	r2, [pc, #184]	@ (8007a70 <HAL_RCC_ClockConfig+0x1ec>)
 80079b8:	68a1      	ldr	r1, [r4, #8]
 80079ba:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80079bc:	4e2b      	ldr	r6, [pc, #172]	@ (8007a6c <HAL_RCC_ClockConfig+0x1e8>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80079be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80079c2:	430b      	orrs	r3, r1
 80079c4:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80079c6:	6833      	ldr	r3, [r6, #0]
 80079c8:	f003 030f 	and.w	r3, r3, #15
 80079cc:	42ab      	cmp	r3, r5
 80079ce:	d9b8      	bls.n	8007942 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079d0:	6833      	ldr	r3, [r6, #0]
 80079d2:	f023 030f 	bic.w	r3, r3, #15
 80079d6:	432b      	orrs	r3, r5
 80079d8:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80079da:	f7fe f807 	bl	80059ec <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80079de:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 80079e2:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079e4:	6833      	ldr	r3, [r6, #0]
 80079e6:	f003 030f 	and.w	r3, r3, #15
 80079ea:	42ab      	cmp	r3, r5
 80079ec:	d0a9      	beq.n	8007942 <HAL_RCC_ClockConfig+0xbe>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80079ee:	f7fd fffd 	bl	80059ec <HAL_GetTick>
 80079f2:	1bc0      	subs	r0, r0, r7
 80079f4:	4540      	cmp	r0, r8
 80079f6:	d9f5      	bls.n	80079e4 <HAL_RCC_ClockConfig+0x160>
        return HAL_TIMEOUT;
 80079f8:	2003      	movs	r0, #3
}
 80079fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80079fe:	039a      	lsls	r2, r3, #14
 8007a00:	f53f af68 	bmi.w	80078d4 <HAL_RCC_ClockConfig+0x50>
 8007a04:	e755      	b.n	80078b2 <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a06:	4a1a      	ldr	r2, [pc, #104]	@ (8007a70 <HAL_RCC_ClockConfig+0x1ec>)
 8007a08:	6811      	ldr	r1, [r2, #0]
 8007a0a:	0188      	lsls	r0, r1, #6
 8007a0c:	f57f af51 	bpl.w	80078b2 <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007a10:	68d0      	ldr	r0, [r2, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007a12:	68d1      	ldr	r1, [r2, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007a14:	68d2      	ldr	r2, [r2, #12]
      if(pllfreq > 80000000U)
 8007a16:	4e17      	ldr	r6, [pc, #92]	@ (8007a74 <HAL_RCC_ClockConfig+0x1f0>)
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007a18:	f000 0003 	and.w	r0, r0, #3
  switch (pllsource)
 8007a1c:	2803      	cmp	r0, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007a1e:	f3c1 1103 	ubfx	r1, r1, #4, #4
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007a22:	bf0c      	ite	eq
 8007a24:	4817      	ldreq	r0, [pc, #92]	@ (8007a84 <HAL_RCC_ClockConfig+0x200>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007a26:	4818      	ldrne	r0, [pc, #96]	@ (8007a88 <HAL_RCC_ClockConfig+0x204>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007a28:	3101      	adds	r1, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007a2a:	fbb0 f1f1 	udiv	r1, r0, r1
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007a2e:	4810      	ldr	r0, [pc, #64]	@ (8007a70 <HAL_RCC_ClockConfig+0x1ec>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007a30:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8007a34:	fb01 f202 	mul.w	r2, r1, r2
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007a38:	68c1      	ldr	r1, [r0, #12]
 8007a3a:	f3c1 6141 	ubfx	r1, r1, #25, #2
 8007a3e:	3101      	adds	r1, #1
 8007a40:	0049      	lsls	r1, r1, #1
  sysclockfreq = pllvco/pllr;
 8007a42:	fbb2 f2f1 	udiv	r2, r2, r1
      if(pllfreq > 80000000U)
 8007a46:	42b2      	cmp	r2, r6
 8007a48:	d90a      	bls.n	8007a60 <HAL_RCC_ClockConfig+0x1dc>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007a4a:	6882      	ldr	r2, [r0, #8]
 8007a4c:	f012 0ff0 	tst.w	r2, #240	@ 0xf0
 8007a50:	f43f af46 	beq.w	80078e0 <HAL_RCC_ClockConfig+0x5c>
 8007a54:	0799      	lsls	r1, r3, #30
 8007a56:	d503      	bpl.n	8007a60 <HAL_RCC_ClockConfig+0x1dc>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007a58:	68a3      	ldr	r3, [r4, #8]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	f43f af40 	beq.w	80078e0 <HAL_RCC_ClockConfig+0x5c>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007a60:	f04f 0900 	mov.w	r9, #0
 8007a64:	e745      	b.n	80078f2 <HAL_RCC_ClockConfig+0x6e>
    return HAL_ERROR;
 8007a66:	2001      	movs	r0, #1
}
 8007a68:	4770      	bx	lr
 8007a6a:	bf00      	nop
 8007a6c:	40022000 	.word	0x40022000
 8007a70:	40021000 	.word	0x40021000
 8007a74:	04c4b400 	.word	0x04c4b400
 8007a78:	0800b33c 	.word	0x0800b33c
 8007a7c:	20000508 	.word	0x20000508
 8007a80:	20000510 	.word	0x20000510
 8007a84:	016e3600 	.word	0x016e3600
 8007a88:	00f42400 	.word	0x00f42400

08007a8c <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 8007a8c:	4b01      	ldr	r3, [pc, #4]	@ (8007a94 <HAL_RCC_GetHCLKFreq+0x8>)
}
 8007a8e:	6818      	ldr	r0, [r3, #0]
 8007a90:	4770      	bx	lr
 8007a92:	bf00      	nop
 8007a94:	20000508 	.word	0x20000508

08007a98 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007a98:	4b05      	ldr	r3, [pc, #20]	@ (8007ab0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8007a9a:	4a06      	ldr	r2, [pc, #24]	@ (8007ab4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8007a9c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8007a9e:	4906      	ldr	r1, [pc, #24]	@ (8007ab8 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007aa0:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8007aa4:	6808      	ldr	r0, [r1, #0]
 8007aa6:	5cd3      	ldrb	r3, [r2, r3]
 8007aa8:	f003 031f 	and.w	r3, r3, #31
}
 8007aac:	40d8      	lsrs	r0, r3
 8007aae:	4770      	bx	lr
 8007ab0:	40021000 	.word	0x40021000
 8007ab4:	0800b334 	.word	0x0800b334
 8007ab8:	20000508 	.word	0x20000508

08007abc <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007abc:	4b05      	ldr	r3, [pc, #20]	@ (8007ad4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8007abe:	4a06      	ldr	r2, [pc, #24]	@ (8007ad8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8007ac0:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8007ac2:	4906      	ldr	r1, [pc, #24]	@ (8007adc <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007ac4:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8007ac8:	6808      	ldr	r0, [r1, #0]
 8007aca:	5cd3      	ldrb	r3, [r2, r3]
 8007acc:	f003 031f 	and.w	r3, r3, #31
}
 8007ad0:	40d8      	lsrs	r0, r3
 8007ad2:	4770      	bx	lr
 8007ad4:	40021000 	.word	0x40021000
 8007ad8:	0800b334 	.word	0x0800b334
 8007adc:	20000508 	.word	0x20000508

08007ae0 <HAL_RCC_EnableCSS>:
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8007ae0:	4a02      	ldr	r2, [pc, #8]	@ (8007aec <HAL_RCC_EnableCSS+0xc>)
 8007ae2:	6813      	ldr	r3, [r2, #0]
 8007ae4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007ae8:	6013      	str	r3, [r2, #0]
}
 8007aea:	4770      	bx	lr
 8007aec:	40021000 	.word	0x40021000

08007af0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007af4:	6803      	ldr	r3, [r0, #0]
{
 8007af6:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007af8:	f413 2000 	ands.w	r0, r3, #524288	@ 0x80000
{
 8007afc:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007afe:	d041      	beq.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x94>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007b00:	4bab      	ldr	r3, [pc, #684]	@ (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8007b02:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007b04:	00d5      	lsls	r5, r2, #3
 8007b06:	f140 8129 	bpl.w	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x26c>
    FlagStatus       pwrclkchanged = RESET;
 8007b0a:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007b0c:	4da9      	ldr	r5, [pc, #676]	@ (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007b0e:	682b      	ldr	r3, [r5, #0]
 8007b10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b14:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007b16:	f7fd ff69 	bl	80059ec <HAL_GetTick>
 8007b1a:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b1c:	e004      	b.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x38>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b1e:	f7fd ff65 	bl	80059ec <HAL_GetTick>
 8007b22:	1b83      	subs	r3, r0, r6
 8007b24:	2b02      	cmp	r3, #2
 8007b26:	d828      	bhi.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b28:	682b      	ldr	r3, [r5, #0]
 8007b2a:	05d8      	lsls	r0, r3, #23
 8007b2c:	d5f7      	bpl.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007b2e:	4da0      	ldr	r5, [pc, #640]	@ (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007b30:	6d22      	ldr	r2, [r4, #80]	@ 0x50
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007b32:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007b36:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8007b3a:	f000 8159 	beq.w	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	f000 8156 	beq.w	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x300>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007b44:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007b48:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8007b4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b50:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007b54:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8007b58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b5c:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007b60:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007b64:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 8007b66:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007b6a:	f140 8141 	bpl.w	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x300>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b6e:	f7fd ff3d 	bl	80059ec <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b72:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8007b76:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007b78:	e135      	b.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007b7a:	2003      	movs	r0, #3
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007b7c:	6823      	ldr	r3, [r4, #0]
    if(pwrclkchanged == SET)
 8007b7e:	2f00      	cmp	r7, #0
 8007b80:	f040 80f7 	bne.w	8007d72 <HAL_RCCEx_PeriphCLKConfig+0x282>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007b84:	07dd      	lsls	r5, r3, #31
 8007b86:	d508      	bpl.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007b88:	4989      	ldr	r1, [pc, #548]	@ (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8007b8a:	6865      	ldr	r5, [r4, #4]
 8007b8c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8007b90:	f022 0203 	bic.w	r2, r2, #3
 8007b94:	432a      	orrs	r2, r5
 8007b96:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007b9a:	0799      	lsls	r1, r3, #30
 8007b9c:	d508      	bpl.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007b9e:	4984      	ldr	r1, [pc, #528]	@ (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8007ba0:	68a5      	ldr	r5, [r4, #8]
 8007ba2:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8007ba6:	f022 020c 	bic.w	r2, r2, #12
 8007baa:	432a      	orrs	r2, r5
 8007bac:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007bb0:	075a      	lsls	r2, r3, #29
 8007bb2:	d508      	bpl.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007bb4:	497e      	ldr	r1, [pc, #504]	@ (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8007bb6:	68e5      	ldr	r5, [r4, #12]
 8007bb8:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8007bbc:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8007bc0:	432a      	orrs	r2, r5
 8007bc2:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007bc6:	071f      	lsls	r7, r3, #28
 8007bc8:	d508      	bpl.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007bca:	4979      	ldr	r1, [pc, #484]	@ (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8007bcc:	6925      	ldr	r5, [r4, #16]
 8007bce:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8007bd2:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8007bd6:	432a      	orrs	r2, r5
 8007bd8:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007bdc:	06de      	lsls	r6, r3, #27
 8007bde:	d508      	bpl.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007be0:	4973      	ldr	r1, [pc, #460]	@ (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8007be2:	6965      	ldr	r5, [r4, #20]
 8007be4:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8007be8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8007bec:	432a      	orrs	r2, r5
 8007bee:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007bf2:	069d      	lsls	r5, r3, #26
 8007bf4:	d508      	bpl.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007bf6:	496e      	ldr	r1, [pc, #440]	@ (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8007bf8:	69a5      	ldr	r5, [r4, #24]
 8007bfa:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8007bfe:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007c02:	432a      	orrs	r2, r5
 8007c04:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007c08:	0659      	lsls	r1, r3, #25
 8007c0a:	d508      	bpl.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007c0c:	4968      	ldr	r1, [pc, #416]	@ (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8007c0e:	69e5      	ldr	r5, [r4, #28]
 8007c10:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8007c14:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8007c18:	432a      	orrs	r2, r5
 8007c1a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007c1e:	061a      	lsls	r2, r3, #24
 8007c20:	d508      	bpl.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x144>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007c22:	4963      	ldr	r1, [pc, #396]	@ (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8007c24:	6a25      	ldr	r5, [r4, #32]
 8007c26:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8007c2a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007c2e:	432a      	orrs	r2, r5
 8007c30:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007c34:	05df      	lsls	r7, r3, #23
 8007c36:	d508      	bpl.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007c38:	495d      	ldr	r1, [pc, #372]	@ (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8007c3a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8007c3c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8007c40:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8007c44:	432a      	orrs	r2, r5
 8007c46:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007c4a:	039e      	lsls	r6, r3, #14
 8007c4c:	d508      	bpl.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007c4e:	4958      	ldr	r1, [pc, #352]	@ (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8007c50:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8007c52:	f8d1 209c 	ldr.w	r2, [r1, #156]	@ 0x9c
 8007c56:	f022 0203 	bic.w	r2, r2, #3
 8007c5a:	432a      	orrs	r2, r5
 8007c5c:	f8c1 209c 	str.w	r2, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007c60:	059d      	lsls	r5, r3, #22
 8007c62:	d508      	bpl.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007c64:	4952      	ldr	r1, [pc, #328]	@ (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8007c66:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8007c68:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8007c6c:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 8007c70:	432a      	orrs	r2, r5
 8007c72:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007c76:	0559      	lsls	r1, r3, #21
 8007c78:	d50b      	bpl.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007c7a:	494d      	ldr	r1, [pc, #308]	@ (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8007c7c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8007c7e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8007c82:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8007c86:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007c88:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007c8c:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007c90:	d075      	beq.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x28e>

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007c92:	051a      	lsls	r2, r3, #20
 8007c94:	d50b      	bpl.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007c96:	4946      	ldr	r1, [pc, #280]	@ (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8007c98:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 8007c9a:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8007c9e:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8007ca2:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007ca4:	f5b5 0f80 	cmp.w	r5, #4194304	@ 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007ca8:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007cac:	d06c      	beq.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0x298>

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007cae:	04df      	lsls	r7, r3, #19
 8007cb0:	d50b      	bpl.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007cb2:	493f      	ldr	r1, [pc, #252]	@ (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8007cb4:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 8007cb6:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8007cba:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8007cbe:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007cc0:	f1b5 7f80 	cmp.w	r5, #16777216	@ 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007cc4:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007cc8:	d063      	beq.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007cca:	049e      	lsls	r6, r3, #18
 8007ccc:	d50b      	bpl.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007cce:	4938      	ldr	r1, [pc, #224]	@ (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8007cd0:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 8007cd2:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8007cd6:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8007cda:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007cdc:	f1b5 6f00 	cmp.w	r5, #134217728	@ 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007ce0:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007ce4:	d05a      	beq.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007ce6:	045d      	lsls	r5, r3, #17
 8007ce8:	d50b      	bpl.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007cea:	4931      	ldr	r1, [pc, #196]	@ (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8007cec:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8007cee:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8007cf2:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8007cf6:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007cf8:	f1b5 6f00 	cmp.w	r5, #134217728	@ 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007cfc:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007d00:	d051      	beq.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007d02:	0419      	lsls	r1, r3, #16
 8007d04:	d50b      	bpl.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x22e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007d06:	492a      	ldr	r1, [pc, #168]	@ (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8007d08:	6c65      	ldr	r5, [r4, #68]	@ 0x44
 8007d0a:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8007d0e:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8007d12:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007d14:	f1b5 5f80 	cmp.w	r5, #268435456	@ 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007d18:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007d1c:	d04c      	beq.n	8007db8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007d1e:	03da      	lsls	r2, r3, #15
 8007d20:	d50b      	bpl.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007d22:	4923      	ldr	r1, [pc, #140]	@ (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8007d24:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 8007d26:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8007d2a:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 8007d2e:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007d30:	f1b5 4f80 	cmp.w	r5, #1073741824	@ 0x40000000
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007d34:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007d38:	d043      	beq.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007d3a:	035b      	lsls	r3, r3, #13
 8007d3c:	d50b      	bpl.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007d3e:	4a1c      	ldr	r2, [pc, #112]	@ (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8007d40:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8007d42:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
 8007d46:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007d4a:	430b      	orrs	r3, r1

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007d4c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007d50:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007d54:	d03a      	beq.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  }

#endif /* QUADSPI */

  return status;
}
 8007d56:	b002      	add	sp, #8
 8007d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8007d5c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007d5e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8007d62:	659a      	str	r2, [r3, #88]	@ 0x58
 8007d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007d6a:	9301      	str	r3, [sp, #4]
 8007d6c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8007d6e:	2701      	movs	r7, #1
 8007d70:	e6cc      	b.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x1c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d72:	490f      	ldr	r1, [pc, #60]	@ (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8007d74:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8007d76:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8007d7a:	658a      	str	r2, [r1, #88]	@ 0x58
 8007d7c:	e702      	b.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x94>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d7e:	68ca      	ldr	r2, [r1, #12]
 8007d80:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8007d84:	60ca      	str	r2, [r1, #12]
 8007d86:	e784      	b.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d88:	68ca      	ldr	r2, [r1, #12]
 8007d8a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8007d8e:	60ca      	str	r2, [r1, #12]
 8007d90:	e78d      	b.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x1be>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d92:	68ca      	ldr	r2, [r1, #12]
 8007d94:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8007d98:	60ca      	str	r2, [r1, #12]
 8007d9a:	e796      	b.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0x1da>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d9c:	68ca      	ldr	r2, [r1, #12]
 8007d9e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8007da2:	60ca      	str	r2, [r1, #12]
 8007da4:	e79f      	b.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007da6:	68ca      	ldr	r2, [r1, #12]
 8007da8:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8007dac:	60ca      	str	r2, [r1, #12]
 8007dae:	e7a8      	b.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8007db0:	40021000 	.word	0x40021000
 8007db4:	40007000 	.word	0x40007000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007db8:	68ca      	ldr	r2, [r1, #12]
 8007dba:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8007dbe:	60ca      	str	r2, [r1, #12]
 8007dc0:	e7ad      	b.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x22e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007dc2:	68ca      	ldr	r2, [r1, #12]
 8007dc4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8007dc8:	60ca      	str	r2, [r1, #12]
 8007dca:	e7b6      	b.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x24a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007dcc:	68d3      	ldr	r3, [r2, #12]
 8007dce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007dd2:	60d3      	str	r3, [r2, #12]
}
 8007dd4:	b002      	add	sp, #8
 8007dd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007dda:	f7fd fe07 	bl	80059ec <HAL_GetTick>
 8007dde:	1b80      	subs	r0, r0, r6
 8007de0:	4540      	cmp	r0, r8
 8007de2:	f63f aeca 	bhi.w	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007de6:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8007dea:	079b      	lsls	r3, r3, #30
 8007dec:	d5f5      	bpl.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0x2ea>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007dee:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8007df0:	4904      	ldr	r1, [pc, #16]	@ (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8007df2:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
 8007df6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007e00:	2000      	movs	r0, #0
 8007e02:	e6bb      	b.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0x8c>
 8007e04:	40021000 	.word	0x40021000

08007e08 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e08:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e0a:	6a02      	ldr	r2, [r0, #32]
 8007e0c:	f022 0201 	bic.w	r2, r2, #1
{
 8007e10:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e12:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e14:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e16:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e18:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007e1a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007e1e:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8007e22:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007e24:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8007e26:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8007e2a:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007e2c:	4d15      	ldr	r5, [pc, #84]	@ (8007e84 <TIM_OC1_SetConfig+0x7c>)
 8007e2e:	42a8      	cmp	r0, r5
 8007e30:	d013      	beq.n	8007e5a <TIM_OC1_SetConfig+0x52>
 8007e32:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8007e36:	42a8      	cmp	r0, r5
 8007e38:	d00f      	beq.n	8007e5a <TIM_OC1_SetConfig+0x52>
 8007e3a:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 8007e3e:	42a8      	cmp	r0, r5
 8007e40:	d00b      	beq.n	8007e5a <TIM_OC1_SetConfig+0x52>
 8007e42:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007e46:	42a8      	cmp	r0, r5
 8007e48:	d007      	beq.n	8007e5a <TIM_OC1_SetConfig+0x52>
 8007e4a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007e4e:	42a8      	cmp	r0, r5
 8007e50:	d003      	beq.n	8007e5a <TIM_OC1_SetConfig+0x52>
 8007e52:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8007e56:	42a8      	cmp	r0, r5
 8007e58:	d10d      	bne.n	8007e76 <TIM_OC1_SetConfig+0x6e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007e5a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8007e5c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8007e60:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007e62:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007e66:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8007e6a:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8007e6e:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8007e72:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007e76:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8007e78:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8007e7a:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8007e7c:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 8007e7e:	6341      	str	r1, [r0, #52]	@ 0x34
  TIMx->CCER = tmpccer;
 8007e80:	6203      	str	r3, [r0, #32]
}
 8007e82:	4770      	bx	lr
 8007e84:	40012c00 	.word	0x40012c00

08007e88 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e88:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007e8a:	6a02      	ldr	r2, [r0, #32]
 8007e8c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
{
 8007e90:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007e92:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e94:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e96:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e98:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007e9a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007e9e:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8007ea2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007ea4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8007ea6:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007eaa:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007eae:	4d17      	ldr	r5, [pc, #92]	@ (8007f0c <TIM_OC3_SetConfig+0x84>)
 8007eb0:	42a8      	cmp	r0, r5
 8007eb2:	d014      	beq.n	8007ede <TIM_OC3_SetConfig+0x56>
 8007eb4:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8007eb8:	42a8      	cmp	r0, r5
 8007eba:	d010      	beq.n	8007ede <TIM_OC3_SetConfig+0x56>
 8007ebc:	f505 55e0 	add.w	r5, r5, #7168	@ 0x1c00
 8007ec0:	42a8      	cmp	r0, r5
 8007ec2:	d00c      	beq.n	8007ede <TIM_OC3_SetConfig+0x56>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ec4:	f5a5 5580 	sub.w	r5, r5, #4096	@ 0x1000
 8007ec8:	42a8      	cmp	r0, r5
 8007eca:	d00f      	beq.n	8007eec <TIM_OC3_SetConfig+0x64>
 8007ecc:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007ed0:	42a8      	cmp	r0, r5
 8007ed2:	d00b      	beq.n	8007eec <TIM_OC3_SetConfig+0x64>
 8007ed4:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007ed8:	42a8      	cmp	r0, r5
 8007eda:	d10f      	bne.n	8007efc <TIM_OC3_SetConfig+0x74>
 8007edc:	e006      	b.n	8007eec <TIM_OC3_SetConfig+0x64>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007ede:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8007ee0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007ee4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8007ee8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007eec:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007ef0:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007ef4:	ea46 0c05 	orr.w	ip, r6, r5
 8007ef8:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007efc:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8007efe:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8007f00:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8007f02:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 8007f04:	63c1      	str	r1, [r0, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 8007f06:	6203      	str	r3, [r0, #32]
}
 8007f08:	4770      	bx	lr
 8007f0a:	bf00      	nop
 8007f0c:	40012c00 	.word	0x40012c00

08007f10 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f10:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007f12:	6a02      	ldr	r2, [r0, #32]
 8007f14:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
{
 8007f18:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007f1a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f1c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f1e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f20:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007f22:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8007f26:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f2a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007f2e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8007f30:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007f34:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007f38:	4d16      	ldr	r5, [pc, #88]	@ (8007f94 <TIM_OC4_SetConfig+0x84>)
 8007f3a:	42a8      	cmp	r0, r5
 8007f3c:	d014      	beq.n	8007f68 <TIM_OC4_SetConfig+0x58>
 8007f3e:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8007f42:	42a8      	cmp	r0, r5
 8007f44:	d010      	beq.n	8007f68 <TIM_OC4_SetConfig+0x58>
 8007f46:	f505 55e0 	add.w	r5, r5, #7168	@ 0x1c00
 8007f4a:	42a8      	cmp	r0, r5
 8007f4c:	d00c      	beq.n	8007f68 <TIM_OC4_SetConfig+0x58>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f4e:	f5a5 5580 	sub.w	r5, r5, #4096	@ 0x1000
 8007f52:	42a8      	cmp	r0, r5
 8007f54:	d00f      	beq.n	8007f76 <TIM_OC4_SetConfig+0x66>
 8007f56:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007f5a:	42a8      	cmp	r0, r5
 8007f5c:	d00b      	beq.n	8007f76 <TIM_OC4_SetConfig+0x66>
 8007f5e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007f62:	42a8      	cmp	r0, r5
 8007f64:	d10f      	bne.n	8007f86 <TIM_OC4_SetConfig+0x76>
 8007f66:	e006      	b.n	8007f76 <TIM_OC4_SetConfig+0x66>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007f68:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 8007f6a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007f6e:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8007f72:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
    tmpcr2 &= ~TIM_CR2_OIS4N;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007f76:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007f7a:	f424 4440 	bic.w	r4, r4, #49152	@ 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007f7e:	ea46 0c05 	orr.w	ip, r6, r5
 8007f82:	ea44 148c 	orr.w	r4, r4, ip, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007f86:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8007f88:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8007f8a:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8007f8c:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR4 = OC_Config->Pulse;
 8007f8e:	6401      	str	r1, [r0, #64]	@ 0x40
  TIMx->CCER = tmpccer;
 8007f90:	6203      	str	r3, [r0, #32]
}
 8007f92:	4770      	bx	lr
 8007f94:	40012c00 	.word	0x40012c00

08007f98 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8007f98:	2800      	cmp	r0, #0
 8007f9a:	f000 808b 	beq.w	80080b4 <HAL_TIM_Base_Init+0x11c>
{
 8007f9e:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8007fa0:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8007fa4:	4604      	mov	r4, r0
 8007fa6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d07d      	beq.n	80080aa <HAL_TIM_Base_Init+0x112>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007fae:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007fb0:	494c      	ldr	r1, [pc, #304]	@ (80080e4 <HAL_TIM_Base_Init+0x14c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8007fb2:	2302      	movs	r3, #2
 8007fb4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007fb8:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8007fba:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007fbc:	d02c      	beq.n	8008018 <HAL_TIM_Base_Init+0x80>
 8007fbe:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8007fc2:	d060      	beq.n	8008086 <HAL_TIM_Base_Init+0xee>
 8007fc4:	f5a1 3194 	sub.w	r1, r1, #75776	@ 0x12800
 8007fc8:	428a      	cmp	r2, r1
 8007fca:	d05c      	beq.n	8008086 <HAL_TIM_Base_Init+0xee>
 8007fcc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007fd0:	428a      	cmp	r2, r1
 8007fd2:	d058      	beq.n	8008086 <HAL_TIM_Base_Init+0xee>
 8007fd4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007fd8:	428a      	cmp	r2, r1
 8007fda:	d054      	beq.n	8008086 <HAL_TIM_Base_Init+0xee>
 8007fdc:	f501 3194 	add.w	r1, r1, #75776	@ 0x12800
 8007fe0:	428a      	cmp	r2, r1
 8007fe2:	d019      	beq.n	8008018 <HAL_TIM_Base_Init+0x80>
 8007fe4:	f501 51e0 	add.w	r1, r1, #7168	@ 0x1c00
 8007fe8:	428a      	cmp	r2, r1
 8007fea:	d015      	beq.n	8008018 <HAL_TIM_Base_Init+0x80>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007fec:	f5a1 5180 	sub.w	r1, r1, #4096	@ 0x1000
 8007ff0:	428a      	cmp	r2, r1
 8007ff2:	d061      	beq.n	80080b8 <HAL_TIM_Base_Init+0x120>
 8007ff4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007ff8:	428a      	cmp	r2, r1
 8007ffa:	d05d      	beq.n	80080b8 <HAL_TIM_Base_Init+0x120>
 8007ffc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008000:	428a      	cmp	r2, r1
 8008002:	d05f      	beq.n	80080c4 <HAL_TIM_Base_Init+0x12c>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008004:	69a5      	ldr	r5, [r4, #24]
  TIMx->PSC = Structure->Prescaler;
 8008006:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008008:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800800a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800800e:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8008010:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008012:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008014:	6291      	str	r1, [r2, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008016:	e012      	b.n	800803e <HAL_TIM_Base_Init+0xa6>
    tmpcr1 |= Structure->CounterMode;
 8008018:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800801a:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800801c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8008020:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8008022:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008026:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008028:	69a1      	ldr	r1, [r4, #24]
 800802a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800802e:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8008030:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008032:	68e3      	ldr	r3, [r4, #12]
 8008034:	62d3      	str	r3, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008036:	6863      	ldr	r3, [r4, #4]
 8008038:	6293      	str	r3, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800803a:	6963      	ldr	r3, [r4, #20]
 800803c:	6313      	str	r3, [r2, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 800803e:	2301      	movs	r3, #1
 8008040:	6153      	str	r3, [r2, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008042:	6913      	ldr	r3, [r2, #16]
 8008044:	07db      	lsls	r3, r3, #31
 8008046:	d503      	bpl.n	8008050 <HAL_TIM_Base_Init+0xb8>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008048:	6913      	ldr	r3, [r2, #16]
 800804a:	f023 0301 	bic.w	r3, r3, #1
 800804e:	6113      	str	r3, [r2, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008050:	2301      	movs	r3, #1
 8008052:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008056:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800805a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800805e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8008062:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8008066:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800806a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800806e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8008072:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8008076:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800807a:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800807e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8008082:	2000      	movs	r0, #0
}
 8008084:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8008086:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008088:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800808a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800808e:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8008090:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008094:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008096:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008098:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800809c:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800809e:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 80080a0:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80080a2:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80080a4:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80080a6:	6291      	str	r1, [r2, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80080a8:	e7c9      	b.n	800803e <HAL_TIM_Base_Init+0xa6>
    htim->Lock = HAL_UNLOCKED;
 80080aa:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80080ae:	f7fd fa59 	bl	8005564 <HAL_TIM_Base_MspInit>
 80080b2:	e77c      	b.n	8007fae <HAL_TIM_Base_Init+0x16>
    return HAL_ERROR;
 80080b4:	2001      	movs	r0, #1
}
 80080b6:	4770      	bx	lr
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80080b8:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80080ba:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 80080bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80080c0:	4303      	orrs	r3, r0
 80080c2:	e7b2      	b.n	800802a <HAL_TIM_Base_Init+0x92>
 80080c4:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80080c6:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 80080c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80080cc:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80080ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80080d2:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80080d4:	4904      	ldr	r1, [pc, #16]	@ (80080e8 <HAL_TIM_Base_Init+0x150>)
 80080d6:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80080d8:	68e3      	ldr	r3, [r4, #12]
 80080da:	62cb      	str	r3, [r1, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80080dc:	6863      	ldr	r3, [r4, #4]
 80080de:	628b      	str	r3, [r1, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80080e0:	e7ab      	b.n	800803a <HAL_TIM_Base_Init+0xa2>
 80080e2:	bf00      	nop
 80080e4:	40012c00 	.word	0x40012c00
 80080e8:	40014800 	.word	0x40014800

080080ec <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80080ec:	2800      	cmp	r0, #0
 80080ee:	f000 808b 	beq.w	8008208 <HAL_TIM_PWM_Init+0x11c>
{
 80080f2:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80080f4:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80080f8:	4604      	mov	r4, r0
 80080fa:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d07d      	beq.n	80081fe <HAL_TIM_PWM_Init+0x112>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008102:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008104:	494c      	ldr	r1, [pc, #304]	@ (8008238 <HAL_TIM_PWM_Init+0x14c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8008106:	2302      	movs	r3, #2
 8008108:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800810c:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 800810e:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008110:	d02c      	beq.n	800816c <HAL_TIM_PWM_Init+0x80>
 8008112:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8008116:	d060      	beq.n	80081da <HAL_TIM_PWM_Init+0xee>
 8008118:	f5a1 3194 	sub.w	r1, r1, #75776	@ 0x12800
 800811c:	428a      	cmp	r2, r1
 800811e:	d05c      	beq.n	80081da <HAL_TIM_PWM_Init+0xee>
 8008120:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008124:	428a      	cmp	r2, r1
 8008126:	d058      	beq.n	80081da <HAL_TIM_PWM_Init+0xee>
 8008128:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800812c:	428a      	cmp	r2, r1
 800812e:	d054      	beq.n	80081da <HAL_TIM_PWM_Init+0xee>
 8008130:	f501 3194 	add.w	r1, r1, #75776	@ 0x12800
 8008134:	428a      	cmp	r2, r1
 8008136:	d019      	beq.n	800816c <HAL_TIM_PWM_Init+0x80>
 8008138:	f501 51e0 	add.w	r1, r1, #7168	@ 0x1c00
 800813c:	428a      	cmp	r2, r1
 800813e:	d015      	beq.n	800816c <HAL_TIM_PWM_Init+0x80>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008140:	f5a1 5180 	sub.w	r1, r1, #4096	@ 0x1000
 8008144:	428a      	cmp	r2, r1
 8008146:	d061      	beq.n	800820c <HAL_TIM_PWM_Init+0x120>
 8008148:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800814c:	428a      	cmp	r2, r1
 800814e:	d05d      	beq.n	800820c <HAL_TIM_PWM_Init+0x120>
 8008150:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008154:	428a      	cmp	r2, r1
 8008156:	d05f      	beq.n	8008218 <HAL_TIM_PWM_Init+0x12c>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008158:	69a5      	ldr	r5, [r4, #24]
  TIMx->PSC = Structure->Prescaler;
 800815a:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800815c:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800815e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008162:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8008164:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008166:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008168:	6291      	str	r1, [r2, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800816a:	e012      	b.n	8008192 <HAL_TIM_PWM_Init+0xa6>
    tmpcr1 |= Structure->CounterMode;
 800816c:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800816e:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008170:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8008174:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8008176:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800817a:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800817c:	69a1      	ldr	r1, [r4, #24]
 800817e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008182:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8008184:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008186:	68e3      	ldr	r3, [r4, #12]
 8008188:	62d3      	str	r3, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800818a:	6863      	ldr	r3, [r4, #4]
 800818c:	6293      	str	r3, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800818e:	6963      	ldr	r3, [r4, #20]
 8008190:	6313      	str	r3, [r2, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8008192:	2301      	movs	r3, #1
 8008194:	6153      	str	r3, [r2, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008196:	6913      	ldr	r3, [r2, #16]
 8008198:	07db      	lsls	r3, r3, #31
 800819a:	d503      	bpl.n	80081a4 <HAL_TIM_PWM_Init+0xb8>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800819c:	6913      	ldr	r3, [r2, #16]
 800819e:	f023 0301 	bic.w	r3, r3, #1
 80081a2:	6113      	str	r3, [r2, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081a4:	2301      	movs	r3, #1
 80081a6:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081aa:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80081ae:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80081b2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80081b6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 80081ba:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80081be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081c2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80081c6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80081ca:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 80081ce:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 80081d2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80081d6:	2000      	movs	r0, #0
}
 80081d8:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 80081da:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80081dc:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80081de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80081e2:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 80081e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80081e8:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80081ea:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80081ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80081f0:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80081f2:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 80081f4:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80081f6:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80081f8:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80081fa:	6291      	str	r1, [r2, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80081fc:	e7c9      	b.n	8008192 <HAL_TIM_PWM_Init+0xa6>
    htim->Lock = HAL_UNLOCKED;
 80081fe:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8008202:	f7fd f975 	bl	80054f0 <HAL_TIM_PWM_MspInit>
 8008206:	e77c      	b.n	8008102 <HAL_TIM_PWM_Init+0x16>
    return HAL_ERROR;
 8008208:	2001      	movs	r0, #1
}
 800820a:	4770      	bx	lr
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800820c:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800820e:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8008210:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008214:	4303      	orrs	r3, r0
 8008216:	e7b2      	b.n	800817e <HAL_TIM_PWM_Init+0x92>
 8008218:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800821a:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 800821c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008220:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008222:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008226:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8008228:	4904      	ldr	r1, [pc, #16]	@ (800823c <HAL_TIM_PWM_Init+0x150>)
 800822a:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800822c:	68e3      	ldr	r3, [r4, #12]
 800822e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008230:	6863      	ldr	r3, [r4, #4]
 8008232:	628b      	str	r3, [r1, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008234:	e7ab      	b.n	800818e <HAL_TIM_PWM_Init+0xa2>
 8008236:	bf00      	nop
 8008238:	40012c00 	.word	0x40012c00
 800823c:	40014800 	.word	0x40014800

08008240 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8008240:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8008244:	2a01      	cmp	r2, #1
 8008246:	d07a      	beq.n	800833e <HAL_TIM_ConfigClockSource+0xfe>
 8008248:	4603      	mov	r3, r0
{
 800824a:	b430      	push	{r4, r5}
  tmpsmcr = htim->Instance->SMCR;
 800824c:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800824e:	2402      	movs	r4, #2
  __HAL_LOCK(htim);
 8008250:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8008252:	f883 403d 	strb.w	r4, [r3, #61]	@ 0x3d
  __HAL_LOCK(htim);
 8008256:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800825a:	6895      	ldr	r5, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800825c:	4c61      	ldr	r4, [pc, #388]	@ (80083e4 <HAL_TIM_ConfigClockSource+0x1a4>)
 800825e:	402c      	ands	r4, r5
  htim->Instance->SMCR = tmpsmcr;
 8008260:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8008262:	680c      	ldr	r4, [r1, #0]
 8008264:	2c70      	cmp	r4, #112	@ 0x70
 8008266:	d06c      	beq.n	8008342 <HAL_TIM_ConfigClockSource+0x102>
 8008268:	d827      	bhi.n	80082ba <HAL_TIM_ConfigClockSource+0x7a>
 800826a:	2c50      	cmp	r4, #80	@ 0x50
 800826c:	d079      	beq.n	8008362 <HAL_TIM_ConfigClockSource+0x122>
 800826e:	d82d      	bhi.n	80082cc <HAL_TIM_ConfigClockSource+0x8c>
 8008270:	2c40      	cmp	r4, #64	@ 0x40
 8008272:	f040 80a0 	bne.w	80083b6 <HAL_TIM_ConfigClockSource+0x176>
                               sClockSourceConfig->ClockPolarity,
 8008276:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8008278:	68cc      	ldr	r4, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800827a:	6a11      	ldr	r1, [r2, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800827c:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8008280:	4308      	orrs	r0, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008282:	6a11      	ldr	r1, [r2, #32]
 8008284:	f021 0101 	bic.w	r1, r1, #1
 8008288:	6211      	str	r1, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 800828a:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800828c:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008290:	ea41 1104 	orr.w	r1, r1, r4, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008294:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8008296:	6210      	str	r0, [r2, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008298:	6891      	ldr	r1, [r2, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800829a:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 800829e:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80082a2:	f041 0147 	orr.w	r1, r1, #71	@ 0x47
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082a6:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80082a8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80082aa:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 80082ac:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 80082ae:	f883 103d 	strb.w	r1, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80082b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80082b6:	bc30      	pop	{r4, r5}
 80082b8:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 80082ba:	f5b4 5f00 	cmp.w	r4, #8192	@ 0x2000
 80082be:	d06a      	beq.n	8008396 <HAL_TIM_ConfigClockSource+0x156>
 80082c0:	d821      	bhi.n	8008306 <HAL_TIM_ConfigClockSource+0xc6>
 80082c2:	f5b4 5080 	subs.w	r0, r4, #4096	@ 0x1000
 80082c6:	bf18      	it	ne
 80082c8:	2001      	movne	r0, #1
 80082ca:	e7ee      	b.n	80082aa <HAL_TIM_ConfigClockSource+0x6a>
 80082cc:	2c60      	cmp	r4, #96	@ 0x60
 80082ce:	d1ec      	bne.n	80082aa <HAL_TIM_ConfigClockSource+0x6a>
                               sClockSourceConfig->ClockPolarity,
 80082d0:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80082d2:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 80082d4:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80082d6:	f021 01a0 	bic.w	r1, r1, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80082da:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082de:	6a10      	ldr	r0, [r2, #32]
 80082e0:	f020 0010 	bic.w	r0, r0, #16
 80082e4:	6210      	str	r0, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082e6:	6990      	ldr	r0, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80082e8:	f420 4070 	bic.w	r0, r0, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80082ec:	ea40 3004 	orr.w	r0, r0, r4, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80082f0:	6190      	str	r0, [r2, #24]
  TIMx->CCER = tmpccer;
 80082f2:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 80082f4:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80082f6:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 80082fa:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80082fe:	f041 0167 	orr.w	r1, r1, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8008302:	6091      	str	r1, [r2, #8]
}
 8008304:	e7d0      	b.n	80082a8 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8008306:	4938      	ldr	r1, [pc, #224]	@ (80083e8 <HAL_TIM_ConfigClockSource+0x1a8>)
 8008308:	428c      	cmp	r4, r1
 800830a:	d00e      	beq.n	800832a <HAL_TIM_ConfigClockSource+0xea>
 800830c:	d85d      	bhi.n	80083ca <HAL_TIM_ConfigClockSource+0x18a>
 800830e:	3920      	subs	r1, #32
 8008310:	428c      	cmp	r4, r1
 8008312:	d00a      	beq.n	800832a <HAL_TIM_ConfigClockSource+0xea>
 8008314:	d806      	bhi.n	8008324 <HAL_TIM_ConfigClockSource+0xe4>
 8008316:	f024 0110 	bic.w	r1, r4, #16
 800831a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800831e:	d004      	beq.n	800832a <HAL_TIM_ConfigClockSource+0xea>
      status = HAL_ERROR;
 8008320:	2001      	movs	r0, #1
 8008322:	e7c2      	b.n	80082aa <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 8008324:	4931      	ldr	r1, [pc, #196]	@ (80083ec <HAL_TIM_ConfigClockSource+0x1ac>)
 8008326:	428c      	cmp	r4, r1
 8008328:	d1fa      	bne.n	8008320 <HAL_TIM_ConfigClockSource+0xe0>
  tmpsmcr = TIMx->SMCR;
 800832a:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800832c:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8008330:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008334:	4321      	orrs	r1, r4
 8008336:	f041 0107 	orr.w	r1, r1, #7
  TIMx->SMCR = tmpsmcr;
 800833a:	6091      	str	r1, [r2, #8]
}
 800833c:	e7b4      	b.n	80082a8 <HAL_TIM_ConfigClockSource+0x68>
  __HAL_LOCK(htim);
 800833e:	2002      	movs	r0, #2
}
 8008340:	4770      	bx	lr

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008342:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8008346:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008348:	4328      	orrs	r0, r5
 800834a:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800834c:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008350:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 8008354:	4308      	orrs	r0, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008356:	6090      	str	r0, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 8008358:	6891      	ldr	r1, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800835a:	f041 0177 	orr.w	r1, r1, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 800835e:	6091      	str	r1, [r2, #8]
      break;
 8008360:	e7a2      	b.n	80082a8 <HAL_TIM_ConfigClockSource+0x68>
                               sClockSourceConfig->ClockPolarity,
 8008362:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8008364:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 8008366:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008368:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800836c:	4308      	orrs	r0, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800836e:	6a11      	ldr	r1, [r2, #32]
 8008370:	f021 0101 	bic.w	r1, r1, #1
 8008374:	6211      	str	r1, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008376:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008378:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800837c:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8008380:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8008382:	6210      	str	r0, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8008384:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8008386:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 800838a:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800838e:	f041 0157 	orr.w	r1, r1, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 8008392:	6091      	str	r1, [r2, #8]
}
 8008394:	e788      	b.n	80082a8 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008396:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800839a:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800839c:	4328      	orrs	r0, r5
 800839e:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80083a0:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80083a4:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 80083a8:	4308      	orrs	r0, r1
  TIMx->SMCR = tmpsmcr;
 80083aa:	6090      	str	r0, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80083ac:	6891      	ldr	r1, [r2, #8]
 80083ae:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 80083b2:	6091      	str	r1, [r2, #8]
      break;
 80083b4:	e778      	b.n	80082a8 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 80083b6:	f63f af78 	bhi.w	80082aa <HAL_TIM_ConfigClockSource+0x6a>
 80083ba:	2c20      	cmp	r4, #32
 80083bc:	d0b5      	beq.n	800832a <HAL_TIM_ConfigClockSource+0xea>
 80083be:	d80e      	bhi.n	80083de <HAL_TIM_ConfigClockSource+0x19e>
 80083c0:	f034 0110 	bics.w	r1, r4, #16
 80083c4:	f47f af71 	bne.w	80082aa <HAL_TIM_ConfigClockSource+0x6a>
 80083c8:	e7af      	b.n	800832a <HAL_TIM_ConfigClockSource+0xea>
 80083ca:	4909      	ldr	r1, [pc, #36]	@ (80083f0 <HAL_TIM_ConfigClockSource+0x1b0>)
 80083cc:	428c      	cmp	r4, r1
 80083ce:	d0ac      	beq.n	800832a <HAL_TIM_ConfigClockSource+0xea>
 80083d0:	f024 0520 	bic.w	r5, r4, #32
 80083d4:	3910      	subs	r1, #16
 80083d6:	428d      	cmp	r5, r1
 80083d8:	f47f af67 	bne.w	80082aa <HAL_TIM_ConfigClockSource+0x6a>
 80083dc:	e7a5      	b.n	800832a <HAL_TIM_ConfigClockSource+0xea>
 80083de:	2c30      	cmp	r4, #48	@ 0x30
 80083e0:	d0a3      	beq.n	800832a <HAL_TIM_ConfigClockSource+0xea>
 80083e2:	e79d      	b.n	8008320 <HAL_TIM_ConfigClockSource+0xe0>
 80083e4:	ffce0088 	.word	0xffce0088
 80083e8:	00100040 	.word	0x00100040
 80083ec:	00100030 	.word	0x00100030
 80083f0:	00100060 	.word	0x00100060

080083f4 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80083f4:	4a3e      	ldr	r2, [pc, #248]	@ (80084f0 <TIM_Base_SetConfig+0xfc>)
  tmpcr1 = TIMx->CR1;
 80083f6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80083f8:	4290      	cmp	r0, r2
{
 80083fa:	b410      	push	{r4}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80083fc:	d049      	beq.n	8008492 <TIM_Base_SetConfig+0x9e>
 80083fe:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8008402:	d029      	beq.n	8008458 <TIM_Base_SetConfig+0x64>
 8008404:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8008408:	4290      	cmp	r0, r2
 800840a:	d025      	beq.n	8008458 <TIM_Base_SetConfig+0x64>
 800840c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008410:	4290      	cmp	r0, r2
 8008412:	d021      	beq.n	8008458 <TIM_Base_SetConfig+0x64>
 8008414:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008418:	4290      	cmp	r0, r2
 800841a:	d01d      	beq.n	8008458 <TIM_Base_SetConfig+0x64>
 800841c:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 8008420:	4290      	cmp	r0, r2
 8008422:	d04a      	beq.n	80084ba <TIM_Base_SetConfig+0xc6>
 8008424:	f502 52e0 	add.w	r2, r2, #7168	@ 0x1c00
 8008428:	4290      	cmp	r0, r2
 800842a:	d032      	beq.n	8008492 <TIM_Base_SetConfig+0x9e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800842c:	f5a2 5280 	sub.w	r2, r2, #4096	@ 0x1000
 8008430:	4290      	cmp	r0, r2
 8008432:	d047      	beq.n	80084c4 <TIM_Base_SetConfig+0xd0>
 8008434:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008438:	4290      	cmp	r0, r2
 800843a:	d043      	beq.n	80084c4 <TIM_Base_SetConfig+0xd0>
 800843c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008440:	4290      	cmp	r0, r2
 8008442:	d045      	beq.n	80084d0 <TIM_Base_SetConfig+0xdc>
  TIMx->PSC = Structure->Prescaler;
 8008444:	680a      	ldr	r2, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008446:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008448:	6949      	ldr	r1, [r1, #20]
 800844a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800844e:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8008450:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008452:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008454:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008456:	e010      	b.n	800847a <TIM_Base_SetConfig+0x86>
    tmpcr1 |= Structure->CounterMode;
 8008458:	684a      	ldr	r2, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800845a:	68cc      	ldr	r4, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800845c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8008460:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8008462:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008466:	694a      	ldr	r2, [r1, #20]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008468:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800846a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800846e:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008470:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 8008472:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 8008474:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008476:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008478:	6282      	str	r2, [r0, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 800847a:	2301      	movs	r3, #1
 800847c:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800847e:	6903      	ldr	r3, [r0, #16]
 8008480:	07db      	lsls	r3, r3, #31
 8008482:	d503      	bpl.n	800848c <TIM_Base_SetConfig+0x98>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008484:	6903      	ldr	r3, [r0, #16]
 8008486:	f023 0301 	bic.w	r3, r3, #1
 800848a:	6103      	str	r3, [r0, #16]
}
 800848c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008490:	4770      	bx	lr
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008492:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 |= Structure->CounterMode;
 8008494:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008496:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800849a:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 800849c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80084a0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80084a2:	694a      	ldr	r2, [r1, #20]
 80084a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80084a8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80084aa:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80084ac:	688b      	ldr	r3, [r1, #8]
 80084ae:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80084b0:	680b      	ldr	r3, [r1, #0]
 80084b2:	6283      	str	r3, [r0, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80084b4:	690b      	ldr	r3, [r1, #16]
 80084b6:	6303      	str	r3, [r0, #48]	@ 0x30
 80084b8:	e7df      	b.n	800847a <TIM_Base_SetConfig+0x86>
    tmpcr1 |= Structure->CounterMode;
 80084ba:	684c      	ldr	r4, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80084bc:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80084be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80084c2:	e7ea      	b.n	800849a <TIM_Base_SetConfig+0xa6>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80084c4:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80084c6:	694a      	ldr	r2, [r1, #20]
    tmpcr1 &= ~TIM_CR1_CKD;
 80084c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80084cc:	4323      	orrs	r3, r4
 80084ce:	e7e9      	b.n	80084a4 <TIM_Base_SetConfig+0xb0>
 80084d0:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80084d2:	694a      	ldr	r2, [r1, #20]
    tmpcr1 &= ~TIM_CR1_CKD;
 80084d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80084d8:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80084da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80084de:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80084e0:	4a04      	ldr	r2, [pc, #16]	@ (80084f4 <TIM_Base_SetConfig+0x100>)
 80084e2:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80084e4:	688b      	ldr	r3, [r1, #8]
 80084e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80084e8:	680b      	ldr	r3, [r1, #0]
 80084ea:	6293      	str	r3, [r2, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80084ec:	e7e2      	b.n	80084b4 <TIM_Base_SetConfig+0xc0>
 80084ee:	bf00      	nop
 80084f0:	40012c00 	.word	0x40012c00
 80084f4:	40014800 	.word	0x40014800

080084f8 <TIM_OC2_SetConfig>:
  tmpccer = TIMx->CCER;
 80084f8:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80084fa:	6a02      	ldr	r2, [r0, #32]
 80084fc:	f022 0210 	bic.w	r2, r2, #16
{
 8008500:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008502:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8008504:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8008506:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008508:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800850a:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800850e:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008512:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008516:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8008518:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800851c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008520:	4d16      	ldr	r5, [pc, #88]	@ (800857c <TIM_OC2_SetConfig+0x84>)
 8008522:	42a8      	cmp	r0, r5
 8008524:	d014      	beq.n	8008550 <TIM_OC2_SetConfig+0x58>
 8008526:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 800852a:	42a8      	cmp	r0, r5
 800852c:	d010      	beq.n	8008550 <TIM_OC2_SetConfig+0x58>
 800852e:	f505 55e0 	add.w	r5, r5, #7168	@ 0x1c00
 8008532:	42a8      	cmp	r0, r5
 8008534:	d00c      	beq.n	8008550 <TIM_OC2_SetConfig+0x58>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008536:	f5a5 5580 	sub.w	r5, r5, #4096	@ 0x1000
 800853a:	42a8      	cmp	r0, r5
 800853c:	d00f      	beq.n	800855e <TIM_OC2_SetConfig+0x66>
 800853e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008542:	42a8      	cmp	r0, r5
 8008544:	d00b      	beq.n	800855e <TIM_OC2_SetConfig+0x66>
 8008546:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800854a:	42a8      	cmp	r0, r5
 800854c:	d10f      	bne.n	800856e <TIM_OC2_SetConfig+0x76>
 800854e:	e006      	b.n	800855e <TIM_OC2_SetConfig+0x66>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008550:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8008552:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008556:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800855a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800855e:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008562:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008566:	ea46 0c05 	orr.w	ip, r6, r5
 800856a:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 800856e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8008570:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8008572:	6182      	str	r2, [r0, #24]
}
 8008574:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 8008576:	6381      	str	r1, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8008578:	6203      	str	r3, [r0, #32]
}
 800857a:	4770      	bx	lr
 800857c:	40012c00 	.word	0x40012c00

08008580 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8008580:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8008584:	2b01      	cmp	r3, #1
 8008586:	f000 80e4 	beq.w	8008752 <HAL_TIM_PWM_ConfigChannel+0x1d2>
 800858a:	2301      	movs	r3, #1
{
 800858c:	b570      	push	{r4, r5, r6, lr}
 800858e:	4604      	mov	r4, r0
 8008590:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 8008592:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8008596:	2a14      	cmp	r2, #20
 8008598:	d80c      	bhi.n	80085b4 <HAL_TIM_PWM_ConfigChannel+0x34>
 800859a:	e8df f002 	tbb	[pc, r2]
 800859e:	0b53      	.short	0x0b53
 80085a0:	0b670b0b 	.word	0x0b670b0b
 80085a4:	0b780b0b 	.word	0x0b780b0b
 80085a8:	0b880b0b 	.word	0x0b880b0b
 80085ac:	0b990b0b 	.word	0x0b990b0b
 80085b0:	0b0b      	.short	0x0b0b
 80085b2:	10          	.byte	0x10
 80085b3:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 80085b4:	2300      	movs	r3, #0
 80085b6:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  switch (Channel)
 80085ba:	2001      	movs	r0, #1
}
 80085bc:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80085be:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085c0:	682e      	ldr	r6, [r5, #0]
  tmpccer = TIMx->CCER;
 80085c2:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80085c4:	6a19      	ldr	r1, [r3, #32]
 80085c6:	f421 1180 	bic.w	r1, r1, #1048576	@ 0x100000
 80085ca:	6219      	str	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80085cc:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 80085ce:	6d19      	ldr	r1, [r3, #80]	@ 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80085d0:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 80085d4:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085d8:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80085dc:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80085de:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80085e2:	ea42 5206 	orr.w	r2, r2, r6, lsl #20
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085e6:	4e5c      	ldr	r6, [pc, #368]	@ (8008758 <HAL_TIM_PWM_ConfigChannel+0x1d8>)
 80085e8:	42b3      	cmp	r3, r6
 80085ea:	d013      	beq.n	8008614 <HAL_TIM_PWM_ConfigChannel+0x94>
 80085ec:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 80085f0:	42b3      	cmp	r3, r6
 80085f2:	d00f      	beq.n	8008614 <HAL_TIM_PWM_ConfigChannel+0x94>
 80085f4:	f506 6640 	add.w	r6, r6, #3072	@ 0xc00
 80085f8:	42b3      	cmp	r3, r6
 80085fa:	d00b      	beq.n	8008614 <HAL_TIM_PWM_ConfigChannel+0x94>
 80085fc:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8008600:	42b3      	cmp	r3, r6
 8008602:	d007      	beq.n	8008614 <HAL_TIM_PWM_ConfigChannel+0x94>
 8008604:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8008608:	42b3      	cmp	r3, r6
 800860a:	d003      	beq.n	8008614 <HAL_TIM_PWM_ConfigChannel+0x94>
 800860c:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 8008610:	42b3      	cmp	r3, r6
 8008612:	d104      	bne.n	800861e <HAL_TIM_PWM_ConfigChannel+0x9e>
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008614:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008616:	f420 2080 	bic.w	r0, r0, #262144	@ 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800861a:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  TIMx->CR2 = tmpcr2;
 800861e:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8008620:	6519      	str	r1, [r3, #80]	@ 0x50
  TIMx->CCR6 = OC_Config->Pulse;
 8008622:	6869      	ldr	r1, [r5, #4]
 8008624:	64d9      	str	r1, [r3, #76]	@ 0x4c
  TIMx->CCER = tmpccer;
 8008626:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008628:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800862a:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800862c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008630:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008632:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008634:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008638:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800863a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800863c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8008640:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008642:	e00e      	b.n	8008662 <HAL_TIM_PWM_ConfigChannel+0xe2>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008644:	6800      	ldr	r0, [r0, #0]
 8008646:	f7ff fbdf 	bl	8007e08 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800864a:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800864c:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800864e:	f043 0308 	orr.w	r3, r3, #8
 8008652:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008654:	6983      	ldr	r3, [r0, #24]
 8008656:	f023 0304 	bic.w	r3, r3, #4
 800865a:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800865c:	6983      	ldr	r3, [r0, #24]
 800865e:	4313      	orrs	r3, r2
 8008660:	6183      	str	r3, [r0, #24]
  __HAL_UNLOCK(htim);
 8008662:	2300      	movs	r3, #0
 8008664:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8008668:	2000      	movs	r0, #0
}
 800866a:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800866c:	6800      	ldr	r0, [r0, #0]
 800866e:	f7ff ff43 	bl	80084f8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008672:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008674:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008676:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800867a:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800867c:	6983      	ldr	r3, [r0, #24]
 800867e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008682:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008684:	6983      	ldr	r3, [r0, #24]
 8008686:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800868a:	6183      	str	r3, [r0, #24]
      break;
 800868c:	e7e9      	b.n	8008662 <HAL_TIM_PWM_ConfigChannel+0xe2>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800868e:	6800      	ldr	r0, [r0, #0]
 8008690:	f7ff fbfa 	bl	8007e88 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008694:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008696:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008698:	f043 0308 	orr.w	r3, r3, #8
 800869c:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800869e:	69c3      	ldr	r3, [r0, #28]
 80086a0:	f023 0304 	bic.w	r3, r3, #4
 80086a4:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80086a6:	69c3      	ldr	r3, [r0, #28]
 80086a8:	4313      	orrs	r3, r2
 80086aa:	61c3      	str	r3, [r0, #28]
      break;
 80086ac:	e7d9      	b.n	8008662 <HAL_TIM_PWM_ConfigChannel+0xe2>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80086ae:	6800      	ldr	r0, [r0, #0]
 80086b0:	f7ff fc2e 	bl	8007f10 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80086b4:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80086b6:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80086b8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80086bc:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80086be:	69c3      	ldr	r3, [r0, #28]
 80086c0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80086c4:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80086c6:	69c3      	ldr	r3, [r0, #28]
 80086c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80086cc:	61c3      	str	r3, [r0, #28]
      break;
 80086ce:	e7c8      	b.n	8008662 <HAL_TIM_PWM_ConfigChannel+0xe2>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80086d0:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 80086d2:	682e      	ldr	r6, [r5, #0]
  tmpccer = TIMx->CCER;
 80086d4:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80086d6:	6a19      	ldr	r1, [r3, #32]
 80086d8:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 80086dc:	6219      	str	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80086de:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 80086e0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80086e2:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 80086e6:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpccmrx |= OC_Config->OCMode;
 80086ea:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80086ec:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 80086ee:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80086f2:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086f6:	4e18      	ldr	r6, [pc, #96]	@ (8008758 <HAL_TIM_PWM_ConfigChannel+0x1d8>)
 80086f8:	42b3      	cmp	r3, r6
 80086fa:	d013      	beq.n	8008724 <HAL_TIM_PWM_ConfigChannel+0x1a4>
 80086fc:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 8008700:	42b3      	cmp	r3, r6
 8008702:	d00f      	beq.n	8008724 <HAL_TIM_PWM_ConfigChannel+0x1a4>
 8008704:	f506 6640 	add.w	r6, r6, #3072	@ 0xc00
 8008708:	42b3      	cmp	r3, r6
 800870a:	d00b      	beq.n	8008724 <HAL_TIM_PWM_ConfigChannel+0x1a4>
 800870c:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8008710:	42b3      	cmp	r3, r6
 8008712:	d007      	beq.n	8008724 <HAL_TIM_PWM_ConfigChannel+0x1a4>
 8008714:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8008718:	42b3      	cmp	r3, r6
 800871a:	d003      	beq.n	8008724 <HAL_TIM_PWM_ConfigChannel+0x1a4>
 800871c:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 8008720:	42b3      	cmp	r3, r6
 8008722:	d104      	bne.n	800872e <HAL_TIM_PWM_ConfigChannel+0x1ae>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008724:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008726:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800872a:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 800872e:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8008730:	6519      	str	r1, [r3, #80]	@ 0x50
  TIMx->CCR5 = OC_Config->Pulse;
 8008732:	6869      	ldr	r1, [r5, #4]
 8008734:	6499      	str	r1, [r3, #72]	@ 0x48
  TIMx->CCER = tmpccer;
 8008736:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008738:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800873a:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800873c:	f042 0208 	orr.w	r2, r2, #8
 8008740:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008742:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008744:	f022 0204 	bic.w	r2, r2, #4
 8008748:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800874a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800874c:	430a      	orrs	r2, r1
 800874e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008750:	e787      	b.n	8008662 <HAL_TIM_PWM_ConfigChannel+0xe2>
  __HAL_LOCK(htim);
 8008752:	2002      	movs	r0, #2
}
 8008754:	4770      	bx	lr
 8008756:	bf00      	nop
 8008758:	40012c00 	.word	0x40012c00

0800875c <TIM_TI1_SetConfig>:
{
 800875c:	b470      	push	{r4, r5, r6}
  tmpccer = TIMx->CCER;
 800875e:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008760:	6a04      	ldr	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008762:	4e1a      	ldr	r6, [pc, #104]	@ (80087cc <TIM_TI1_SetConfig+0x70>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008764:	f024 0401 	bic.w	r4, r4, #1
 8008768:	6204      	str	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800876a:	42b0      	cmp	r0, r6
  tmpccmr1 = TIMx->CCMR1;
 800876c:	6984      	ldr	r4, [r0, #24]
{
 800876e:	4694      	mov	ip, r2
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008770:	d01c      	beq.n	80087ac <TIM_TI1_SetConfig+0x50>
 8008772:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8008776:	d019      	beq.n	80087ac <TIM_TI1_SetConfig+0x50>
 8008778:	4a15      	ldr	r2, [pc, #84]	@ (80087d0 <TIM_TI1_SetConfig+0x74>)
 800877a:	4290      	cmp	r0, r2
 800877c:	d016      	beq.n	80087ac <TIM_TI1_SetConfig+0x50>
 800877e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008782:	4290      	cmp	r0, r2
 8008784:	d012      	beq.n	80087ac <TIM_TI1_SetConfig+0x50>
 8008786:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800878a:	4290      	cmp	r0, r2
 800878c:	d00e      	beq.n	80087ac <TIM_TI1_SetConfig+0x50>
 800878e:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 8008792:	4290      	cmp	r0, r2
 8008794:	d00a      	beq.n	80087ac <TIM_TI1_SetConfig+0x50>
 8008796:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 800879a:	4290      	cmp	r0, r2
 800879c:	d006      	beq.n	80087ac <TIM_TI1_SetConfig+0x50>
 800879e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80087a2:	4290      	cmp	r0, r2
 80087a4:	d002      	beq.n	80087ac <TIM_TI1_SetConfig+0x50>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80087a6:	f044 0201 	orr.w	r2, r4, #1
 80087aa:	e003      	b.n	80087b4 <TIM_TI1_SetConfig+0x58>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80087ac:	f024 0203 	bic.w	r2, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 80087b0:	ea42 020c 	orr.w	r2, r2, ip
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80087b4:	f025 050a 	bic.w	r5, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80087b8:	f001 010a 	and.w	r1, r1, #10
 80087bc:	4329      	orrs	r1, r5
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80087be:	f363 1207 	bfi	r2, r3, #4, #4
  TIMx->CCMR1 = tmpccmr1;
 80087c2:	6182      	str	r2, [r0, #24]
}
 80087c4:	bc70      	pop	{r4, r5, r6}
  TIMx->CCER = tmpccer;
 80087c6:	6201      	str	r1, [r0, #32]
}
 80087c8:	4770      	bx	lr
 80087ca:	bf00      	nop
 80087cc:	40012c00 	.word	0x40012c00
 80087d0:	40000400 	.word	0x40000400

080087d4 <HAL_TIMEx_HallSensor_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 80087d4:	4770      	bx	lr
 80087d6:	bf00      	nop

080087d8 <HAL_TIMEx_HallSensor_Init>:
  if (htim == NULL)
 80087d8:	2800      	cmp	r0, #0
 80087da:	d065      	beq.n	80088a8 <HAL_TIMEx_HallSensor_Init+0xd0>
{
 80087dc:	b530      	push	{r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80087de:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
{
 80087e2:	b089      	sub	sp, #36	@ 0x24
 80087e4:	460d      	mov	r5, r1
 80087e6:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80087e8:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d056      	beq.n	800889e <HAL_TIMEx_HallSensor_Init+0xc6>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80087f0:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 80087f2:	2302      	movs	r3, #2
 80087f4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80087f8:	f851 0b04 	ldr.w	r0, [r1], #4
 80087fc:	f7ff fdfa 	bl	80083f4 <TIM_Base_SetConfig>
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8008800:	68ab      	ldr	r3, [r5, #8]
 8008802:	6829      	ldr	r1, [r5, #0]
 8008804:	6820      	ldr	r0, [r4, #0]
 8008806:	2203      	movs	r2, #3
 8008808:	f7ff ffa8 	bl	800875c <TIM_TI1_SetConfig>
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800880c:	6820      	ldr	r0, [r4, #0]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 800880e:	6869      	ldr	r1, [r5, #4]
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008810:	6983      	ldr	r3, [r0, #24]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8008812:	68ea      	ldr	r2, [r5, #12]
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008814:	f023 030c 	bic.w	r3, r3, #12
 8008818:	6183      	str	r3, [r0, #24]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 800881a:	6983      	ldr	r3, [r0, #24]
 800881c:	430b      	orrs	r3, r1
 800881e:	6183      	str	r3, [r0, #24]
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8008820:	6843      	ldr	r3, [r0, #4]
 8008822:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008826:	6043      	str	r3, [r0, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8008828:	6883      	ldr	r3, [r0, #8]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 800882a:	9202      	str	r2, [sp, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800882c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008830:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008834:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8008836:	6883      	ldr	r3, [r0, #8]
 8008838:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800883c:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800883e:	6883      	ldr	r3, [r0, #8]
 8008840:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008844:	f023 0307 	bic.w	r3, r3, #7
 8008848:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 800884a:	6883      	ldr	r3, [r0, #8]
 800884c:	f043 0304 	orr.w	r3, r3, #4
 8008850:	6083      	str	r3, [r0, #8]
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8008852:	2500      	movs	r5, #0
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8008854:	a901      	add	r1, sp, #4
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8008856:	2370      	movs	r3, #112	@ 0x70
 8008858:	9301      	str	r3, [sp, #4]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 800885a:	e9cd 5505 	strd	r5, r5, [sp, #20]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 800885e:	e9cd 5503 	strd	r5, r5, [sp, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008862:	9507      	str	r5, [sp, #28]
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8008864:	f7ff fe48 	bl	80084f8 <TIM_OC2_SetConfig>
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8008868:	6821      	ldr	r1, [r4, #0]
 800886a:	684a      	ldr	r2, [r1, #4]
 800886c:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8008870:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8008874:	604a      	str	r2, [r1, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8008876:	684a      	ldr	r2, [r1, #4]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008878:	2301      	movs	r3, #1
  return HAL_OK;
 800887a:	4628      	mov	r0, r5
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 800887c:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8008880:	604a      	str	r2, [r1, #4]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008882:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008886:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800888a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800888e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008892:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8008896:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 800889a:	b009      	add	sp, #36	@ 0x24
 800889c:	bd30      	pop	{r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 800889e:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIMEx_HallSensor_MspInit(htim);
 80088a2:	f7ff ff97 	bl	80087d4 <HAL_TIMEx_HallSensor_MspInit>
 80088a6:	e7a3      	b.n	80087f0 <HAL_TIMEx_HallSensor_Init+0x18>
    return HAL_ERROR;
 80088a8:	2001      	movs	r0, #1
}
 80088aa:	4770      	bx	lr

080088ac <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80088ac:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	d04f      	beq.n	8008954 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
{
 80088b4:	b430      	push	{r4, r5}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80088b6:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80088b8:	4d27      	ldr	r5, [pc, #156]	@ (8008958 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
  htim->State = HAL_TIM_STATE_BUSY;
 80088ba:	2302      	movs	r3, #2
 80088bc:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80088c0:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 80088c2:	6853      	ldr	r3, [r2, #4]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80088c4:	680c      	ldr	r4, [r1, #0]
 80088c6:	4684      	mov	ip, r0
  tmpsmcr = htim->Instance->SMCR;
 80088c8:	6890      	ldr	r0, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80088ca:	d01d      	beq.n	8008908 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 80088cc:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 80088d0:	42aa      	cmp	r2, r5
 80088d2:	d034      	beq.n	800893e <HAL_TIMEx_MasterConfigSynchronization+0x92>
 80088d4:	f505 55e0 	add.w	r5, r5, #7168	@ 0x1c00
 80088d8:	42aa      	cmp	r2, r5
 80088da:	d015      	beq.n	8008908 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
  tmpcr2 &= ~TIM_CR2_MMS;
 80088dc:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80088e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80088e4:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088e6:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
  htim->Instance->CR2 = tmpcr2;
 80088ea:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088ec:	d117      	bne.n	800891e <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80088ee:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80088f0:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80088f4:	4318      	orrs	r0, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80088f6:	6090      	str	r0, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80088f8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80088fa:	2301      	movs	r3, #1
 80088fc:	f88c 303d 	strb.w	r3, [ip, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8008900:	f88c 003c 	strb.w	r0, [ip, #60]	@ 0x3c

  return HAL_OK;
}
 8008904:	bc30      	pop	{r4, r5}
 8008906:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008908:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800890a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800890e:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 8008910:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008914:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008918:	4323      	orrs	r3, r4
  htim->Instance->CR2 = tmpcr2;
 800891a:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800891c:	e7e7      	b.n	80088ee <HAL_TIMEx_MasterConfigSynchronization+0x42>
 800891e:	4b0f      	ldr	r3, [pc, #60]	@ (800895c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008920:	429a      	cmp	r2, r3
 8008922:	d0e4      	beq.n	80088ee <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8008924:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008928:	429a      	cmp	r2, r3
 800892a:	d0e0      	beq.n	80088ee <HAL_TIMEx_MasterConfigSynchronization+0x42>
 800892c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008930:	429a      	cmp	r2, r3
 8008932:	d0dc      	beq.n	80088ee <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8008934:	f503 339a 	add.w	r3, r3, #78848	@ 0x13400
 8008938:	429a      	cmp	r2, r3
 800893a:	d1dd      	bne.n	80088f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800893c:	e7d7      	b.n	80088ee <HAL_TIMEx_MasterConfigSynchronization+0x42>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800893e:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008940:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008944:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 8008946:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800894a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800894e:	431c      	orrs	r4, r3
  htim->Instance->CR2 = tmpcr2;
 8008950:	6054      	str	r4, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008952:	e7cc      	b.n	80088ee <HAL_TIMEx_MasterConfigSynchronization+0x42>
  __HAL_LOCK(htim);
 8008954:	2002      	movs	r0, #2
}
 8008956:	4770      	bx	lr
 8008958:	40012c00 	.word	0x40012c00
 800895c:	40000400 	.word	0x40000400

08008960 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008960:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8008964:	2b01      	cmp	r3, #1
 8008966:	d048      	beq.n	80089fa <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
{
 8008968:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800896a:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 800896e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008972:	4602      	mov	r2, r0
 8008974:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008976:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008978:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800897a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800897e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008980:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008984:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008986:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008988:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800898c:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800898e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008990:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008994:	6b08      	ldr	r0, [r1, #48]	@ 0x30
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008996:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008998:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800899c:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800899e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80089a0:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80089a4:	69c8      	ldr	r0, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80089a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80089aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80089ae:	4c14      	ldr	r4, [pc, #80]	@ (8008a00 <HAL_TIMEx_ConfigBreakDeadTime+0xa0>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80089b0:	4303      	orrs	r3, r0
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80089b2:	6810      	ldr	r0, [r2, #0]
 80089b4:	42a0      	cmp	r0, r4
 80089b6:	d007      	beq.n	80089c8 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
 80089b8:	f504 6400 	add.w	r4, r4, #2048	@ 0x800
 80089bc:	42a0      	cmp	r0, r4
 80089be:	d003      	beq.n	80089c8 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
 80089c0:	f504 54e0 	add.w	r4, r4, #7168	@ 0x1c00
 80089c4:	42a0      	cmp	r0, r4
 80089c6:	d110      	bne.n	80089ea <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80089c8:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 80089ca:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80089ce:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80089d2:	6a0c      	ldr	r4, [r1, #32]
 80089d4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80089d8:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80089da:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80089dc:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80089de:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80089e2:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80089e4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80089e8:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 80089ea:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 80089ec:	6443      	str	r3, [r0, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 80089ee:	f882 103c 	strb.w	r1, [r2, #60]	@ 0x3c

  return HAL_OK;
 80089f2:	4608      	mov	r0, r1
}
 80089f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089f8:	4770      	bx	lr
  __HAL_LOCK(htim);
 80089fa:	2002      	movs	r0, #2
}
 80089fc:	4770      	bx	lr
 80089fe:	bf00      	nop
 8008a00:	40012c00 	.word	0x40012c00

08008a04 <HAL_TIMEx_ConfigBreakInput>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)
{
 8008a04:	4603      	mov	r3, r0
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a06:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 8008a0a:	2801      	cmp	r0, #1
 8008a0c:	d073      	beq.n	8008af6 <HAL_TIMEx_ConfigBreakInput+0xf2>

  switch (sBreakInputConfig->Source)
 8008a0e:	6810      	ldr	r0, [r2, #0]
 8008a10:	2820      	cmp	r0, #32
{
 8008a12:	b570      	push	{r4, r5, r6, lr}
  switch (sBreakInputConfig->Source)
 8008a14:	d84c      	bhi.n	8008ab0 <HAL_TIMEx_ConfigBreakInput+0xac>
 8008a16:	2800      	cmp	r0, #0
 8008a18:	d07f      	beq.n	8008b1a <HAL_TIMEx_ConfigBreakInput+0x116>
 8008a1a:	1e44      	subs	r4, r0, #1
 8008a1c:	2c1f      	cmp	r4, #31
 8008a1e:	d811      	bhi.n	8008a44 <HAL_TIMEx_ConfigBreakInput+0x40>
 8008a20:	e8df f004 	tbb	[pc, r4]
 8008a24:	57106b71 	.word	0x57106b71
 8008a28:	5d101010 	.word	0x5d101010
 8008a2c:	10101010 	.word	0x10101010
 8008a30:	63101010 	.word	0x63101010
 8008a34:	10101010 	.word	0x10101010
 8008a38:	10101010 	.word	0x10101010
 8008a3c:	10101010 	.word	0x10101010
 8008a40:	52101010 	.word	0x52101010
    default:
    {
      bkin_enable_mask = 0U;
      bkin_polarity_mask = 0U;
      bkin_enable_bitpos = 0U;
      bkin_polarity_bitpos = 0U;
 8008a44:	f04f 0e00 	mov.w	lr, #0
      bkin_enable_bitpos = 0U;
 8008a48:	4676      	mov	r6, lr
      bkin_polarity_mask = 0U;
 8008a4a:	46f4      	mov	ip, lr
      bkin_enable_mask = 0U;
 8008a4c:	4670      	mov	r0, lr
      break;
    }
  }

  switch (BreakInput)
 8008a4e:	2901      	cmp	r1, #1
 8008a50:	d01c      	beq.n	8008a8c <HAL_TIMEx_ConfigBreakInput+0x88>
 8008a52:	2902      	cmp	r1, #2
 8008a54:	d004      	beq.n	8008a60 <HAL_TIMEx_ConfigBreakInput+0x5c>
    default:
      status = HAL_ERROR;
      break;
  }

  __HAL_UNLOCK(htim);
 8008a56:	2200      	movs	r2, #0
 8008a58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  switch (BreakInput)
 8008a5c:	2001      	movs	r0, #1

  return status;
}
 8008a5e:	bd70      	pop	{r4, r5, r6, pc}
      tmporx = htim->Instance->AF2;
 8008a60:	681c      	ldr	r4, [r3, #0]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008a62:	6851      	ldr	r1, [r2, #4]
      tmporx = htim->Instance->AF2;
 8008a64:	6e65      	ldr	r5, [r4, #100]	@ 0x64
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008a66:	6892      	ldr	r2, [r2, #8]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008a68:	40b1      	lsls	r1, r6
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008a6a:	fa02 fe0e 	lsl.w	lr, r2, lr
 8008a6e:	ea81 0205 	eor.w	r2, r1, r5
 8008a72:	4002      	ands	r2, r0
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008a74:	406a      	eors	r2, r5
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008a76:	ea8e 0102 	eor.w	r1, lr, r2
 8008a7a:	ea01 010c 	and.w	r1, r1, ip
 8008a7e:	404a      	eors	r2, r1
      htim->Instance->AF2 = tmporx;
 8008a80:	6662      	str	r2, [r4, #100]	@ 0x64
  __HAL_UNLOCK(htim);
 8008a82:	2200      	movs	r2, #0
 8008a84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8008a88:	2000      	movs	r0, #0
}
 8008a8a:	bd70      	pop	{r4, r5, r6, pc}
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008a8c:	6851      	ldr	r1, [r2, #4]
      tmporx = htim->Instance->AF1;
 8008a8e:	681d      	ldr	r5, [r3, #0]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008a90:	6894      	ldr	r4, [r2, #8]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008a92:	40b1      	lsls	r1, r6
      tmporx = htim->Instance->AF1;
 8008a94:	6e2e      	ldr	r6, [r5, #96]	@ 0x60
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008a96:	ea81 0206 	eor.w	r2, r1, r6
 8008a9a:	4002      	ands	r2, r0
 8008a9c:	4072      	eors	r2, r6
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008a9e:	fa04 f40e 	lsl.w	r4, r4, lr
 8008aa2:	ea84 0102 	eor.w	r1, r4, r2
 8008aa6:	ea01 010c 	and.w	r1, r1, ip
 8008aaa:	404a      	eors	r2, r1
      htim->Instance->AF1 = tmporx;
 8008aac:	662a      	str	r2, [r5, #96]	@ 0x60
      break;
 8008aae:	e7e8      	b.n	8008a82 <HAL_TIMEx_ConfigBreakInput+0x7e>
  switch (sBreakInputConfig->Source)
 8008ab0:	2840      	cmp	r0, #64	@ 0x40
      bkin_polarity_bitpos = 0U;
 8008ab2:	f04f 0e00 	mov.w	lr, #0
  switch (sBreakInputConfig->Source)
 8008ab6:	d004      	beq.n	8008ac2 <HAL_TIMEx_ConfigBreakInput+0xbe>
 8008ab8:	2880      	cmp	r0, #128	@ 0x80
 8008aba:	d12a      	bne.n	8008b12 <HAL_TIMEx_ConfigBreakInput+0x10e>
      bkin_enable_bitpos = TIM1_AF1_BKCMP7E_Pos;
 8008abc:	2607      	movs	r6, #7
      bkin_polarity_mask = 0U;
 8008abe:	46f4      	mov	ip, lr
 8008ac0:	e7c5      	b.n	8008a4e <HAL_TIMEx_ConfigBreakInput+0x4a>
      bkin_enable_bitpos = TIM1_AF1_BKCMP6E_Pos;
 8008ac2:	2606      	movs	r6, #6
      bkin_polarity_mask = 0U;
 8008ac4:	46f4      	mov	ip, lr
 8008ac6:	e7c2      	b.n	8008a4e <HAL_TIMEx_ConfigBreakInput+0x4a>
      bkin_polarity_bitpos = 0U;
 8008ac8:	f04f 0e00 	mov.w	lr, #0
      bkin_enable_bitpos = TIM1_AF1_BKCMP5E_Pos;
 8008acc:	2605      	movs	r6, #5
      bkin_polarity_mask = 0U;
 8008ace:	46f4      	mov	ip, lr
      break;
 8008ad0:	e7bd      	b.n	8008a4e <HAL_TIMEx_ConfigBreakInput+0x4a>
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 8008ad2:	f04f 0e0b 	mov.w	lr, #11
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 8008ad6:	2602      	movs	r6, #2
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 8008ad8:	f44f 6c00 	mov.w	ip, #2048	@ 0x800
      break;
 8008adc:	e7b7      	b.n	8008a4e <HAL_TIMEx_ConfigBreakInput+0x4a>
      bkin_polarity_bitpos = TIM1_AF1_BKCMP3P_Pos;
 8008ade:	f04f 0e0c 	mov.w	lr, #12
      bkin_enable_bitpos = TIM1_AF1_BKCMP3E_Pos;
 8008ae2:	2603      	movs	r6, #3
      bkin_polarity_mask = TIM1_AF1_BKCMP3P;
 8008ae4:	f44f 5c80 	mov.w	ip, #4096	@ 0x1000
      break;
 8008ae8:	e7b1      	b.n	8008a4e <HAL_TIMEx_ConfigBreakInput+0x4a>
      bkin_polarity_bitpos = TIM1_AF1_BKCMP4P_Pos;
 8008aea:	f04f 0e0d 	mov.w	lr, #13
      bkin_enable_bitpos = TIM1_AF1_BKCMP4E_Pos;
 8008aee:	2604      	movs	r6, #4
      bkin_polarity_mask = TIM1_AF1_BKCMP4P;
 8008af0:	f44f 5c00 	mov.w	ip, #8192	@ 0x2000
      break;
 8008af4:	e7ab      	b.n	8008a4e <HAL_TIMEx_ConfigBreakInput+0x4a>
  __HAL_LOCK(htim);
 8008af6:	2002      	movs	r0, #2
}
 8008af8:	4770      	bx	lr
  switch (sBreakInputConfig->Source)
 8008afa:	f04f 0e0a 	mov.w	lr, #10
 8008afe:	2601      	movs	r6, #1
 8008b00:	f44f 6c80 	mov.w	ip, #1024	@ 0x400
 8008b04:	e7a3      	b.n	8008a4e <HAL_TIMEx_ConfigBreakInput+0x4a>
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 8008b06:	f04f 0e09 	mov.w	lr, #9
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 8008b0a:	2600      	movs	r6, #0
      bkin_polarity_mask = TIM1_AF1_BKINP;
 8008b0c:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 8008b10:	e79d      	b.n	8008a4e <HAL_TIMEx_ConfigBreakInput+0x4a>
      bkin_enable_bitpos = 0U;
 8008b12:	4676      	mov	r6, lr
      bkin_polarity_mask = 0U;
 8008b14:	46f4      	mov	ip, lr
      bkin_enable_mask = 0U;
 8008b16:	4670      	mov	r0, lr
 8008b18:	e799      	b.n	8008a4e <HAL_TIMEx_ConfigBreakInput+0x4a>
      bkin_polarity_bitpos = 0U;
 8008b1a:	4686      	mov	lr, r0
      bkin_enable_bitpos = 0U;
 8008b1c:	4606      	mov	r6, r0
      bkin_polarity_mask = 0U;
 8008b1e:	4684      	mov	ip, r0
 8008b20:	e795      	b.n	8008a4e <HAL_TIMEx_ConfigBreakInput+0x4a>
 8008b22:	bf00      	nop

08008b24 <HAL_UART_RxHalfCpltCallback>:
/**
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
 8008b24:	4770      	bx	lr
 8008b26:	bf00      	nop

08008b28 <HAL_UART_ErrorCallback>:
/**
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8008b28:	4770      	bx	lr
 8008b2a:	bf00      	nop

08008b2c <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008b2c:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008b2e:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008b30:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
{
 8008b34:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008b36:	f8d0 408c 	ldr.w	r4, [r0, #140]	@ 0x8c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008b3a:	689a      	ldr	r2, [r3, #8]
 8008b3c:	0612      	lsls	r2, r2, #24
 8008b3e:	d501      	bpl.n	8008b44 <UART_DMAError+0x18>
 8008b40:	2921      	cmp	r1, #33	@ 0x21
 8008b42:	d00d      	beq.n	8008b60 <UART_DMAError+0x34>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008b44:	689a      	ldr	r2, [r3, #8]
 8008b46:	0652      	lsls	r2, r2, #25
 8008b48:	d501      	bpl.n	8008b4e <UART_DMAError+0x22>
 8008b4a:	2c22      	cmp	r4, #34	@ 0x22
 8008b4c:	d023      	beq.n	8008b96 <UART_DMAError+0x6a>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008b4e:	f8d0 3090 	ldr.w	r3, [r0, #144]	@ 0x90
 8008b52:	f043 0310 	orr.w	r3, r3, #16
 8008b56:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008b5a:	f7ff ffe5 	bl	8008b28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b5e:	bd10      	pop	{r4, pc}
    huart->TxXferCount = 0U;
 8008b60:	2200      	movs	r2, #0
 8008b62:	f8a0 2056 	strh.w	r2, [r0, #86]	@ 0x56
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b66:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008b6a:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b6e:	e843 2100 	strex	r1, r2, [r3]
 8008b72:	2900      	cmp	r1, #0
 8008b74:	d1f7      	bne.n	8008b66 <UART_DMAError+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b76:	f103 0208 	add.w	r2, r3, #8
 8008b7a:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008b7e:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b82:	f103 0c08 	add.w	ip, r3, #8
 8008b86:	e84c 2100 	strex	r1, r2, [ip]
 8008b8a:	2900      	cmp	r1, #0
 8008b8c:	d1f3      	bne.n	8008b76 <UART_DMAError+0x4a>
  huart->gState = HAL_UART_STATE_READY;
 8008b8e:	2220      	movs	r2, #32
 8008b90:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
}
 8008b94:	e7d6      	b.n	8008b44 <UART_DMAError+0x18>
    huart->RxXferCount = 0U;
 8008b96:	2200      	movs	r2, #0
 8008b98:	f8a0 205e 	strh.w	r2, [r0, #94]	@ 0x5e
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b9c:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ba0:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba4:	e843 2100 	strex	r1, r2, [r3]
 8008ba8:	2900      	cmp	r1, #0
 8008baa:	d1f7      	bne.n	8008b9c <UART_DMAError+0x70>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008bac:	4c13      	ldr	r4, [pc, #76]	@ (8008bfc <UART_DMAError+0xd0>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bae:	f103 0208 	add.w	r2, r3, #8
 8008bb2:	e852 2f00 	ldrex	r2, [r2]
 8008bb6:	4022      	ands	r2, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb8:	f103 0c08 	add.w	ip, r3, #8
 8008bbc:	e84c 2100 	strex	r1, r2, [ip]
 8008bc0:	2900      	cmp	r1, #0
 8008bc2:	d1f4      	bne.n	8008bae <UART_DMAError+0x82>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bc4:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
 8008bc6:	2a01      	cmp	r2, #1
 8008bc8:	d006      	beq.n	8008bd8 <UART_DMAError+0xac>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bca:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8008bcc:	2220      	movs	r2, #32
 8008bce:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
  huart->RxISR = NULL;
 8008bd2:	6743      	str	r3, [r0, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bd4:	66c3      	str	r3, [r0, #108]	@ 0x6c
}
 8008bd6:	e7ba      	b.n	8008b4e <UART_DMAError+0x22>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd8:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bdc:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be0:	e843 2100 	strex	r1, r2, [r3]
 8008be4:	2900      	cmp	r1, #0
 8008be6:	d0f0      	beq.n	8008bca <UART_DMAError+0x9e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008be8:	e853 2f00 	ldrex	r2, [r3]
 8008bec:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bf0:	e843 2100 	strex	r1, r2, [r3]
 8008bf4:	2900      	cmp	r1, #0
 8008bf6:	d1ef      	bne.n	8008bd8 <UART_DMAError+0xac>
 8008bf8:	e7e7      	b.n	8008bca <UART_DMAError+0x9e>
 8008bfa:	bf00      	nop
 8008bfc:	effffffe 	.word	0xeffffffe

08008c00 <HAL_UARTEx_RxEventCallback>:
}
 8008c00:	4770      	bx	lr
 8008c02:	bf00      	nop

08008c04 <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c04:	6a80      	ldr	r0, [r0, #40]	@ 0x28
{
 8008c06:	b508      	push	{r3, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	6703      	str	r3, [r0, #112]	@ 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c0c:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8008c0e:	2b01      	cmp	r3, #1
 8008c10:	d002      	beq.n	8008c18 <UART_DMARxHalfCplt+0x14>
    HAL_UART_RxHalfCpltCallback(huart);
 8008c12:	f7ff ff87 	bl	8008b24 <HAL_UART_RxHalfCpltCallback>
}
 8008c16:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008c18:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 8008c1c:	0849      	lsrs	r1, r1, #1
 8008c1e:	f7ff ffef 	bl	8008c00 <HAL_UARTEx_RxEventCallback>
}
 8008c22:	bd08      	pop	{r3, pc}

08008c24 <UART_DMAReceiveCplt>:
{
 8008c24:	b508      	push	{r3, lr}
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008c26:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c28:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008c2a:	681a      	ldr	r2, [r3, #0]
 8008c2c:	f012 0220 	ands.w	r2, r2, #32
 8008c30:	d128      	bne.n	8008c84 <UART_DMAReceiveCplt+0x60>
    huart->RxXferCount = 0U;
 8008c32:	6803      	ldr	r3, [r0, #0]
 8008c34:	f8a0 205e 	strh.w	r2, [r0, #94]	@ 0x5e
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c38:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c3c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c40:	e843 2100 	strex	r1, r2, [r3]
 8008c44:	2900      	cmp	r1, #0
 8008c46:	d1f7      	bne.n	8008c38 <UART_DMAReceiveCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c48:	f103 0208 	add.w	r2, r3, #8
 8008c4c:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c50:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c54:	f103 0c08 	add.w	ip, r3, #8
 8008c58:	e84c 2100 	strex	r1, r2, [ip]
 8008c5c:	2900      	cmp	r1, #0
 8008c5e:	d1f3      	bne.n	8008c48 <UART_DMAReceiveCplt+0x24>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c60:	f103 0208 	add.w	r2, r3, #8
 8008c64:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c68:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c6c:	f103 0c08 	add.w	ip, r3, #8
 8008c70:	e84c 2100 	strex	r1, r2, [ip]
 8008c74:	2900      	cmp	r1, #0
 8008c76:	d1f3      	bne.n	8008c60 <UART_DMAReceiveCplt+0x3c>
    huart->RxState = HAL_UART_STATE_READY;
 8008c78:	2220      	movs	r2, #32
 8008c7a:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c7e:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
 8008c80:	2a01      	cmp	r2, #1
 8008c82:	d007      	beq.n	8008c94 <UART_DMAReceiveCplt+0x70>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c84:	2300      	movs	r3, #0
 8008c86:	6703      	str	r3, [r0, #112]	@ 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c88:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8008c8a:	2b01      	cmp	r3, #1
 8008c8c:	d013      	beq.n	8008cb6 <UART_DMAReceiveCplt+0x92>
    HAL_UART_RxCpltCallback(huart);
 8008c8e:	f7f8 ff53 	bl	8001b38 <HAL_UART_RxCpltCallback>
}
 8008c92:	bd08      	pop	{r3, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c94:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c98:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c9c:	e843 2100 	strex	r1, r2, [r3]
 8008ca0:	2900      	cmp	r1, #0
 8008ca2:	d0ef      	beq.n	8008c84 <UART_DMAReceiveCplt+0x60>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ca4:	e853 2f00 	ldrex	r2, [r3]
 8008ca8:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cac:	e843 2100 	strex	r1, r2, [r3]
 8008cb0:	2900      	cmp	r1, #0
 8008cb2:	d1ef      	bne.n	8008c94 <UART_DMAReceiveCplt+0x70>
 8008cb4:	e7e6      	b.n	8008c84 <UART_DMAReceiveCplt+0x60>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008cb6:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 8008cba:	f7ff ffa1 	bl	8008c00 <HAL_UARTEx_RxEventCallback>
}
 8008cbe:	bd08      	pop	{r3, pc}

08008cc0 <UART_SetConfig>:
{
 8008cc0:	b570      	push	{r4, r5, r6, lr}
 8008cc2:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008cc4:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008cc6:	6882      	ldr	r2, [r0, #8]
 8008cc8:	6900      	ldr	r0, [r0, #16]
 8008cca:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008ccc:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008cce:	4302      	orrs	r2, r0
 8008cd0:	430a      	orrs	r2, r1
 8008cd2:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008cd4:	4997      	ldr	r1, [pc, #604]	@ (8008f34 <UART_SetConfig+0x274>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008cd6:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008cd8:	4029      	ands	r1, r5
 8008cda:	430a      	orrs	r2, r1
 8008cdc:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008cde:	685a      	ldr	r2, [r3, #4]
 8008ce0:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008ce2:	6a65      	ldr	r5, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ce4:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8008ce8:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008cea:	4993      	ldr	r1, [pc, #588]	@ (8008f38 <UART_SetConfig+0x278>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008cec:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008cee:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008cf0:	6899      	ldr	r1, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008cf2:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008cf4:	f021 416e 	bic.w	r1, r1, #3992977408	@ 0xee000000
 8008cf8:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008cfc:	f000 80c1 	beq.w	8008e82 <UART_SetConfig+0x1c2>
    tmpreg |= huart->Init.OneBitSampling;
 8008d00:	6a26      	ldr	r6, [r4, #32]
 8008d02:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008d04:	430a      	orrs	r2, r1
 8008d06:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008d08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d0a:	f022 020f 	bic.w	r2, r2, #15
 8008d0e:	432a      	orrs	r2, r5
 8008d10:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008d12:	4a8a      	ldr	r2, [pc, #552]	@ (8008f3c <UART_SetConfig+0x27c>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d039      	beq.n	8008d8c <UART_SetConfig+0xcc>
 8008d18:	4a89      	ldr	r2, [pc, #548]	@ (8008f40 <UART_SetConfig+0x280>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d011      	beq.n	8008d42 <UART_SetConfig+0x82>
 8008d1e:	4a89      	ldr	r2, [pc, #548]	@ (8008f44 <UART_SetConfig+0x284>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d059      	beq.n	8008dd8 <UART_SetConfig+0x118>
 8008d24:	4a88      	ldr	r2, [pc, #544]	@ (8008f48 <UART_SetConfig+0x288>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d044      	beq.n	8008db4 <UART_SetConfig+0xf4>
 8008d2a:	4a88      	ldr	r2, [pc, #544]	@ (8008f4c <UART_SetConfig+0x28c>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	f000 809b 	beq.w	8008e68 <UART_SetConfig+0x1a8>
        ret = HAL_ERROR;
 8008d32:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8008d34:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8008d36:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
  huart->TxISR = NULL;
 8008d3a:	e9c4 331d 	strd	r3, r3, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 8008d3e:	66a2      	str	r2, [r4, #104]	@ 0x68
}
 8008d40:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008d42:	4b83      	ldr	r3, [pc, #524]	@ (8008f50 <UART_SetConfig+0x290>)
 8008d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d48:	f003 030c 	and.w	r3, r3, #12
 8008d4c:	2b0c      	cmp	r3, #12
 8008d4e:	d8f0      	bhi.n	8008d32 <UART_SetConfig+0x72>
 8008d50:	a201      	add	r2, pc, #4	@ (adr r2, 8008d58 <UART_SetConfig+0x98>)
 8008d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d56:	bf00      	nop
 8008d58:	08008e5d 	.word	0x08008e5d
 8008d5c:	08008d33 	.word	0x08008d33
 8008d60:	08008d33 	.word	0x08008d33
 8008d64:	08008d33 	.word	0x08008d33
 8008d68:	08008dcb 	.word	0x08008dcb
 8008d6c:	08008d33 	.word	0x08008d33
 8008d70:	08008d33 	.word	0x08008d33
 8008d74:	08008d33 	.word	0x08008d33
 8008d78:	08008e1f 	.word	0x08008e1f
 8008d7c:	08008d33 	.word	0x08008d33
 8008d80:	08008d33 	.word	0x08008d33
 8008d84:	08008d33 	.word	0x08008d33
 8008d88:	08008ded 	.word	0x08008ded
 8008d8c:	4b70      	ldr	r3, [pc, #448]	@ (8008f50 <UART_SetConfig+0x290>)
 8008d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d92:	f003 0303 	and.w	r3, r3, #3
 8008d96:	2b02      	cmp	r3, #2
 8008d98:	d041      	beq.n	8008e1e <UART_SetConfig+0x15e>
 8008d9a:	2b03      	cmp	r3, #3
 8008d9c:	d026      	beq.n	8008dec <UART_SetConfig+0x12c>
 8008d9e:	2b01      	cmp	r3, #1
 8008da0:	d013      	beq.n	8008dca <UART_SetConfig+0x10a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008da2:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8008da6:	f000 80b3 	beq.w	8008f10 <UART_SetConfig+0x250>
        pclk = HAL_RCC_GetPCLK2Freq();
 8008daa:	f7fe fe87 	bl	8007abc <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8008dae:	b3a0      	cbz	r0, 8008e1a <UART_SetConfig+0x15a>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008db0:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008db2:	e020      	b.n	8008df6 <UART_SetConfig+0x136>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008db4:	4b66      	ldr	r3, [pc, #408]	@ (8008f50 <UART_SetConfig+0x290>)
 8008db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008dba:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008dbe:	2b80      	cmp	r3, #128	@ 0x80
 8008dc0:	d02d      	beq.n	8008e1e <UART_SetConfig+0x15e>
 8008dc2:	f200 809b 	bhi.w	8008efc <UART_SetConfig+0x23c>
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d048      	beq.n	8008e5c <UART_SetConfig+0x19c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008dca:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8008dce:	f000 80a7 	beq.w	8008f20 <UART_SetConfig+0x260>
        pclk = HAL_RCC_GetSysClockFreq();
 8008dd2:	f7fe fd1f 	bl	8007814 <HAL_RCC_GetSysClockFreq>
        break;
 8008dd6:	e7ea      	b.n	8008dae <UART_SetConfig+0xee>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008dd8:	4b5d      	ldr	r3, [pc, #372]	@ (8008f50 <UART_SetConfig+0x290>)
 8008dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008dde:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008de2:	2b20      	cmp	r3, #32
 8008de4:	d01b      	beq.n	8008e1e <UART_SetConfig+0x15e>
 8008de6:	d9ee      	bls.n	8008dc6 <UART_SetConfig+0x106>
 8008de8:	2b30      	cmp	r3, #48	@ 0x30
 8008dea:	d1a2      	bne.n	8008d32 <UART_SetConfig+0x72>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008dec:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8008df0:	d019      	beq.n	8008e26 <UART_SetConfig+0x166>
        pclk = (uint32_t) LSE_VALUE;
 8008df2:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008df6:	6863      	ldr	r3, [r4, #4]
 8008df8:	4a56      	ldr	r2, [pc, #344]	@ (8008f54 <UART_SetConfig+0x294>)
 8008dfa:	f832 1015 	ldrh.w	r1, [r2, r5, lsl #1]
 8008dfe:	fbb0 f0f1 	udiv	r0, r0, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e02:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e06:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8008e0a:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e0e:	f1a0 0310 	sub.w	r3, r0, #16
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d88d      	bhi.n	8008d32 <UART_SetConfig+0x72>
          huart->Instance->BRR = usartdiv;
 8008e16:	6823      	ldr	r3, [r4, #0]
 8008e18:	60d8      	str	r0, [r3, #12]
        ret = HAL_ERROR;
 8008e1a:	2000      	movs	r0, #0
 8008e1c:	e78a      	b.n	8008d34 <UART_SetConfig+0x74>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e1e:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
        pclk = (uint32_t) HSI_VALUE;
 8008e22:	484d      	ldr	r0, [pc, #308]	@ (8008f58 <UART_SetConfig+0x298>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e24:	d1e7      	bne.n	8008df6 <UART_SetConfig+0x136>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e26:	6862      	ldr	r2, [r4, #4]
 8008e28:	4b4a      	ldr	r3, [pc, #296]	@ (8008f54 <UART_SetConfig+0x294>)
 8008e2a:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 8008e2e:	fbb0 f0f1 	udiv	r0, r0, r1
 8008e32:	0853      	lsrs	r3, r2, #1
 8008e34:	eb03 0340 	add.w	r3, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e38:	f64f 71ef 	movw	r1, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e3c:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e40:	f1a3 0210 	sub.w	r2, r3, #16
 8008e44:	428a      	cmp	r2, r1
 8008e46:	f63f af74 	bhi.w	8008d32 <UART_SetConfig+0x72>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008e4a:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8008e4e:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008e50:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008e52:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8008e56:	4313      	orrs	r3, r2
 8008e58:	60cb      	str	r3, [r1, #12]
 8008e5a:	e7de      	b.n	8008e1a <UART_SetConfig+0x15a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e5c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8008e60:	d050      	beq.n	8008f04 <UART_SetConfig+0x244>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e62:	f7fe fe19 	bl	8007a98 <HAL_RCC_GetPCLK1Freq>
        break;
 8008e66:	e7a2      	b.n	8008dae <UART_SetConfig+0xee>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008e68:	4b39      	ldr	r3, [pc, #228]	@ (8008f50 <UART_SetConfig+0x290>)
 8008e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008e72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e76:	d0d2      	beq.n	8008e1e <UART_SetConfig+0x15e>
 8008e78:	d9a5      	bls.n	8008dc6 <UART_SetConfig+0x106>
 8008e7a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008e7e:	d0b5      	beq.n	8008dec <UART_SetConfig+0x12c>
 8008e80:	e757      	b.n	8008d32 <UART_SetConfig+0x72>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008e82:	4311      	orrs	r1, r2
 8008e84:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008e86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008e88:	4931      	ldr	r1, [pc, #196]	@ (8008f50 <UART_SetConfig+0x290>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008e8a:	f022 020f 	bic.w	r2, r2, #15
 8008e8e:	432a      	orrs	r2, r5
 8008e90:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008e92:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8008e96:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008e9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e9e:	d03a      	beq.n	8008f16 <UART_SetConfig+0x256>
 8008ea0:	d841      	bhi.n	8008f26 <UART_SetConfig+0x266>
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d039      	beq.n	8008f1a <UART_SetConfig+0x25a>
        pclk = HAL_RCC_GetSysClockFreq();
 8008ea6:	f7fe fcb5 	bl	8007814 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8008eaa:	2800      	cmp	r0, #0
 8008eac:	d0b5      	beq.n	8008e1a <UART_SetConfig+0x15a>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008eae:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008eb0:	6866      	ldr	r6, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008eb2:	4b28      	ldr	r3, [pc, #160]	@ (8008f54 <UART_SetConfig+0x294>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008eb4:	eb06 0146 	add.w	r1, r6, r6, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008eb8:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
 8008ebc:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008ec0:	4299      	cmp	r1, r3
 8008ec2:	f63f af36 	bhi.w	8008d32 <UART_SetConfig+0x72>
 8008ec6:	ebb3 3f06 	cmp.w	r3, r6, lsl #12
 8008eca:	f63f af32 	bhi.w	8008d32 <UART_SetConfig+0x72>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ece:	2300      	movs	r3, #0
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	f7f7 fd0f 	bl	80008f4 <__aeabi_uldivmod>
 8008ed6:	0872      	lsrs	r2, r6, #1
 8008ed8:	0203      	lsls	r3, r0, #8
 8008eda:	0209      	lsls	r1, r1, #8
 8008edc:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8008ee0:	1898      	adds	r0, r3, r2
 8008ee2:	f141 0100 	adc.w	r1, r1, #0
 8008ee6:	4632      	mov	r2, r6
 8008ee8:	2300      	movs	r3, #0
 8008eea:	f7f7 fd03 	bl	80008f4 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008eee:	4b1b      	ldr	r3, [pc, #108]	@ (8008f5c <UART_SetConfig+0x29c>)
 8008ef0:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	f63f af1c 	bhi.w	8008d32 <UART_SetConfig+0x72>
 8008efa:	e78c      	b.n	8008e16 <UART_SetConfig+0x156>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008efc:	2bc0      	cmp	r3, #192	@ 0xc0
 8008efe:	f43f af75 	beq.w	8008dec <UART_SetConfig+0x12c>
 8008f02:	e716      	b.n	8008d32 <UART_SetConfig+0x72>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f04:	f7fe fdc8 	bl	8007a98 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8008f08:	2800      	cmp	r0, #0
 8008f0a:	d086      	beq.n	8008e1a <UART_SetConfig+0x15a>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f0c:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008f0e:	e78a      	b.n	8008e26 <UART_SetConfig+0x166>
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f10:	f7fe fdd4 	bl	8007abc <HAL_RCC_GetPCLK2Freq>
        break;
 8008f14:	e7f8      	b.n	8008f08 <UART_SetConfig+0x248>
        pclk = (uint32_t) HSI_VALUE;
 8008f16:	4810      	ldr	r0, [pc, #64]	@ (8008f58 <UART_SetConfig+0x298>)
 8008f18:	e7ca      	b.n	8008eb0 <UART_SetConfig+0x1f0>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f1a:	f7fe fdbd 	bl	8007a98 <HAL_RCC_GetPCLK1Freq>
        break;
 8008f1e:	e7c4      	b.n	8008eaa <UART_SetConfig+0x1ea>
        pclk = HAL_RCC_GetSysClockFreq();
 8008f20:	f7fe fc78 	bl	8007814 <HAL_RCC_GetSysClockFreq>
        break;
 8008f24:	e7f0      	b.n	8008f08 <UART_SetConfig+0x248>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008f26:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008f2a:	f47f af02 	bne.w	8008d32 <UART_SetConfig+0x72>
        pclk = (uint32_t) LSE_VALUE;
 8008f2e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8008f32:	e7bd      	b.n	8008eb0 <UART_SetConfig+0x1f0>
 8008f34:	cfff69f3 	.word	0xcfff69f3
 8008f38:	40008000 	.word	0x40008000
 8008f3c:	40013800 	.word	0x40013800
 8008f40:	40004400 	.word	0x40004400
 8008f44:	40004800 	.word	0x40004800
 8008f48:	40004c00 	.word	0x40004c00
 8008f4c:	40005000 	.word	0x40005000
 8008f50:	40021000 	.word	0x40021000
 8008f54:	0800b34c 	.word	0x0800b34c
 8008f58:	00f42400 	.word	0x00f42400
 8008f5c:	000ffcff 	.word	0x000ffcff

08008f60 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008f60:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8008f62:	071a      	lsls	r2, r3, #28
{
 8008f64:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008f66:	d506      	bpl.n	8008f76 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008f68:	6801      	ldr	r1, [r0, #0]
 8008f6a:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8008f6c:	684a      	ldr	r2, [r1, #4]
 8008f6e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008f72:	4322      	orrs	r2, r4
 8008f74:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008f76:	07dc      	lsls	r4, r3, #31
 8008f78:	d506      	bpl.n	8008f88 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008f7a:	6801      	ldr	r1, [r0, #0]
 8008f7c:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8008f7e:	684a      	ldr	r2, [r1, #4]
 8008f80:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8008f84:	4322      	orrs	r2, r4
 8008f86:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008f88:	0799      	lsls	r1, r3, #30
 8008f8a:	d506      	bpl.n	8008f9a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008f8c:	6801      	ldr	r1, [r0, #0]
 8008f8e:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8008f90:	684a      	ldr	r2, [r1, #4]
 8008f92:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8008f96:	4322      	orrs	r2, r4
 8008f98:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008f9a:	075a      	lsls	r2, r3, #29
 8008f9c:	d506      	bpl.n	8008fac <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008f9e:	6801      	ldr	r1, [r0, #0]
 8008fa0:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8008fa2:	684a      	ldr	r2, [r1, #4]
 8008fa4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008fa8:	4322      	orrs	r2, r4
 8008faa:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008fac:	06dc      	lsls	r4, r3, #27
 8008fae:	d506      	bpl.n	8008fbe <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008fb0:	6801      	ldr	r1, [r0, #0]
 8008fb2:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8008fb4:	688a      	ldr	r2, [r1, #8]
 8008fb6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008fba:	4322      	orrs	r2, r4
 8008fbc:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008fbe:	0699      	lsls	r1, r3, #26
 8008fc0:	d506      	bpl.n	8008fd0 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008fc2:	6801      	ldr	r1, [r0, #0]
 8008fc4:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8008fc6:	688a      	ldr	r2, [r1, #8]
 8008fc8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008fcc:	4322      	orrs	r2, r4
 8008fce:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008fd0:	065a      	lsls	r2, r3, #25
 8008fd2:	d509      	bpl.n	8008fe8 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008fd4:	6801      	ldr	r1, [r0, #0]
 8008fd6:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8008fd8:	684a      	ldr	r2, [r1, #4]
 8008fda:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8008fde:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008fe0:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008fe4:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008fe6:	d00b      	beq.n	8009000 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008fe8:	061b      	lsls	r3, r3, #24
 8008fea:	d506      	bpl.n	8008ffa <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008fec:	6802      	ldr	r2, [r0, #0]
 8008fee:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8008ff0:	6853      	ldr	r3, [r2, #4]
 8008ff2:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8008ff6:	430b      	orrs	r3, r1
 8008ff8:	6053      	str	r3, [r2, #4]
}
 8008ffa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ffe:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009000:	684a      	ldr	r2, [r1, #4]
 8009002:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8009004:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8009008:	4322      	orrs	r2, r4
 800900a:	604a      	str	r2, [r1, #4]
 800900c:	e7ec      	b.n	8008fe8 <UART_AdvFeatureConfig+0x88>
 800900e:	bf00      	nop

08009010 <UART_CheckIdleState>:
{
 8009010:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009012:	2300      	movs	r3, #0
{
 8009014:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009016:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 800901a:	f7fc fce7 	bl	80059ec <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800901e:	6822      	ldr	r2, [r4, #0]
 8009020:	6813      	ldr	r3, [r2, #0]
 8009022:	071b      	lsls	r3, r3, #28
  tickstart = HAL_GetTick();
 8009024:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009026:	d40f      	bmi.n	8009048 <UART_CheckIdleState+0x38>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009028:	6813      	ldr	r3, [r2, #0]
 800902a:	0759      	lsls	r1, r3, #29
 800902c:	d431      	bmi.n	8009092 <UART_CheckIdleState+0x82>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800902e:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8009030:	2220      	movs	r2, #32
 8009032:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  return HAL_OK;
 8009036:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 8009038:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800903c:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800903e:	6723      	str	r3, [r4, #112]	@ 0x70
      __HAL_UNLOCK(huart);
 8009040:	2300      	movs	r3, #0
 8009042:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 8009046:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009048:	69d3      	ldr	r3, [r2, #28]
 800904a:	0298      	lsls	r0, r3, #10
 800904c:	d4ec      	bmi.n	8009028 <UART_CheckIdleState+0x18>
 800904e:	e00c      	b.n	800906a <UART_CheckIdleState+0x5a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009050:	6819      	ldr	r1, [r3, #0]
 8009052:	0749      	lsls	r1, r1, #29
 8009054:	461a      	mov	r2, r3
 8009056:	d505      	bpl.n	8009064 <UART_CheckIdleState+0x54>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009058:	69d9      	ldr	r1, [r3, #28]
 800905a:	0708      	lsls	r0, r1, #28
 800905c:	d44a      	bmi.n	80090f4 <UART_CheckIdleState+0xe4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800905e:	69d9      	ldr	r1, [r3, #28]
 8009060:	0509      	lsls	r1, r1, #20
 8009062:	d475      	bmi.n	8009150 <UART_CheckIdleState+0x140>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009064:	69db      	ldr	r3, [r3, #28]
 8009066:	0298      	lsls	r0, r3, #10
 8009068:	d4de      	bmi.n	8009028 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800906a:	f7fc fcbf 	bl	80059ec <HAL_GetTick>
 800906e:	1b43      	subs	r3, r0, r5
 8009070:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009074:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009076:	d3eb      	bcc.n	8009050 <UART_CheckIdleState+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009078:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800907c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009080:	e843 2100 	strex	r1, r2, [r3]
 8009084:	2900      	cmp	r1, #0
 8009086:	d1f7      	bne.n	8009078 <UART_CheckIdleState+0x68>
      huart->gState = HAL_UART_STATE_READY;
 8009088:	2320      	movs	r3, #32
 800908a:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 800908e:	2003      	movs	r0, #3
 8009090:	e7d6      	b.n	8009040 <UART_CheckIdleState+0x30>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009092:	69d3      	ldr	r3, [r2, #28]
 8009094:	025b      	lsls	r3, r3, #9
 8009096:	d4ca      	bmi.n	800902e <UART_CheckIdleState+0x1e>
 8009098:	e00d      	b.n	80090b6 <UART_CheckIdleState+0xa6>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800909a:	681a      	ldr	r2, [r3, #0]
 800909c:	0750      	lsls	r0, r2, #29
 800909e:	d507      	bpl.n	80090b0 <UART_CheckIdleState+0xa0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80090a0:	69da      	ldr	r2, [r3, #28]
 80090a2:	0711      	lsls	r1, r2, #28
 80090a4:	f100 8082 	bmi.w	80091ac <UART_CheckIdleState+0x19c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80090a8:	69da      	ldr	r2, [r3, #28]
 80090aa:	0512      	lsls	r2, r2, #20
 80090ac:	f100 80ac 	bmi.w	8009208 <UART_CheckIdleState+0x1f8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090b0:	69db      	ldr	r3, [r3, #28]
 80090b2:	025b      	lsls	r3, r3, #9
 80090b4:	d4bb      	bmi.n	800902e <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090b6:	f7fc fc99 	bl	80059ec <HAL_GetTick>
 80090ba:	1b43      	subs	r3, r0, r5
 80090bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80090c0:	6823      	ldr	r3, [r4, #0]
 80090c2:	d3ea      	bcc.n	800909a <UART_CheckIdleState+0x8a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090c4:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80090c8:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090cc:	e843 2100 	strex	r1, r2, [r3]
 80090d0:	2900      	cmp	r1, #0
 80090d2:	d1f7      	bne.n	80090c4 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090d4:	f103 0208 	add.w	r2, r3, #8
 80090d8:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090dc:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e0:	f103 0008 	add.w	r0, r3, #8
 80090e4:	e840 2100 	strex	r1, r2, [r0]
 80090e8:	2900      	cmp	r1, #0
 80090ea:	d1f3      	bne.n	80090d4 <UART_CheckIdleState+0xc4>
      huart->RxState = HAL_UART_STATE_READY;
 80090ec:	2320      	movs	r3, #32
 80090ee:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 80090f2:	e7cc      	b.n	800908e <UART_CheckIdleState+0x7e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80090f4:	2208      	movs	r2, #8
 80090f6:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f8:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80090fc:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009100:	e843 2100 	strex	r1, r2, [r3]
 8009104:	2900      	cmp	r1, #0
 8009106:	d1f7      	bne.n	80090f8 <UART_CheckIdleState+0xe8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009108:	4856      	ldr	r0, [pc, #344]	@ (8009264 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800910a:	f103 0208 	add.w	r2, r3, #8
 800910e:	e852 2f00 	ldrex	r2, [r2]
 8009112:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009114:	f103 0508 	add.w	r5, r3, #8
 8009118:	e845 2100 	strex	r1, r2, [r5]
 800911c:	2900      	cmp	r1, #0
 800911e:	d1f4      	bne.n	800910a <UART_CheckIdleState+0xfa>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009120:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8009122:	2a01      	cmp	r2, #1
 8009124:	d00b      	beq.n	800913e <UART_CheckIdleState+0x12e>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009126:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8009128:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800912a:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 800912c:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 8009130:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009132:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8009134:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009138:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 800913c:	e79c      	b.n	8009078 <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800913e:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009142:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009146:	e843 2100 	strex	r1, r2, [r3]
 800914a:	2900      	cmp	r1, #0
 800914c:	d1f7      	bne.n	800913e <UART_CheckIdleState+0x12e>
 800914e:	e7ea      	b.n	8009126 <UART_CheckIdleState+0x116>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009150:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009154:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009156:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800915a:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800915e:	e843 2100 	strex	r1, r2, [r3]
 8009162:	2900      	cmp	r1, #0
 8009164:	d1f7      	bne.n	8009156 <UART_CheckIdleState+0x146>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009166:	483f      	ldr	r0, [pc, #252]	@ (8009264 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009168:	f103 0208 	add.w	r2, r3, #8
 800916c:	e852 2f00 	ldrex	r2, [r2]
 8009170:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009172:	f103 0508 	add.w	r5, r3, #8
 8009176:	e845 2100 	strex	r1, r2, [r5]
 800917a:	2900      	cmp	r1, #0
 800917c:	d1f4      	bne.n	8009168 <UART_CheckIdleState+0x158>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800917e:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8009180:	2a01      	cmp	r2, #1
 8009182:	d00a      	beq.n	800919a <UART_CheckIdleState+0x18a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009184:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8009186:	2120      	movs	r1, #32
 8009188:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 800918c:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800918e:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8009190:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009194:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 8009198:	e76e      	b.n	8009078 <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800919a:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800919e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a2:	e843 2100 	strex	r1, r2, [r3]
 80091a6:	2900      	cmp	r1, #0
 80091a8:	d1f7      	bne.n	800919a <UART_CheckIdleState+0x18a>
 80091aa:	e7eb      	b.n	8009184 <UART_CheckIdleState+0x174>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80091ac:	2208      	movs	r2, #8
 80091ae:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b0:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80091b4:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b8:	e843 2100 	strex	r1, r2, [r3]
 80091bc:	2900      	cmp	r1, #0
 80091be:	d1f7      	bne.n	80091b0 <UART_CheckIdleState+0x1a0>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80091c0:	4828      	ldr	r0, [pc, #160]	@ (8009264 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c2:	f103 0208 	add.w	r2, r3, #8
 80091c6:	e852 2f00 	ldrex	r2, [r2]
 80091ca:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091cc:	f103 0508 	add.w	r5, r3, #8
 80091d0:	e845 2100 	strex	r1, r2, [r5]
 80091d4:	2900      	cmp	r1, #0
 80091d6:	d1f4      	bne.n	80091c2 <UART_CheckIdleState+0x1b2>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091d8:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 80091da:	2a01      	cmp	r2, #1
 80091dc:	d00b      	beq.n	80091f6 <UART_CheckIdleState+0x1e6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091de:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80091e0:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80091e2:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 80091e4:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 80091e8:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091ea:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 80091ec:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80091f0:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 80091f4:	e766      	b.n	80090c4 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f6:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091fa:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091fe:	e843 2100 	strex	r1, r2, [r3]
 8009202:	2900      	cmp	r1, #0
 8009204:	d1f7      	bne.n	80091f6 <UART_CheckIdleState+0x1e6>
 8009206:	e7ea      	b.n	80091de <UART_CheckIdleState+0x1ce>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009208:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800920c:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800920e:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009212:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009216:	e843 2100 	strex	r1, r2, [r3]
 800921a:	2900      	cmp	r1, #0
 800921c:	d1f7      	bne.n	800920e <UART_CheckIdleState+0x1fe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800921e:	4811      	ldr	r0, [pc, #68]	@ (8009264 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009220:	f103 0208 	add.w	r2, r3, #8
 8009224:	e852 2f00 	ldrex	r2, [r2]
 8009228:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800922a:	f103 0508 	add.w	r5, r3, #8
 800922e:	e845 2100 	strex	r1, r2, [r5]
 8009232:	2900      	cmp	r1, #0
 8009234:	d1f4      	bne.n	8009220 <UART_CheckIdleState+0x210>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009236:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8009238:	2a01      	cmp	r2, #1
 800923a:	d00a      	beq.n	8009252 <UART_CheckIdleState+0x242>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800923c:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800923e:	2120      	movs	r1, #32
 8009240:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 8009244:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009246:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8009248:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800924c:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 8009250:	e738      	b.n	80090c4 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009252:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009256:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800925a:	e843 2100 	strex	r1, r2, [r3]
 800925e:	2900      	cmp	r1, #0
 8009260:	d1f7      	bne.n	8009252 <UART_CheckIdleState+0x242>
 8009262:	e7eb      	b.n	800923c <UART_CheckIdleState+0x22c>
 8009264:	effffffe 	.word	0xeffffffe

08009268 <HAL_UART_Init>:
  if (huart == NULL)
 8009268:	b380      	cbz	r0, 80092cc <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 800926a:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
 800926e:	b510      	push	{r4, lr}
 8009270:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8009272:	b333      	cbz	r3, 80092c2 <HAL_UART_Init+0x5a>
  __HAL_UART_DISABLE(huart);
 8009274:	6822      	ldr	r2, [r4, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009276:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
  huart->gState = HAL_UART_STATE_BUSY;
 8009278:	2324      	movs	r3, #36	@ 0x24
 800927a:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 800927e:	6813      	ldr	r3, [r2, #0]
 8009280:	f023 0301 	bic.w	r3, r3, #1
 8009284:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009286:	b9c1      	cbnz	r1, 80092ba <HAL_UART_Init+0x52>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009288:	4620      	mov	r0, r4
 800928a:	f7ff fd19 	bl	8008cc0 <UART_SetConfig>
 800928e:	2801      	cmp	r0, #1
 8009290:	d011      	beq.n	80092b6 <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009292:	6823      	ldr	r3, [r4, #0]
 8009294:	685a      	ldr	r2, [r3, #4]
 8009296:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800929a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800929c:	689a      	ldr	r2, [r3, #8]
 800929e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80092a2:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80092a4:	681a      	ldr	r2, [r3, #0]
 80092a6:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80092aa:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80092ac:	601a      	str	r2, [r3, #0]
}
 80092ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80092b2:	f7ff bead 	b.w	8009010 <UART_CheckIdleState>
}
 80092b6:	2001      	movs	r0, #1
 80092b8:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 80092ba:	4620      	mov	r0, r4
 80092bc:	f7ff fe50 	bl	8008f60 <UART_AdvFeatureConfig>
 80092c0:	e7e2      	b.n	8009288 <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 80092c2:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 80092c6:	f7fc f9db 	bl	8005680 <HAL_UART_MspInit>
 80092ca:	e7d3      	b.n	8009274 <HAL_UART_Init+0xc>
}
 80092cc:	2001      	movs	r0, #1
 80092ce:	4770      	bx	lr

080092d0 <UART_Start_Receive_DMA>:
{
 80092d0:	b538      	push	{r3, r4, r5, lr}
 80092d2:	4605      	mov	r5, r0
 80092d4:	4613      	mov	r3, r2
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80092d6:	2022      	movs	r0, #34	@ 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092d8:	2200      	movs	r2, #0
 80092da:	f8c5 2090 	str.w	r2, [r5, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80092de:	f8c5 008c 	str.w	r0, [r5, #140]	@ 0x8c
  if (huart->hdmarx != NULL)
 80092e2:	f8d5 0080 	ldr.w	r0, [r5, #128]	@ 0x80
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80092e6:	682c      	ldr	r4, [r5, #0]
  huart->pRxBuffPtr = pData;
 80092e8:	65a9      	str	r1, [r5, #88]	@ 0x58
  huart->RxXferSize = Size;
 80092ea:	f8a5 305c 	strh.w	r3, [r5, #92]	@ 0x5c
  if (huart->hdmarx != NULL)
 80092ee:	b168      	cbz	r0, 800930c <UART_Start_Receive_DMA+0x3c>
    huart->hdmarx->XferAbortCallback = NULL;
 80092f0:	6382      	str	r2, [r0, #56]	@ 0x38
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80092f2:	460a      	mov	r2, r1
 80092f4:	f104 0124 	add.w	r1, r4, #36	@ 0x24
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80092f8:	4c1a      	ldr	r4, [pc, #104]	@ (8009364 <UART_Start_Receive_DMA+0x94>)
 80092fa:	62c4      	str	r4, [r0, #44]	@ 0x2c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80092fc:	4c1a      	ldr	r4, [pc, #104]	@ (8009368 <UART_Start_Receive_DMA+0x98>)
 80092fe:	6304      	str	r4, [r0, #48]	@ 0x30
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009300:	4c1a      	ldr	r4, [pc, #104]	@ (800936c <UART_Start_Receive_DMA+0x9c>)
 8009302:	6344      	str	r4, [r0, #52]	@ 0x34
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009304:	f7fd fd5c 	bl	8006dc0 <HAL_DMA_Start_IT>
 8009308:	bb18      	cbnz	r0, 8009352 <UART_Start_Receive_DMA+0x82>
 800930a:	682c      	ldr	r4, [r5, #0]
  if (huart->Init.Parity != UART_PARITY_NONE)
 800930c:	692b      	ldr	r3, [r5, #16]
 800930e:	b13b      	cbz	r3, 8009320 <UART_Start_Receive_DMA+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009310:	e854 3f00 	ldrex	r3, [r4]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009314:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009318:	e844 3200 	strex	r2, r3, [r4]
 800931c:	2a00      	cmp	r2, #0
 800931e:	d1f7      	bne.n	8009310 <UART_Start_Receive_DMA+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009320:	f104 0308 	add.w	r3, r4, #8
 8009324:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009328:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800932c:	f104 0108 	add.w	r1, r4, #8
 8009330:	e841 3200 	strex	r2, r3, [r1]
 8009334:	2a00      	cmp	r2, #0
 8009336:	d1f3      	bne.n	8009320 <UART_Start_Receive_DMA+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009338:	f104 0308 	add.w	r3, r4, #8
 800933c:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009340:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009344:	f104 0208 	add.w	r2, r4, #8
 8009348:	e842 3000 	strex	r0, r3, [r2]
 800934c:	2800      	cmp	r0, #0
 800934e:	d1f3      	bne.n	8009338 <UART_Start_Receive_DMA+0x68>
}
 8009350:	bd38      	pop	{r3, r4, r5, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009352:	2210      	movs	r2, #16
      huart->RxState = HAL_UART_STATE_READY;
 8009354:	2320      	movs	r3, #32
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009356:	f8c5 2090 	str.w	r2, [r5, #144]	@ 0x90
      return HAL_ERROR;
 800935a:	2001      	movs	r0, #1
      huart->RxState = HAL_UART_STATE_READY;
 800935c:	f8c5 308c 	str.w	r3, [r5, #140]	@ 0x8c
}
 8009360:	bd38      	pop	{r3, r4, r5, pc}
 8009362:	bf00      	nop
 8009364:	08008c25 	.word	0x08008c25
 8009368:	08008c05 	.word	0x08008c05
 800936c:	08008b2d 	.word	0x08008b2d

08009370 <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8009370:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 8009374:	2b20      	cmp	r3, #32
 8009376:	d118      	bne.n	80093aa <HAL_UART_Receive_DMA+0x3a>
    if ((pData == NULL) || (Size == 0U))
 8009378:	b101      	cbz	r1, 800937c <HAL_UART_Receive_DMA+0xc>
 800937a:	b90a      	cbnz	r2, 8009380 <HAL_UART_Receive_DMA+0x10>
      return HAL_ERROR;
 800937c:	2001      	movs	r0, #1
}
 800937e:	4770      	bx	lr
{
 8009380:	b430      	push	{r4, r5}
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009382:	4b0b      	ldr	r3, [pc, #44]	@ (80093b0 <HAL_UART_Receive_DMA+0x40>)
 8009384:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009386:	2500      	movs	r5, #0
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009388:	429c      	cmp	r4, r3
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800938a:	66c5      	str	r5, [r0, #108]	@ 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800938c:	d00a      	beq.n	80093a4 <HAL_UART_Receive_DMA+0x34>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800938e:	6863      	ldr	r3, [r4, #4]
 8009390:	021b      	lsls	r3, r3, #8
 8009392:	d507      	bpl.n	80093a4 <HAL_UART_Receive_DMA+0x34>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009394:	e854 3f00 	ldrex	r3, [r4]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009398:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800939c:	e844 3500 	strex	r5, r3, [r4]
 80093a0:	2d00      	cmp	r5, #0
 80093a2:	d1f7      	bne.n	8009394 <HAL_UART_Receive_DMA+0x24>
}
 80093a4:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 80093a6:	f7ff bf93 	b.w	80092d0 <UART_Start_Receive_DMA>
    return HAL_BUSY;
 80093aa:	2002      	movs	r0, #2
 80093ac:	4770      	bx	lr
 80093ae:	bf00      	nop
 80093b0:	40008000 	.word	0x40008000

080093b4 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80093b4:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	d017      	beq.n	80093ec <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093bc:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80093be:	2324      	movs	r3, #36	@ 0x24
{
 80093c0:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 80093c2:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093c6:	6811      	ldr	r1, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80093c8:	6814      	ldr	r4, [r2, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80093ca:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 80093cc:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80093d0:	f021 5100 	bic.w	r1, r1, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 80093d4:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80093d6:	6643      	str	r3, [r0, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80093d8:	6011      	str	r1, [r2, #0]

  huart->gState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80093da:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_READY;
 80093de:	2220      	movs	r2, #32
 80093e0:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88

  return HAL_OK;
}
 80093e4:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 80093e8:	4618      	mov	r0, r3
}
 80093ea:	4770      	bx	lr
  __HAL_LOCK(huart);
 80093ec:	2002      	movs	r0, #2
}
 80093ee:	4770      	bx	lr

080093f0 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80093f0:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 80093f4:	2a01      	cmp	r2, #1
 80093f6:	d037      	beq.n	8009468 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;
 80093f8:	4603      	mov	r3, r0

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093fa:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80093fc:	2024      	movs	r0, #36	@ 0x24
{
 80093fe:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8009400:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009404:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009406:	6810      	ldr	r0, [r2, #0]
 8009408:	f020 0001 	bic.w	r0, r0, #1
 800940c:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800940e:	6890      	ldr	r0, [r2, #8]
 8009410:	f020 4060 	bic.w	r0, r0, #3758096384	@ 0xe0000000
 8009414:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009416:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009418:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800941a:	b310      	cbz	r0, 8009462 <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800941c:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800941e:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
 8009420:	4d12      	ldr	r5, [pc, #72]	@ (800946c <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009422:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009426:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800942a:	4911      	ldr	r1, [pc, #68]	@ (8009470 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
 800942c:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009430:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8009434:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 8009438:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800943c:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800943e:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009440:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009444:	fbb1 f1f5 	udiv	r1, r1, r5
 8009448:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 800944c:	2100      	movs	r1, #0
 800944e:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  huart->gState = HAL_UART_STATE_READY;
 8009452:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009454:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 8009456:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
  return HAL_OK;
 800945a:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800945c:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
}
 8009460:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8009462:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8009464:	4608      	mov	r0, r1
 8009466:	e7ef      	b.n	8009448 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8009468:	2002      	movs	r0, #2
}
 800946a:	4770      	bx	lr
 800946c:	0800b364 	.word	0x0800b364
 8009470:	0800b36c 	.word	0x0800b36c

08009474 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8009474:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 8009478:	2a01      	cmp	r2, #1
 800947a:	d037      	beq.n	80094ec <HAL_UARTEx_SetRxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 800947c:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800947e:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8009480:	2024      	movs	r0, #36	@ 0x24
{
 8009482:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8009484:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009488:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800948a:	6810      	ldr	r0, [r2, #0]
 800948c:	f020 0001 	bic.w	r0, r0, #1
 8009490:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009492:	6890      	ldr	r0, [r2, #8]
 8009494:	f020 6060 	bic.w	r0, r0, #234881024	@ 0xe000000
 8009498:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800949a:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800949c:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800949e:	b310      	cbz	r0, 80094e6 <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80094a0:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80094a2:	6890      	ldr	r0, [r2, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 80094a4:	4d12      	ldr	r5, [pc, #72]	@ (80094f0 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80094a6:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80094aa:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80094ae:	4911      	ldr	r1, [pc, #68]	@ (80094f4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80094b0:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80094b4:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 80094b8:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 80094bc:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80094c0:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80094c2:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80094c4:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80094c8:	fbb1 f1f5 	udiv	r1, r1, r5
 80094cc:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 80094d0:	2100      	movs	r1, #0
 80094d2:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  huart->gState = HAL_UART_STATE_READY;
 80094d6:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80094d8:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 80094da:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
  return HAL_OK;
 80094de:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 80094e0:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
}
 80094e4:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 80094e6:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 80094e8:	4608      	mov	r0, r1
 80094ea:	e7ef      	b.n	80094cc <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 80094ec:	2002      	movs	r0, #2
}
 80094ee:	4770      	bx	lr
 80094f0:	0800b364 	.word	0x0800b364
 80094f4:	0800b36c 	.word	0x0800b36c

080094f8 <VBS_GetAvBusVoltage_V>:
    temp = 0U;
  }
  else
  {
#endif
    temp = (uint32_t)(pHandle->AvBusVoltage_d);
 80094f8:	88c3      	ldrh	r3, [r0, #6]
    temp *= pHandle->ConversionFactor;
 80094fa:	8840      	ldrh	r0, [r0, #2]
 80094fc:	fb03 f000 	mul.w	r0, r3, r0
    temp /= 65536U;
#ifdef NULL_PTR_CHECK_BUS_VOLT
  }
#endif
  return ((uint16_t)temp);
}
 8009500:	0c00      	lsrs	r0, r0, #16
 8009502:	4770      	bx	lr

08009504 <Circle_Limitation>:
  *  @f$v_q = \sqrt(MaxModule^2-v_d^2\ ) @f$

  *
  */
__weak qd_t Circle_Limitation(const CircleLimitation_Handle_t *pHandle, qd_t Vqd)
{
 8009504:	b570      	push	{r4, r5, r6, lr}
    int32_t square_limit;
    int32_t vd_square_limit;
    int32_t new_q;
    int32_t new_d;

    maxModule = (int32_t)pHandle->MaxModule;
 8009506:	8803      	ldrh	r3, [r0, #0]
 8009508:	140d      	asrs	r5, r1, #16
 800950a:	b20c      	sxth	r4, r1

    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
    square_d = ((int32_t)(Vqd.d)) * Vqd.d;
 800950c:	fb05 f205 	mul.w	r2, r5, r5
    square_limit = maxModule * maxModule;
 8009510:	fb03 f303 	mul.w	r3, r3, r3
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
    square_sum = square_q + square_d;
 8009514:	fb04 2104 	mla	r1, r4, r4, r2

    if (square_sum > square_limit)
 8009518:	428b      	cmp	r3, r1
{
 800951a:	b084      	sub	sp, #16
    if (square_sum > square_limit)
 800951c:	da0f      	bge.n	800953e <Circle_Limitation+0x3a>
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
 800951e:	8846      	ldrh	r6, [r0, #2]
 8009520:	fb06 f006 	mul.w	r0, r6, r6
    {
      if (square_d <= vd_square_limit)
 8009524:	4282      	cmp	r2, r0
 8009526:	dd13      	ble.n	8009550 <Circle_Limitation+0x4c>
        new_d = Vqd.d;
      }
      else
      {
        new_d = (int32_t)pHandle->MaxVd;
        if (Vqd.d < 0)
 8009528:	2d00      	cmp	r5, #0
#if defined CIRCLE_LIMITATION_SQRT_M0
        square_temp = (square_limit - vd_square_limit) / 1048576;
        new_q = SqrtTable[square_temp];
#else
        square_temp = square_limit - vd_square_limit;
        new_q = MCM_Sqrt(square_temp);
 800952a:	eba3 0000 	sub.w	r0, r3, r0
          new_d = -new_d;
 800952e:	bfb8      	it	lt
 8009530:	4276      	neglt	r6, r6
        new_q = MCM_Sqrt(square_temp);
 8009532:	f7f9 fa15 	bl	8002960 <MCM_Sqrt>
#endif
        if (Vqd.q < 0)
 8009536:	2c00      	cmp	r4, #0
        {
          /* Nothing to do */
        }
      }
      local_vqd.q = (int16_t)new_q;
      local_vqd.d = (int16_t)new_d;
 8009538:	b235      	sxth	r5, r6
        if (Vqd.q < 0)
 800953a:	db0e      	blt.n	800955a <Circle_Limitation+0x56>
      local_vqd.q = (int16_t)new_q;
 800953c:	b204      	sxth	r4, r0
    }
#ifdef NULL_PTR_CHECK_CRC_LIM
  }
#endif
  return (local_vqd);
 800953e:	b2a4      	uxth	r4, r4
 8009540:	2000      	movs	r0, #0
 8009542:	f364 000f 	bfi	r0, r4, #0, #16
 8009546:	b2ad      	uxth	r5, r5
 8009548:	f365 401f 	bfi	r0, r5, #16, #16
}
 800954c:	b004      	add	sp, #16
 800954e:	bd70      	pop	{r4, r5, r6, pc}
        new_q = MCM_Sqrt(square_temp);
 8009550:	1a98      	subs	r0, r3, r2
 8009552:	f7f9 fa05 	bl	8002960 <MCM_Sqrt>
        if (Vqd.q < 0)
 8009556:	2c00      	cmp	r4, #0
 8009558:	daf0      	bge.n	800953c <Circle_Limitation+0x38>
          new_q = - new_q;
 800955a:	4240      	negs	r0, r0
      local_vqd.q = (int16_t)new_q;
 800955c:	b204      	sxth	r4, r0
      local_vqd.d = (int16_t)new_d;
 800955e:	e7ee      	b.n	800953e <Circle_Limitation+0x3a>

08009560 <MCPA_dataLog>:
  * @brief  Allocates and fills buffer with asynchronous data to be sent to controller
  *
  * @param  *pHandle Pointer to the MCPA Handle
  */
void MCPA_dataLog(MCPA_Handle_t *pHandle)
{
 8009560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif
    uint32_t *logValue;
    uint16_t *logValue16;
    uint8_t i;

    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 8009562:	7fc3      	ldrb	r3, [r0, #31]
 8009564:	f890 2022 	ldrb.w	r2, [r0, #34]	@ 0x22
 8009568:	429a      	cmp	r2, r3
{
 800956a:	4604      	mov	r4, r0
    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 800956c:	d002      	beq.n	8009574 <MCPA_dataLog+0x14>
      }
    }
    else
    {
      /* Nothing to log just waiting next call to MCPA_datalog */
      pHandle->HFIndex++;
 800956e:	3301      	adds	r3, #1
 8009570:	77c3      	strb	r3, [r0, #31]
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
}
 8009572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (0U == pHandle->bufferIndex)
 8009574:	8b05      	ldrh	r5, [r0, #24]
      pHandle->HFIndex = 0U;
 8009576:	2300      	movs	r3, #0
 8009578:	77c3      	strb	r3, [r0, #31]
      if (0U == pHandle->bufferIndex)
 800957a:	2d00      	cmp	r5, #0
 800957c:	d02f      	beq.n	80095de <MCPA_dataLog+0x7e>
        logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 800957e:	6961      	ldr	r1, [r4, #20]
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 8009580:	8ba2      	ldrh	r2, [r4, #28]
 8009582:	42aa      	cmp	r2, r5
 8009584:	d31a      	bcc.n	80095bc <MCPA_dataLog+0x5c>
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8009586:	f894 6024 	ldrb.w	r6, [r4, #36]	@ 0x24
        logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 800958a:	194b      	adds	r3, r1, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 800958c:	2e00      	cmp	r6, #0
 800958e:	d07a      	beq.n	8009686 <MCPA_dataLog+0x126>
 8009590:	68a2      	ldr	r2, [r4, #8]
 8009592:	eb03 0c46 	add.w	ip, r3, r6, lsl #1
 8009596:	3a04      	subs	r2, #4
          *logValue16 = *((uint16_t *) pHandle->dataPtrTableBuff[i]) ; //cstat !MISRAC2012-Rule-11.5
 8009598:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800959c:	8800      	ldrh	r0, [r0, #0]
 800959e:	f823 0b02 	strh.w	r0, [r3], #2
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 80095a2:	8b25      	ldrh	r5, [r4, #24]
 80095a4:	3502      	adds	r5, #2
 80095a6:	b2ad      	uxth	r5, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 80095a8:	459c      	cmp	ip, r3
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 80095aa:	8325      	strh	r5, [r4, #24]
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 80095ac:	d1f4      	bne.n	8009598 <MCPA_dataLog+0x38>
        if (pHandle->MFRateBuff < 254U)
 80095ae:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 80095b2:	8ba2      	ldrh	r2, [r4, #28]
        if (pHandle->MFRateBuff < 254U)
 80095b4:	2bfd      	cmp	r3, #253	@ 0xfd
 80095b6:	d96b      	bls.n	8009690 <MCPA_dataLog+0x130>
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 80095b8:	4295      	cmp	r5, r2
 80095ba:	d9da      	bls.n	8009572 <MCPA_dataLog+0x12>
        if (pHandle->MFRateBuff == 254U) /* MFRateBuff = 254 means we dump MF data once per buffer */
 80095bc:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 80095c0:	2bfe      	cmp	r3, #254	@ 0xfe
 80095c2:	d04a      	beq.n	800965a <MCPA_dataLog+0xfa>
        *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 80095c4:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 80095c8:	534b      	strh	r3, [r1, r5]
        pHandle->pTransportLayer->fSendPacket(pHandle->pTransportLayer, pHandle->currentBuffer,
 80095ca:	8b22      	ldrh	r2, [r4, #24]
 80095cc:	6820      	ldr	r0, [r4, #0]
 80095ce:	3202      	adds	r2, #2
 80095d0:	2309      	movs	r3, #9
 80095d2:	6845      	ldr	r5, [r0, #4]
 80095d4:	b292      	uxth	r2, r2
 80095d6:	47a8      	blx	r5
        pHandle->bufferIndex = 0U;
 80095d8:	2300      	movs	r3, #0
 80095da:	8323      	strh	r3, [r4, #24]
}
 80095dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (0U == pHandle->pTransportLayer->fGetBuffer (pHandle->pTransportLayer,
 80095de:	4601      	mov	r1, r0
 80095e0:	2209      	movs	r2, #9
 80095e2:	f851 0b14 	ldr.w	r0, [r1], #20
 80095e6:	6803      	ldr	r3, [r0, #0]
 80095e8:	4798      	blx	r3
 80095ea:	b390      	cbz	r0, 8009652 <MCPA_dataLog+0xf2>
          *logValue = GLOBAL_TIMESTAMP; /* 32 first bits is used to store Timestamp */
 80095ec:	4b3a      	ldr	r3, [pc, #232]	@ (80096d8 <MCPA_dataLog+0x178>)
          logValue = (uint32_t *)pHandle->currentBuffer; //cstat !MISRAC2012-Rule-11.3
 80095ee:	6961      	ldr	r1, [r4, #20]
          *logValue = GLOBAL_TIMESTAMP; /* 32 first bits is used to store Timestamp */
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	600b      	str	r3, [r1, #0]
          if (pHandle->Mark == pHandle->MarkBuff)
 80095f4:	f894 0029 	ldrb.w	r0, [r4, #41]	@ 0x29
 80095f8:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
          pHandle->MFIndex = 0U; /* Restart the motif from scratch at each buffer */
 80095fc:	f884 5020 	strb.w	r5, [r4, #32]
          pHandle->bufferIndex = 4U;
 8009600:	2304      	movs	r3, #4
          if (pHandle->Mark == pHandle->MarkBuff)
 8009602:	4282      	cmp	r2, r0
          pHandle->bufferIndex = 4U;
 8009604:	8323      	strh	r3, [r4, #24]
          if (pHandle->Mark == pHandle->MarkBuff)
 8009606:	d101      	bne.n	800960c <MCPA_dataLog+0xac>
 8009608:	461d      	mov	r5, r3
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 800960a:	e7b9      	b.n	8009580 <MCPA_dataLog+0x20>
            pHandle->MFNumBuff           = pHandle->MFNum;
 800960c:	f894 3027 	ldrb.w	r3, [r4, #39]	@ 0x27
            pHandle->HFNumBuff           = pHandle->HFNum;
 8009610:	f894 2023 	ldrb.w	r2, [r4, #35]	@ 0x23
            pHandle->MFRateBuff          = pHandle->MFRate;
 8009614:	f894 1025 	ldrb.w	r1, [r4, #37]	@ 0x25
            pHandle->HFRateBuff          = pHandle->HFRate;
 8009618:	f894 5021 	ldrb.w	r5, [r4, #33]	@ 0x21
            pHandle->HFNumBuff           = pHandle->HFNum;
 800961c:	f884 2024 	strb.w	r2, [r4, #36]	@ 0x24
            pHandle->MFNumBuff           = pHandle->MFNum;
 8009620:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
                         ((uint32_t)pHandle->HFNum + (uint32_t)pHandle->MFNum) * 4U); /* We store pointer here,
 8009624:	441a      	add	r2, r3
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 8009626:	8b63      	ldrh	r3, [r4, #26]
            pHandle->MarkBuff            = pHandle->Mark;
 8009628:	f884 002a 	strb.w	r0, [r4, #42]	@ 0x2a
            pHandle->MFRateBuff          = pHandle->MFRate;
 800962c:	f884 1026 	strb.w	r1, [r4, #38]	@ 0x26
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 8009630:	83a3      	strh	r3, [r4, #28]
            (void)memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable,
 8009632:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8009636:	0092      	lsls	r2, r2, #2
            pHandle->HFRateBuff          = pHandle->HFRate;
 8009638:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
            (void)memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable,
 800963c:	f001 fd24 	bl	800b088 <memcpy>
                         (uint32_t)pHandle->HFNum + (uint32_t)pHandle->MFNum); /* 1 size byte per ID */
 8009640:	f894 2023 	ldrb.w	r2, [r4, #35]	@ 0x23
 8009644:	f894 3027 	ldrb.w	r3, [r4, #39]	@ 0x27
            (void)memcpy(pHandle->dataSizeTableBuff, pHandle->dataSizeTable,
 8009648:	e9d4 1003 	ldrd	r1, r0, [r4, #12]
 800964c:	441a      	add	r2, r3
 800964e:	f001 fd1b 	bl	800b088 <memcpy>
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 8009652:	8b25      	ldrh	r5, [r4, #24]
 8009654:	2d00      	cmp	r5, #0
 8009656:	d192      	bne.n	800957e <MCPA_dataLog+0x1e>
}
 8009658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800965a:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 800965e:	f894 0028 	ldrb.w	r0, [r4, #40]	@ 0x28
 8009662:	4418      	add	r0, r3
 8009664:	4283      	cmp	r3, r0
 8009666:	daad      	bge.n	80095c4 <MCPA_dataLog+0x64>
            *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8009668:	68a7      	ldr	r7, [r4, #8]
            pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 800966a:	6926      	ldr	r6, [r4, #16]
            *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 800966c:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 8009670:	6812      	ldr	r2, [r2, #0]
 8009672:	514a      	str	r2, [r1, r5]
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009674:	1c5a      	adds	r2, r3, #1
            pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8009676:	5cf3      	ldrb	r3, [r6, r3]
 8009678:	442b      	add	r3, r5
 800967a:	b29d      	uxth	r5, r3
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800967c:	b2d3      	uxtb	r3, r2
 800967e:	4283      	cmp	r3, r0
            pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8009680:	8325      	strh	r5, [r4, #24]
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009682:	dbf3      	blt.n	800966c <MCPA_dataLog+0x10c>
 8009684:	e79e      	b.n	80095c4 <MCPA_dataLog+0x64>
        if (pHandle->MFRateBuff < 254U)
 8009686:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 800968a:	2bfd      	cmp	r3, #253	@ 0xfd
 800968c:	f63f af71 	bhi.w	8009572 <MCPA_dataLog+0x12>
          if (pHandle->MFIndex == pHandle->MFRateBuff)
 8009690:	f894 0020 	ldrb.w	r0, [r4, #32]
 8009694:	4298      	cmp	r0, r3
 8009696:	d005      	beq.n	80096a4 <MCPA_dataLog+0x144>
            pHandle->MFIndex ++;
 8009698:	3001      	adds	r0, #1
 800969a:	f884 0020 	strb.w	r0, [r4, #32]
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 800969e:	42aa      	cmp	r2, r5
 80096a0:	d390      	bcc.n	80095c4 <MCPA_dataLog+0x64>
}
 80096a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80096a4:	f894 7028 	ldrb.w	r7, [r4, #40]	@ 0x28
 80096a8:	4437      	add	r7, r6
            pHandle->MFIndex = 0U;
 80096aa:	2300      	movs	r3, #0
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80096ac:	42be      	cmp	r6, r7
            pHandle->MFIndex = 0U;
 80096ae:	f884 3020 	strb.w	r3, [r4, #32]
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80096b2:	daf4      	bge.n	800969e <MCPA_dataLog+0x13e>
              *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 80096b4:	f8d4 e008 	ldr.w	lr, [r4, #8]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80096b8:	f8d4 c010 	ldr.w	ip, [r4, #16]
              *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 80096bc:	f85e 3026 	ldr.w	r3, [lr, r6, lsl #2]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	514b      	str	r3, [r1, r5]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80096c4:	f81c 3006 	ldrb.w	r3, [ip, r6]
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80096c8:	1c70      	adds	r0, r6, #1
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80096ca:	442b      	add	r3, r5
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80096cc:	b2c6      	uxtb	r6, r0
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80096ce:	b29d      	uxth	r5, r3
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80096d0:	42be      	cmp	r6, r7
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80096d2:	8325      	strh	r5, [r4, #24]
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80096d4:	dbf2      	blt.n	80096bc <MCPA_dataLog+0x15c>
 80096d6:	e76f      	b.n	80095b8 <MCPA_dataLog+0x58>
 80096d8:	20001c88 	.word	0x20001c88

080096dc <MCPA_flushDataLog>:
#endif
    uint32_t *logValue;
    uint16_t *logValue16;
    uint8_t i;

    if (pHandle->bufferIndex > 0U)
 80096dc:	8b03      	ldrh	r3, [r0, #24]
 80096de:	b19b      	cbz	r3, 8009708 <MCPA_flushDataLog+0x2c>
{
 80096e0:	b570      	push	{r4, r5, r6, lr}
    {  /* If buffer is allocated, we must send it */
      if (pHandle->MFRateBuff == 254U) /* In case of flush, we must respect the packet format to allow
 80096e2:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
                                          proper decoding */
      {
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
        {
         logValue = (uint32_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 80096e6:	6941      	ldr	r1, [r0, #20]
      if (pHandle->MFRateBuff == 254U) /* In case of flush, we must respect the packet format to allow
 80096e8:	2afe      	cmp	r2, #254	@ 0xfe
 80096ea:	4604      	mov	r4, r0
 80096ec:	d00d      	beq.n	800970a <MCPA_flushDataLog+0x2e>
      else
      {
        /* Nothing to do */
      }
      logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
      *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 80096ee:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
 80096f2:	52ca      	strh	r2, [r1, r3]
                                          the MARK */
      pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer,
 80096f4:	8b22      	ldrh	r2, [r4, #24]
 80096f6:	6820      	ldr	r0, [r4, #0]
 80096f8:	3202      	adds	r2, #2
 80096fa:	2309      	movs	r3, #9
 80096fc:	6845      	ldr	r5, [r0, #4]
 80096fe:	b292      	uxth	r2, r2
 8009700:	47a8      	blx	r5
                                             pHandle->bufferIndex + 2U, MCTL_ASYNC);
      pHandle->bufferIndex = 0U;
 8009702:	2300      	movs	r3, #0
 8009704:	8323      	strh	r3, [r4, #24]
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
}
 8009706:	bd70      	pop	{r4, r5, r6, pc}
 8009708:	4770      	bx	lr
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800970a:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 800970e:	f890 c028 	ldrb.w	ip, [r0, #40]	@ 0x28
 8009712:	4494      	add	ip, r2
 8009714:	4562      	cmp	r2, ip
 8009716:	daea      	bge.n	80096ee <MCPA_flushDataLog+0x12>
         *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8009718:	6886      	ldr	r6, [r0, #8]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 800971a:	6905      	ldr	r5, [r0, #16]
         *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 800971c:	f856 0022 	ldr.w	r0, [r6, r2, lsl #2]
 8009720:	6800      	ldr	r0, [r0, #0]
 8009722:	50c8      	str	r0, [r1, r3]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8009724:	5ca8      	ldrb	r0, [r5, r2]
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009726:	3201      	adds	r2, #1
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8009728:	4403      	add	r3, r0
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800972a:	b2d2      	uxtb	r2, r2
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 800972c:	b29b      	uxth	r3, r3
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800972e:	4562      	cmp	r2, ip
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8009730:	8323      	strh	r3, [r4, #24]
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009732:	dbf3      	blt.n	800971c <MCPA_flushDataLog+0x40>
 8009734:	e7db      	b.n	80096ee <MCPA_flushDataLog+0x12>
 8009736:	bf00      	nop

08009738 <MCPA_cfgLog>:
  *
  * @param  *pHandle Pointer to the MCPA Handle
  * @param  *cfgdata Configuration of the Async communication
  */
uint8_t MCPA_cfgLog(MCPA_Handle_t *pHandle, uint8_t *cfgdata)
{
 8009738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint8_t i;
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF) */
    uint16_t newID, buffSize;
    uint8_t *pCfgData = cfgdata;

    buffSize = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
 800973c:	880f      	ldrh	r7, [r1, #0]
{
 800973e:	4604      	mov	r4, r0

    if (buffSize == 0U)
 8009740:	2f00      	cmp	r7, #0
 8009742:	d046      	beq.n	80097d2 <MCPA_cfgLog+0x9a>
    { 
      /* Switch Off condition */
      MCPA_stopDataLog(pHandle);
    }
    else if (buffSize > pHandle->pTransportLayer->txAsyncMaxPayload)
 8009744:	6803      	ldr	r3, [r0, #0]
 8009746:	89db      	ldrh	r3, [r3, #14]
 8009748:	42bb      	cmp	r3, r7
 800974a:	d33f      	bcc.n	80097cc <MCPA_cfgLog+0x94>
    {
      result = MCP_ERROR_NO_TXASYNC_SPACE;
    }
    else
    {
      pHandle->HFRate = *((uint8_t *)&pCfgData[2]);
 800974c:	788b      	ldrb	r3, [r1, #2]
 800974e:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
      pHandle->HFNum  = *((uint8_t *)&pCfgData[3]);
 8009752:	f891 8003 	ldrb.w	r8, [r1, #3]
 8009756:	f880 8023 	strb.w	r8, [r0, #35]	@ 0x23
      pHandle->MFRate = *((uint8_t *)&pCfgData[4]);
 800975a:	790b      	ldrb	r3, [r1, #4]
 800975c:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
      pHandle->MFNum  = *((uint8_t *)&pCfgData[5]);
 8009760:	794b      	ldrb	r3, [r1, #5]
      pCfgData = &pCfgData[6]; /* Start of the HF IDs */

      if ((pHandle->HFNum + pHandle->MFNum) <= pHandle->nbrOfDataLog)
 8009762:	7f82      	ldrb	r2, [r0, #30]
      pHandle->MFNum  = *((uint8_t *)&pCfgData[5]);
 8009764:	f880 3027 	strb.w	r3, [r0, #39]	@ 0x27
      if ((pHandle->HFNum + pHandle->MFNum) <= pHandle->nbrOfDataLog)
 8009768:	4443      	add	r3, r8
 800976a:	4293      	cmp	r3, r2
 800976c:	dc57      	bgt.n	800981e <MCPA_cfgLog+0xe6>
      pCfgData = &pCfgData[6]; /* Start of the HF IDs */
 800976e:	1d8e      	adds	r6, r1, #6
      {
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8009770:	2b00      	cmp	r3, #0
 8009772:	d057      	beq.n	8009824 <MCPA_cfgLog+0xec>
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF) */
 8009774:	f04f 0800 	mov.w	r8, #0
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8009778:	4645      	mov	r5, r8
 800977a:	e011      	b.n	80097a0 <MCPA_cfgLog+0x68>
        {
          newID = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
          (void)RI_GetPtrReg(newID, &pHandle->dataPtrTable[i]);
          /* HF Data are fixed to 2 bytes */
          pHandle->dataSizeTable[i] = (i < pHandle->HFNum ) ? 2U : RI_GetIDSize(newID);
 800977c:	68e3      	ldr	r3, [r4, #12]
 800977e:	5558      	strb	r0, [r3, r5]
          pCfgData++; /* Point to the next UID */
          pCfgData++;
          logSize = logSize+pHandle->dataSizeTable[i];
 8009780:	68e2      	ldr	r2, [r4, #12]
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8009782:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 8009786:	f894 1027 	ldrb.w	r1, [r4, #39]	@ 0x27
          logSize = logSize+pHandle->dataSizeTable[i];
 800978a:	5d52      	ldrb	r2, [r2, r5]
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 800978c:	f105 0c01 	add.w	ip, r5, #1
 8009790:	fa5f f58c 	uxtb.w	r5, ip
 8009794:	440b      	add	r3, r1
          logSize = logSize+pHandle->dataSizeTable[i];
 8009796:	4442      	add	r2, r8
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8009798:	429d      	cmp	r5, r3
          logSize = logSize+pHandle->dataSizeTable[i];
 800979a:	fa1f f882 	uxth.w	r8, r2
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 800979e:	da11      	bge.n	80097c4 <MCPA_cfgLog+0x8c>
          newID = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
 80097a0:	f836 9b02 	ldrh.w	r9, [r6], #2
          (void)RI_GetPtrReg(newID, &pHandle->dataPtrTable[i]);
 80097a4:	6861      	ldr	r1, [r4, #4]
 80097a6:	4648      	mov	r0, r9
 80097a8:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 80097ac:	f7fb f94e 	bl	8004a4c <RI_GetPtrReg>
          pHandle->dataSizeTable[i] = (i < pHandle->HFNum ) ? 2U : RI_GetIDSize(newID);
 80097b0:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 80097b4:	42ab      	cmp	r3, r5
 80097b6:	f04f 0002 	mov.w	r0, #2
 80097ba:	d8df      	bhi.n	800977c <MCPA_cfgLog+0x44>
 80097bc:	4648      	mov	r0, r9
 80097be:	f7fb f939 	bl	8004a34 <RI_GetIDSize>
 80097c2:	e7db      	b.n	800977c <MCPA_cfgLog+0x44>
        }

        /* Smallest packet must be able to contain logSize Markbyte AsyncID and TimeStamp */
        if (buffSize < (logSize + 2U + 4U))
 80097c4:	f108 0206 	add.w	r2, r8, #6
 80097c8:	4297      	cmp	r7, r2
 80097ca:	d210      	bcs.n	80097ee <MCPA_cfgLog+0xb6>
      result = MCP_ERROR_NO_TXASYNC_SPACE;
 80097cc:	2009      	movs	r0, #9
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
  return (result);
}
 80097ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (pHandle->bufferIndex > 0U)
 80097d2:	8b03      	ldrh	r3, [r0, #24]
  pHandle->Mark = 0U;
 80097d4:	f880 7029 	strb.w	r7, [r0, #41]	@ 0x29
  if (pHandle->bufferIndex > 0U)
 80097d8:	b9ab      	cbnz	r3, 8009806 <MCPA_cfgLog+0xce>
  pHandle->bufferIndex = 0U;
 80097da:	2300      	movs	r3, #0
 80097dc:	8323      	strh	r3, [r4, #24]
  pHandle->MarkBuff    = 0U;
 80097de:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
  pHandle->HFIndex     = 0U;
 80097e2:	77e3      	strb	r3, [r4, #31]
  pHandle->HFRateBuff  = 0U; /* We do not want to miss any sample at the restart */
 80097e4:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
  uint8_t result = MCP_CMD_OK;
 80097e8:	2000      	movs	r0, #0
}
 80097ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          pHandle->bufferTxTrigger = buffSize-logSize - 2U; /* 2 is required to add the last Mark byte and NUL
 80097ee:	3f02      	subs	r7, #2
 80097f0:	eba7 0708 	sub.w	r7, r7, r8
 80097f4:	8367      	strh	r7, [r4, #26]
          pHandle->Mark = *((uint8_t *)pCfgData);
 80097f6:	7833      	ldrb	r3, [r6, #0]
 80097f8:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
          if (0U == pHandle->Mark)
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d1f3      	bne.n	80097e8 <MCPA_cfgLog+0xb0>
  if (pHandle->bufferIndex > 0U)
 8009800:	8b23      	ldrh	r3, [r4, #24]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d0e9      	beq.n	80097da <MCPA_cfgLog+0xa2>
    logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 8009806:	6961      	ldr	r1, [r4, #20]
    *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 8009808:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
 800980c:	52ca      	strh	r2, [r1, r3]
    pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer,
 800980e:	8b22      	ldrh	r2, [r4, #24]
 8009810:	6820      	ldr	r0, [r4, #0]
 8009812:	3202      	adds	r2, #2
 8009814:	6845      	ldr	r5, [r0, #4]
 8009816:	b292      	uxth	r2, r2
 8009818:	2309      	movs	r3, #9
 800981a:	47a8      	blx	r5
 800981c:	e7dd      	b.n	80097da <MCPA_cfgLog+0xa2>
        result = MCP_ERROR_BAD_RAW_FORMAT;
 800981e:	200a      	movs	r0, #10
}
 8009820:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8009824:	2206      	movs	r2, #6
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF) */
 8009826:	4698      	mov	r8, r3
 8009828:	e7ce      	b.n	80097c8 <MCPA_cfgLog+0x90>
 800982a:	bf00      	nop

0800982c <NTC_SetFaultState>:
    hFault = MC_SW_ERROR;
  }
  else
  {
#endif
    if (pHandle->hSensitivity > 0 )
 800982c:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
    {
      if (pHandle->hAvTemp_d > pHandle->hOverTempThreshold)
 8009830:	8843      	ldrh	r3, [r0, #2]
 8009832:	8982      	ldrh	r2, [r0, #12]
    if (pHandle->hSensitivity > 0 )
 8009834:	2900      	cmp	r1, #0
 8009836:	dd08      	ble.n	800984a <NTC_SetFaultState+0x1e>
      if (pHandle->hAvTemp_d > pHandle->hOverTempThreshold)
 8009838:	4293      	cmp	r3, r2
 800983a:	d804      	bhi.n	8009846 <NTC_SetFaultState+0x1a>
      {
        hFault = MC_OVER_TEMP;
      }
      else if (pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold)
 800983c:	89c2      	ldrh	r2, [r0, #14]
 800983e:	429a      	cmp	r2, r3
 8009840:	d908      	bls.n	8009854 <NTC_SetFaultState+0x28>
      {
        hFault = MC_NO_ERROR;
 8009842:	2000      	movs	r0, #0
 8009844:	4770      	bx	lr
    }
    else
    {
      if (pHandle->hAvTemp_d < pHandle->hOverTempThreshold)
      {
        hFault = MC_OVER_TEMP;
 8009846:	2008      	movs	r0, #8
    }
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (hFault);
}
 8009848:	4770      	bx	lr
      if (pHandle->hAvTemp_d < pHandle->hOverTempThreshold)
 800984a:	4293      	cmp	r3, r2
 800984c:	d3fb      	bcc.n	8009846 <NTC_SetFaultState+0x1a>
      else if (pHandle->hAvTemp_d > pHandle->hOverTempDeactThreshold)
 800984e:	89c2      	ldrh	r2, [r0, #14]
 8009850:	429a      	cmp	r2, r3
 8009852:	d3f6      	bcc.n	8009842 <NTC_SetFaultState+0x16>
        hFault = pHandle->hFaultState;
 8009854:	8900      	ldrh	r0, [r0, #8]
 8009856:	4770      	bx	lr

08009858 <NTC_Init>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (REAL_SENSOR == pHandle->bSensorType)
 8009858:	7803      	ldrb	r3, [r0, #0]
 800985a:	b94b      	cbnz	r3, 8009870 <NTC_Init+0x18>
    /* nothing to do */
  }
  else
  {
#endif
    if (pHandle->hSensitivity > 0 ) 
 800985c:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
 8009860:	2b00      	cmp	r3, #0
 8009862:	bfcc      	ite	gt
 8009864:	2300      	movgt	r3, #0
 8009866:	2301      	movle	r3, #1
 8009868:	425b      	negs	r3, r3
 800986a:	b29b      	uxth	r3, r3
    {
      pHandle->hAvTemp_d = 0U;
    }
    else
    {
      pHandle->hAvTemp_d = 0xFFFFU;
 800986c:	8043      	strh	r3, [r0, #2]
}
 800986e:	4770      	bx	lr
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8009870:	8883      	ldrh	r3, [r0, #4]
      pHandle->hAvTemp_d = 0xFFFFU;
 8009872:	8043      	strh	r3, [r0, #2]
      pHandle->hFaultState = MC_NO_ERROR;
 8009874:	2200      	movs	r2, #0
 8009876:	8102      	strh	r2, [r0, #8]
}
 8009878:	4770      	bx	lr
 800987a:	bf00      	nop

0800987c <NTC_CalcAvTemp>:
  * @param pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  * @retval Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp(NTC_Handle_t *pHandle, uint16_t rawValue)
{
 800987c:	b510      	push	{r4, lr}
    returnValue = 0U;
  }
  else
  {
#endif
    if (REAL_SENSOR == pHandle->bSensorType)
 800987e:	7803      	ldrb	r3, [r0, #0]
{
 8009880:	4604      	mov	r4, r0
    if (REAL_SENSOR == pHandle->bSensorType)
 8009882:	b983      	cbnz	r3, 80098a6 <NTC_CalcAvTemp+0x2a>
    {
      uint16_t hAux;
      hAux = rawValue;

      if (0xFFFFU == hAux)
 8009884:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009888:	4299      	cmp	r1, r3
 800988a:	d007      	beq.n	800989c <NTC_CalcAvTemp+0x20>
        /* Nothing to do */
      }
      else
      {
        uint32_t wtemp;
        wtemp = (uint32_t)(pHandle->hLowPassFilterBW) - 1U;
 800988c:	8943      	ldrh	r3, [r0, #10]
        wtemp *= ((uint32_t)pHandle->hAvTemp_d);
 800988e:	8842      	ldrh	r2, [r0, #2]
        wtemp = (uint32_t)(pHandle->hLowPassFilterBW) - 1U;
 8009890:	1e58      	subs	r0, r3, #1
        wtemp += hAux;
 8009892:	fb00 1102 	mla	r1, r0, r2, r1
        wtemp /= ((uint32_t)pHandle->hLowPassFilterBW);
 8009896:	fbb1 f1f3 	udiv	r1, r1, r3

        pHandle->hAvTemp_d = (uint16_t)wtemp;
 800989a:	8061      	strh	r1, [r4, #2]
      }

      pHandle->hFaultState = NTC_SetFaultState(pHandle);
 800989c:	4620      	mov	r0, r4
 800989e:	f7ff ffc5 	bl	800982c <NTC_SetFaultState>
 80098a2:	8120      	strh	r0, [r4, #8]
    returnValue = pHandle->hFaultState;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 80098a4:	bd10      	pop	{r4, pc}
 80098a6:	2000      	movs	r0, #0
      pHandle->hFaultState = NTC_SetFaultState(pHandle);
 80098a8:	8120      	strh	r0, [r4, #8]
}
 80098aa:	bd10      	pop	{r4, pc}

080098ac <NTC_GetAvTemp_C>:
  else
  {
#endif
    int32_t wTemp;

    if (REAL_SENSOR == pHandle->bSensorType)
 80098ac:	7803      	ldrb	r3, [r0, #0]
 80098ae:	b95b      	cbnz	r3, 80098c8 <NTC_GetAvTemp_C+0x1c>
    {
      wTemp = (int32_t)pHandle->hAvTemp_d;
 80098b0:	8842      	ldrh	r2, [r0, #2]
      wTemp -= ((int32_t)pHandle->wV0);
 80098b2:	6941      	ldr	r1, [r0, #20]
      wTemp *= pHandle->hSensitivity;
 80098b4:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
#ifndef FULL_MISRA_C_COMPLIANCY_NTC_TEMP
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 80098b8:	8b00      	ldrh	r0, [r0, #24]
      wTemp -= ((int32_t)pHandle->wV0);
 80098ba:	1a52      	subs	r2, r2, r1
      wTemp *= pHandle->hSensitivity;
 80098bc:	fb02 f303 	mul.w	r3, r2, r3
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 80098c0:	eb00 4023 	add.w	r0, r0, r3, asr #16
    returnValue = (int16_t)wTemp;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 80098c4:	b200      	sxth	r0, r0
 80098c6:	4770      	bx	lr
      wTemp = (int32_t)pHandle->hExpectedTemp_C;
 80098c8:	88c0      	ldrh	r0, [r0, #6]
}
 80098ca:	b200      	sxth	r0, r0
 80098cc:	4770      	bx	lr
 80098ce:	bf00      	nop

080098d0 <PID_HandleInit>:
  {
#endif
    pHandle->hKpGain =  pHandle->hDefKpGain;
    pHandle->hKiGain =  pHandle->hDefKiGain;
    pHandle->hKdGain =  pHandle->hDefKdGain;
    pHandle->wIntegralTerm = 0;
 80098d0:	2300      	movs	r3, #0
    pHandle->hKpGain =  pHandle->hDefKpGain;
 80098d2:	6801      	ldr	r1, [r0, #0]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 80098d4:	8c02      	ldrh	r2, [r0, #32]
    pHandle->hKpGain =  pHandle->hDefKpGain;
 80098d6:	6041      	str	r1, [r0, #4]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 80098d8:	8442      	strh	r2, [r0, #34]	@ 0x22
    pHandle->wIntegralTerm = 0;
 80098da:	6083      	str	r3, [r0, #8]
    pHandle->wPrevProcessVarError = 0;
 80098dc:	6283      	str	r3, [r0, #40]	@ 0x28
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80098de:	4770      	bx	lr

080098e0 <PID_SetKP>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKpGain = hKpGain;
 80098e0:	8081      	strh	r1, [r0, #4]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80098e2:	4770      	bx	lr

080098e4 <PID_SetKI>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKiGain = hKiGain;
 80098e4:	80c1      	strh	r1, [r0, #6]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80098e6:	4770      	bx	lr

080098e8 <PID_GetKP>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKpGain);
#else
  return (pHandle->hKpGain);
#endif
}
 80098e8:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 80098ec:	4770      	bx	lr
 80098ee:	bf00      	nop

080098f0 <PID_GetKI>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKiGain);
#else
  return (pHandle->hKiGain);
#endif
}
 80098f0:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80098f4:	4770      	bx	lr
 80098f6:	bf00      	nop

080098f8 <PID_SetIntegralTerm>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wIntegralTerm = wIntegralTermValue;
 80098f8:	6081      	str	r1, [r0, #8]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return;
}
 80098fa:	4770      	bx	lr

080098fc <PID_GetKPDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKpDivisorPOW2);
#else
  return (pHandle->hKpDivisorPOW2);
#endif
}
 80098fc:	8b80      	ldrh	r0, [r0, #28]
 80098fe:	4770      	bx	lr

08009900 <PID_SetKPDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 8009900:	2301      	movs	r3, #1
 8009902:	408b      	lsls	r3, r1
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
 8009904:	8381      	strh	r1, [r0, #28]
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 8009906:	8303      	strh	r3, [r0, #24]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8009908:	4770      	bx	lr
 800990a:	bf00      	nop

0800990c <PID_GetKIDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisorPOW2);
#else
  return (pHandle->hKiDivisorPOW2);
#endif
}
 800990c:	8bc0      	ldrh	r0, [r0, #30]
 800990e:	4770      	bx	lr

08009910 <PID_SetLowerIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wLowerIntegralLimit = wLowerLimit;
 8009910:	6101      	str	r1, [r0, #16]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8009912:	4770      	bx	lr

08009914 <PID_SetUpperIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wUpperIntegralLimit = wUpperLimit;
 8009914:	60c1      	str	r1, [r0, #12]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8009916:	4770      	bx	lr

08009918 <PID_SetKIDivisorPOW2>:
{
 8009918:	b538      	push	{r3, r4, r5, lr}
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 800991a:	2301      	movs	r3, #1
{
 800991c:	460c      	mov	r4, r1
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 800991e:	408b      	lsls	r3, r1
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 8009920:	f647 71ff 	movw	r1, #32767	@ 0x7fff
    pHandle->hKiDivisorPOW2 = hKiDivisorPOW2;
 8009924:	83c4      	strh	r4, [r0, #30]
    pHandle->hKiDivisor = (uint16_t)wKiDiv;
 8009926:	8343      	strh	r3, [r0, #26]
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 8009928:	40a1      	lsls	r1, r4
{
 800992a:	4605      	mov	r5, r0
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 800992c:	f7ff fff2 	bl	8009914 <PID_SetUpperIntegralTermLimit>
    PID_SetLowerIntegralTermLimit(pHandle, (int32_t)(-INT16_MAX) * (int32_t)wKiDiv);
 8009930:	4902      	ldr	r1, [pc, #8]	@ (800993c <PID_SetKIDivisorPOW2+0x24>)
 8009932:	4628      	mov	r0, r5
 8009934:	40a1      	lsls	r1, r4
 8009936:	f7ff ffeb 	bl	8009910 <PID_SetLowerIntegralTermLimit>
}
 800993a:	bd38      	pop	{r3, r4, r5, pc}
 800993c:	ffff8001 	.word	0xffff8001

08009940 <PID_SetKD>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKdGain = hKdGain;
 8009940:	8441      	strh	r1, [r0, #34]	@ 0x22
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8009942:	4770      	bx	lr

08009944 <PID_GetKD>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKdGain);
#else
  return (pHandle->hKdGain);
#endif
}
 8009944:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	@ 0x22
 8009948:	4770      	bx	lr
 800994a:	bf00      	nop

0800994c <PID_GetKDDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKdDivisorPOW2);
#else
  return (pHandle->hKdDivisorPOW2);
#endif
}
 800994c:	8cc0      	ldrh	r0, [r0, #38]	@ 0x26
 800994e:	4770      	bx	lr

08009950 <PID_SetKDDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 8009950:	2301      	movs	r3, #1
 8009952:	408b      	lsls	r3, r1
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
 8009954:	84c1      	strh	r1, [r0, #38]	@ 0x26
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 8009956:	8483      	strh	r3, [r0, #36]	@ 0x24
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8009958:	4770      	bx	lr
 800995a:	bf00      	nop

0800995c <PI_Controller>:
    int32_t wDischarge = 0;
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

    /* Proportional term computation*/
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 800995c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
{
 8009960:	4603      	mov	r3, r0
 8009962:	b530      	push	{r4, r5, lr}

    /* Integral term computation */
    if (0 == pHandle->hKiGain)
 8009964:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8009968:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 800996c:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8009970:	fb01 f202 	mul.w	r2, r1, r2
    if (0 == pHandle->hKiGain)
 8009974:	b17c      	cbz	r4, 8009996 <PI_Controller+0x3a>
    {
      pHandle->wIntegralTerm = 0;
    }
    else
    {
      wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8009976:	fb04 f101 	mul.w	r1, r4, r1
        {
          /* Nothing to do */
        }
      }

      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 800997a:	e9d3 5402 	ldrd	r5, r4, [r3, #8]
      if (wIntegral_sum_temp < 0)
 800997e:	eb15 0e01 	adds.w	lr, r5, r1
 8009982:	d41d      	bmi.n	80099c0 <PI_Controller+0x64>
            wIntegral_sum_temp = -INT32_MAX;
 8009984:	420d      	tst	r5, r1
 8009986:	4914      	ldr	r1, [pc, #80]	@ (80099d8 <PI_Controller+0x7c>)
 8009988:	bf48      	it	mi
 800998a:	468e      	movmi	lr, r1
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 800998c:	45a6      	cmp	lr, r4
 800998e:	dc02      	bgt.n	8009996 <PI_Controller+0x3a>
      {
        pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
      }
      else if (wIntegral_sum_temp < pHandle->wLowerIntegralLimit)
 8009990:	691c      	ldr	r4, [r3, #16]
 8009992:	4574      	cmp	r4, lr
 8009994:	dd1d      	ble.n	80099d2 <PI_Controller+0x76>
    /* WARNING: the below instruction is not MISRA compliant, user should verify
               that Cortex-M3 assembly instruction ASR (arithmetic shift right)
               is used by the compiler to perform the shifts (instead of LSR
               logical shift right)*/
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    wOutput_32 = (wProportional_Term >> pHandle->hKpDivisorPOW2) + (pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2);
 8009996:	8b99      	ldrh	r1, [r3, #28]
 8009998:	410a      	asrs	r2, r1
 800999a:	8bd9      	ldrh	r1, [r3, #30]
 800999c:	fa44 f101 	asr.w	r1, r4, r1
 80099a0:	440a      	add	r2, r1
#else
    wOutput_32 = (wProportional_Term / (int32_t)pHandle->hKpDivisor)
              + (pHandle->wIntegralTerm / (int32_t)pHandle->hKiDivisor);
#endif

    if (wOutput_32 > hUpperOutputLimit)
 80099a2:	4290      	cmp	r0, r2
 80099a4:	da03      	bge.n	80099ae <PI_Controller+0x52>
    {
      wDischarge = hUpperOutputLimit - wOutput_32;
 80099a6:	1a82      	subs	r2, r0, r2
    else
    {
      /* Nothing to do here */
    }

    pHandle->wIntegralTerm += wDischarge;
 80099a8:	4414      	add	r4, r2
 80099aa:	609c      	str	r4, [r3, #8]
    returnValue = (int16_t)wOutput_32;
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return (returnValue);
}
 80099ac:	bd30      	pop	{r4, r5, pc}
    else if (wOutput_32 < hLowerOutputLimit)
 80099ae:	4594      	cmp	ip, r2
      wDischarge = hLowerOutputLimit - wOutput_32;
 80099b0:	bfc5      	ittet	gt
 80099b2:	ebac 0202 	subgt.w	r2, ip, r2
    pHandle->wIntegralTerm += wDischarge;
 80099b6:	18a4      	addgt	r4, r4, r2
    returnValue = (int16_t)wOutput_32;
 80099b8:	b210      	sxthle	r0, r2
      wOutput_32 = hLowerOutputLimit;
 80099ba:	4660      	movgt	r0, ip
    pHandle->wIntegralTerm += wDischarge;
 80099bc:	609c      	str	r4, [r3, #8]
}
 80099be:	bd30      	pop	{r4, r5, pc}
        if (pHandle->wIntegralTerm > 0)
 80099c0:	2d00      	cmp	r5, #0
 80099c2:	dde3      	ble.n	800998c <PI_Controller+0x30>
          if (wIntegral_Term > 0)
 80099c4:	2900      	cmp	r1, #0
 80099c6:	dde1      	ble.n	800998c <PI_Controller+0x30>
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 80099c8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80099cc:	428c      	cmp	r4, r1
 80099ce:	d1e2      	bne.n	8009996 <PI_Controller+0x3a>
            wIntegral_sum_temp = INT32_MAX;
 80099d0:	46a6      	mov	lr, r4
        pHandle->wIntegralTerm = wIntegral_sum_temp;
 80099d2:	4674      	mov	r4, lr
 80099d4:	e7df      	b.n	8009996 <PI_Controller+0x3a>
 80099d6:	bf00      	nop
 80099d8:	80000001 	.word	0x80000001

080099dc <PQD_CalcElMotorPower>:
  }
  else
  {
#endif
    int32_t wAux;
    qd_t Iqd = pHandle->pFOCVars->Iqd;
 80099dc:	6882      	ldr	r2, [r0, #8]
{
 80099de:	b500      	push	{lr}
    qd_t Vqd = pHandle->pFOCVars->Vqd;

    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 80099e0:	89d1      	ldrh	r1, [r2, #14]
 80099e2:	f8b2 e018 	ldrh.w	lr, [r2, #24]
    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 80099e6:	8993      	ldrh	r3, [r2, #12]
 80099e8:	f8b2 c016 	ldrh.w	ip, [r2, #22]
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 80099ec:	fb11 f20e 	smulbb	r2, r1, lr
    wAux /= 65536;
 80099f0:	fb13 230c 	smlabb	r3, r3, ip, r2
 80099f4:	2b00      	cmp	r3, #0

    /* pHandle->hAvrgElMotorPower += (wAux - pHandle->hAvrgElMotorPower) >> 4 */
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 80099f6:	f9b0 2000 	ldrsh.w	r2, [r0]
    wAux /= 65536;
 80099fa:	bfbc      	itt	lt
 80099fc:	f503 437f 	addlt.w	r3, r3, #65280	@ 0xff00
 8009a00:	33ff      	addlt	r3, #255	@ 0xff
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 8009a02:	ebd2 4323 	rsbs	r3, r2, r3, asr #16
 8009a06:	bf48      	it	mi
 8009a08:	330f      	addmi	r3, #15
 8009a0a:	eb02 1223 	add.w	r2, r2, r3, asr #4
 8009a0e:	8002      	strh	r2, [r0, #0]

#ifdef NULL_PTR_CHECK_PQD_MOT_POW_MEAS
  }
#endif
}
 8009a10:	f85d fb04 	ldr.w	pc, [sp], #4

08009a14 <PQD_GetAvrgElMotorPowerW>:
  * 
  * @param pHandle pointer on the related component instance.
  * @retval float_t The average measured motor power expressed in Watts.
  */
__weak float_t PQD_GetAvrgElMotorPowerW(const PQD_MotorPowMeas_Handle_t *pHandle)
{
 8009a14:	b510      	push	{r4, lr}
  else
  {
#endif

  /* First perform an integer multiplication, then a float one. */
  PowerW = ((float_t)pHandle->hAvrgElMotorPower * (float_t)VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 8009a16:	f9b0 3000 	ldrsh.w	r3, [r0]
 8009a1a:	ee07 3a90 	vmov	s15, r3
{
 8009a1e:	ed2d 8b02 	vpush	{d8}
 8009a22:	4604      	mov	r4, r0
  PowerW = ((float_t)pHandle->hAvrgElMotorPower * (float_t)VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 8009a24:	68c0      	ldr	r0, [r0, #12]
 8009a26:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8009a2a:	f7ff fd65 	bl	80094f8 <VBS_GetAvBusVoltage_V>
 8009a2e:	edd4 7a01 	vldr	s15, [r4, #4]
 8009a32:	ee68 7a27 	vmul.f32	s15, s16, s15

#ifdef NULL_PTR_CHECK_PQD_MOT_POW_MEAS
  }
#endif
  return (PowerW);
}
 8009a36:	ecbd 8b02 	vpop	{d8}
  PowerW = ((float_t)pHandle->hAvrgElMotorPower * (float_t)VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 8009a3a:	ee00 0a10 	vmov	s0, r0
 8009a3e:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
 8009a42:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009a46:	bd10      	pop	{r4, pc}

08009a48 <R3_2_ADCxInit>:
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8009a48:	6883      	ldr	r3, [r0, #8]
 8009a4a:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8009a4e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
/*
  * @brief Initializes @p ADCx peripheral for current sensing.
  * 
  */
static void R3_2_ADCxInit(ADC_TypeDef *ADCx)
{
 8009a52:	b082      	sub	sp, #8
 8009a54:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8009a56:	6883      	ldr	r3, [r0, #8]
 8009a58:	00d9      	lsls	r1, r3, #3
 8009a5a:	d418      	bmi.n	8009a8e <R3_2_ADCxInit+0x46>
    /* Wait for Regulator Startup time, once for both */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency  */
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)
                                         * (SystemCoreClock / (100000UL * 2UL)));
 8009a5c:	4b26      	ldr	r3, [pc, #152]	@ (8009af8 <R3_2_ADCxInit+0xb0>)
  MODIFY_REG(ADCx->CR,
 8009a5e:	6882      	ldr	r2, [r0, #8]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	4926      	ldr	r1, [pc, #152]	@ (8009afc <R3_2_ADCxInit+0xb4>)
 8009a64:	099b      	lsrs	r3, r3, #6
 8009a66:	f022 4210 	bic.w	r2, r2, #2415919104	@ 0x90000000
 8009a6a:	fba1 1303 	umull	r1, r3, r1, r3
 8009a6e:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8009a72:	099b      	lsrs	r3, r3, #6
 8009a74:	005b      	lsls	r3, r3, #1
 8009a76:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8009a7a:	6082      	str	r2, [r0, #8]
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)
 8009a7c:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8009a7e:	9b01      	ldr	r3, [sp, #4]
 8009a80:	b12b      	cbz	r3, 8009a8e <R3_2_ADCxInit+0x46>
    {
      wait_loop_index--;
 8009a82:	9b01      	ldr	r3, [sp, #4]
 8009a84:	3b01      	subs	r3, #1
 8009a86:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8009a88:	9b01      	ldr	r3, [sp, #4]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d1f9      	bne.n	8009a82 <R3_2_ADCxInit+0x3a>
  MODIFY_REG(ADCx->CR,
 8009a8e:	6883      	ldr	r3, [r0, #8]
 8009a90:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8009a94:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009a98:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009a9c:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8009a9e:	6883      	ldr	r3, [r0, #8]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	dbfc      	blt.n	8009a9e <R3_2_ADCxInit+0x56>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8009aa4:	6803      	ldr	r3, [r0, #0]
 8009aa6:	07da      	lsls	r2, r3, #31
 8009aa8:	d408      	bmi.n	8009abc <R3_2_ADCxInit+0x74>
  MODIFY_REG(ADCx->CR,
 8009aaa:	4a15      	ldr	r2, [pc, #84]	@ (8009b00 <R3_2_ADCxInit+0xb8>)
 8009aac:	6883      	ldr	r3, [r0, #8]
 8009aae:	4013      	ands	r3, r2
 8009ab0:	f043 0301 	orr.w	r3, r3, #1
 8009ab4:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8009ab6:	6803      	ldr	r3, [r0, #0]
 8009ab8:	07db      	lsls	r3, r3, #31
 8009aba:	d5f7      	bpl.n	8009aac <R3_2_ADCxInit+0x64>
  MODIFY_REG(ADCx->CR,
 8009abc:	6883      	ldr	r3, [r0, #8]
 8009abe:	4a10      	ldr	r2, [pc, #64]	@ (8009b00 <R3_2_ADCxInit+0xb8>)
 8009ac0:	4013      	ands	r3, r2
 8009ac2:	f043 0308 	orr.w	r3, r3, #8
 8009ac6:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->CR,
 8009ac8:	6883      	ldr	r3, [r0, #8]
 8009aca:	4013      	ands	r3, r2
 8009acc:	f043 0320 	orr.w	r3, r3, #32
 8009ad0:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
 8009ad2:	68c3      	ldr	r3, [r0, #12]
 8009ad4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009ad8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009adc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009ae0:	60c3      	str	r3, [r0, #12]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8009ae2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009ae4:	f023 030f 	bic.w	r3, r3, #15
 8009ae8:	6303      	str	r3, [r0, #48]	@ 0x30
  MODIFY_REG(ADCx->CR,
 8009aea:	6883      	ldr	r3, [r0, #8]
 8009aec:	4013      	ands	r3, r2
 8009aee:	f043 0304 	orr.w	r3, r3, #4
 8009af2:	6083      	str	r3, [r0, #8]

  /* Dummy conversion (ES0431 doc chap. 2.5.8 ADC channel 0 converted instead of the required ADC channel) 
     Note: Sequence length forced to zero in order to prevent ADC OverRun occurrence */
  LL_ADC_REG_SetSequencerLength(ADCx, 0U);
  LL_ADC_REG_StartConversion(ADCx);
}
 8009af4:	b002      	add	sp, #8
 8009af6:	4770      	bx	lr
 8009af8:	20000508 	.word	0x20000508
 8009afc:	053e2d63 	.word	0x053e2d63
 8009b00:	7fffffc0 	.word	0x7fffffc0

08009b04 <R3_2_GetPhaseCurrents>:
#endif
    int32_t Aux;
    uint32_t ADCDataReg1;
    uint32_t ADCDataReg2;
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl;  //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009b04:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
    uint8_t Sector;

    Sector = (uint8_t)pHandle->_Super.Sector;
 8009b08:	f890 207a 	ldrb.w	r2, [r0, #122]	@ 0x7a
{
 8009b0c:	b470      	push	{r4, r5, r6}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009b0e:	681c      	ldr	r4, [r3, #0]
    ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[Sector]->JDR1;
 8009b10:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8009b14:	6b9d      	ldr	r5, [r3, #56]	@ 0x38
    ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[Sector]->JDR1;
 8009b16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
    ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[Sector]->JDR1;
 8009b18:	f8d5 5080 	ldr.w	r5, [r5, #128]	@ 0x80
    ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[Sector]->JDR1;
 8009b1c:	f8d3 6080 	ldr.w	r6, [r3, #128]	@ 0x80
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8009b20:	6863      	ldr	r3, [r4, #4]
 8009b22:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009b26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b2a:	6063      	str	r3, [r4, #4]

    /* Disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    switch (Sector)
 8009b2c:	2a05      	cmp	r2, #5
 8009b2e:	f200 809d 	bhi.w	8009c6c <R3_2_GetPhaseCurrents+0x168>
 8009b32:	e8df f002 	tbb	[pc, r2]
 8009b36:	1d37      	.short	0x1d37
 8009b38:	3703031d 	.word	0x3703031d
      case SECTOR_4:
      case SECTOR_5:
      {
        /* Current on Phase C is not accessible     */
        /* Ia = PhaseAOffset - ADC converted value) */
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 8009b3c:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88

        /* Saturation of Ia */
        if (Aux < -INT16_MAX)
 8009b40:	4a4e      	ldr	r2, [pc, #312]	@ (8009c7c <R3_2_GetPhaseCurrents+0x178>)
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 8009b42:	1b5b      	subs	r3, r3, r5
        if (Aux < -INT16_MAX)
 8009b44:	4293      	cmp	r3, r2
 8009b46:	db58      	blt.n	8009bfa <R3_2_GetPhaseCurrents+0xf6>
        {
          Iab->a = -INT16_MAX;
        }
        else  if (Aux > INT16_MAX)
 8009b48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009b4c:	f280 8087 	bge.w	8009c5e <R3_2_GetPhaseCurrents+0x15a>
        {
          Iab->a = INT16_MAX;
        }
        else
        {
          Iab->a = (int16_t)Aux;
 8009b50:	fa0f fc83 	sxth.w	ip, r3
        }

        /* Ib = PhaseBOffset - ADC converted value) */
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg2);
 8009b54:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c

        /* Saturation of Ib */
        if (Aux < -INT16_MAX)
 8009b58:	4d48      	ldr	r5, [pc, #288]	@ (8009c7c <R3_2_GetPhaseCurrents+0x178>)
          Iab->a = -INT16_MAX;
 8009b5a:	f8a1 c000 	strh.w	ip, [r1]
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg2);
 8009b5e:	1b92      	subs	r2, r2, r6
        if (Aux < -INT16_MAX)
 8009b60:	42aa      	cmp	r2, r5
 8009b62:	da5b      	bge.n	8009c1c <R3_2_GetPhaseCurrents+0x118>
        {
          Iab->b = -INT16_MAX;
 8009b64:	804d      	strh	r5, [r1, #2]
        break;
    }

    pHandle->_Super.Ia = Iab->a;
    pHandle->_Super.Ib = Iab->b;
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8009b66:	fa1f f38c 	uxth.w	r3, ip
 8009b6a:	f248 0201 	movw	r2, #32769	@ 0x8001
 8009b6e:	e030      	b.n	8009bd2 <R3_2_GetPhaseCurrents+0xce>
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 8009b70:	f8d0 4088 	ldr.w	r4, [r0, #136]	@ 0x88
        if (Aux < -INT16_MAX)
 8009b74:	4b41      	ldr	r3, [pc, #260]	@ (8009c7c <R3_2_GetPhaseCurrents+0x178>)
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 8009b76:	1b64      	subs	r4, r4, r5
        if (Aux < -INT16_MAX)
 8009b78:	429c      	cmp	r4, r3
 8009b7a:	db39      	blt.n	8009bf0 <R3_2_GetPhaseCurrents+0xec>
        else  if (Aux > INT16_MAX)
 8009b7c:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
 8009b80:	da62      	bge.n	8009c48 <R3_2_GetPhaseCurrents+0x144>
          Iab->a = (int16_t)Aux;
 8009b82:	fa0f fc84 	sxth.w	ip, r4
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8009b86:	b2a3      	uxth	r3, r4
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 8009b88:	f8d0 2090 	ldr.w	r2, [r0, #144]	@ 0x90
          Iab->a = -INT16_MAX;
 8009b8c:	f8a1 c000 	strh.w	ip, [r1]
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 8009b90:	1ab2      	subs	r2, r6, r2
        Aux -= (int32_t)Iab->a;             /* Ib */
 8009b92:	1b12      	subs	r2, r2, r4
        if (Aux > INT16_MAX)
 8009b94:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8009b98:	db39      	blt.n	8009c0e <R3_2_GetPhaseCurrents+0x10a>
          Iab->b = INT16_MAX;
 8009b9a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8009b9e:	804a      	strh	r2, [r1, #2]
 8009ba0:	4615      	mov	r5, r2
 8009ba2:	e016      	b.n	8009bd2 <R3_2_GetPhaseCurrents+0xce>
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg1);
 8009ba4:	f8d0 408c 	ldr.w	r4, [r0, #140]	@ 0x8c
        if (Aux < -INT16_MAX)
 8009ba8:	4b34      	ldr	r3, [pc, #208]	@ (8009c7c <R3_2_GetPhaseCurrents+0x178>)
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg1);
 8009baa:	1b64      	subs	r4, r4, r5
        if (Aux < -INT16_MAX)
 8009bac:	429c      	cmp	r4, r3
 8009bae:	db1a      	blt.n	8009be6 <R3_2_GetPhaseCurrents+0xe2>
        else  if (Aux > INT16_MAX)
 8009bb0:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
 8009bb4:	da3d      	bge.n	8009c32 <R3_2_GetPhaseCurrents+0x12e>
          Iab->b = (int16_t)Aux;
 8009bb6:	b225      	sxth	r5, r4
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8009bb8:	b2a2      	uxth	r2, r4
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 8009bba:	f8d0 3090 	ldr.w	r3, [r0, #144]	@ 0x90
          Iab->b = -INT16_MAX;
 8009bbe:	804d      	strh	r5, [r1, #2]
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 8009bc0:	1af3      	subs	r3, r6, r3
        Aux -= (int32_t)Iab->b;             /* Ia  */
 8009bc2:	1b1b      	subs	r3, r3, r4
        if (Aux > INT16_MAX)
 8009bc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009bc8:	db19      	blt.n	8009bfe <R3_2_GetPhaseCurrents+0xfa>
          Iab->a = INT16_MAX;
 8009bca:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8009bce:	800b      	strh	r3, [r1, #0]
 8009bd0:	469c      	mov	ip, r3
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8009bd2:	4413      	add	r3, r2
 8009bd4:	425b      	negs	r3, r3
    pHandle->_Super.Ib = Iab->b;
 8009bd6:	f8a0 5064 	strh.w	r5, [r0, #100]	@ 0x64
    pHandle->_Super.Ia = Iab->a;
 8009bda:	f8a0 c062 	strh.w	ip, [r0, #98]	@ 0x62
#ifdef NULL_PTR_CHECK_R3_2_PWM_CURR_FDB
  }
#endif
}
 8009bde:	bc70      	pop	{r4, r5, r6}
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8009be0:	f8a0 3066 	strh.w	r3, [r0, #102]	@ 0x66
}
 8009be4:	4770      	bx	lr
 8009be6:	461c      	mov	r4, r3
 8009be8:	f248 0201 	movw	r2, #32769	@ 0x8001
 8009bec:	461d      	mov	r5, r3
 8009bee:	e7e4      	b.n	8009bba <R3_2_GetPhaseCurrents+0xb6>
 8009bf0:	461c      	mov	r4, r3
 8009bf2:	46a4      	mov	ip, r4
 8009bf4:	f248 0301 	movw	r3, #32769	@ 0x8001
 8009bf8:	e7c6      	b.n	8009b88 <R3_2_GetPhaseCurrents+0x84>
 8009bfa:	4694      	mov	ip, r2
 8009bfc:	e7aa      	b.n	8009b54 <R3_2_GetPhaseCurrents+0x50>
        else  if (Aux < -INT16_MAX)
 8009bfe:	4c1f      	ldr	r4, [pc, #124]	@ (8009c7c <R3_2_GetPhaseCurrents+0x178>)
 8009c00:	42a3      	cmp	r3, r4
 8009c02:	da26      	bge.n	8009c52 <R3_2_GetPhaseCurrents+0x14e>
          Iab->a = -INT16_MAX;
 8009c04:	800c      	strh	r4, [r1, #0]
 8009c06:	f248 0301 	movw	r3, #32769	@ 0x8001
 8009c0a:	46a4      	mov	ip, r4
 8009c0c:	e7e1      	b.n	8009bd2 <R3_2_GetPhaseCurrents+0xce>
        else  if (Aux < -INT16_MAX)
 8009c0e:	4d1b      	ldr	r5, [pc, #108]	@ (8009c7c <R3_2_GetPhaseCurrents+0x178>)
 8009c10:	42aa      	cmp	r2, r5
 8009c12:	da27      	bge.n	8009c64 <R3_2_GetPhaseCurrents+0x160>
          Iab->b = -INT16_MAX;
 8009c14:	804d      	strh	r5, [r1, #2]
 8009c16:	f248 0201 	movw	r2, #32769	@ 0x8001
 8009c1a:	e7da      	b.n	8009bd2 <R3_2_GetPhaseCurrents+0xce>
        else  if (Aux > INT16_MAX)
 8009c1c:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8009c20:	db0c      	blt.n	8009c3c <R3_2_GetPhaseCurrents+0x138>
          Iab->b = INT16_MAX;
 8009c22:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8009c26:	461a      	mov	r2, r3
 8009c28:	804b      	strh	r3, [r1, #2]
 8009c2a:	4615      	mov	r5, r2
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8009c2c:	fa1f f38c 	uxth.w	r3, ip
 8009c30:	e7cf      	b.n	8009bd2 <R3_2_GetPhaseCurrents+0xce>
 8009c32:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8009c36:	4614      	mov	r4, r2
 8009c38:	4615      	mov	r5, r2
 8009c3a:	e7be      	b.n	8009bba <R3_2_GetPhaseCurrents+0xb6>
          Iab->b = (int16_t)Aux;
 8009c3c:	b215      	sxth	r5, r2
 8009c3e:	804d      	strh	r5, [r1, #2]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8009c40:	fa1f f38c 	uxth.w	r3, ip
 8009c44:	b292      	uxth	r2, r2
 8009c46:	e7c4      	b.n	8009bd2 <R3_2_GetPhaseCurrents+0xce>
 8009c48:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8009c4c:	461c      	mov	r4, r3
 8009c4e:	469c      	mov	ip, r3
 8009c50:	e79a      	b.n	8009b88 <R3_2_GetPhaseCurrents+0x84>
          Iab->a = (int16_t)Aux;
 8009c52:	fa0f fc83 	sxth.w	ip, r3
 8009c56:	f8a1 c000 	strh.w	ip, [r1]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8009c5a:	b29b      	uxth	r3, r3
 8009c5c:	e7b9      	b.n	8009bd2 <R3_2_GetPhaseCurrents+0xce>
 8009c5e:	f647 7cff 	movw	ip, #32767	@ 0x7fff
 8009c62:	e777      	b.n	8009b54 <R3_2_GetPhaseCurrents+0x50>
          Iab->b = (int16_t)Aux;
 8009c64:	b215      	sxth	r5, r2
 8009c66:	804d      	strh	r5, [r1, #2]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8009c68:	b292      	uxth	r2, r2
 8009c6a:	e7b2      	b.n	8009bd2 <R3_2_GetPhaseCurrents+0xce>
    pHandle->_Super.Ia = Iab->a;
 8009c6c:	f9b1 c000 	ldrsh.w	ip, [r1]
    pHandle->_Super.Ib = Iab->b;
 8009c70:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8009c74:	880b      	ldrh	r3, [r1, #0]
 8009c76:	884a      	ldrh	r2, [r1, #2]
 8009c78:	e7ab      	b.n	8009bd2 <R3_2_GetPhaseCurrents+0xce>
 8009c7a:	bf00      	nop
 8009c7c:	ffff8001 	.word	0xffff8001

08009c80 <R3_2_SetADCSampPointPolarization>:
  *
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @retval Return value of R3_1_WriteTIMRegisters.
  */
uint16_t R3_2_SetADCSampPointPolarization(PWMC_Handle_t *pHdl)
{
 8009c80:	b410      	push	{r4}
  *         set too late for being taken into account in the next PWM cycle.
  */
__STATIC_INLINE uint16_t R3_2_WriteTIMRegisters(PWMC_Handle_t *pHdl, uint16_t SamplingPoint)
{
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009c82:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
  pHandle->_Super.Sector = pHandle->PolarizationSector;
 8009c86:	f890 4099 	ldrb.w	r4, [r0, #153]	@ 0x99
 8009c8a:	f880 407a 	strb.w	r4, [r0, #122]	@ 0x7a
  return R3_2_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 8009c8e:	f8b0 2094 	ldrh.w	r2, [r0, #148]	@ 0x94
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009c92:	681b      	ldr	r3, [r3, #0]
  uint16_t Aux;

  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t) pHandle->_Super.CntPhA);
 8009c94:	f8b0 4050 	ldrh.w	r4, [r0, #80]	@ 0x50
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009c98:	635c      	str	r4, [r3, #52]	@ 0x34
  return R3_2_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 8009c9a:	3a01      	subs	r2, #1
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t) pHandle->_Super.CntPhB);
 8009c9c:	f8b0 4052 	ldrh.w	r4, [r0, #82]	@ 0x52
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t) pHandle->_Super.CntPhC);
 8009ca0:	f8b0 0054 	ldrh.w	r0, [r0, #84]	@ 0x54
  WRITE_REG(TIMx->CCR2, CompareValue);
 8009ca4:	639c      	str	r4, [r3, #56]	@ 0x38
  return R3_2_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 8009ca6:	b292      	uxth	r2, r2
  WRITE_REG(TIMx->CCR3, CompareValue);
 8009ca8:	63d8      	str	r0, [r3, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8009caa:	641a      	str	r2, [r3, #64]	@ 0x40
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t) SamplingPoint);

  /* Limit for update event */
  /*  if ( LL_TIM_CC_IsEnabledChannel(TIMx, LL_TIM_CHANNEL_CH4) == 1u ) */
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 8009cac:	4904      	ldr	r1, [pc, #16]	@ (8009cc0 <R3_2_SetADCSampPointPolarization+0x40>)
 8009cae:	685b      	ldr	r3, [r3, #4]
}
 8009cb0:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 8009cb4:	420b      	tst	r3, r1
}
 8009cb6:	bf14      	ite	ne
 8009cb8:	2001      	movne	r0, #1
 8009cba:	2000      	moveq	r0, #0
 8009cbc:	4770      	bx	lr
 8009cbe:	bf00      	nop
 8009cc0:	02000070 	.word	0x02000070

08009cc4 <R3_2_HFCurrentsPolarizationAB>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @param  Iab: Pointer to the structure that will receive motor current
  *         of phase A and B in ab_t format.
  */
static void R3_2_HFCurrentsPolarizationAB(PWMC_Handle_t *pHdl, ab_t *Iab)
{
 8009cc4:	b430      	push	{r4, r5}
  }
  else
  {
#endif
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009cc6:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8009cca:	f890 4099 	ldrb.w	r4, [r0, #153]	@ 0x99
 8009cce:	681a      	ldr	r2, [r3, #0]
    uint32_t ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector]->JDR1;
 8009cd0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009cd4:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 8009cd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
    uint32_t ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector]->JDR1;
 8009cd8:	f8d4 4080 	ldr.w	r4, [r4, #128]	@ 0x80
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 8009cdc:	f8d3 5080 	ldr.w	r5, [r3, #128]	@ 0x80
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8009ce0:	6853      	ldr	r3, [r2, #4]
 8009ce2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009ce6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009cea:	6053      	str	r3, [r2, #4]

    /* Disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    if (pHandle->PolarizationCounter < NB_CONVERSIONS)
 8009cec:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
 8009cf0:	2b0f      	cmp	r3, #15
 8009cf2:	d80d      	bhi.n	8009d10 <R3_2_HFCurrentsPolarizationAB+0x4c>
    {
      pHandle-> PhaseAOffset += ADCDataReg1;
 8009cf4:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
      pHandle-> PhaseBOffset += ADCDataReg2;
 8009cf8:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
      pHandle-> PhaseAOffset += ADCDataReg1;
 8009cfc:	441c      	add	r4, r3
      pHandle->PolarizationCounter++;
 8009cfe:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
      pHandle-> PhaseBOffset += ADCDataReg2;
 8009d02:	442a      	add	r2, r5
      pHandle->PolarizationCounter++;
 8009d04:	3301      	adds	r3, #1
      pHandle-> PhaseBOffset += ADCDataReg2;
 8009d06:	e9c0 4222 	strd	r4, r2, [r0, #136]	@ 0x88
      pHandle->PolarizationCounter++;
 8009d0a:	b2db      	uxtb	r3, r3
 8009d0c:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98
    {
      /* Nothing to do */
    }

    /* During offset calibration no current is flowing in the phases */
    Iab->a = 0;
 8009d10:	2300      	movs	r3, #0
    Iab->b = 0;
#ifdef NULL_PTR_CHECK_R3_2_PWM_CURR_FDB
  }
#endif
}
 8009d12:	bc30      	pop	{r4, r5}
    Iab->a = 0;
 8009d14:	600b      	str	r3, [r1, #0]
}
 8009d16:	4770      	bx	lr

08009d18 <R3_2_HFCurrentsPolarizationC>:
  else
  {
#endif
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 8009d18:	f890 3099 	ldrb.w	r3, [r0, #153]	@ 0x99
{
 8009d1c:	b410      	push	{r4}
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 8009d1e:	3314      	adds	r3, #20
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009d20:	f8d0 409c 	ldr.w	r4, [r0, #156]	@ 0x9c
 8009d24:	6822      	ldr	r2, [r4, #0]
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 8009d26:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8009d2a:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 8009d2e:	6853      	ldr	r3, [r2, #4]
 8009d30:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009d34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d38:	6053      	str	r3, [r2, #4]

    /* Disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    if (pHandle->PolarizationCounter < NB_CONVERSIONS)
 8009d3a:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
 8009d3e:	2b0f      	cmp	r3, #15
 8009d40:	d80a      	bhi.n	8009d58 <R3_2_HFCurrentsPolarizationC+0x40>
    {
      /* Phase C is read from SECTOR_1, second value */
      pHandle-> PhaseCOffset += ADCDataReg2;
      pHandle->PolarizationCounter++;
 8009d42:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
      pHandle-> PhaseCOffset += ADCDataReg2;
 8009d46:	f8d0 2090 	ldr.w	r2, [r0, #144]	@ 0x90
      pHandle->PolarizationCounter++;
 8009d4a:	3301      	adds	r3, #1
      pHandle-> PhaseCOffset += ADCDataReg2;
 8009d4c:	4422      	add	r2, r4
      pHandle->PolarizationCounter++;
 8009d4e:	b2db      	uxtb	r3, r3
      pHandle-> PhaseCOffset += ADCDataReg2;
 8009d50:	f8c0 2090 	str.w	r2, [r0, #144]	@ 0x90
      pHandle->PolarizationCounter++;
 8009d54:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98
    {
      /* Nothing to do */
    }

    /* During offset calibration no current is flowing in the phases */
    Iab->a = 0;
 8009d58:	2300      	movs	r3, #0
    Iab->b = 0;
#ifdef NULL_PTR_CHECK_R3_2_PWM_CURR_FDB
  }
#endif
}
 8009d5a:	f85d 4b04 	ldr.w	r4, [sp], #4
    Iab->a = 0;
 8009d5e:	600b      	str	r3, [r1, #0]
}
 8009d60:	4770      	bx	lr
 8009d62:	bf00      	nop

08009d64 <R3_2_SwitchOnPWM>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
__weak void R3_2_SwitchOnPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009d64:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
  pHandle->ADCRegularLocked = true;

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
 8009d68:	f8b0 2094 	ldrh.w	r2, [r0, #148]	@ 0x94
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009d6c:	681b      	ldr	r3, [r3, #0]
  pHandle->ADCRegularLocked = true;
 8009d6e:	f04f 0c01 	mov.w	ip, #1
{
 8009d72:	b5f0      	push	{r4, r5, r6, r7, lr}
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
 8009d74:	fa22 f10c 	lsr.w	r1, r2, ip
  pHandle->_Super.TurnOnLowSidesAction = false;
 8009d78:	f04f 0e00 	mov.w	lr, #0
 8009d7c:	f880 e07c 	strb.w	lr, [r0, #124]	@ 0x7c
  pHandle->ADCRegularLocked = true;
 8009d80:	f880 c0a0 	strb.w	ip, [r0, #160]	@ 0xa0
  LL_TIM_OC_SetCompareCH2(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
  LL_TIM_OC_SetCompareCH3(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
  LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t)pHandle->Half_PWMPeriod - (uint32_t)5));
 8009d84:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009d86:	6359      	str	r1, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8009d88:	6399      	str	r1, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8009d8a:	63d9      	str	r1, [r3, #60]	@ 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009d8c:	f06f 0101 	mvn.w	r1, #1
  WRITE_REG(TIMx->CCR4, CompareValue);
 8009d90:	641a      	str	r2, [r3, #64]	@ 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009d92:	6119      	str	r1, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8009d94:	691a      	ldr	r2, [r3, #16]
 8009d96:	07d2      	lsls	r2, r2, #31
 8009d98:	d5fc      	bpl.n	8009d94 <R3_2_SwitchOnPWM+0x30>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009d9a:	f06f 0201 	mvn.w	r2, #1
 8009d9e:	611a      	str	r2, [r3, #16]
    /* Nothing to do */
  }
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8009da0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009da2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009da6:	645a      	str	r2, [r3, #68]	@ 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8009da8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009daa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009dae:	645a      	str	r2, [r3, #68]	@ 0x44
  LL_TIM_EnableAllOutputs(TIMx);

  if ((ES_GPIO == pHandle->_Super.LowSideOutputs))
 8009db0:	f890 207b 	ldrb.w	r2, [r0, #123]	@ 0x7b
 8009db4:	2a02      	cmp	r2, #2
 8009db6:	d007      	beq.n	8009dc8 <R3_2_SwitchOnPWM+0x64>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009db8:	f06f 0201 	mvn.w	r2, #1
 8009dbc:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8009dbe:	68da      	ldr	r2, [r3, #12]
 8009dc0:	f042 0201 	orr.w	r2, r2, #1
 8009dc4:	60da      	str	r2, [r3, #12]
  }
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE(TIMx);
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE(TIMx);
}
 8009dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0U)
 8009dc8:	6a19      	ldr	r1, [r3, #32]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 8009dca:	6bc7      	ldr	r7, [r0, #60]	@ 0x3c
 8009dcc:	f8b0 c048 	ldrh.w	ip, [r0, #72]	@ 0x48
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8009dd0:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8009dd2:	f8b0 604a 	ldrh.w	r6, [r0, #74]	@ 0x4a
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8009dd6:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8009dd8:	f8b0 004c 	ldrh.w	r0, [r0, #76]	@ 0x4c
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0U)
 8009ddc:	f240 5255 	movw	r2, #1365	@ 0x555
 8009de0:	4211      	tst	r1, r2
 8009de2:	d004      	beq.n	8009dee <R3_2_SwitchOnPWM+0x8a>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8009de4:	f8c7 c018 	str.w	ip, [r7, #24]
 8009de8:	61ae      	str	r6, [r5, #24]
 8009dea:	61a0      	str	r0, [r4, #24]
}
 8009dec:	e7e4      	b.n	8009db8 <R3_2_SwitchOnPWM+0x54>
  WRITE_REG(GPIOx->BRR, PinMask);
 8009dee:	f8c7 c028 	str.w	ip, [r7, #40]	@ 0x28
 8009df2:	62ae      	str	r6, [r5, #40]	@ 0x28
 8009df4:	62a0      	str	r0, [r4, #40]	@ 0x28
}
 8009df6:	e7df      	b.n	8009db8 <R3_2_SwitchOnPWM+0x54>

08009df8 <R3_2_SwitchOffPWM>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
__weak void R3_2_SwitchOffPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009df8:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs(TIMx);
  if (true == pHandle->_Super.BrakeActionLock)
 8009dfc:	f890 1083 	ldrb.w	r1, [r0, #131]	@ 0x83
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009e00:	681b      	ldr	r3, [r3, #0]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8009e02:	68da      	ldr	r2, [r3, #12]
 8009e04:	f022 0201 	bic.w	r2, r2, #1
 8009e08:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8009e0a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
  pHandle->_Super.TurnOnLowSidesAction = false;
 8009e0c:	f04f 0c00 	mov.w	ip, #0
 8009e10:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009e14:	f880 c07c 	strb.w	ip, [r0, #124]	@ 0x7c
 8009e18:	645a      	str	r2, [r3, #68]	@ 0x44
  if (true == pHandle->_Super.BrakeActionLock)
 8009e1a:	b919      	cbnz	r1, 8009e24 <R3_2_SwitchOffPWM+0x2c>
  {
    /* Nothing to do */
  }
  else
  {
    if (ES_GPIO == pHandle->_Super.LowSideOutputs)
 8009e1c:	f890 207b 	ldrb.w	r2, [r0, #123]	@ 0x7b
 8009e20:	2a02      	cmp	r2, #2
 8009e22:	d00c      	beq.n	8009e3e <R3_2_SwitchOffPWM+0x46>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009e24:	f06f 0201 	mvn.w	r2, #1
 8009e28:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8009e2a:	691a      	ldr	r2, [r3, #16]
 8009e2c:	07d2      	lsls	r2, r2, #31
 8009e2e:	d5fc      	bpl.n	8009e2a <R3_2_SwitchOffPWM+0x32>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009e30:	f06f 0101 	mvn.w	r1, #1
    /* Nothing to do */
  }
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* We allow ADC usage for regular conversion on Systick */
  pHandle->ADCRegularLocked = false;
 8009e34:	2200      	movs	r2, #0
 8009e36:	6119      	str	r1, [r3, #16]
 8009e38:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
 8009e3c:	4770      	bx	lr
{
 8009e3e:	b430      	push	{r4, r5}
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8009e40:	e9d0 410f 	ldrd	r4, r1, [r0, #60]	@ 0x3c
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 8009e44:	f8b0 5048 	ldrh.w	r5, [r0, #72]	@ 0x48
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8009e48:	6c42      	ldr	r2, [r0, #68]	@ 0x44
  WRITE_REG(GPIOx->BRR, PinMask);
 8009e4a:	62a5      	str	r5, [r4, #40]	@ 0x28
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8009e4c:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
 8009e50:	628c      	str	r4, [r1, #40]	@ 0x28
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8009e52:	f8b0 104c 	ldrh.w	r1, [r0, #76]	@ 0x4c
 8009e56:	6291      	str	r1, [r2, #40]	@ 0x28
 8009e58:	f06f 0201 	mvn.w	r2, #1
 8009e5c:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8009e5e:	691a      	ldr	r2, [r3, #16]
 8009e60:	07d1      	lsls	r1, r2, #31
 8009e62:	d5fc      	bpl.n	8009e5e <R3_2_SwitchOffPWM+0x66>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009e64:	f06f 0101 	mvn.w	r1, #1
  pHandle->ADCRegularLocked = false;
 8009e68:	2200      	movs	r2, #0
 8009e6a:	6119      	str	r1, [r3, #16]
}
 8009e6c:	bc30      	pop	{r4, r5}
  pHandle->ADCRegularLocked = false;
 8009e6e:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
}
 8009e72:	4770      	bx	lr

08009e74 <R3_2_RLGetPhaseCurrents>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @param  pStator_Currents: Pointer to the structure that will receive motor current
  *         of phase A and B in ab_t format.
  */
static void R3_2_RLGetPhaseCurrents(PWMC_Handle_t *pHdl, ab_t *pStator_Currents)
{
 8009e74:	b410      	push	{r4}
  }
  else
  {
#endif
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009e76:	f8d0 409c 	ldr.w	r4, [r0, #156]	@ 0x9c
 8009e7a:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8009e7c:	6853      	ldr	r3, [r2, #4]
 8009e7e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009e82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e86:	6053      	str	r3, [r2, #4]

    /* Disable ADC trigger source */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    wAux = ((int32_t)pHandle->PhaseBOffset)
         - ((int32_t)(pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]->JDR1));
 8009e88:	f890 207a 	ldrb.w	r2, [r0, #122]	@ 0x7a
    wAux = ((int32_t)pHandle->PhaseBOffset)
 8009e8c:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
    else
    {
      wAux = -INT16_MAX;
    }

    pStator_Currents->a = (int16_t)wAux;
 8009e90:	480c      	ldr	r0, [pc, #48]	@ (8009ec4 <R3_2_RLGetPhaseCurrents+0x50>)
         - ((int32_t)(pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]->JDR1));
 8009e92:	3214      	adds	r2, #20
 8009e94:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 8009e98:	f8d4 4080 	ldr.w	r4, [r4, #128]	@ 0x80
      if (wAux < INT16_MAX)
 8009e9c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
    wAux = ((int32_t)pHandle->PhaseBOffset)
 8009ea0:	1b1b      	subs	r3, r3, r4
      if (wAux < INT16_MAX)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	bfa8      	it	ge
 8009ea6:	4613      	movge	r3, r2
    pStator_Currents->a = (int16_t)wAux;
 8009ea8:	4283      	cmp	r3, r0
 8009eaa:	bfb8      	it	lt
 8009eac:	4603      	movlt	r3, r0
 8009eae:	b21b      	sxth	r3, r3
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	f363 020f 	bfi	r2, r3, #0, #16
 8009eb6:	f363 421f 	bfi	r2, r3, #16, #16
    pStator_Currents->b = (int16_t)wAux;
#ifdef NULL_PTR_CHECK_R3_2_PWM_CURR_FDB
  }
#endif
}
 8009eba:	f85d 4b04 	ldr.w	r4, [sp], #4
    pStator_Currents->a = (int16_t)wAux;
 8009ebe:	600a      	str	r2, [r1, #0]
}
 8009ec0:	4770      	bx	lr
 8009ec2:	bf00      	nop
 8009ec4:	ffff8001 	.word	0xffff8001

08009ec8 <R3_2_RLSwitchOnPWM>:
  }
  else
  {
#endif
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009ec8:	f8d0 209c 	ldr.w	r2, [r0, #156]	@ 0x9c
{
 8009ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009ed0:	6813      	ldr	r3, [r2, #0]
    ADC_TypeDef *ADCx_1 = pHandle->pParams_str->ADCDataReg1[0];
 8009ed2:	6b94      	ldr	r4, [r2, #56]	@ 0x38
    ADC_TypeDef *ADCx_2 = pHandle->pParams_str->ADCDataReg2[0];
 8009ed4:	6d11      	ldr	r1, [r2, #80]	@ 0x50

    pHandle->ADCRegularLocked=true;
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009edc:	f06f 0201 	mvn.w	r2, #1
 8009ee0:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8009ee2:	691a      	ldr	r2, [r3, #16]
 8009ee4:	07d5      	lsls	r5, r2, #31
 8009ee6:	d5fc      	bpl.n	8009ee2 <R3_2_RLSwitchOnPWM+0x1a>
    }
    /* Clear Update Flag */
    LL_TIM_ClearFlag_UPDATE(TIMx);

    LL_TIM_OC_SetCompareCH1(TIMx, 1U);
    LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t )pHandle->Half_PWMPeriod) - 5U);
 8009ee8:	f8b0 2094 	ldrh.w	r2, [r0, #148]	@ 0x94
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009eec:	f06f 0601 	mvn.w	r6, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009ef0:	2501      	movs	r5, #1
 8009ef2:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009ef4:	611e      	str	r6, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009ef6:	635d      	str	r5, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR4, CompareValue);
 8009ef8:	641a      	str	r2, [r3, #64]	@ 0x40
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8009efa:	691a      	ldr	r2, [r3, #16]
 8009efc:	07d2      	lsls	r2, r2, #31
 8009efe:	d5fc      	bpl.n	8009efa <R3_2_RLSwitchOnPWM+0x32>
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8009f00:	68da      	ldr	r2, [r3, #12]
 8009f02:	f042 0201 	orr.w	r2, r2, #1
 8009f06:	60da      	str	r2, [r3, #12]

    /* Enable TIMx update interrupt */
    LL_TIM_EnableIT_UPDATE(TIMx);

    /* Main PWM Output Enable */
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 8009f08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009f0a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009f0e:	645a      	str	r2, [r3, #68]	@ 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8009f10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009f12:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009f16:	645a      	str	r2, [r3, #68]	@ 0x44
    LL_TIM_EnableAllOutputs(TIMx);

    if (ES_GPIO ==  pHandle->_Super.LowSideOutputs)
 8009f18:	f890 207b 	ldrb.w	r2, [r0, #123]	@ 0x7b
 8009f1c:	2a02      	cmp	r2, #2
 8009f1e:	d00f      	beq.n	8009f40 <R3_2_RLSwitchOnPWM+0x78>
      /* Nothing to do */
    }

    /* Set the sector that correspond to Phase B and C sampling
     * B will be sampled by ADCx_1 */
    pHdl->Sector = SECTOR_4;
 8009f20:	2303      	movs	r3, #3
 8009f22:	f880 307a 	strb.w	r3, [r0, #122]	@ 0x7a
  MODIFY_REG(ADCx->CR,
 8009f26:	68a3      	ldr	r3, [r4, #8]
 8009f28:	4a12      	ldr	r2, [pc, #72]	@ (8009f74 <R3_2_RLSwitchOnPWM+0xac>)
 8009f2a:	4013      	ands	r3, r2
 8009f2c:	f043 0308 	orr.w	r3, r3, #8
 8009f30:	60a3      	str	r3, [r4, #8]
 8009f32:	688b      	ldr	r3, [r1, #8]
 8009f34:	4013      	ands	r3, r2
 8009f36:	f043 0308 	orr.w	r3, r3, #8
 8009f3a:	608b      	str	r3, [r1, #8]
    LL_ADC_INJ_StartConversion(ADCx_1);
    LL_ADC_INJ_StartConversion(ADCx_2);
#ifdef NULL_PTR_CHECK_R3_2_PWM_CURR_FDB
  }
#endif
}
 8009f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0U)
 8009f40:	6a1a      	ldr	r2, [r3, #32]
        LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 8009f42:	f8d0 e03c 	ldr.w	lr, [r0, #60]	@ 0x3c
        LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8009f46:	6c07      	ldr	r7, [r0, #64]	@ 0x40
        LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8009f48:	6c45      	ldr	r5, [r0, #68]	@ 0x44
        LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 8009f4a:	f8b0 8048 	ldrh.w	r8, [r0, #72]	@ 0x48
        LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8009f4e:	f8b0 c04a 	ldrh.w	ip, [r0, #74]	@ 0x4a
        LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8009f52:	f8b0 604c 	ldrh.w	r6, [r0, #76]	@ 0x4c
      if ((TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0U)
 8009f56:	f240 5355 	movw	r3, #1365	@ 0x555
 8009f5a:	421a      	tst	r2, r3
  WRITE_REG(GPIOx->BSRR, PinMask);
 8009f5c:	bf15      	itete	ne
 8009f5e:	f8ce 8018 	strne.w	r8, [lr, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 8009f62:	f8ce 8028 	streq.w	r8, [lr, #40]	@ 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 8009f66:	f8c7 c018 	strne.w	ip, [r7, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 8009f6a:	f8c7 c028 	streq.w	ip, [r7, #40]	@ 0x28
 8009f6e:	62ae      	str	r6, [r5, #40]	@ 0x28
}
 8009f70:	e7d6      	b.n	8009f20 <R3_2_RLSwitchOnPWM+0x58>
 8009f72:	bf00      	nop
 8009f74:	7fffffc0 	.word	0x7fffffc0

08009f78 <R3_2_TurnOnLowSides>:
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009f78:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8009f7c:	681b      	ldr	r3, [r3, #0]
  pHandle->_Super.TurnOnLowSidesAction = true;
 8009f7e:	f04f 0c01 	mov.w	ip, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009f82:	f06f 0201 	mvn.w	r2, #1
 8009f86:	f880 c07c 	strb.w	ip, [r0, #124]	@ 0x7c
 8009f8a:	611a      	str	r2, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009f8c:	6359      	str	r1, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8009f8e:	6399      	str	r1, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8009f90:	63d9      	str	r1, [r3, #60]	@ 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8009f92:	691a      	ldr	r2, [r3, #16]
 8009f94:	07d2      	lsls	r2, r2, #31
 8009f96:	d5fc      	bpl.n	8009f92 <R3_2_TurnOnLowSides+0x1a>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8009f98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009f9a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009f9e:	645a      	str	r2, [r3, #68]	@ 0x44
  if ((ES_GPIO == pHandle->_Super.LowSideOutputs))
 8009fa0:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 8009fa4:	2b02      	cmp	r3, #2
 8009fa6:	d000      	beq.n	8009faa <R3_2_TurnOnLowSides+0x32>
 8009fa8:	4770      	bx	lr
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8009faa:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	@ 0x3c
{
 8009fae:	b410      	push	{r4}
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8009fb0:	6c43      	ldr	r3, [r0, #68]	@ 0x44
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 8009fb2:	f8b0 4048 	ldrh.w	r4, [r0, #72]	@ 0x48
  WRITE_REG(GPIOx->BSRR, PinMask);
 8009fb6:	6194      	str	r4, [r2, #24]
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8009fb8:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8009fbc:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
 8009fc0:	618c      	str	r4, [r1, #24]
}
 8009fc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fc6:	619a      	str	r2, [r3, #24]
 8009fc8:	4770      	bx	lr
 8009fca:	bf00      	nop

08009fcc <R3_2_SetAOReferenceVoltage>:
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12LeftAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS)
 8009fcc:	ea4f 4c90 	mov.w	ip, r0, lsr #18
{
 8009fd0:	b510      	push	{r4, lr}
 8009fd2:	f00c 0c3c 	and.w	ip, ip, #60	@ 0x3c
 8009fd6:	f101 0e08 	add.w	lr, r1, #8
 8009fda:	b082      	sub	sp, #8
                                             & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);

  MODIFY_REG(*preg, DAC_DHR12L1_DACC1DHR, Data);
 8009fdc:	f85e 300c 	ldr.w	r3, [lr, ip]
 8009fe0:	f36f 130f 	bfc	r3, #4, #12
 8009fe4:	4313      	orrs	r3, r2
 8009fe6:	f84e 300c 	str.w	r3, [lr, ip]
  SET_BIT(DACx->SWTRIGR,
 8009fea:	684a      	ldr	r2, [r1, #4]
 8009fec:	f000 0303 	and.w	r3, r0, #3
 8009ff0:	4313      	orrs	r3, r2
 8009ff2:	604b      	str	r3, [r1, #4]
  return ((READ_BIT(DACx->CR,
 8009ff4:	680a      	ldr	r2, [r1, #0]
 8009ff6:	f000 0010 	and.w	r0, r0, #16
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	4083      	lsls	r3, r0
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 8009ffe:	ea33 0202 	bics.w	r2, r3, r2
 800a002:	d014      	beq.n	800a02e <R3_2_SetAOReferenceVoltage+0x62>
                                         * (SystemCoreClock / (1000000UL * 2UL)));
 800a004:	4a14      	ldr	r2, [pc, #80]	@ (800a058 <R3_2_SetAOReferenceVoltage+0x8c>)
 800a006:	4815      	ldr	r0, [pc, #84]	@ (800a05c <R3_2_SetAOReferenceVoltage+0x90>)
 800a008:	6812      	ldr	r2, [r2, #0]
  SET_BIT(DACx->CR,
 800a00a:	680c      	ldr	r4, [r1, #0]
 800a00c:	fba0 0202 	umull	r0, r2, r0, r2
 800a010:	0cd2      	lsrs	r2, r2, #19
 800a012:	4323      	orrs	r3, r4
 800a014:	00d2      	lsls	r2, r2, #3
 800a016:	600b      	str	r3, [r1, #0]
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_STARTUP_VOLTAGE_SETTLING_US)
 800a018:	9200      	str	r2, [sp, #0]
    while (wait_loop_index != 0UL)
 800a01a:	9b00      	ldr	r3, [sp, #0]
 800a01c:	b12b      	cbz	r3, 800a02a <R3_2_SetAOReferenceVoltage+0x5e>
      wait_loop_index--;
 800a01e:	9b00      	ldr	r3, [sp, #0]
 800a020:	3b01      	subs	r3, #1
 800a022:	9300      	str	r3, [sp, #0]
    while (wait_loop_index != 0UL)
 800a024:	9b00      	ldr	r3, [sp, #0]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d1f9      	bne.n	800a01e <R3_2_SetAOReferenceVoltage+0x52>
}
 800a02a:	b002      	add	sp, #8
 800a02c:	bd10      	pop	{r4, pc}
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 800a02e:	4b0a      	ldr	r3, [pc, #40]	@ (800a058 <R3_2_SetAOReferenceVoltage+0x8c>)
 800a030:	4a0a      	ldr	r2, [pc, #40]	@ (800a05c <R3_2_SetAOReferenceVoltage+0x90>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	fba2 2303 	umull	r2, r3, r2, r3
 800a038:	0cdb      	lsrs	r3, r3, #19
 800a03a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800a03e:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800a040:	9b01      	ldr	r3, [sp, #4]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d0f1      	beq.n	800a02a <R3_2_SetAOReferenceVoltage+0x5e>
      wait_loop_index--;
 800a046:	9b01      	ldr	r3, [sp, #4]
 800a048:	3b01      	subs	r3, #1
 800a04a:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800a04c:	9b01      	ldr	r3, [sp, #4]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d1f9      	bne.n	800a046 <R3_2_SetAOReferenceVoltage+0x7a>
}
 800a052:	b002      	add	sp, #8
 800a054:	bd10      	pop	{r4, pc}
 800a056:	bf00      	nop
 800a058:	20000508 	.word	0x20000508
 800a05c:	431bde83 	.word	0x431bde83

0800a060 <R3_2_RLTurnOnLowSides>:
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a060:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 800a064:	681b      	ldr	r3, [r3, #0]
  pHandle->ADCRegularLocked = true;
 800a066:	f04f 0c01 	mov.w	ip, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a06a:	2100      	movs	r1, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a06c:	f06f 0201 	mvn.w	r2, #1
 800a070:	f880 c0a0 	strb.w	ip, [r0, #160]	@ 0xa0
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a074:	6359      	str	r1, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a076:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800a078:	691a      	ldr	r2, [r3, #16]
 800a07a:	07d2      	lsls	r2, r2, #31
 800a07c:	d5fc      	bpl.n	800a078 <R3_2_RLTurnOnLowSides+0x18>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800a07e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a080:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a084:	645a      	str	r2, [r3, #68]	@ 0x44
  if (ES_GPIO == pHandle->_Super.LowSideOutputs)
 800a086:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 800a08a:	2b02      	cmp	r3, #2
 800a08c:	d000      	beq.n	800a090 <R3_2_RLTurnOnLowSides+0x30>
 800a08e:	4770      	bx	lr
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800a090:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	@ 0x3c
{
 800a094:	b410      	push	{r4}
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800a096:	6c43      	ldr	r3, [r0, #68]	@ 0x44
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800a098:	f8b0 4048 	ldrh.w	r4, [r0, #72]	@ 0x48
 800a09c:	6194      	str	r4, [r2, #24]
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800a09e:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800a0a2:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
  WRITE_REG(GPIOx->BRR, PinMask);
 800a0a6:	628c      	str	r4, [r1, #40]	@ 0x28
}
 800a0a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a0ac:	629a      	str	r2, [r3, #40]	@ 0x28
 800a0ae:	4770      	bx	lr

0800a0b0 <R3_2_Init>:
{
 800a0b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    R3_3_OPAMPParams_t *OPAMPParams = pHandle->pParams_str->OPAMPParams;
 800a0b4:	f8d0 409c 	ldr.w	r4, [r0, #156]	@ 0x9c
    ADC_TypeDef *ADCx_1 = pHandle->pParams_str->ADCDataReg1[0];
 800a0b8:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
    ADC_TypeDef *ADCx_2 = pHandle->pParams_str->ADCDataReg2[0];
 800a0ba:	6d26      	ldr	r6, [r4, #80]	@ 0x50
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800a0bc:	687a      	ldr	r2, [r7, #4]
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a0be:	6825      	ldr	r5, [r4, #0]
    COMP_TypeDef *COMP_OCPBx = pHandle->pParams_str->CompOCPBSelection;
 800a0c0:	f8d4 b00c 	ldr.w	fp, [r4, #12]
{
 800a0c4:	4680      	mov	r8, r0
    DAC_TypeDef *DAC_OCPBx = pHandle->pParams_str->DAC_OCP_BSelection;
 800a0c6:	e9d4 c006 	ldrd	ip, r0, [r4, #24]
{
 800a0ca:	b087      	sub	sp, #28
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800a0cc:	f04f 0e04 	mov.w	lr, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800a0d0:	f022 0204 	bic.w	r2, r2, #4
    DAC_TypeDef *DAC_OCPBx = pHandle->pParams_str->DAC_OCP_BSelection;
 800a0d4:	9000      	str	r0, [sp, #0]
    DAC_TypeDef *DAC_OCPCx = pHandle->pParams_str->DAC_OCP_CSelection;
 800a0d6:	6a20      	ldr	r0, [r4, #32]
 800a0d8:	9001      	str	r0, [sp, #4]
    COMP_TypeDef *COMP_OCPAx = pHandle->pParams_str->CompOCPASelection;
 800a0da:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
    DAC_TypeDef *DAC_OVPx = pHandle->pParams_str->DAC_OVP_Selection;
 800a0de:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800a0e0:	9002      	str	r0, [sp, #8]
    COMP_TypeDef *COMP_OVPx = pHandle->pParams_str->CompOVPSelection;
 800a0e2:	e9d4 a904 	ldrd	sl, r9, [r4, #16]
 800a0e6:	607a      	str	r2, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800a0e8:	f8c7 e000 	str.w	lr, [r7]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 800a0ec:	687a      	ldr	r2, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 800a0ee:	2020      	movs	r0, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 800a0f0:	f022 0220 	bic.w	r2, r2, #32
 800a0f4:	607a      	str	r2, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 800a0f6:	6038      	str	r0, [r7, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800a0f8:	6872      	ldr	r2, [r6, #4]
 800a0fa:	f022 0204 	bic.w	r2, r2, #4
 800a0fe:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800a100:	f8c6 e000 	str.w	lr, [r6]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 800a104:	6872      	ldr	r2, [r6, #4]
 800a106:	f022 0220 	bic.w	r2, r2, #32
 800a10a:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 800a10c:	6030      	str	r0, [r6, #0]
      if (TIM1 ==  TIMx)
 800a10e:	4a85      	ldr	r2, [pc, #532]	@ (800a324 <R3_2_Init+0x274>)
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 800a110:	4885      	ldr	r0, [pc, #532]	@ (800a328 <R3_2_Init+0x278>)
 800a112:	4295      	cmp	r5, r2
 800a114:	6902      	ldr	r2, [r0, #16]
 800a116:	bf0c      	ite	eq
 800a118:	f442 6200 	orreq.w	r2, r2, #2048	@ 0x800
 800a11c:	f442 5200 	orrne.w	r2, r2, #8192	@ 0x2000
 800a120:	6102      	str	r2, [r0, #16]
      if (OPAMPParams != NULL)
 800a122:	b181      	cbz	r1, 800a146 <R3_2_Init+0x96>
        LL_OPAMP_Enable(OPAMPParams->OPAMPSelect_1[1]);
 800a124:	e9d1 2000 	ldrd	r2, r0, [r1]
  * @param  OPAMPx OPAMP instance
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_Enable(OPAMP_TypeDef *OPAMPx)
{
  SET_BIT(OPAMPx->CSR, OPAMP_CSR_OPAMPxEN);
 800a128:	f8d2 e000 	ldr.w	lr, [r2]
        LL_OPAMP_Enable(OPAMPParams->OPAMPSelect_2[0]);
 800a12c:	6989      	ldr	r1, [r1, #24]
 800a12e:	f04e 0e01 	orr.w	lr, lr, #1
 800a132:	f8c2 e000 	str.w	lr, [r2]
 800a136:	6802      	ldr	r2, [r0, #0]
 800a138:	f042 0201 	orr.w	r2, r2, #1
 800a13c:	6002      	str	r2, [r0, #0]
 800a13e:	680a      	ldr	r2, [r1, #0]
 800a140:	f042 0201 	orr.w	r2, r2, #1
 800a144:	600a      	str	r2, [r1, #0]
      if (COMP_OCPAx != NULL)
 800a146:	b1b3      	cbz	r3, 800a176 <R3_2_Init+0xc6>
        if ((pHandle->pParams_str->CompOCPAInvInput_MODE != EXT_MODE) && (DAC_OCPAx != MC_NULL))
 800a148:	f894 20a7 	ldrb.w	r2, [r4, #167]	@ 0xa7
 800a14c:	2a01      	cmp	r2, #1
 800a14e:	d00a      	beq.n	800a166 <R3_2_Init+0xb6>
 800a150:	f1bc 0f00 	cmp.w	ip, #0
 800a154:	d007      	beq.n	800a166 <R3_2_Init+0xb6>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPA, DAC_OCPAx,
 800a156:	f8b4 20a2 	ldrh.w	r2, [r4, #162]	@ 0xa2
 800a15a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800a15c:	9303      	str	r3, [sp, #12]
 800a15e:	4661      	mov	r1, ip
 800a160:	f7ff ff34 	bl	8009fcc <R3_2_SetAOReferenceVoltage>
 800a164:	9b03      	ldr	r3, [sp, #12]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Enable(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 800a166:	681a      	ldr	r2, [r3, #0]
 800a168:	f042 0201 	orr.w	r2, r2, #1
 800a16c:	601a      	str	r2, [r3, #0]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Lock(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 800a16e:	681a      	ldr	r2, [r3, #0]
 800a170:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800a174:	601a      	str	r2, [r3, #0]
      if (COMP_OCPBx != NULL)
 800a176:	f1bb 0f00 	cmp.w	fp, #0
 800a17a:	d017      	beq.n	800a1ac <R3_2_Init+0xfc>
        if ((pHandle->pParams_str->CompOCPBInvInput_MODE != EXT_MODE) && (DAC_OCPBx != MC_NULL))
 800a17c:	f894 30a8 	ldrb.w	r3, [r4, #168]	@ 0xa8
 800a180:	2b01      	cmp	r3, #1
 800a182:	d007      	beq.n	800a194 <R3_2_Init+0xe4>
 800a184:	9b00      	ldr	r3, [sp, #0]
 800a186:	b12b      	cbz	r3, 800a194 <R3_2_Init+0xe4>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPB, DAC_OCPBx,
 800a188:	f8b4 20a2 	ldrh.w	r2, [r4, #162]	@ 0xa2
 800a18c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800a18e:	4619      	mov	r1, r3
 800a190:	f7ff ff1c 	bl	8009fcc <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 800a194:	f8db 3000 	ldr.w	r3, [fp]
 800a198:	f043 0301 	orr.w	r3, r3, #1
 800a19c:	f8cb 3000 	str.w	r3, [fp]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 800a1a0:	f8db 3000 	ldr.w	r3, [fp]
 800a1a4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a1a8:	f8cb 3000 	str.w	r3, [fp]
      if (COMP_OCPCx != NULL)
 800a1ac:	f1ba 0f00 	cmp.w	sl, #0
 800a1b0:	d017      	beq.n	800a1e2 <R3_2_Init+0x132>
        if ((pHandle->pParams_str->CompOCPCInvInput_MODE != EXT_MODE)  && (DAC_OCPCx != MC_NULL))
 800a1b2:	f894 30a9 	ldrb.w	r3, [r4, #169]	@ 0xa9
 800a1b6:	2b01      	cmp	r3, #1
 800a1b8:	d007      	beq.n	800a1ca <R3_2_Init+0x11a>
 800a1ba:	9b01      	ldr	r3, [sp, #4]
 800a1bc:	b12b      	cbz	r3, 800a1ca <R3_2_Init+0x11a>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPC, DAC_OCPCx,
 800a1be:	f8b4 20a2 	ldrh.w	r2, [r4, #162]	@ 0xa2
 800a1c2:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800a1c4:	4619      	mov	r1, r3
 800a1c6:	f7ff ff01 	bl	8009fcc <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 800a1ca:	f8da 3000 	ldr.w	r3, [sl]
 800a1ce:	f043 0301 	orr.w	r3, r3, #1
 800a1d2:	f8ca 3000 	str.w	r3, [sl]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 800a1d6:	f8da 3000 	ldr.w	r3, [sl]
 800a1da:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a1de:	f8ca 3000 	str.w	r3, [sl]
      if (COMP_OVPx != NULL)
 800a1e2:	f1b9 0f00 	cmp.w	r9, #0
 800a1e6:	d017      	beq.n	800a218 <R3_2_Init+0x168>
        if ((pHandle->pParams_str->CompOVPInvInput_MODE != EXT_MODE) && (DAC_OVPx != MC_NULL))
 800a1e8:	f894 30aa 	ldrb.w	r3, [r4, #170]	@ 0xaa
 800a1ec:	2b01      	cmp	r3, #1
 800a1ee:	d007      	beq.n	800a200 <R3_2_Init+0x150>
 800a1f0:	9b02      	ldr	r3, [sp, #8]
 800a1f2:	b12b      	cbz	r3, 800a200 <R3_2_Init+0x150>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OVP, DAC_OVPx,
 800a1f4:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	@ 0xa4
 800a1f8:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800a1fa:	4619      	mov	r1, r3
 800a1fc:	f7ff fee6 	bl	8009fcc <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 800a200:	f8d9 3000 	ldr.w	r3, [r9]
 800a204:	f043 0301 	orr.w	r3, r3, #1
 800a208:	f8c9 3000 	str.w	r3, [r9]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 800a20c:	f8d9 3000 	ldr.w	r3, [r9]
 800a210:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a214:	f8c9 3000 	str.w	r3, [r9]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	07da      	lsls	r2, r3, #31
 800a21c:	d553      	bpl.n	800a2c6 <R3_2_Init+0x216>
 800a21e:	68b3      	ldr	r3, [r6, #8]
 800a220:	07db      	lsls	r3, r3, #31
 800a222:	d54c      	bpl.n	800a2be <R3_2_Init+0x20e>
  volatile uint32_t Brk2Timeout = 1000;
 800a224:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a228:	9305      	str	r3, [sp, #20]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800a22a:	682b      	ldr	r3, [r5, #0]
 800a22c:	f023 0301 	bic.w	r3, r3, #1
 800a230:	602b      	str	r3, [r5, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800a232:	686b      	ldr	r3, [r5, #4]
 800a234:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a238:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a23c:	606b      	str	r3, [r5, #4]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800a23e:	69ab      	ldr	r3, [r5, #24]
 800a240:	f043 0308 	orr.w	r3, r3, #8
 800a244:	61ab      	str	r3, [r5, #24]
 800a246:	69ab      	ldr	r3, [r5, #24]
 800a248:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800a24c:	61ab      	str	r3, [r5, #24]
 800a24e:	69eb      	ldr	r3, [r5, #28]
 800a250:	f043 0308 	orr.w	r3, r3, #8
 800a254:	61eb      	str	r3, [r5, #28]
 800a256:	69eb      	ldr	r3, [r5, #28]
 800a258:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800a25c:	61eb      	str	r3, [r5, #28]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800a25e:	696b      	ldr	r3, [r5, #20]
 800a260:	f043 0301 	orr.w	r3, r3, #1
 800a264:	616b      	str	r3, [r5, #20]
  if (2U == pHandle->pParams_str->FreqRatio)
 800a266:	f894 30ab 	ldrb.w	r3, [r4, #171]	@ 0xab
 800a26a:	2b02      	cmp	r3, #2
 800a26c:	d046      	beq.n	800a2fc <R3_2_Init+0x24c>
    if (M1 == pHandle->_Super.Motor)
 800a26e:	f898 3078 	ldrb.w	r3, [r8, #120]	@ 0x78
 800a272:	2b00      	cmp	r3, #0
 800a274:	d034      	beq.n	800a2e0 <R3_2_Init+0x230>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 800a276:	f06f 0380 	mvn.w	r3, #128	@ 0x80
 800a27a:	612b      	str	r3, [r5, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 800a27c:	692b      	ldr	r3, [r5, #16]
  while ((Brk2Timeout != 0u) && (1U == result))
 800a27e:	9a05      	ldr	r2, [sp, #20]
 800a280:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a284:	b172      	cbz	r2, 800a2a4 <R3_2_Init+0x1f4>
 800a286:	b16b      	cbz	r3, 800a2a4 <R3_2_Init+0x1f4>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 800a288:	f46f 7180 	mvn.w	r1, #256	@ 0x100
 800a28c:	e000      	b.n	800a290 <R3_2_Init+0x1e0>
 800a28e:	b14b      	cbz	r3, 800a2a4 <R3_2_Init+0x1f4>
 800a290:	6129      	str	r1, [r5, #16]
    Brk2Timeout--;
 800a292:	9b05      	ldr	r3, [sp, #20]
 800a294:	3b01      	subs	r3, #1
 800a296:	9305      	str	r3, [sp, #20]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 800a298:	692b      	ldr	r3, [r5, #16]
  while ((Brk2Timeout != 0u) && (1U == result))
 800a29a:	9a05      	ldr	r2, [sp, #20]
 800a29c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a2a0:	2a00      	cmp	r2, #0
 800a2a2:	d1f4      	bne.n	800a28e <R3_2_Init+0x1de>
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 800a2a4:	68eb      	ldr	r3, [r5, #12]
 800a2a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2aa:	60eb      	str	r3, [r5, #12]
  SET_BIT(TIMx->CCER, Channels);
 800a2ac:	6a2b      	ldr	r3, [r5, #32]
 800a2ae:	f443 63aa 	orr.w	r3, r3, #1360	@ 0x550
 800a2b2:	f043 0305 	orr.w	r3, r3, #5
 800a2b6:	622b      	str	r3, [r5, #32]
}
 800a2b8:	b007      	add	sp, #28
 800a2ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        R3_2_ADCxInit(ADCx_2);
 800a2be:	4630      	mov	r0, r6
 800a2c0:	f7ff fbc2 	bl	8009a48 <R3_2_ADCxInit>
 800a2c4:	e7ae      	b.n	800a224 <R3_2_Init+0x174>
        R3_2_ADCxInit(ADCx_1);
 800a2c6:	4638      	mov	r0, r7
 800a2c8:	f7ff fbbe 	bl	8009a48 <R3_2_ADCxInit>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 800a2cc:	2340      	movs	r3, #64	@ 0x40
 800a2ce:	603b      	str	r3, [r7, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2d6:	607b      	str	r3, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800a2d8:	68b3      	ldr	r3, [r6, #8]
 800a2da:	07db      	lsls	r3, r3, #31
 800a2dc:	d4a2      	bmi.n	800a224 <R3_2_Init+0x174>
 800a2de:	e7ee      	b.n	800a2be <R3_2_Init+0x20e>
      if (1U == pHandle->pParams_str->RepetitionCounter)
 800a2e0:	f894 30a6 	ldrb.w	r3, [r4, #166]	@ 0xa6
 800a2e4:	2b01      	cmp	r3, #1
 800a2e6:	d00d      	beq.n	800a304 <R3_2_Init+0x254>
      else if (3U == pHandle->pParams_str->RepetitionCounter)
 800a2e8:	2b03      	cmp	r3, #3
 800a2ea:	d1c4      	bne.n	800a276 <R3_2_Init+0x1c6>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800a2ec:	2201      	movs	r2, #1
 800a2ee:	632a      	str	r2, [r5, #48]	@ 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800a2f0:	696a      	ldr	r2, [r5, #20]
 800a2f2:	f042 0201 	orr.w	r2, r2, #1
 800a2f6:	616a      	str	r2, [r5, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800a2f8:	632b      	str	r3, [r5, #48]	@ 0x30
}
 800a2fa:	e7bc      	b.n	800a276 <R3_2_Init+0x1c6>
    if (HIGHER_FREQ == pHandle->pParams_str->IsHigherFreqTim)
 800a2fc:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 800a300:	2b01      	cmp	r3, #1
 800a302:	d004      	beq.n	800a30e <R3_2_Init+0x25e>
        LL_TIM_SetCounter(TIMx, (uint32_t)(pHandle->Half_PWMPeriod) - 1U);
 800a304:	f8b8 3094 	ldrh.w	r3, [r8, #148]	@ 0x94
 800a308:	3b01      	subs	r3, #1
  WRITE_REG(TIMx->CNT, Counter);
 800a30a:	626b      	str	r3, [r5, #36]	@ 0x24
}
 800a30c:	e7b3      	b.n	800a276 <R3_2_Init+0x1c6>
      if (3U == pHandle->pParams_str->RepetitionCounter)
 800a30e:	f894 20a6 	ldrb.w	r2, [r4, #166]	@ 0xa6
 800a312:	2a03      	cmp	r2, #3
 800a314:	d1f6      	bne.n	800a304 <R3_2_Init+0x254>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800a316:	632b      	str	r3, [r5, #48]	@ 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800a318:	696b      	ldr	r3, [r5, #20]
 800a31a:	f043 0301 	orr.w	r3, r3, #1
 800a31e:	616b      	str	r3, [r5, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800a320:	632a      	str	r2, [r5, #48]	@ 0x30
}
 800a322:	e7ef      	b.n	800a304 <R3_2_Init+0x254>
 800a324:	40012c00 	.word	0x40012c00
 800a328:	e0042000 	.word	0xe0042000

0800a32c <R3_2_SetOffsetCalib>:
{
 800a32c:	b410      	push	{r4}
    pHandle->PhaseAOffset = (uint32_t)offsets->phaseAOffset;
 800a32e:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
 800a332:	680b      	ldr	r3, [r1, #0]
 800a334:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    pHdl->offsetCalibStatus = true;
 800a338:	2301      	movs	r3, #1
    pHandle->PhaseAOffset = (uint32_t)offsets->phaseAOffset;
 800a33a:	e9c0 4223 	strd	r4, r2, [r0, #140]	@ 0x8c
    pHdl->offsetCalibStatus = true;
 800a33e:	f880 307f 	strb.w	r3, [r0, #127]	@ 0x7f
}
 800a342:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a346:	4770      	bx	lr

0800a348 <R3_2_GetOffsetCalib>:
  offsets->phaseAOffset = (int32_t)pHandle->PhaseAOffset;
 800a348:	e9d0 2323 	ldrd	r2, r3, [r0, #140]	@ 0x8c
 800a34c:	f8d0 0088 	ldr.w	r0, [r0, #136]	@ 0x88
 800a350:	608b      	str	r3, [r1, #8]
 800a352:	e9c1 0200 	strd	r0, r2, [r1]
}
 800a356:	4770      	bx	lr

0800a358 <R3_2_CurrentReadingPolarization>:
{
 800a358:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a35a:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 800a35e:	681d      	ldr	r5, [r3, #0]
  ADC_TypeDef *ADCx_1 = pHandle->pParams_str->ADCDataReg1[0];
 800a360:	6b9f      	ldr	r7, [r3, #56]	@ 0x38
  ADC_TypeDef *ADCx_2 = pHandle->pParams_str->ADCDataReg2[0];
 800a362:	6d1e      	ldr	r6, [r3, #80]	@ 0x50
  if (true == pHandle->_Super.offsetCalibStatus)
 800a364:	f890 307f 	ldrb.w	r3, [r0, #127]	@ 0x7f
{
 800a368:	b083      	sub	sp, #12
 800a36a:	4604      	mov	r4, r0
  if (true == pHandle->_Super.offsetCalibStatus)
 800a36c:	b1ab      	cbz	r3, 800a39a <R3_2_CurrentReadingPolarization+0x42>
  MODIFY_REG(ADCx->CR,
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	4a46      	ldr	r2, [pc, #280]	@ (800a48c <R3_2_CurrentReadingPolarization+0x134>)
 800a372:	4013      	ands	r3, r2
 800a374:	f043 0308 	orr.w	r3, r3, #8
 800a378:	60bb      	str	r3, [r7, #8]
 800a37a:	68b3      	ldr	r3, [r6, #8]
 800a37c:	4013      	ands	r3, r2
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 800a37e:	2180      	movs	r1, #128	@ 0x80
 800a380:	f043 0308 	orr.w	r3, r3, #8
 800a384:	60b3      	str	r3, [r6, #8]
 800a386:	f8a0 1096 	strh.w	r1, [r0, #150]	@ 0x96
  pHandle->_Super.Sector = SECTOR_5;
 800a38a:	2204      	movs	r2, #4
  pHandle->_Super.BrakeActionLock = false;
 800a38c:	2300      	movs	r3, #0
  pHandle->_Super.Sector = SECTOR_5;
 800a38e:	f884 207a 	strb.w	r2, [r4, #122]	@ 0x7a
  pHandle->_Super.BrakeActionLock = false;
 800a392:	f884 3083 	strb.w	r3, [r4, #131]	@ 0x83
}
 800a396:	b003      	add	sp, #12
 800a398:	bdf0      	pop	{r4, r5, r6, r7, pc}
    GetPhaseCurrCbSave = pHandle->_Super.pFctGetPhaseCurrents;
 800a39a:	6802      	ldr	r2, [r0, #0]
 800a39c:	9200      	str	r2, [sp, #0]
    pHandle->PhaseAOffset = 0U;
 800a39e:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
    SetSampPointSectXCbSave = pHandle->_Super.pFctSetADCSampPointSectX;
 800a3a2:	6942      	ldr	r2, [r0, #20]
 800a3a4:	9201      	str	r2, [sp, #4]
    pHandle->PolarizationCounter = 0U;
 800a3a6:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98
    pHandle->PhaseCOffset = 0U;
 800a3aa:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  CLEAR_BIT(TIMx->CCER, Channels);
 800a3ae:	6a2b      	ldr	r3, [r5, #32]
 800a3b0:	f423 63aa 	bic.w	r3, r3, #1360	@ 0x550
 800a3b4:	f023 0305 	bic.w	r3, r3, #5
 800a3b8:	622b      	str	r3, [r5, #32]
    pHandle->PolarizationSector=SECTOR_5;
 800a3ba:	2304      	movs	r3, #4
 800a3bc:	f880 3099 	strb.w	r3, [r0, #153]	@ 0x99
    pHandle->_Super.Sector = SECTOR_5;
 800a3c0:	f880 307a 	strb.w	r3, [r0, #122]	@ 0x7a
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationAB;
 800a3c4:	4b32      	ldr	r3, [pc, #200]	@ (800a490 <R3_2_CurrentReadingPolarization+0x138>)
 800a3c6:	6003      	str	r3, [r0, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointPolarization;
 800a3c8:	4b32      	ldr	r3, [pc, #200]	@ (800a494 <R3_2_CurrentReadingPolarization+0x13c>)
 800a3ca:	6143      	str	r3, [r0, #20]
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 800a3cc:	2380      	movs	r3, #128	@ 0x80
 800a3ce:	f8a0 3096 	strh.w	r3, [r0, #150]	@ 0x96
    R3_2_SwitchOnPWM(&pHandle->_Super);
 800a3d2:	f7ff fcc7 	bl	8009d64 <R3_2_SwitchOnPWM>
    while (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_OC4REF)
 800a3d6:	4a30      	ldr	r2, [pc, #192]	@ (800a498 <R3_2_CurrentReadingPolarization+0x140>)
 800a3d8:	686b      	ldr	r3, [r5, #4]
 800a3da:	4013      	ands	r3, r2
 800a3dc:	2b70      	cmp	r3, #112	@ 0x70
 800a3de:	d1fb      	bne.n	800a3d8 <R3_2_CurrentReadingPolarization+0x80>
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	4a2a      	ldr	r2, [pc, #168]	@ (800a48c <R3_2_CurrentReadingPolarization+0x134>)
 800a3e4:	4013      	ands	r3, r2
 800a3e6:	f043 0308 	orr.w	r3, r3, #8
 800a3ea:	60bb      	str	r3, [r7, #8]
 800a3ec:	68b3      	ldr	r3, [r6, #8]
 800a3ee:	4013      	ands	r3, r2
 800a3f0:	f043 0308 	orr.w	r3, r3, #8
                           pHandle->pParams_str->RepetitionCounter,
 800a3f4:	f8d4 209c 	ldr.w	r2, [r4, #156]	@ 0x9c
 800a3f8:	60b3      	str	r3, [r6, #8]
    waitForPolarizationEnd(TIMx,
 800a3fa:	f104 0798 	add.w	r7, r4, #152	@ 0x98
 800a3fe:	f104 0656 	add.w	r6, r4, #86	@ 0x56
 800a402:	f892 20a6 	ldrb.w	r2, [r2, #166]	@ 0xa6
 800a406:	4631      	mov	r1, r6
 800a408:	463b      	mov	r3, r7
 800a40a:	4628      	mov	r0, r5
 800a40c:	f7f9 f9ce 	bl	80037ac <waitForPolarizationEnd>
    R3_2_SwitchOffPWM(&pHandle->_Super);
 800a410:	4620      	mov	r0, r4
 800a412:	f7ff fcf1 	bl	8009df8 <R3_2_SwitchOffPWM>
    pHandle->PolarizationCounter = 0U;
 800a416:	2300      	movs	r3, #0
 800a418:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
    pHandle->PolarizationSector=SECTOR_1;
 800a41c:	f884 3099 	strb.w	r3, [r4, #153]	@ 0x99
    pHandle->_Super.Sector = SECTOR_1;
 800a420:	f884 307a 	strb.w	r3, [r4, #122]	@ 0x7a
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationC;
 800a424:	4b1d      	ldr	r3, [pc, #116]	@ (800a49c <R3_2_CurrentReadingPolarization+0x144>)
 800a426:	6023      	str	r3, [r4, #0]
    R3_2_SwitchOnPWM(&pHandle->_Super);
 800a428:	4620      	mov	r0, r4
 800a42a:	f7ff fc9b 	bl	8009d64 <R3_2_SwitchOnPWM>
                           pHandle->pParams_str->RepetitionCounter,
 800a42e:	f8d4 209c 	ldr.w	r2, [r4, #156]	@ 0x9c
    waitForPolarizationEnd(TIMx,
 800a432:	463b      	mov	r3, r7
 800a434:	f892 20a6 	ldrb.w	r2, [r2, #166]	@ 0xa6
 800a438:	4631      	mov	r1, r6
 800a43a:	4628      	mov	r0, r5
 800a43c:	f7f9 f9b6 	bl	80037ac <waitForPolarizationEnd>
    R3_2_SwitchOffPWM(&pHandle->_Super);
 800a440:	4620      	mov	r0, r4
 800a442:	f7ff fcd9 	bl	8009df8 <R3_2_SwitchOffPWM>
    pHandle->PhaseBOffset /= NB_CONVERSIONS;
 800a446:	e9d4 2322 	ldrd	r2, r3, [r4, #136]	@ 0x88
    pHandle->PhaseAOffset /= NB_CONVERSIONS;
 800a44a:	0912      	lsrs	r2, r2, #4
    pHandle->PhaseBOffset /= NB_CONVERSIONS;
 800a44c:	091b      	lsrs	r3, r3, #4
 800a44e:	e9c4 2322 	strd	r2, r3, [r4, #136]	@ 0x88
    pHandle->PhaseCOffset /= NB_CONVERSIONS;
 800a452:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
    LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod >> 1u);
 800a456:	f8b4 3094 	ldrh.w	r3, [r4, #148]	@ 0x94
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 800a45a:	9800      	ldr	r0, [sp, #0]
 800a45c:	6020      	str	r0, [r4, #0]
    pHandle->_Super.offsetCalibStatus = true;
 800a45e:	2101      	movs	r1, #1
    pHandle->PhaseCOffset /= NB_CONVERSIONS;
 800a460:	0912      	lsrs	r2, r2, #4
 800a462:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod >> 1u);
 800a466:	40cb      	lsrs	r3, r1
    pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 800a468:	9a01      	ldr	r2, [sp, #4]
    pHandle->_Super.offsetCalibStatus = true;
 800a46a:	f884 107f 	strb.w	r1, [r4, #127]	@ 0x7f
    pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 800a46e:	6162      	str	r2, [r4, #20]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a470:	636b      	str	r3, [r5, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800a472:	63ab      	str	r3, [r5, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800a474:	63eb      	str	r3, [r5, #60]	@ 0x3c
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_COM(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_COMG);
 800a476:	696b      	ldr	r3, [r5, #20]
 800a478:	f043 0320 	orr.w	r3, r3, #32
 800a47c:	616b      	str	r3, [r5, #20]
  SET_BIT(TIMx->CCER, Channels);
 800a47e:	6a2b      	ldr	r3, [r5, #32]
 800a480:	f443 63aa 	orr.w	r3, r3, #1360	@ 0x550
 800a484:	f043 0305 	orr.w	r3, r3, #5
 800a488:	622b      	str	r3, [r5, #32]
}
 800a48a:	e77e      	b.n	800a38a <R3_2_CurrentReadingPolarization+0x32>
 800a48c:	7fffffc0 	.word	0x7fffffc0
 800a490:	08009cc5 	.word	0x08009cc5
 800a494:	08009c81 	.word	0x08009c81
 800a498:	02000070 	.word	0x02000070
 800a49c:	08009d19 	.word	0x08009d19

0800a4a0 <R3_2_SetADCSampPointSectX>:
{
 800a4a0:	b530      	push	{r4, r5, lr}
    if ((uint16_t)(pHandle->Half_PWMPeriod - pHdl->lowDuty) > pHandle->pParams_str->Tafter)
 800a4a2:	f8b0 3058 	ldrh.w	r3, [r0, #88]	@ 0x58
 800a4a6:	f8b0 e094 	ldrh.w	lr, [r0, #148]	@ 0x94
 800a4aa:	f8d0 109c 	ldr.w	r1, [r0, #156]	@ 0x9c
 800a4ae:	ebae 0203 	sub.w	r2, lr, r3
 800a4b2:	f8b1 4098 	ldrh.w	r4, [r1, #152]	@ 0x98
 800a4b6:	b292      	uxth	r2, r2
 800a4b8:	42a2      	cmp	r2, r4
 800a4ba:	d917      	bls.n	800a4ec <R3_2_SetADCSampPointSectX+0x4c>
      pHandle->_Super.Sector = SECTOR_5;
 800a4bc:	2204      	movs	r2, #4
      SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t)1;
 800a4be:	f10e 33ff 	add.w	r3, lr, #4294967295
      pHandle->_Super.Sector = SECTOR_5;
 800a4c2:	f880 207a 	strb.w	r2, [r0, #122]	@ 0x7a
      SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t)1;
 800a4c6:	b29b      	uxth	r3, r3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a4c8:	680a      	ldr	r2, [r1, #0]
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t) pHandle->_Super.CntPhA);
 800a4ca:	f8b0 5050 	ldrh.w	r5, [r0, #80]	@ 0x50
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t) pHandle->_Super.CntPhB);
 800a4ce:	f8b0 4052 	ldrh.w	r4, [r0, #82]	@ 0x52
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t) pHandle->_Super.CntPhC);
 800a4d2:	f8b0 1054 	ldrh.w	r1, [r0, #84]	@ 0x54
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a4d6:	6355      	str	r5, [r2, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800a4d8:	6394      	str	r4, [r2, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800a4da:	63d1      	str	r1, [r2, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 800a4dc:	6413      	str	r3, [r2, #64]	@ 0x40
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 800a4de:	6852      	ldr	r2, [r2, #4]
 800a4e0:	4b10      	ldr	r3, [pc, #64]	@ (800a524 <R3_2_SetADCSampPointSectX+0x84>)
 800a4e2:	421a      	tst	r2, r3
}
 800a4e4:	bf14      	ite	ne
 800a4e6:	2001      	movne	r0, #1
 800a4e8:	2000      	moveq	r0, #0
 800a4ea:	bd30      	pop	{r4, r5, pc}
      DeltaDuty = (uint16_t)(pHdl->lowDuty - pHdl->midDuty);
 800a4ec:	f8b0 c05a 	ldrh.w	ip, [r0, #90]	@ 0x5a
 800a4f0:	eba3 0c0c 	sub.w	ip, r3, ip
      if (DeltaDuty > ((uint16_t)(pHandle->Half_PWMPeriod - pHdl->lowDuty) * 2U))
 800a4f4:	fa1f fc8c 	uxth.w	ip, ip
 800a4f8:	ebbc 0f42 	cmp.w	ip, r2, lsl #1
 800a4fc:	d904      	bls.n	800a508 <R3_2_SetADCSampPointSectX+0x68>
        SamplingPoint = pHdl->lowDuty - pHandle->pParams_str->Tbefore;
 800a4fe:	f8b1 209c 	ldrh.w	r2, [r1, #156]	@ 0x9c
 800a502:	1a9b      	subs	r3, r3, r2
 800a504:	b29b      	uxth	r3, r3
 800a506:	e7df      	b.n	800a4c8 <R3_2_SetADCSampPointSectX+0x28>
        SamplingPoint = pHdl->lowDuty + pHandle->pParams_str->Tafter;
 800a508:	4423      	add	r3, r4
 800a50a:	b29b      	uxth	r3, r3
        if (SamplingPoint >= pHandle->Half_PWMPeriod)
 800a50c:	459e      	cmp	lr, r3
 800a50e:	d8db      	bhi.n	800a4c8 <R3_2_SetADCSampPointSectX+0x28>
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - (uint16_t)1;
 800a510:	43db      	mvns	r3, r3
          pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_FALLING;
 800a512:	f44f 7280 	mov.w	r2, #256	@ 0x100
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - (uint16_t)1;
 800a516:	eb03 034e 	add.w	r3, r3, lr, lsl #1
          pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_FALLING;
 800a51a:	f8a0 2096 	strh.w	r2, [r0, #150]	@ 0x96
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - (uint16_t)1;
 800a51e:	b29b      	uxth	r3, r3
 800a520:	e7d2      	b.n	800a4c8 <R3_2_SetADCSampPointSectX+0x28>
 800a522:	bf00      	nop
 800a524:	02000070 	.word	0x02000070

0800a528 <R3_2_TIMx_UP_IRQHandler>:
{
 800a528:	b4f0      	push	{r4, r5, r6, r7}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a52a:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 800a52e:	f890 407a 	ldrb.w	r4, [r0, #122]	@ 0x7a
    R3_3_OPAMPParams_t *OPAMPParams = pHandle->pParams_str->OPAMPParams;
 800a532:	685e      	ldr	r6, [r3, #4]
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a534:	681d      	ldr	r5, [r3, #0]
{
 800a536:	4601      	mov	r1, r0
 800a538:	eb03 0084 	add.w	r0, r3, r4, lsl #2
    pHandle->pParams_str->ADCDataReg1[pHandle->_Super.Sector]->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 800a53c:	6b82      	ldr	r2, [r0, #56]	@ 0x38
    if (OPAMPParams != NULL)
 800a53e:	b1d6      	cbz	r6, 800a576 <R3_2_TIMx_UP_IRQHandler+0x4e>
 800a540:	ea4f 0c84 	mov.w	ip, r4, lsl #2
      while (0x0u != pHandle->pParams_str->ADCDataReg1[pHandle->_Super.Sector]->JSQR)
 800a544:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800a546:	2b00      	cmp	r3, #0
 800a548:	d1fc      	bne.n	800a544 <R3_2_TIMx_UP_IRQHandler+0x1c>
      OpampConfig = OPAMPParams->OPAMPConfig1[pHandle->_Super.Sector];
 800a54a:	eb06 030c 	add.w	r3, r6, ip
 800a54e:	6b1f      	ldr	r7, [r3, #48]	@ 0x30
      if (OpampConfig != OPAMP_UNCHANGED)
 800a550:	f1b7 3fff 	cmp.w	r7, #4294967295
 800a554:	d006      	beq.n	800a564 <R3_2_TIMx_UP_IRQHandler+0x3c>
        operationAmp = OPAMPParams->OPAMPSelect_1[pHandle->_Super.Sector];
 800a556:	f856 6024 	ldr.w	r6, [r6, r4, lsl #2]
        MODIFY_REG(operationAmp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL), OpampConfig);
 800a55a:	6834      	ldr	r4, [r6, #0]
 800a55c:	f424 7486 	bic.w	r4, r4, #268	@ 0x10c
 800a560:	433c      	orrs	r4, r7
 800a562:	6034      	str	r4, [r6, #0]
      OpampConfig = OPAMPParams->OPAMPConfig2[pHandle->_Super.Sector];
 800a564:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
      if (OpampConfig != OPAMP_UNCHANGED)
 800a566:	1c66      	adds	r6, r4, #1
 800a568:	d005      	beq.n	800a576 <R3_2_TIMx_UP_IRQHandler+0x4e>
        operationAmp = OPAMPParams->OPAMPSelect_2[pHandle->_Super.Sector];
 800a56a:	699e      	ldr	r6, [r3, #24]
        MODIFY_REG(operationAmp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL), OpampConfig);
 800a56c:	6833      	ldr	r3, [r6, #0]
 800a56e:	f423 7386 	bic.w	r3, r3, #268	@ 0x10c
 800a572:	4323      	orrs	r3, r4
 800a574:	6033      	str	r3, [r6, #0]
    pHandle->pParams_str->ADCDataReg1[pHandle->_Super.Sector]->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 800a576:	f8b1 3096 	ldrh.w	r3, [r1, #150]	@ 0x96
 800a57a:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 800a57c:	431c      	orrs	r4, r3
 800a57e:	64d4      	str	r4, [r2, #76]	@ 0x4c
    pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 800a580:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800a582:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 800a586:	4303      	orrs	r3, r0
 800a588:	64d3      	str	r3, [r2, #76]	@ 0x4c
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800a58a:	686b      	ldr	r3, [r5, #4]
 800a58c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a590:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 800a594:	2280      	movs	r2, #128	@ 0x80
 800a596:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800a59a:	606b      	str	r3, [r5, #4]
}
 800a59c:	f101 0078 	add.w	r0, r1, #120	@ 0x78
 800a5a0:	bcf0      	pop	{r4, r5, r6, r7}
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 800a5a2:	f8a1 2096 	strh.w	r2, [r1, #150]	@ 0x96
}
 800a5a6:	4770      	bx	lr

0800a5a8 <R3_2_RLDetectionModeEnable>:
  if (false == pHandle->_Super.RLDetectionMode)
 800a5a8:	f890 107e 	ldrb.w	r1, [r0, #126]	@ 0x7e
{
 800a5ac:	b410      	push	{r4}
  if (false == pHandle->_Super.RLDetectionMode)
 800a5ae:	2900      	cmp	r1, #0
 800a5b0:	d13d      	bne.n	800a62e <R3_2_RLDetectionModeEnable+0x86>
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a5b2:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 800a5b6:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800a5b8:	699a      	ldr	r2, [r3, #24]
 800a5ba:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800a5be:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 800a5c2:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800a5c6:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800a5c8:	6a1a      	ldr	r2, [r3, #32]
 800a5ca:	f042 0201 	orr.w	r2, r2, #1
 800a5ce:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800a5d0:	6a1a      	ldr	r2, [r3, #32]
 800a5d2:	f022 0204 	bic.w	r2, r2, #4
 800a5d6:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a5d8:	6359      	str	r1, [r3, #52]	@ 0x34
    if (LS_PWM_TIMER == pHandle->_Super.LowSideOutputs)
 800a5da:	f890 207b 	ldrb.w	r2, [r0, #123]	@ 0x7b
 800a5de:	2a01      	cmp	r2, #1
 800a5e0:	d033      	beq.n	800a64a <R3_2_RLDetectionModeEnable+0xa2>
    else if (ES_GPIO ==  pHandle->_Super.LowSideOutputs)
 800a5e2:	2a02      	cmp	r2, #2
 800a5e4:	d10f      	bne.n	800a606 <R3_2_RLDetectionModeEnable+0x5e>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800a5e6:	699a      	ldr	r2, [r3, #24]
 800a5e8:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800a5ec:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 800a5f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a5f4:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800a5f6:	6a1a      	ldr	r2, [r3, #32]
 800a5f8:	f042 0210 	orr.w	r2, r2, #16
 800a5fc:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800a5fe:	6a1a      	ldr	r2, [r3, #32]
 800a600:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a604:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800a606:	69da      	ldr	r2, [r3, #28]
 800a608:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800a60c:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 800a610:	f042 0270 	orr.w	r2, r2, #112	@ 0x70
 800a614:	61da      	str	r2, [r3, #28]
  CLEAR_BIT(TIMx->CCER, Channels);
 800a616:	6a1a      	ldr	r2, [r3, #32]
    pHandle->PhaseAOffset = pHandle->PhaseBOffset; /* Use only the offset of phB */
 800a618:	f8d0 108c 	ldr.w	r1, [r0, #140]	@ 0x8c
 800a61c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a620:	621a      	str	r2, [r3, #32]
 800a622:	6a1a      	ldr	r2, [r3, #32]
 800a624:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a628:	621a      	str	r2, [r3, #32]
 800a62a:	f8c0 1088 	str.w	r1, [r0, #136]	@ 0x88
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 800a62e:	4b0f      	ldr	r3, [pc, #60]	@ (800a66c <R3_2_RLDetectionModeEnable+0xc4>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_2_RLSwitchOnPWM;
 800a630:	490f      	ldr	r1, [pc, #60]	@ (800a670 <R3_2_RLDetectionModeEnable+0xc8>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 800a632:	4a10      	ldr	r2, [pc, #64]	@ (800a674 <R3_2_RLDetectionModeEnable+0xcc>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 800a634:	4c10      	ldr	r4, [pc, #64]	@ (800a678 <R3_2_RLDetectionModeEnable+0xd0>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 800a636:	6103      	str	r3, [r0, #16]
  pHandle->_Super.RLDetectionMode = true;
 800a638:	2301      	movs	r3, #1
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 800a63a:	6004      	str	r4, [r0, #0]
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 800a63c:	e9c0 2101 	strd	r2, r1, [r0, #4]
}
 800a640:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->_Super.RLDetectionMode = true;
 800a644:	f880 307e 	strb.w	r3, [r0, #126]	@ 0x7e
}
 800a648:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800a64a:	699a      	ldr	r2, [r3, #24]
 800a64c:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800a650:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 800a654:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a658:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 800a65a:	6a1a      	ldr	r2, [r3, #32]
 800a65c:	f022 0210 	bic.w	r2, r2, #16
 800a660:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 800a662:	6a1a      	ldr	r2, [r3, #32]
 800a664:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a668:	621a      	str	r2, [r3, #32]
}
 800a66a:	e7cc      	b.n	800a606 <R3_2_RLDetectionModeEnable+0x5e>
 800a66c:	0800a061 	.word	0x0800a061
 800a670:	08009ec9 	.word	0x08009ec9
 800a674:	08009df9 	.word	0x08009df9
 800a678:	08009e75 	.word	0x08009e75

0800a67c <R3_2_RLDetectionModeDisable>:
  if (true ==  pHandle->_Super.RLDetectionMode)
 800a67c:	f890 307e 	ldrb.w	r3, [r0, #126]	@ 0x7e
 800a680:	2b00      	cmp	r3, #0
 800a682:	d03d      	beq.n	800a700 <R3_2_RLDetectionModeDisable+0x84>
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a684:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
    LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod) >> 1);
 800a688:	f8b0 1094 	ldrh.w	r1, [r0, #148]	@ 0x94
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a68c:	681b      	ldr	r3, [r3, #0]
{
 800a68e:	b410      	push	{r4}
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800a690:	699a      	ldr	r2, [r3, #24]
 800a692:	4c40      	ldr	r4, [pc, #256]	@ (800a794 <R3_2_RLDetectionModeDisable+0x118>)
 800a694:	4022      	ands	r2, r4
 800a696:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800a69a:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800a69c:	6a1a      	ldr	r2, [r3, #32]
 800a69e:	f042 0201 	orr.w	r2, r2, #1
 800a6a2:	621a      	str	r2, [r3, #32]
    if (LS_PWM_TIMER == pHandle->_Super.LowSideOutputs)
 800a6a4:	f890 207b 	ldrb.w	r2, [r0, #123]	@ 0x7b
 800a6a8:	2a01      	cmp	r2, #1
    LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod) >> 1);
 800a6aa:	ea4f 0151 	mov.w	r1, r1, lsr #1
    if (LS_PWM_TIMER == pHandle->_Super.LowSideOutputs)
 800a6ae:	d028      	beq.n	800a702 <R3_2_RLDetectionModeDisable+0x86>
    else if (ES_GPIO == pHandle->_Super.LowSideOutputs)
 800a6b0:	2a02      	cmp	r2, #2
 800a6b2:	d04a      	beq.n	800a74a <R3_2_RLDetectionModeDisable+0xce>
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a6b4:	6359      	str	r1, [r3, #52]	@ 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800a6b6:	699a      	ldr	r2, [r3, #24]
 800a6b8:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800a6bc:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 800a6c0:	f442 42c0 	orr.w	r2, r2, #24576	@ 0x6000
 800a6c4:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800a6c6:	6a1a      	ldr	r2, [r3, #32]
 800a6c8:	f042 0210 	orr.w	r2, r2, #16
 800a6cc:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800a6ce:	6399      	str	r1, [r3, #56]	@ 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800a6d0:	69da      	ldr	r2, [r3, #28]
 800a6d2:	4022      	ands	r2, r4
 800a6d4:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800a6d8:	61da      	str	r2, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 800a6da:	6a1a      	ldr	r2, [r3, #32]
 800a6dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a6e0:	621a      	str	r2, [r3, #32]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 800a6e2:	4a2d      	ldr	r2, [pc, #180]	@ (800a798 <R3_2_RLDetectionModeDisable+0x11c>)
  WRITE_REG(TIMx->CCR3, CompareValue);
 800a6e4:	63d9      	str	r1, [r3, #60]	@ 0x3c
    pHandle->_Super.pFctSwitchOnPwm = &R3_2_SwitchOnPWM;
 800a6e6:	492d      	ldr	r1, [pc, #180]	@ (800a79c <R3_2_RLDetectionModeDisable+0x120>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 800a6e8:	6002      	str	r2, [r0, #0]
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 800a6ea:	4a2d      	ldr	r2, [pc, #180]	@ (800a7a0 <R3_2_RLDetectionModeDisable+0x124>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_2_TurnOnLowSides;
 800a6ec:	4c2d      	ldr	r4, [pc, #180]	@ (800a7a4 <R3_2_RLDetectionModeDisable+0x128>)
 800a6ee:	6104      	str	r4, [r0, #16]
    pHandle->_Super.RLDetectionMode = false;
 800a6f0:	2300      	movs	r3, #0
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 800a6f2:	e9c0 2101 	strd	r2, r1, [r0, #4]
}
 800a6f6:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.RLDetectionMode = false;
 800a6fa:	f880 307e 	strb.w	r3, [r0, #126]	@ 0x7e
}
 800a6fe:	4770      	bx	lr
 800a700:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 800a702:	6a1a      	ldr	r2, [r3, #32]
 800a704:	f042 0204 	orr.w	r2, r2, #4
 800a708:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a70a:	6359      	str	r1, [r3, #52]	@ 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800a70c:	699a      	ldr	r2, [r3, #24]
 800a70e:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800a712:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 800a716:	f442 42c0 	orr.w	r2, r2, #24576	@ 0x6000
 800a71a:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800a71c:	6a1a      	ldr	r2, [r3, #32]
 800a71e:	f042 0210 	orr.w	r2, r2, #16
 800a722:	621a      	str	r2, [r3, #32]
 800a724:	6a1a      	ldr	r2, [r3, #32]
 800a726:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a72a:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800a72c:	6399      	str	r1, [r3, #56]	@ 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800a72e:	69da      	ldr	r2, [r3, #28]
 800a730:	4022      	ands	r2, r4
 800a732:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800a736:	61da      	str	r2, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 800a738:	6a1a      	ldr	r2, [r3, #32]
 800a73a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a73e:	621a      	str	r2, [r3, #32]
 800a740:	6a1a      	ldr	r2, [r3, #32]
 800a742:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a746:	621a      	str	r2, [r3, #32]
}
 800a748:	e7cb      	b.n	800a6e2 <R3_2_RLDetectionModeDisable+0x66>
  CLEAR_BIT(TIMx->CCER, Channels);
 800a74a:	6a1a      	ldr	r2, [r3, #32]
 800a74c:	f022 0204 	bic.w	r2, r2, #4
 800a750:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a752:	6359      	str	r1, [r3, #52]	@ 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800a754:	699a      	ldr	r2, [r3, #24]
 800a756:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800a75a:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 800a75e:	f442 42c0 	orr.w	r2, r2, #24576	@ 0x6000
 800a762:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800a764:	6a1a      	ldr	r2, [r3, #32]
 800a766:	f042 0210 	orr.w	r2, r2, #16
 800a76a:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800a76c:	6a1a      	ldr	r2, [r3, #32]
 800a76e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a772:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800a774:	6399      	str	r1, [r3, #56]	@ 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800a776:	69da      	ldr	r2, [r3, #28]
 800a778:	4022      	ands	r2, r4
 800a77a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800a77e:	61da      	str	r2, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 800a780:	6a1a      	ldr	r2, [r3, #32]
 800a782:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a786:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800a788:	6a1a      	ldr	r2, [r3, #32]
 800a78a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a78e:	621a      	str	r2, [r3, #32]
}
 800a790:	e7a7      	b.n	800a6e2 <R3_2_RLDetectionModeDisable+0x66>
 800a792:	bf00      	nop
 800a794:	fffeff8c 	.word	0xfffeff8c
 800a798:	08009b05 	.word	0x08009b05
 800a79c:	08009d65 	.word	0x08009d65
 800a7a0:	08009df9 	.word	0x08009df9
 800a7a4:	08009f79 	.word	0x08009f79

0800a7a8 <R3_2_RLDetectionModeSetDuty>:
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a7a8:	f8d0 209c 	ldr.w	r2, [r0, #156]	@ 0x9c
    val = (((uint32_t)pHandle->Half_PWMPeriod) * ((uint32_t)hDuty)) >> 16;
 800a7ac:	f8b0 c094 	ldrh.w	ip, [r0, #148]	@ 0x94
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a7b0:	6812      	ldr	r2, [r2, #0]
{
 800a7b2:	4603      	mov	r3, r0
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800a7b4:	69d0      	ldr	r0, [r2, #28]
 800a7b6:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
    val = (((uint32_t)pHandle->Half_PWMPeriod) * ((uint32_t)hDuty)) >> 16;
 800a7ba:	fb0c f101 	mul.w	r1, ip, r1
 800a7be:	f420 40e6 	bic.w	r0, r0, #29440	@ 0x7300
{
 800a7c2:	b410      	push	{r4}
    val = (((uint32_t)pHandle->Half_PWMPeriod) * ((uint32_t)hDuty)) >> 16;
 800a7c4:	0c09      	lsrs	r1, r1, #16
    pHandle->ADCRegularLocked = true;
 800a7c6:	2401      	movs	r4, #1
 800a7c8:	f440 40e0 	orr.w	r0, r0, #28672	@ 0x7000
 800a7cc:	f883 40a0 	strb.w	r4, [r3, #160]	@ 0xa0
    pHandle->_Super.CntPhA = (uint16_t)val;
 800a7d0:	f8a3 1050 	strh.w	r1, [r3, #80]	@ 0x50
 800a7d4:	61d0      	str	r0, [r2, #28]
    LL_TIM_OC_SetCompareCH4(TIMx, (((uint32_t)pHandle->Half_PWMPeriod) - ((uint32_t)pHandle->_Super.Ton)));
 800a7d6:	f8b3 0074 	ldrh.w	r0, [r3, #116]	@ 0x74
    LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)pHandle->_Super.Toff);
 800a7da:	f8b3 4076 	ldrh.w	r4, [r3, #118]	@ 0x76
    LL_TIM_OC_SetCompareCH4(TIMx, (((uint32_t)pHandle->Half_PWMPeriod) - ((uint32_t)pHandle->_Super.Ton)));
 800a7de:	ebac 0000 	sub.w	r0, ip, r0
  WRITE_REG(TIMx->CCR4, CompareValue);
 800a7e2:	6410      	str	r0, [r2, #64]	@ 0x40
  WRITE_REG(TIMx->CCR3, CompareValue);
 800a7e4:	63d4      	str	r4, [r2, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a7e6:	6351      	str	r1, [r2, #52]	@ 0x34
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800a7e8:	6851      	ldr	r1, [r2, #4]
    if (1U ==  pHandle->_Super.SWerror)
 800a7ea:	f8b3 0056 	ldrh.w	r0, [r3, #86]	@ 0x56
 800a7ee:	f021 7100 	bic.w	r1, r1, #33554432	@ 0x2000000
 800a7f2:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
    pHdl->Sector = SECTOR_4;
 800a7f6:	f04f 0c03 	mov.w	ip, #3
 800a7fa:	f041 0170 	orr.w	r1, r1, #112	@ 0x70
 800a7fe:	6051      	str	r1, [r2, #4]
    if (1U ==  pHandle->_Super.SWerror)
 800a800:	2801      	cmp	r0, #1
    pHdl->Sector = SECTOR_4;
 800a802:	f883 c07a 	strb.w	ip, [r3, #122]	@ 0x7a
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 800a806:	6852      	ldr	r2, [r2, #4]
    if (1U ==  pHandle->_Super.SWerror)
 800a808:	d007      	beq.n	800a81a <R3_2_RLDetectionModeSetDuty+0x72>
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 800a80a:	4b07      	ldr	r3, [pc, #28]	@ (800a828 <R3_2_RLDetectionModeSetDuty+0x80>)
}
 800a80c:	f85d 4b04 	ldr.w	r4, [sp], #4
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 800a810:	421a      	tst	r2, r3
 800a812:	bf14      	ite	ne
 800a814:	2001      	movne	r0, #1
 800a816:	2000      	moveq	r0, #0
}
 800a818:	4770      	bx	lr
      pHandle->_Super.SWerror = 0U;
 800a81a:	2200      	movs	r2, #0
}
 800a81c:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->_Super.SWerror = 0U;
 800a820:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800a824:	4770      	bx	lr
 800a826:	bf00      	nop
 800a828:	02000070 	.word	0x02000070

0800a82c <R3_2_RLTurnOnLowSidesAndStart>:
  }
  else
  {
#endif
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a82c:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 800a830:	681b      	ldr	r3, [r3, #0]

    pHandle->ADCRegularLocked=true;
 800a832:	2101      	movs	r1, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a834:	f06f 0201 	mvn.w	r2, #1
{
 800a838:	b430      	push	{r4, r5}
    pHandle->ADCRegularLocked=true;
 800a83a:	f880 10a0 	strb.w	r1, [r0, #160]	@ 0xa0
 800a83e:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800a840:	691a      	ldr	r2, [r3, #16]
 800a842:	07d1      	lsls	r1, r2, #31
 800a844:	d5fc      	bpl.n	800a840 <R3_2_RLTurnOnLowSidesAndStart+0x14>
    LL_TIM_ClearFlag_UPDATE(TIMx);

    LL_TIM_OC_SetCompareCH1(TIMx, 0x0U);
    LL_TIM_OC_SetCompareCH2(TIMx, 0x0U);
    LL_TIM_OC_SetCompareCH3(TIMx, 0x0U);
    LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t )pHandle->Half_PWMPeriod) - 5U);
 800a846:	f8b0 2094 	ldrh.w	r2, [r0, #148]	@ 0x94
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a84a:	2100      	movs	r1, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a84c:	f06f 0401 	mvn.w	r4, #1
 800a850:	3a05      	subs	r2, #5
 800a852:	611c      	str	r4, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a854:	6359      	str	r1, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800a856:	6399      	str	r1, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800a858:	63d9      	str	r1, [r3, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 800a85a:	641a      	str	r2, [r3, #64]	@ 0x40
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800a85c:	691a      	ldr	r2, [r3, #16]
 800a85e:	07d2      	lsls	r2, r2, #31
 800a860:	d5fc      	bpl.n	800a85c <R3_2_RLTurnOnLowSidesAndStart+0x30>
    {
      /* Nothing to do */
    }

    /* Main PWM Output Enable */
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 800a862:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a864:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a868:	645a      	str	r2, [r3, #68]	@ 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800a86a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a86c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a870:	645a      	str	r2, [r3, #68]	@ 0x44
    LL_TIM_EnableAllOutputs (TIMx);

    if (ES_GPIO == pHandle->_Super.LowSideOutputs )
 800a872:	f890 207b 	ldrb.w	r2, [r0, #123]	@ 0x7b
 800a876:	2a02      	cmp	r2, #2
 800a878:	d00c      	beq.n	800a894 <R3_2_RLTurnOnLowSidesAndStart+0x68>
    else
    {
      /* Nothing to do */
    }

    pHdl->Sector = SECTOR_4;
 800a87a:	2203      	movs	r2, #3
 800a87c:	f880 207a 	strb.w	r2, [r0, #122]	@ 0x7a
  SET_BIT(TIMx->CCER, Channels);
 800a880:	6a1a      	ldr	r2, [r3, #32]
 800a882:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a886:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800a888:	68da      	ldr	r2, [r3, #12]
 800a88a:	f042 0201 	orr.w	r2, r2, #1

    LL_TIM_EnableIT_UPDATE(TIMx);
#ifdef NULL_PTR_CHECK_R3_2_PWM_CURR_FDB
  }
#endif
}
 800a88e:	bc30      	pop	{r4, r5}
 800a890:	60da      	str	r2, [r3, #12]
 800a892:	4770      	bx	lr
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800a894:	e9d0 410f 	ldrd	r4, r1, [r0, #60]	@ 0x3c
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800a898:	f8b0 5048 	ldrh.w	r5, [r0, #72]	@ 0x48
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800a89c:	6c42      	ldr	r2, [r0, #68]	@ 0x44
  WRITE_REG(GPIOx->BSRR, PinMask);
 800a89e:	61a5      	str	r5, [r4, #24]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800a8a0:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
 800a8a4:	618c      	str	r4, [r1, #24]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800a8a6:	f8b0 104c 	ldrh.w	r1, [r0, #76]	@ 0x4c
 800a8aa:	6191      	str	r1, [r2, #24]
}
 800a8ac:	e7e5      	b.n	800a87a <R3_2_RLTurnOnLowSidesAndStart+0x4e>
 800a8ae:	bf00      	nop

0800a8b0 <RVBS_Clear>:
  * @brief  It clears bus voltage FW variable containing average bus voltage
  *         value.
  * @param  pHandle related RDivider_Handle_t
  */
__weak void RVBS_Clear(RDivider_Handle_t *pHandle)
{
 800a8b0:	b510      	push	{r4, lr}
  {
#endif
    uint16_t aux;
    uint16_t index;

    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 800a8b2:	8a42      	ldrh	r2, [r0, #18]
 800a8b4:	f8b0 e00c 	ldrh.w	lr, [r0, #12]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 800a8b8:	8943      	ldrh	r3, [r0, #10]
    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 800a8ba:	4496      	add	lr, r2
 800a8bc:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
 800a8c0:	2400      	movs	r4, #0
 800a8c2:	f36e 040f 	bfi	r4, lr, #0, #16
 800a8c6:	f36e 441f 	bfi	r4, lr, #16, #16
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 800a8ca:	b153      	cbz	r3, 800a8e2 <RVBS_Clear+0x32>
 800a8cc:	6942      	ldr	r2, [r0, #20]
    {
      pHandle->aBuffer[index] = aux;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	3a02      	subs	r2, #2
 800a8d2:	f822 ef02 	strh.w	lr, [r2, #2]!
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 800a8d6:	3301      	adds	r3, #1
 800a8d8:	f8b0 c00a 	ldrh.w	ip, [r0, #10]
 800a8dc:	b299      	uxth	r1, r3
 800a8de:	458c      	cmp	ip, r1
 800a8e0:	d8f7      	bhi.n	800a8d2 <RVBS_Clear+0x22>
    }
    pHandle->_Super.LatestConv = aux;
    pHandle->_Super.AvBusVoltage_d = aux;
    pHandle->index = 0U;
 800a8e2:	2300      	movs	r3, #0
    pHandle->_Super.LatestConv = aux;
 800a8e4:	6044      	str	r4, [r0, #4]
    pHandle->index = 0U;
 800a8e6:	7643      	strb	r3, [r0, #25]
#ifdef NULL_PTR_CHECK_RDIV_BUS_VLT_SNS
  }
#endif
}
 800a8e8:	bd10      	pop	{r4, pc}
 800a8ea:	bf00      	nop

0800a8ec <RVBS_Init>:
{
 800a8ec:	b508      	push	{r3, lr}
    RVBS_Clear(pHandle);
 800a8ee:	f7ff ffdf 	bl	800a8b0 <RVBS_Clear>
}
 800a8f2:	bd08      	pop	{r3, pc}

0800a8f4 <RVBS_CheckFaultState>:
  }
  else
  {
#endif
	/* If both thresholds are equal, single threshold feature is used */
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 800a8f4:	8982      	ldrh	r2, [r0, #12]
 800a8f6:	89c1      	ldrh	r1, [r0, #14]
	{
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 800a8f8:	88c3      	ldrh	r3, [r0, #6]
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 800a8fa:	428a      	cmp	r2, r1
 800a8fc:	d010      	beq.n	800a920 <RVBS_CheckFaultState+0x2c>
      }
	}
    else
    {
      /* If both thresholds are different, hysteresis feature is used (Brake mode) */
      if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 800a8fe:	f8b0 c012 	ldrh.w	ip, [r0, #18]
 800a902:	459c      	cmp	ip, r3
 800a904:	d80a      	bhi.n	800a91c <RVBS_CheckFaultState+0x28>
{
 800a906:	b410      	push	{r4}
      {
        fault = MC_UNDER_VOLT;
      }
      else if ( false == pHandle->OverVoltageHysteresisUpDir )
 800a908:	7c04      	ldrb	r4, [r0, #16]
 800a90a:	b994      	cbnz	r4, 800a932 <RVBS_CheckFaultState+0x3e>
      {
        if (pHandle->_Super.AvBusVoltage_d < pHandle->OverVoltageThresholdLow)
 800a90c:	4299      	cmp	r1, r3
 800a90e:	d914      	bls.n	800a93a <RVBS_CheckFaultState+0x46>
        {
          pHandle->OverVoltageHysteresisUpDir = true;
 800a910:	2301      	movs	r3, #1
 800a912:	7403      	strb	r3, [r0, #16]
        {
          pHandle->OverVoltageHysteresisUpDir = false;
          fault = MC_OVER_VOLT;
        }
        else{
          fault = MC_NO_ERROR;
 800a914:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_RDIV_BUS_VLT_SNS
  }
#endif
  return (fault);
}
 800a916:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a91a:	4770      	bx	lr
        fault = MC_UNDER_VOLT;
 800a91c:	2004      	movs	r0, #4
 800a91e:	4770      	bx	lr
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 800a920:	429a      	cmp	r2, r3
 800a922:	d30c      	bcc.n	800a93e <RVBS_CheckFaultState+0x4a>
      else if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 800a924:	8a40      	ldrh	r0, [r0, #18]
 800a926:	4298      	cmp	r0, r3
 800a928:	bf94      	ite	ls
 800a92a:	2000      	movls	r0, #0
 800a92c:	2001      	movhi	r0, #1
 800a92e:	0080      	lsls	r0, r0, #2
 800a930:	4770      	bx	lr
        if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 800a932:	429a      	cmp	r2, r3
 800a934:	d2ee      	bcs.n	800a914 <RVBS_CheckFaultState+0x20>
          pHandle->OverVoltageHysteresisUpDir = false;
 800a936:	2300      	movs	r3, #0
 800a938:	7403      	strb	r3, [r0, #16]
          fault = MC_OVER_VOLT;
 800a93a:	2002      	movs	r0, #2
 800a93c:	e7eb      	b.n	800a916 <RVBS_CheckFaultState+0x22>
 800a93e:	2002      	movs	r0, #2
}
 800a940:	4770      	bx	lr
 800a942:	bf00      	nop

0800a944 <RVBS_CalcAvVbus>:
{
 800a944:	b538      	push	{r3, r4, r5, lr}
    if (0xFFFFU == hAux)
 800a946:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a94a:	4299      	cmp	r1, r3
{
 800a94c:	4604      	mov	r4, r0
    if (0xFFFFU == hAux)
 800a94e:	d021      	beq.n	800a994 <RVBS_CalcAvVbus+0x50>
      pHandle->aBuffer[pHandle->index] = hAux;
 800a950:	6943      	ldr	r3, [r0, #20]
 800a952:	7e45      	ldrb	r5, [r0, #25]
 800a954:	f823 1015 	strh.w	r1, [r3, r5, lsl #1]
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 800a958:	f8b0 e00a 	ldrh.w	lr, [r0, #10]
 800a95c:	f01e 02ff 	ands.w	r2, lr, #255	@ 0xff
 800a960:	d00d      	beq.n	800a97e <RVBS_CalcAvVbus+0x3a>
 800a962:	3a01      	subs	r2, #1
 800a964:	b2d2      	uxtb	r2, r2
 800a966:	eb03 0042 	add.w	r0, r3, r2, lsl #1
 800a96a:	3b02      	subs	r3, #2
      wtemp = 0u;
 800a96c:	2200      	movs	r2, #0
        wtemp += pHandle->aBuffer[i];
 800a96e:	f833 cf02 	ldrh.w	ip, [r3, #2]!
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 800a972:	4298      	cmp	r0, r3
        wtemp += pHandle->aBuffer[i];
 800a974:	4462      	add	r2, ip
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 800a976:	d1fa      	bne.n	800a96e <RVBS_CalcAvVbus+0x2a>
      wtemp /= pHandle->LowPassFilterBW;
 800a978:	fbb2 f2fe 	udiv	r2, r2, lr
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 800a97c:	b292      	uxth	r2, r2
      if ((uint16_t)pHandle->index < (pHandle->LowPassFilterBW - 1U))
 800a97e:	f10e 3eff 	add.w	lr, lr, #4294967295
 800a982:	4575      	cmp	r5, lr
        pHandle->index++;
 800a984:	bf34      	ite	cc
 800a986:	3501      	addcc	r5, #1
        pHandle->index = 0U;
 800a988:	2300      	movcs	r3, #0
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 800a98a:	80e2      	strh	r2, [r4, #6]
      pHandle->_Super.LatestConv = hAux;
 800a98c:	80a1      	strh	r1, [r4, #4]
        pHandle->index++;
 800a98e:	bf34      	ite	cc
 800a990:	7665      	strbcc	r5, [r4, #25]
        pHandle->index = 0U;
 800a992:	7663      	strbcs	r3, [r4, #25]
    pHandle->_Super.FaultState = RVBS_CheckFaultState(pHandle);
 800a994:	4620      	mov	r0, r4
 800a996:	f7ff ffad 	bl	800a8f4 <RVBS_CheckFaultState>
 800a99a:	8120      	strh	r0, [r4, #8]
}
 800a99c:	bd38      	pop	{r3, r4, r5, pc}
 800a99e:	bf00      	nop

0800a9a0 <REMNG_Init>:
  }
  else
  {
#endif
    pHandle->Ext = 0;
    pHandle->TargetFinal = 0;
 800a9a0:	2300      	movs	r3, #0
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
    pHandle->ScalingFactor = 1U;
 800a9a2:	2201      	movs	r2, #1
    pHandle->TargetFinal = 0;
 800a9a4:	e9c0 3301 	strd	r3, r3, [r0, #4]
    pHandle->IncDecAmount = 0;
 800a9a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
    pHandle->ScalingFactor = 1U;
 800a9ac:	6142      	str	r2, [r0, #20]
#ifdef NULL_PTR_CHECK_RMP_EXT_MNG
  }
#endif
}
 800a9ae:	4770      	bx	lr

0800a9b0 <SPD_GetAvrgMecSpeedUnit>:
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hAvrMecSpeedUnit);
#else
  return (pHandle->hAvrMecSpeedUnit);
#endif
}
 800a9b0:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 800a9b4:	4770      	bx	lr
 800a9b6:	bf00      	nop

0800a9b8 <SPD_IsMecSpeedReliable>:
    bool SpeedError = false;

    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

    /* Compute absoulte value of mechanical speed */
    if (*pMecSpeedUnit < 0)
 800a9b8:	f9b1 c000 	ldrsh.w	ip, [r1]
{
 800a9bc:	4603      	mov	r3, r0
 800a9be:	b510      	push	{r4, lr}
    {
      hAux = -(*pMecSpeedUnit);
 800a9c0:	fa1f f18c 	uxth.w	r1, ip
    if (*pMecSpeedUnit < 0)
 800a9c4:	f1bc 0f00 	cmp.w	ip, #0
      hAux = -(*pMecSpeedUnit);
 800a9c8:	bfb8      	it	lt
 800a9ca:	4249      	neglt	r1, r1
    else
    {
      /* Nothing to do */
    }

    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 800a9cc:	f8b3 c016 	ldrh.w	ip, [r3, #22]
    uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 800a9d0:	78c0      	ldrb	r0, [r0, #3]
    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 800a9d2:	781a      	ldrb	r2, [r3, #0]
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 800a9d4:	8a9c      	ldrh	r4, [r3, #20]
      hAux = -(*pMecSpeedUnit);
 800a9d6:	bfb8      	it	lt
 800a9d8:	b289      	uxthlt	r1, r1
    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 800a9da:	458c      	cmp	ip, r1
 800a9dc:	d818      	bhi.n	800aa10 <SPD_IsMecSpeedReliable+0x58>
    {
      /* Nothing to do */
    }

    /* Compute absoulte value of mechanical acceleration */
    if (pHandle->hMecAccelUnitP < 0)
 800a9de:	f9b3 e012 	ldrsh.w	lr, [r3, #18]
    {
      hAux = -(pHandle->hMecAccelUnitP);
 800a9e2:	fa1f fc8e 	uxth.w	ip, lr
    if (pHandle->hMecAccelUnitP < 0)
 800a9e6:	f1be 0f00 	cmp.w	lr, #0
      hAux = -(pHandle->hMecAccelUnitP);
 800a9ea:	bfb8      	it	lt
 800a9ec:	f1cc 0c00 	rsblt	ip, ip, #0
    else
    {
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
    }

    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 800a9f0:	f8b3 e018 	ldrh.w	lr, [r3, #24]
      hAux = -(pHandle->hMecAccelUnitP);
 800a9f4:	bfb8      	it	lt
 800a9f6:	fa1f fc8c 	uxthlt.w	ip, ip
    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 800a9fa:	45e6      	cmp	lr, ip
 800a9fc:	d308      	bcc.n	800aa10 <SPD_IsMecSpeedReliable+0x58>
    else
    {
      /* Nothing to do */
    }

    if (true == SpeedError)
 800a9fe:	428c      	cmp	r4, r1
 800aa00:	d306      	bcc.n	800aa10 <SPD_IsMecSpeedReliable+0x58>
        /* Nothing to do */
      }
    }
    else
    {
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 800aa02:	4290      	cmp	r0, r2
 800aa04:	d809      	bhi.n	800aa1a <SPD_IsMecSpeedReliable+0x62>
      {
        /* Nothing to do */
      }
    }

    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
 800aa06:	1a10      	subs	r0, r2, r0
    else
    {
      /* Nothing to do */
    }

    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 800aa08:	701a      	strb	r2, [r3, #0]
    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
 800aa0a:	bf18      	it	ne
 800aa0c:	2001      	movne	r0, #1
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  }
#endif
  return (SpeedSensorReliability);
}
 800aa0e:	bd10      	pop	{r4, pc}
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 800aa10:	4290      	cmp	r0, r2
 800aa12:	d9f8      	bls.n	800aa06 <SPD_IsMecSpeedReliable+0x4e>
        bSpeedErrorNumber++;
 800aa14:	3201      	adds	r2, #1
 800aa16:	b2d2      	uxtb	r2, r2
 800aa18:	e7f5      	b.n	800aa06 <SPD_IsMecSpeedReliable+0x4e>
        bSpeedErrorNumber = 0u;
 800aa1a:	2200      	movs	r2, #0
    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 800aa1c:	701a      	strb	r2, [r3, #0]
  bool SpeedSensorReliability = true;
 800aa1e:	2001      	movs	r0, #1
}
 800aa20:	bd10      	pop	{r4, pc}
 800aa22:	bf00      	nop

0800aa24 <SPD_GetS16Speed>:
  }
  else
  {
#endif
    int32_t wAux = (int32_t)pHandle->hAvrMecSpeedUnit;
    wAux *= INT16_MAX;
 800aa24:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 800aa28:	f9b0 2014 	ldrsh.w	r2, [r0, #20]
    wAux *= INT16_MAX;
 800aa2c:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 800aa30:	fb93 f0f2 	sdiv	r0, r3, r2
    tempValue = (int16_t)wAux;
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  }
#endif
  return (tempValue);
}
 800aa34:	b200      	sxth	r0, r0
 800aa36:	4770      	bx	lr

0800aa38 <STC_Init>:
  * @retval none.
  *
  * - Called once right after object creation at initialization of the whole MC core.
  */
__weak void STC_Init(SpeednTorqCtrl_Handle_t *pHandle, PID_Handle_t *pPI, SpeednPosFdbk_Handle_t *SPD_Handle)
{
 800aa38:	b410      	push	{r4}
  {
#endif
    pHandle->PISpeed = pPI;
    pHandle->SPD = SPD_Handle;
    pHandle->Mode = pHandle->ModeDefault;
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 800aa3a:	f9b0 c02c 	ldrsh.w	ip, [r0, #44]	@ 0x2c
    pHandle->PISpeed = pPI;
 800aa3e:	6101      	str	r1, [r0, #16]
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 800aa40:	f9b0 102e 	ldrsh.w	r1, [r0, #46]	@ 0x2e
    pHandle->Mode = pHandle->ModeDefault;
 800aa44:	f890 402a 	ldrb.w	r4, [r0, #42]	@ 0x2a
 800aa48:	7004      	strb	r4, [r0, #0]
    pHandle->TargetFinal = 0;
 800aa4a:	2300      	movs	r3, #0
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 800aa4c:	ea4f 440c 	mov.w	r4, ip, lsl #16
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 800aa50:	0409      	lsls	r1, r1, #16
 800aa52:	e9c0 4101 	strd	r4, r1, [r0, #4]
    pHandle->SPD = SPD_Handle;
 800aa56:	6142      	str	r2, [r0, #20]
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800aa58:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->TargetFinal = 0;
 800aa5c:	8043      	strh	r3, [r0, #2]
    pHandle->RampRemainingStep = 0U;
 800aa5e:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 800aa60:	6183      	str	r3, [r0, #24]
}
 800aa62:	4770      	bx	lr

0800aa64 <STC_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (MCM_SPEED_MODE == pHandle->Mode)
 800aa64:	7803      	ldrb	r3, [r0, #0]
 800aa66:	2b03      	cmp	r3, #3
 800aa68:	d000      	beq.n	800aa6c <STC_Clear+0x8>
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800aa6a:	4770      	bx	lr
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
 800aa6c:	6900      	ldr	r0, [r0, #16]
 800aa6e:	2100      	movs	r1, #0
 800aa70:	f7fe bf42 	b.w	80098f8 <PID_SetIntegralTerm>

0800aa74 <STC_GetMecSpeedRefUnit>:
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->SpeedRefUnitExt / 65536));
#else
  return ((int16_t)(pHandle->SpeedRefUnitExt / 65536));
#endif
#endif
}
 800aa74:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800aa78:	4770      	bx	lr
 800aa7a:	bf00      	nop

0800aa7c <STC_SetControlMode>:
  }
  else
  {
#endif
    pHandle->Mode = bMode;
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp */
 800aa7c:	2300      	movs	r3, #0
    pHandle->Mode = bMode;
 800aa7e:	7001      	strb	r1, [r0, #0]
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp */
 800aa80:	60c3      	str	r3, [r0, #12]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800aa82:	4770      	bx	lr

0800aa84 <STC_ExecRamp>:
  * @ref EncAlignCtrl "Encoder Alignment Control",
  * @ref PositionControl "Position Control" loop or
  * speed regulation with @ref SpeedRegulatorPotentiometer Speed potentiometer.
  */
__weak bool STC_ExecRamp(SpeednTorqCtrl_Handle_t *pHandle, int16_t hTargetFinal, uint32_t hDurationms)
{
 800aa84:	b410      	push	{r4}
    uint32_t wAux;
    int32_t wAux1;
    int16_t hCurrentReference;

    /* Check if the hTargetFinal is out of the bound of application */
    if (MCM_TORQUE_MODE == pHandle->Mode)
 800aa86:	7803      	ldrb	r3, [r0, #0]
 800aa88:	2b04      	cmp	r3, #4
 800aa8a:	d019      	beq.n	800aac0 <STC_ExecRamp+0x3c>
#else
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt / 65536);
#endif

#ifdef CHECK_BOUNDARY
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 800aa8c:	f8b0 c01e 	ldrh.w	ip, [r0, #30]
 800aa90:	458c      	cmp	ip, r1
 800aa92:	da03      	bge.n	800aa9c <STC_ExecRamp+0x18>
 800aa94:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (allowedRange);
}
 800aa96:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa9a:	4770      	bx	lr
      else if (hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit)
 800aa9c:	f9b0 4024 	ldrsh.w	r4, [r0, #36]	@ 0x24
 800aaa0:	428c      	cmp	r4, r1
 800aaa2:	dcf7      	bgt.n	800aa94 <STC_ExecRamp+0x10>
      else if ((int32_t)hTargetFinal < (int32_t)pHandle->MinAppPositiveMecSpeedUnit)
 800aaa4:	8c04      	ldrh	r4, [r0, #32]
 800aaa6:	428c      	cmp	r4, r1
 800aaa8:	dd03      	ble.n	800aab2 <STC_ExecRamp+0x2e>
        if (hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit)
 800aaaa:	f9b0 4022 	ldrsh.w	r4, [r0, #34]	@ 0x22
 800aaae:	428c      	cmp	r4, r1
 800aab0:	dbf0      	blt.n	800aa94 <STC_ExecRamp+0x10>
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 800aab2:	6844      	ldr	r4, [r0, #4]
      if (0U == hDurationms)
 800aab4:	b9aa      	cbnz	r2, 800aae2 <STC_ExecRamp+0x5e>
        if (MCM_SPEED_MODE == pHandle->Mode)
 800aab6:	2b03      	cmp	r3, #3
 800aab8:	d10a      	bne.n	800aad0 <STC_ExecRamp+0x4c>
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 800aaba:	0409      	lsls	r1, r1, #16
 800aabc:	6041      	str	r1, [r0, #4]
 800aabe:	e009      	b.n	800aad4 <STC_ExecRamp+0x50>
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxPositiveTorque)
 800aac0:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 800aac2:	428b      	cmp	r3, r1
 800aac4:	dbe6      	blt.n	800aa94 <STC_ExecRamp+0x10>
      if ((int32_t)hTargetFinal < (int32_t)pHandle->MinNegativeTorque)
 800aac6:	f9b0 3028 	ldrsh.w	r3, [r0, #40]	@ 0x28
 800aaca:	428b      	cmp	r3, r1
 800aacc:	dce2      	bgt.n	800aa94 <STC_ExecRamp+0x10>
      if (0U == hDurationms)
 800aace:	b9e2      	cbnz	r2, 800ab0a <STC_ExecRamp+0x86>
          pHandle->TorqueRef = ((int32_t)hTargetFinal) * 65536;
 800aad0:	0409      	lsls	r1, r1, #16
 800aad2:	6081      	str	r1, [r0, #8]
        pHandle->RampRemainingStep = 0U;
 800aad4:	2300      	movs	r3, #0
 800aad6:	60c3      	str	r3, [r0, #12]
        pHandle->IncDecAmount = 0;
 800aad8:	6183      	str	r3, [r0, #24]
{
 800aada:	2001      	movs	r0, #1
}
 800aadc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aae0:	4770      	bx	lr
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 800aae2:	ea4f 4c24 	mov.w	ip, r4, asr #16
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 800aae6:	8b83      	ldrh	r3, [r0, #28]
        wAux /= 1000U;
 800aae8:	4c09      	ldr	r4, [pc, #36]	@ (800ab10 <STC_ExecRamp+0x8c>)
        pHandle->TargetFinal = hTargetFinal;
 800aaea:	8041      	strh	r1, [r0, #2]
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 800aaec:	fb02 f303 	mul.w	r3, r2, r3
        wAux /= 1000U;
 800aaf0:	fba4 4303 	umull	r4, r3, r4, r3
 800aaf4:	099b      	lsrs	r3, r3, #6
        pHandle->RampRemainingStep++;
 800aaf6:	3301      	adds	r3, #1
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 800aaf8:	eba1 0c0c 	sub.w	ip, r1, ip
 800aafc:	ea4f 420c 	mov.w	r2, ip, lsl #16
        pHandle->RampRemainingStep++;
 800ab00:	60c3      	str	r3, [r0, #12]
        wAux1 /= ((int32_t)pHandle->RampRemainingStep);
 800ab02:	fb92 f2f3 	sdiv	r2, r2, r3
        pHandle->IncDecAmount = wAux1;
 800ab06:	6182      	str	r2, [r0, #24]
 800ab08:	e7e7      	b.n	800aada <STC_ExecRamp+0x56>
  return ((int16_t)(pHandle->TorqueRef >> 16));
 800ab0a:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 800ab0e:	e7ea      	b.n	800aae6 <STC_ExecRamp+0x62>
 800ab10:	10624dd3 	.word	0x10624dd3

0800ab14 <STC_CalcTorqueReference>:
  * - Must be called at fixed time equal to hSTCFrequencyHz. It is called
  * passing as parameter the speed sensor used to perform the speed regulation.
  * - Called during START and ALIGNEMENT states of the MC state machine into MediumFrequencyTask.
  */
__weak int16_t STC_CalcTorqueReference(SpeednTorqCtrl_Handle_t *pHandle)
{
 800ab14:	b538      	push	{r3, r4, r5, lr}
    int32_t wCurrentReference;
    int16_t hMeasuredSpeed;
    int16_t hTargetSpeed;
    int16_t hError;

    if (MCM_TORQUE_MODE == pHandle->Mode)
 800ab16:	7802      	ldrb	r2, [r0, #0]
      wCurrentReference = pHandle->SpeedRefUnitExt;
    }

    /* Update the speed reference or the torque reference according to the mode
       and terminates the ramp if needed */
    if (pHandle->RampRemainingStep > 1U)
 800ab18:	68c3      	ldr	r3, [r0, #12]
    if (MCM_TORQUE_MODE == pHandle->Mode)
 800ab1a:	2a04      	cmp	r2, #4
{
 800ab1c:	4604      	mov	r4, r0
    if (MCM_TORQUE_MODE == pHandle->Mode)
 800ab1e:	d012      	beq.n	800ab46 <STC_CalcTorqueReference+0x32>
    if (pHandle->RampRemainingStep > 1U)
 800ab20:	2b01      	cmp	r3, #1
      wCurrentReference = pHandle->SpeedRefUnitExt;
 800ab22:	6845      	ldr	r5, [r0, #4]
    if (pHandle->RampRemainingStep > 1U)
 800ab24:	d908      	bls.n	800ab38 <STC_CalcTorqueReference+0x24>
    {
      /* Increment/decrement the reference value */
      wCurrentReference += pHandle->IncDecAmount;
 800ab26:	6981      	ldr	r1, [r0, #24]

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep--;
 800ab28:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 800ab2a:	440d      	add	r5, r1
      pHandle->RampRemainingStep--;
 800ab2c:	60c3      	str	r3, [r0, #12]
    else
    {
      /* Do nothing */
    }

    if (MCM_SPEED_MODE == pHandle->Mode)
 800ab2e:	2a03      	cmp	r2, #3
 800ab30:	d011      	beq.n	800ab56 <STC_CalcTorqueReference+0x42>
    else
    {
      pHandle->TorqueRef = wCurrentReference;
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hTorqueReference = (int16_t)(wCurrentReference >> 16);
 800ab32:	1428      	asrs	r0, r5, #16
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 800ab34:	60a5      	str	r5, [r4, #8]
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (hTorqueReference);
}
 800ab36:	bd38      	pop	{r3, r4, r5, pc}
    else if (1U == pHandle->RampRemainingStep)
 800ab38:	d1f9      	bne.n	800ab2e <STC_CalcTorqueReference+0x1a>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 800ab3a:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
      pHandle->RampRemainingStep = 0U;
 800ab3e:	2300      	movs	r3, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 800ab40:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep = 0U;
 800ab42:	60c3      	str	r3, [r0, #12]
 800ab44:	e7f3      	b.n	800ab2e <STC_CalcTorqueReference+0x1a>
    if (pHandle->RampRemainingStep > 1U)
 800ab46:	2b01      	cmp	r3, #1
      wCurrentReference = pHandle->TorqueRef;
 800ab48:	6885      	ldr	r5, [r0, #8]
    if (pHandle->RampRemainingStep > 1U)
 800ab4a:	d911      	bls.n	800ab70 <STC_CalcTorqueReference+0x5c>
      wCurrentReference += pHandle->IncDecAmount;
 800ab4c:	6982      	ldr	r2, [r0, #24]
      pHandle->RampRemainingStep--;
 800ab4e:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 800ab50:	4415      	add	r5, r2
      pHandle->RampRemainingStep--;
 800ab52:	60c3      	str	r3, [r0, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 800ab54:	e7ed      	b.n	800ab32 <STC_CalcTorqueReference+0x1e>
      hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit(pHandle->SPD);
 800ab56:	6960      	ldr	r0, [r4, #20]
 800ab58:	f7ff ff2a 	bl	800a9b0 <SPD_GetAvrgMecSpeedUnit>
      hError = hTargetSpeed - hMeasuredSpeed;
 800ab5c:	ebc0 4125 	rsb	r1, r0, r5, asr #16
      hTorqueReference = PI_Controller(pHandle->PISpeed, (int32_t)hError);
 800ab60:	b209      	sxth	r1, r1
 800ab62:	6920      	ldr	r0, [r4, #16]
 800ab64:	f7fe fefa 	bl	800995c <PI_Controller>
      pHandle->SpeedRefUnitExt = wCurrentReference;
 800ab68:	6065      	str	r5, [r4, #4]
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 800ab6a:	0405      	lsls	r5, r0, #16
 800ab6c:	60a5      	str	r5, [r4, #8]
}
 800ab6e:	bd38      	pop	{r3, r4, r5, pc}
    else if (1U == pHandle->RampRemainingStep)
 800ab70:	d1df      	bne.n	800ab32 <STC_CalcTorqueReference+0x1e>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 800ab72:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
      pHandle->RampRemainingStep = 0U;
 800ab76:	2300      	movs	r3, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 800ab78:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep = 0U;
 800ab7a:	60c3      	str	r3, [r0, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 800ab7c:	e7d9      	b.n	800ab32 <STC_CalcTorqueReference+0x1e>
 800ab7e:	bf00      	nop

0800ab80 <STC_GetMecSpeedRefUnitDefault>:
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  return ((MC_NULL == pHandle) ? 0 : pHandle->MecSpeedRefUnitDefault);
#else
  return (pHandle->MecSpeedRefUnitDefault);
#endif
}
 800ab80:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	@ 0x2c
 800ab84:	4770      	bx	lr
 800ab86:	bf00      	nop

0800ab88 <STC_GetDefaultIqdref>:
    IqdRefDefault.d = pHandle->IdrefDefault;
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (IqdRefDefault);
}
 800ab88:	f8d0 002e 	ldr.w	r0, [r0, #46]	@ 0x2e
{
 800ab8c:	b082      	sub	sp, #8
}
 800ab8e:	b002      	add	sp, #8
 800ab90:	4770      	bx	lr
 800ab92:	bf00      	nop

0800ab94 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *
  * - Called during the CHARGE_BOOT_CAP, SWITCH_OVER and WAIT_STOP_MOTOR states of the MC state machine
  * into MediumFrequencyTask to initialize the speed reference.
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed(SpeednTorqCtrl_Handle_t *pHandle)
{
 800ab94:	b510      	push	{r4, lr}
 800ab96:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SpeedRefUnitExt = ((int32_t)SPD_GetAvrgMecSpeedUnit(pHandle->SPD)) * (int32_t)65536;
 800ab98:	6940      	ldr	r0, [r0, #20]
 800ab9a:	f7ff ff09 	bl	800a9b0 <SPD_GetAvrgMecSpeedUnit>
 800ab9e:	0400      	lsls	r0, r0, #16
 800aba0:	6060      	str	r0, [r4, #4]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800aba2:	bd10      	pop	{r4, pc}

0800aba4 <STO_PLL_CalcElAngle>:
  * @param  pInput: Pointer to the observer inputs structure.
  * @retval int16_t Rotor electrical angle (s16Degrees).
  */
//cstat !MISRAC2012-Rule-8.13
__weak int16_t STO_PLL_CalcElAngle(STO_PLL_Handle_t *pHandle, Observer_Inputs_t *pInputs)
{
 800aba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int16_t retValue;

  if ((MC_NULL == pHandle) || (MC_NULL == pInputs))
 800aba8:	4604      	mov	r4, r0
{
 800abaa:	b089      	sub	sp, #36	@ 0x24
  if ((MC_NULL == pHandle) || (MC_NULL == pInputs))
 800abac:	2800      	cmp	r0, #0
 800abae:	f000 80cf 	beq.w	800ad50 <STO_PLL_CalcElAngle+0x1ac>
 800abb2:	2900      	cmp	r1, #0
 800abb4:	f000 80cf 	beq.w	800ad56 <STO_PLL_CalcElAngle+0x1b2>
    int16_t hIbeta_err;
    int16_t hRotor_Speed;
    int16_t hValfa;
    int16_t hVbeta;

    if (pHandle->wBemf_alfa_est > (((int32_t)pHandle->hF2) * INT16_MAX))
 800abb8:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	@ 0x2e
 800abbc:	6e87      	ldr	r7, [r0, #104]	@ 0x68
 800abbe:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 800abc2:	429f      	cmp	r7, r3
 800abc4:	f340 80d1 	ble.w	800ad6a <STO_PLL_CalcElAngle+0x1c6>
    {
      pHandle->wBemf_alfa_est = INT16_MAX * ((int32_t)pHandle->hF2);
 800abc8:	6683      	str	r3, [r0, #104]	@ 0x68
 800abca:	461f      	mov	r7, r3
    {
      /* Nothing to do */
    }
#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 800abcc:	f8b4 511e 	ldrh.w	r5, [r4, #286]	@ 0x11e
#else
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est / pHandle->hF2);
#endif

    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 800abd0:	6ee6      	ldr	r6, [r4, #108]	@ 0x6c
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 800abd2:	fa47 f205 	asr.w	r2, r7, r5
    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 800abd6:	42b3      	cmp	r3, r6
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 800abd8:	9201      	str	r2, [sp, #4]
 800abda:	fa0f fe82 	sxth.w	lr, r2
    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 800abde:	f2c0 80c1 	blt.w	800ad64 <STO_PLL_CalcElAngle+0x1c0>
    {
      pHandle->wBemf_beta_est = INT16_MAX * ((int32_t)pHandle->hF2);
    }
    else if (pHandle->wBemf_beta_est <= (-INT16_MAX * ((int32_t)pHandle->hF2)))
 800abe2:	425b      	negs	r3, r3
 800abe4:	429e      	cmp	r6, r3
 800abe6:	f340 80bd 	ble.w	800ad64 <STO_PLL_CalcElAngle+0x1c0>
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
#else
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est / pHandle->hF2);
#endif

    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 800abea:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	@ 0x2c
 800abee:	f8d4 9060 	ldr.w	r9, [r4, #96]	@ 0x60
 800abf2:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
 800abf6:	fa46 f505 	asr.w	r5, r6, r5
    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 800abfa:	4599      	cmp	r9, r3
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
 800abfc:	fa0f fc85 	sxth.w	ip, r5
    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 800ac00:	f340 80b9 	ble.w	800ad76 <STO_PLL_CalcElAngle+0x1d2>
    {
      pHandle->Ialfa_est = INT16_MAX * ((int32_t)pHandle->hF1);
 800ac04:	6623      	str	r3, [r4, #96]	@ 0x60
 800ac06:	4699      	mov	r9, r3
    else
    {
      /* Nothing to do */
    }

    if (pHandle->Ibeta_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 800ac08:	f8d4 8064 	ldr.w	r8, [r4, #100]	@ 0x64
 800ac0c:	4543      	cmp	r3, r8
 800ac0e:	f2c0 80a6 	blt.w	800ad5e <STO_PLL_CalcElAngle+0x1ba>
    {
      pHandle->Ibeta_est = INT16_MAX * ((int32_t)pHandle->hF1);
    }
    else if (pHandle->Ibeta_est <= (-INT16_MAX * ((int32_t)pHandle->hF1)))
 800ac12:	425b      	negs	r3, r3
 800ac14:	4598      	cmp	r8, r3
 800ac16:	f340 80a2 	ble.w	800ad5e <STO_PLL_CalcElAngle+0x1ba>
    hIbeta_err = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
#else
    hIbeta_err = (int16_t)(pHandle->Ibeta_est / pHandle->hF1);
#endif

    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 800ac1a:	88c8      	ldrh	r0, [r1, #6]

    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 800ac1c:	f8b1 a008 	ldrh.w	sl, [r1, #8]
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 800ac20:	888b      	ldrh	r3, [r1, #4]
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 800ac22:	f8ad 0014 	strh.w	r0, [sp, #20]
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
#else
    hValfa = (int16_t)(wAux / 65536);
#endif

    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.beta;
 800ac26:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 800ac2a:	f8ad 3010 	strh.w	r3, [sp, #16]
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 800ac2e:	f9b1 3000 	ldrsh.w	r3, [r1]
    hIalfa_err = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 800ac32:	f8b4 211c 	ldrh.w	r2, [r4, #284]	@ 0x11c
    hAux = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
#else
    hAux = (int16_t)(pHandle->Ialfa_est / pHandle->hF1);
#endif

    wAux = ((int32_t)pHandle->hC1) * hAux;
 800ac36:	f9b4 b020 	ldrsh.w	fp, [r4, #32]
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 800ac3a:	9904      	ldr	r1, [sp, #16]
    wAux = wAux * pHandle->hC6;
    wAux = pHandle->_Super.hElSpeedDpp * wAux;
    wBemf_beta_est_Next -= wAux;

    /* Calls the PLL blockset */
    pHandle->hBemf_alfa_est = hAux_Alfa;
 800ac3c:	f8a4 e070 	strh.w	lr, [r4, #112]	@ 0x70
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.beta;
 800ac40:	fb0a f000 	mul.w	r0, sl, r0
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 800ac44:	fb0a f303 	mul.w	r3, sl, r3
    hVbeta = ( int16_t ) ( wAux >> 16 ); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800ac48:	1400      	asrs	r0, r0, #16
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800ac4a:	141b      	asrs	r3, r3, #16
    hVbeta = ( int16_t ) ( wAux >> 16 ); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800ac4c:	9003      	str	r0, [sp, #12]
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 800ac4e:	9805      	ldr	r0, [sp, #20]
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800ac50:	9302      	str	r3, [sp, #8]
    hIalfa_err = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 800ac52:	fa49 f302 	asr.w	r3, r9, r2
    hIbeta_err = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
 800ac56:	fa48 f202 	asr.w	r2, r8, r2
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 800ac5a:	eba2 0a00 	sub.w	sl, r2, r0
    wAux = ((int32_t)pHandle->hC1) * hAux;
 800ac5e:	fb12 f20b 	smulbb	r2, r2, fp
    wIbeta_est_Next = pHandle->Ibeta_est - wAux;
 800ac62:	eba8 0202 	sub.w	r2, r8, r2
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 800ac66:	1a59      	subs	r1, r3, r1
    wAux = ((int32_t)pHandle->hC2) * hIalfa_err;
 800ac68:	f9b4 8022 	ldrsh.w	r8, [r4, #34]	@ 0x22
    wIalfa_est_Next += wAux;
 800ac6c:	9802      	ldr	r0, [sp, #8]
    pHandle->hBemf_beta_est = hAux_Beta;
 800ac6e:	f8a4 c072 	strh.w	ip, [r4, #114]	@ 0x72
    wAux = ((int32_t)pHandle->hC1) * hAux;
 800ac72:	fb13 f30b 	smulbb	r3, r3, fp
    wIalfa_est_Next = pHandle->Ialfa_est - wAux;
 800ac76:	eba9 0303 	sub.w	r3, r9, r3
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 800ac7a:	b209      	sxth	r1, r1
    wAux = ((int32_t)pHandle->hC5) * hValfa;
 800ac7c:	f9b4 9028 	ldrsh.w	r9, [r4, #40]	@ 0x28
    wIalfa_est_Next += wAux;
 800ac80:	fb08 3301 	mla	r3, r8, r1, r3
    wIalfa_est_Next += wAux;
 800ac84:	fb09 3300 	mla	r3, r9, r0, r3
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 800ac88:	fa0f fa8a 	sxth.w	sl, sl
    wIbeta_est_Next += wAux;
 800ac8c:	9803      	ldr	r0, [sp, #12]
    wIbeta_est_Next += wAux;
 800ac8e:	fb08 280a 	mla	r8, r8, sl, r2
    wIbeta_est_Next += wAux;
 800ac92:	fb09 8800 	mla	r8, r9, r0, r8
    wAux = ((int32_t)pHandle->hC4) * hIalfa_err;
 800ac96:	f9b4 0026 	ldrsh.w	r0, [r4, #38]	@ 0x26
    wAux = (int32_t)hAux_Beta >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800ac9a:	8e62      	ldrh	r2, [r4, #50]	@ 0x32
    wAux = wAux * pHandle->hC6;
 800ac9c:	f9b4 902a 	ldrsh.w	r9, [r4, #42]	@ 0x2a
    wBemf_alfa_est_Next = pHandle->wBemf_alfa_est + wAux;
 800aca0:	fb01 7100 	mla	r1, r1, r0, r7
    wBemf_beta_est_Next = pHandle->wBemf_beta_est + wAux;
 800aca4:	fb00 600a 	mla	r0, r0, sl, r6
    wAux = ((int32_t)pHandle->hC3) * hAux_Alfa;
 800aca8:	f9b4 6024 	ldrsh.w	r6, [r4, #36]	@ 0x24
    wIalfa_est_Next -= wAux;
 800acac:	fb06 371e 	mls	r7, r6, lr, r3
    wIbeta_est_Next -= wAux;
 800acb0:	fb06 861c 	mls	r6, r6, ip, r8
    wAux = (int32_t)hAux_Alfa >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800acb4:	fa4e fe02 	asr.w	lr, lr, r2
    wAux = (int32_t)hAux_Beta >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800acb8:	fa4c fc02 	asr.w	ip, ip, r2
    wAux = pHandle->_Super.hElSpeedDpp * wAux;
 800acbc:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
    wAux = wAux * pHandle->hC6;
 800acc0:	fb0e f309 	mul.w	r3, lr, r9
    wBemf_beta_est_Next -= wAux;
 800acc4:	fb03 0812 	mls	r8, r3, r2, r0

    if (0 == pHandle->hForcedDirection)
 800acc8:	f994 3124 	ldrsb.w	r3, [r4, #292]	@ 0x124
    wAux = wAux * pHandle->hC6;
 800accc:	fb0c fc09 	mul.w	ip, ip, r9
    wBemf_alfa_est_Next += wAux;
 800acd0:	fb0c 1902 	mla	r9, ip, r2, r1
    if (0 == pHandle->hForcedDirection)
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d154      	bne.n	800ad82 <STO_PLL_CalcElAngle+0x1de>
    {
      /* We are in auxiliary mode, then rely on the speed detected */
      if(pHandle->_Super.hElSpeedDpp >= 0)
 800acd8:	2a00      	cmp	r2, #0
 800acda:	f64f 7aff 	movw	sl, #65535	@ 0xffff
 800acde:	bfa8      	it	ge
 800ace0:	f04f 0a01 	movge.w	sl, #1
  int16_t hAux1;
  int16_t hAux2;
  int16_t hOutput;
  Trig_Components Local_Components;

  Local_Components = MCM_Trig_Functions(pHandle->_Super.hElAngle);
 800ace4:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800ace8:	f7f7 fdca 	bl	8002880 <MCM_Trig_Functions>
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 800acec:	9b01      	ldr	r3, [sp, #4]
    hAux_Beta = (int16_t)(hAux_Beta * wDirection);
 800acee:	fb15 f50a 	smulbb	r5, r5, sl
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 800acf2:	fb13 f30a 	smulbb	r3, r3, sl
    hRotor_Speed = STO_ExecutePLL(pHandle, hAux_Alfa, -hAux_Beta);
 800acf6:	426d      	negs	r5, r5

  /* Alfa & Beta BEMF multiplied by Cos & Sin */
  wAlfa_Sin_tmp = ((int32_t )hBemf_alfa_est) * ((int32_t )Local_Components.hSin);
  wBeta_Cos_tmp = ((int32_t )hBemf_beta_est) * ((int32_t )Local_Components.hCos);
 800acf8:	fb10 f505 	smulbb	r5, r0, r5
  wAlfa_Sin_tmp = ((int32_t )hBemf_alfa_est) * ((int32_t )Local_Components.hSin);
 800acfc:	fb10 f023 	smultb	r0, r0, r3
#else
  hAux2 = (int16_t)(wAlfa_Sin_tmp / 32768);
#endif

  /* Speed PI regulator */
  hOutput = PI_Controller(& pHandle->PIRegulator, (int32_t)(hAux1 ) - hAux2);
 800ad00:	f340 31cf 	sbfx	r1, r0, #15, #16
 800ad04:	f345 35cf 	sbfx	r5, r5, #15, #16
 800ad08:	1a69      	subs	r1, r5, r1
 800ad0a:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 800ad0e:	f7fe fe25 	bl	800995c <PI_Controller>
  uint8_t bBuffer_index = pHandle->Speed_Buffer_Index;
 800ad12:	f894 30f4 	ldrb.w	r3, [r4, #244]	@ 0xf4
  if (bBuffer_index == pHandle->SpeedBufferSizeUnit)
 800ad16:	f894 210e 	ldrb.w	r2, [r4, #270]	@ 0x10e
    pHandle->_Super.InstantaneousElSpeedDpp = hRotor_Speed;
 800ad1a:	8220      	strh	r0, [r4, #16]
  bBuffer_index++;
 800ad1c:	3301      	adds	r3, #1
 800ad1e:	b2db      	uxtb	r3, r3
  if (bBuffer_index == pHandle->SpeedBufferSizeUnit)
 800ad20:	429a      	cmp	r2, r3
  pHandle->SpeedBufferOldestEl = pHandle->Speed_Buffer[bBuffer_index];
 800ad22:	bf12      	itee	ne
 800ad24:	461a      	movne	r2, r3
 800ad26:	2200      	moveq	r2, #0
    bBuffer_index = 0U;
 800ad28:	4613      	moveq	r3, r2
  pHandle->SpeedBufferOldestEl = pHandle->Speed_Buffer[bBuffer_index];
 800ad2a:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 800ad2e:	f9b2 1074 	ldrsh.w	r1, [r2, #116]	@ 0x74
 800ad32:	f8a4 110c 	strh.w	r1, [r4, #268]	@ 0x10c
  pHandle->Speed_Buffer[bBuffer_index] = hRotor_Speed;
 800ad36:	f8a2 0074 	strh.w	r0, [r2, #116]	@ 0x74
  pHandle->Speed_Buffer_Index = bBuffer_index;
 800ad3a:	f884 30f4 	strb.w	r3, [r4, #244]	@ 0xf4
    pHandle->_Super.hElAngle += hRotor_Speed;
 800ad3e:	88a3      	ldrh	r3, [r4, #4]
    pHandle->Ialfa_est = wIalfa_est_Next;
 800ad40:	6627      	str	r7, [r4, #96]	@ 0x60
    pHandle->_Super.hElAngle += hRotor_Speed;
 800ad42:	4418      	add	r0, r3
    pHandle->Ibeta_est = wIbeta_est_Next;
 800ad44:	e9c4 6919 	strd	r6, r9, [r4, #100]	@ 0x64
    pHandle->_Super.hElAngle += hRotor_Speed;
 800ad48:	b200      	sxth	r0, r0
    pHandle->wBemf_beta_est = wBemf_beta_est_Next;
 800ad4a:	f8c4 806c 	str.w	r8, [r4, #108]	@ 0x6c
    pHandle->_Super.hElAngle += hRotor_Speed;
 800ad4e:	80a0      	strh	r0, [r4, #4]
}
 800ad50:	b009      	add	sp, #36	@ 0x24
 800ad52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    retValue = 0;
 800ad56:	4608      	mov	r0, r1
}
 800ad58:	b009      	add	sp, #36	@ 0x24
 800ad5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pHandle->Ibeta_est = -INT16_MAX * ((int32_t)pHandle->hF1);
 800ad5e:	6663      	str	r3, [r4, #100]	@ 0x64
 800ad60:	4698      	mov	r8, r3
 800ad62:	e75a      	b.n	800ac1a <STO_PLL_CalcElAngle+0x76>
      pHandle->wBemf_beta_est = (-INT16_MAX * ((int32_t)pHandle->hF2));
 800ad64:	66e3      	str	r3, [r4, #108]	@ 0x6c
 800ad66:	461e      	mov	r6, r3
 800ad68:	e73f      	b.n	800abea <STO_PLL_CalcElAngle+0x46>
    else if (pHandle->wBemf_alfa_est <= (-INT16_MAX * ((int32_t)pHandle->hF2)))
 800ad6a:	425a      	negs	r2, r3
 800ad6c:	4297      	cmp	r7, r2
      pHandle->wBemf_alfa_est = -INT16_MAX * ((int32_t)pHandle->hF2);
 800ad6e:	bfdc      	itt	le
 800ad70:	6682      	strle	r2, [r0, #104]	@ 0x68
 800ad72:	4617      	movle	r7, r2
 800ad74:	e72a      	b.n	800abcc <STO_PLL_CalcElAngle+0x28>
    else if (pHandle->Ialfa_est <= (-INT16_MAX * ((int32_t)pHandle->hF1)))
 800ad76:	425a      	negs	r2, r3
 800ad78:	4591      	cmp	r9, r2
      pHandle->Ialfa_est = -INT16_MAX * ((int32_t)pHandle->hF1);
 800ad7a:	bfdc      	itt	le
 800ad7c:	6622      	strle	r2, [r4, #96]	@ 0x60
 800ad7e:	4691      	movle	r9, r2
 800ad80:	e742      	b.n	800ac08 <STO_PLL_CalcElAngle+0x64>
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 800ad82:	fa1f fa83 	uxth.w	sl, r3
 800ad86:	e7ad      	b.n	800ace4 <STO_PLL_CalcElAngle+0x140>

0800ad88 <STO_PLL_CalcAvrgMecSpeedUnit>:
{
 800ad88:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t i, bSpeedBufferSizeUnit = pHandle->SpeedBufferSizeUnit;
 800ad8a:	f890 510e 	ldrb.w	r5, [r0, #270]	@ 0x10e
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800ad8e:	2d00      	cmp	r5, #0
 800ad90:	f000 809b 	beq.w	800aeca <STO_PLL_CalcAvrgMecSpeedUnit+0x142>
 800ad94:	f100 0272 	add.w	r2, r0, #114	@ 0x72
 800ad98:	eb02 0445 	add.w	r4, r2, r5, lsl #1
 800ad9c:	4613      	mov	r3, r2
    int32_t wAvrSpeed_dpp = (int32_t)0;
 800ad9e:	f04f 0c00 	mov.w	ip, #0
      wAvrSpeed_dpp += (int32_t)(pHandle->Speed_Buffer[i]);
 800ada2:	f933 ef02 	ldrsh.w	lr, [r3, #2]!
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800ada6:	42a3      	cmp	r3, r4
      wAvrSpeed_dpp += (int32_t)(pHandle->Speed_Buffer[i]);
 800ada8:	44f4      	add	ip, lr
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800adaa:	d1fa      	bne.n	800ada2 <STO_PLL_CalcAvrgMecSpeedUnit+0x1a>
      wAvrSpeed_dpp = wAvrSpeed_dpp / ((int16_t)bSpeedBufferSizeUnit);
 800adac:	fb9c fef5 	sdiv	lr, ip, r5
    int32_t wAvrQuadraticError = 0;
 800adb0:	f04f 0c00 	mov.w	ip, #0
      wError = ((int32_t)pHandle->Speed_Buffer[i]) - wAvrSpeed_dpp;
 800adb4:	f932 3f02 	ldrsh.w	r3, [r2, #2]!
 800adb8:	eba3 030e 	sub.w	r3, r3, lr
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800adbc:	42a2      	cmp	r2, r4
      wAvrQuadraticError += wError;
 800adbe:	fb03 cc03 	mla	ip, r3, r3, ip
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800adc2:	d1f7      	bne.n	800adb4 <STO_PLL_CalcAvrgMecSpeedUnit+0x2c>
    wAvrQuadraticError = wAvrQuadraticError / ((int16_t)bSpeedBufferSizeUnit);
 800adc4:	fb9c f2f5 	sdiv	r2, ip, r5
    wAvrSquareSpeed = wAvrSpeed_dpp * wAvrSpeed_dpp;
 800adc8:	fb0e f30e 	mul.w	r3, lr, lr
    int64_t lAvrSquareSpeed = (int64_t)(wAvrSquareSpeed) * (int64_t)pHandle->VariancePercentage;
 800adcc:	17de      	asrs	r6, r3, #31
 800adce:	f8b0 c110 	ldrh.w	ip, [r0, #272]	@ 0x110
    wAux = wAvrSpeed_dpp * ((int32_t)pHandle->_Super.hMeasurementFrequency);
 800add2:	8b45      	ldrh	r5, [r0, #26]
    int64_t lAvrSquareSpeed = (int64_t)(wAvrSquareSpeed) * (int64_t)pHandle->VariancePercentage;
 800add4:	fbac 4303 	umull	r4, r3, ip, r3
 800add8:	fb0c 3306 	mla	r3, ip, r6, r3
    wAvrSquareSpeed = (int32_t)(lAvrSquareSpeed / (int64_t)128);
 800addc:	09e4      	lsrs	r4, r4, #7
 800adde:	ea44 6443 	orr.w	r4, r4, r3, lsl #25
    wAux = wAux * ((int32_t)pHandle->_Super.SpeedUnit);
 800ade2:	7883      	ldrb	r3, [r0, #2]
    if (true == pHandle->EnableDualCheck) /* Do algorithm if it's enabled */
 800ade4:	f890 6104 	ldrb.w	r6, [r0, #260]	@ 0x104
    wAux = wAvrSpeed_dpp * ((int32_t)pHandle->_Super.hMeasurementFrequency);
 800ade8:	fb0e f505 	mul.w	r5, lr, r5
    if (wAvrQuadraticError < wAvrSquareSpeed)
 800adec:	4294      	cmp	r4, r2
    wAux = wAux * ((int32_t)pHandle->_Super.SpeedUnit);
 800adee:	fb05 f303 	mul.w	r3, r5, r3
    if (wAvrQuadraticError < wAvrSquareSpeed)
 800adf2:	bfd8      	it	le
 800adf4:	f04f 0c00 	movle.w	ip, #0
    wAux = wAux / ((int32_t)pHandle->_Super.DPPConvFactor);
 800adf8:	69c5      	ldr	r5, [r0, #28]
 800adfa:	fb93 f3f5 	sdiv	r3, r3, r5
    if (wAvrQuadraticError < wAvrSquareSpeed)
 800adfe:	bfc8      	it	gt
 800ae00:	f04f 0c01 	movgt.w	ip, #1
    wAux = wAux / ((int16_t)pHandle->_Super.bElToMecRatio);
 800ae04:	7845      	ldrb	r5, [r0, #1]
 800ae06:	fb93 f3f5 	sdiv	r3, r3, r5
    *pMecSpeedUnit = (int16_t)wAux;
 800ae0a:	b21d      	sxth	r5, r3
 800ae0c:	800d      	strh	r5, [r1, #0]
    int64_t lAvrSquareSpeed = (int64_t)(wAvrSquareSpeed) * (int64_t)pHandle->VariancePercentage;
 800ae0e:	2700      	movs	r7, #0
    pHandle->_Super.hAvrMecSpeedUnit = (int16_t)wAux;
 800ae10:	8185      	strh	r5, [r0, #12]
    if (wAvrQuadraticError < wAvrSquareSpeed)
 800ae12:	f880 c0f5 	strb.w	ip, [r0, #245]	@ 0xf5
    if (false == pHandle->IsAlgorithmConverged)
 800ae16:	f890 50f8 	ldrb.w	r5, [r0, #248]	@ 0xf8
    if (true == pHandle->EnableDualCheck) /* Do algorithm if it's enabled */
 800ae1a:	b996      	cbnz	r6, 800ae42 <STO_PLL_CalcAvrgMecSpeedUnit+0xba>
    if (false == pHandle->IsAlgorithmConverged)
 800ae1c:	2d00      	cmp	r5, #0
 800ae1e:	d049      	beq.n	800aeb4 <STO_PLL_CalcAvrgMecSpeedUnit+0x12c>
      if ((false == pHandle->IsSpeedReliable) || (false == bIs_Bemf_Consistent))
 800ae20:	4294      	cmp	r4, r2
 800ae22:	dc44      	bgt.n	800aeae <STO_PLL_CalcAvrgMecSpeedUnit+0x126>
        pHandle->ReliabilityCounter++;
 800ae24:	f890 30f7 	ldrb.w	r3, [r0, #247]	@ 0xf7
        if (pHandle->ReliabilityCounter >= pHandle->_Super.bMaximumSpeedErrorsNumber)
 800ae28:	78c2      	ldrb	r2, [r0, #3]
        pHandle->ReliabilityCounter++;
 800ae2a:	3301      	adds	r3, #1
 800ae2c:	b2db      	uxtb	r3, r3
        if (pHandle->ReliabilityCounter >= pHandle->_Super.bMaximumSpeedErrorsNumber)
 800ae2e:	4293      	cmp	r3, r2
        pHandle->ReliabilityCounter++;
 800ae30:	f880 30f7 	strb.w	r3, [r0, #247]	@ 0xf7
        if (pHandle->ReliabilityCounter >= pHandle->_Super.bMaximumSpeedErrorsNumber)
 800ae34:	d33e      	bcc.n	800aeb4 <STO_PLL_CalcAvrgMecSpeedUnit+0x12c>
          pHandle->ReliabilityCounter = 0U;
 800ae36:	2300      	movs	r3, #0
 800ae38:	f880 30f7 	strb.w	r3, [r0, #247]	@ 0xf7
          pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 800ae3c:	7002      	strb	r2, [r0, #0]
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wAux = ((wAux < 0) ? (-wAux) : (wAux));
 800ae42:	2b00      	cmp	r3, #0
      if (wAux < (int32_t)(pHandle->MaxAppPositiveMecSpeedUnit))
 800ae44:	f8b0 611a 	ldrh.w	r6, [r0, #282]	@ 0x11a
      wAux = ((wAux < 0) ? (-wAux) : (wAux));
 800ae48:	bfb8      	it	lt
 800ae4a:	425b      	neglt	r3, r3
      if (wAux < (int32_t)(pHandle->MaxAppPositiveMecSpeedUnit))
 800ae4c:	429e      	cmp	r6, r3
 800ae4e:	dd35      	ble.n	800aebc <STO_PLL_CalcAvrgMecSpeedUnit+0x134>
        wObsBemf = (int32_t)pHandle->hBemf_alfa_est;
 800ae50:	f9b0 6070 	ldrsh.w	r6, [r0, #112]	@ 0x70
        wObsBemf = (int32_t)pHandle->hBemf_beta_est;
 800ae54:	f9b0 7072 	ldrsh.w	r7, [r0, #114]	@ 0x72
        wObsBemfSq = wObsBemf * wObsBemf;
 800ae58:	fb06 fc06 	mul.w	ip, r6, r6
        wEstBemfSq = (wEstBemf * ((int32_t)pHandle->BemfConsistencyGain)) / 64;
 800ae5c:	f890 6118 	ldrb.w	r6, [r0, #280]	@ 0x118
        wObsBemfSq += wObsBemf * wObsBemf;
 800ae60:	fb07 c707 	mla	r7, r7, r7, ip
        wEstBemf = (wAux * 32767) / ((int16_t)pHandle->_Super.hMaxReliableMecSpeedUnit);
 800ae64:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 800ae68:	f9b0 c014 	ldrsh.w	ip, [r0, #20]
 800ae6c:	fb93 f3fc 	sdiv	r3, r3, ip
        wEstBemfSq = (wEstBemf * ((int32_t)pHandle->BemfConsistencyGain)) / 64;
 800ae70:	fb03 f606 	mul.w	r6, r3, r6
 800ae74:	2e00      	cmp	r6, #0
 800ae76:	bfb8      	it	lt
 800ae78:	363f      	addlt	r6, #63	@ 0x3f
 800ae7a:	11b6      	asrs	r6, r6, #6
        wEstBemfSq *= wEstBemf;
 800ae7c:	fb06 f303 	mul.w	r3, r6, r3
        wEstBemfSqLo = wEstBemfSq - ((wEstBemfSq / 64) * ((int32_t)pHandle->BemfConsistencyCheck));
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	461e      	mov	r6, r3
 800ae84:	f890 c117 	ldrb.w	ip, [r0, #279]	@ 0x117
 800ae88:	bfb8      	it	lt
 800ae8a:	f103 063f 	addlt.w	r6, r3, #63	@ 0x3f
 800ae8e:	11b6      	asrs	r6, r6, #6
      pHandle->Est_Bemf_Level = wEstBemfSq;
 800ae90:	e9c0 733f 	strd	r7, r3, [r0, #252]	@ 0xfc
        wEstBemfSqLo = wEstBemfSq - ((wEstBemfSq / 64) * ((int32_t)pHandle->BemfConsistencyCheck));
 800ae94:	fb0c 3316 	mls	r3, ip, r6, r3
        if (wObsBemfSq > wEstBemfSqLo)
 800ae98:	429f      	cmp	r7, r3
 800ae9a:	bfd4      	ite	le
 800ae9c:	2600      	movle	r6, #0
 800ae9e:	2601      	movgt	r6, #1
 800aea0:	f880 60f9 	strb.w	r6, [r0, #249]	@ 0xf9
    if (false == pHandle->IsAlgorithmConverged)
 800aea4:	b135      	cbz	r5, 800aeb4 <STO_PLL_CalcAvrgMecSpeedUnit+0x12c>
      if ((false == pHandle->IsSpeedReliable) || (false == bIs_Bemf_Consistent))
 800aea6:	4294      	cmp	r4, r2
 800aea8:	ddbc      	ble.n	800ae24 <STO_PLL_CalcAvrgMecSpeedUnit+0x9c>
 800aeaa:	429f      	cmp	r7, r3
 800aeac:	ddba      	ble.n	800ae24 <STO_PLL_CalcAvrgMecSpeedUnit+0x9c>
        pHandle->ReliabilityCounter = 0U;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	f880 30f7 	strb.w	r3, [r0, #247]	@ 0xf7
}
 800aeb4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        bAux = SPD_IsMecSpeedReliable (&pHandle->_Super, pMecSpeedUnit);
 800aeb8:	f7ff bd7e 	b.w	800a9b8 <SPD_IsMecSpeedReliable>
      pHandle->Est_Bemf_Level = wEstBemfSq;
 800aebc:	e9c0 773f 	strd	r7, r7, [r0, #252]	@ 0xfc
      pHandle->IsBemfConsistent = bIs_Bemf_Consistent;
 800aec0:	f880 70f9 	strb.w	r7, [r0, #249]	@ 0xf9
    if (false == pHandle->IsAlgorithmConverged)
 800aec4:	2d00      	cmp	r5, #0
 800aec6:	d1ad      	bne.n	800ae24 <STO_PLL_CalcAvrgMecSpeedUnit+0x9c>
 800aec8:	e7f4      	b.n	800aeb4 <STO_PLL_CalcAvrgMecSpeedUnit+0x12c>
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800aeca:	462a      	mov	r2, r5
 800aecc:	462b      	mov	r3, r5
 800aece:	462e      	mov	r6, r5
 800aed0:	46ae      	mov	lr, r5
 800aed2:	e77c      	b.n	800adce <STO_PLL_CalcAvrgMecSpeedUnit+0x46>

0800aed4 <STO_PLL_CalcAvrgElSpeedDpp>:
    int16_t hIndexNew = (int16_t)pHandle->Speed_Buffer_Index;
 800aed4:	f890 20f4 	ldrb.w	r2, [r0, #244]	@ 0xf4
    int16_t hSpeedBufferSizeUnit = (int16_t)pHandle->SpeedBufferSizeUnit;
 800aed8:	f890 c10e 	ldrb.w	ip, [r0, #270]	@ 0x10e
    hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 800aedc:	f890 110f 	ldrb.w	r1, [r0, #271]	@ 0x10f
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 800aee0:	eb00 0342 	add.w	r3, r0, r2, lsl #1
{
 800aee4:	b410      	push	{r4}
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 800aee6:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	@ 0x74
 800aeea:	f8d0 4108 	ldr.w	r4, [r0, #264]	@ 0x108
    hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 800aeee:	ebac 0101 	sub.w	r1, ip, r1
 800aef2:	b289      	uxth	r1, r1
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 800aef4:	4423      	add	r3, r4
    if (0 == hBufferSizeDiff)
 800aef6:	b959      	cbnz	r1, 800af10 <STO_PLL_CalcAvrgElSpeedDpp+0x3c>
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 800aef8:	f9b0 210c 	ldrsh.w	r2, [r0, #268]	@ 0x10c
 800aefc:	1a9b      	subs	r3, r3, r2
  wAvrSpeed_dpp = wSum >> pHandle->SpeedBufferSizeDppLOG;
 800aefe:	f8b0 2120 	ldrh.w	r2, [r0, #288]	@ 0x120
    pHandle->DppBufferSum = wSum;
 800af02:	f8c0 3108 	str.w	r3, [r0, #264]	@ 0x108
  wAvrSpeed_dpp = wSum >> pHandle->SpeedBufferSizeDppLOG;
 800af06:	4113      	asrs	r3, r2
}
 800af08:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.hElSpeedDpp = (int16_t)wAvrSpeed_dpp;
 800af0c:	81c3      	strh	r3, [r0, #14]
}
 800af0e:	4770      	bx	lr
      hIndexOldTemp = hIndexNew + hBufferSizeDiff;
 800af10:	440a      	add	r2, r1
 800af12:	b291      	uxth	r1, r2
 800af14:	b212      	sxth	r2, r2
      if (hIndexOldTemp >= hSpeedBufferSizeUnit)
 800af16:	4594      	cmp	ip, r2
        hIndexOld = hIndexOldTemp - hSpeedBufferSizeUnit;
 800af18:	bfdc      	itt	le
 800af1a:	eba1 010c 	suble.w	r1, r1, ip
 800af1e:	b20a      	sxthle	r2, r1
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->Speed_Buffer[hIndexOld];
 800af20:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800af24:	f9b2 2074 	ldrsh.w	r2, [r2, #116]	@ 0x74
 800af28:	1a9b      	subs	r3, r3, r2
 800af2a:	e7e8      	b.n	800aefe <STO_PLL_CalcAvrgElSpeedDpp+0x2a>

0800af2c <STO_PLL_Clear>:
{
 800af2c:	b510      	push	{r4, lr}
  *
  */
static inline void STO_InitSpeedBuffer(STO_PLL_Handle_t * pHandle)
{
  uint8_t b_i;
  uint8_t bSpeedBufferSize = pHandle->SpeedBufferSizeUnit;
 800af2e:	f890 210e 	ldrb.w	r2, [r0, #270]	@ 0x10e
    pHandle->Ialfa_est = (int32_t)0;
 800af32:	2100      	movs	r1, #0
    pHandle->Ibeta_est = (int32_t)0;
 800af34:	e9c0 1118 	strd	r1, r1, [r0, #96]	@ 0x60
    pHandle->wBemf_beta_est = (int32_t)0;
 800af38:	e9c0 111a 	strd	r1, r1, [r0, #104]	@ 0x68
    pHandle->Est_Bemf_Level = (int32_t)0;
 800af3c:	e9c0 113f 	strd	r1, r1, [r0, #252]	@ 0xfc
{
 800af40:	4604      	mov	r4, r0
    pHandle->_Super.hElAngle = (int16_t)0;
 800af42:	8081      	strh	r1, [r0, #4]
    pHandle->_Super.hElSpeedDpp = (int16_t)0;
 800af44:	81c1      	strh	r1, [r0, #14]
    pHandle->ConsistencyCounter = 0u;
 800af46:	f8a0 10f6 	strh.w	r1, [r0, #246]	@ 0xf6
    pHandle->IsAlgorithmConverged = false;
 800af4a:	f8a0 10f8 	strh.w	r1, [r0, #248]	@ 0xf8
    pHandle->DppBufferSum = (int32_t)0;
 800af4e:	f8c0 1108 	str.w	r1, [r0, #264]	@ 0x108
    pHandle->ForceConvergency = false;
 800af52:	f8a0 1122 	strh.w	r1, [r0, #290]	@ 0x122

  /* Init speed buffer */
  for (b_i = 0U; b_i < bSpeedBufferSize; b_i++)
 800af56:	b11a      	cbz	r2, 800af60 <STO_PLL_Clear+0x34>
  {
    pHandle->Speed_Buffer[b_i] = (int16_t)0;
 800af58:	0052      	lsls	r2, r2, #1
 800af5a:	3074      	adds	r0, #116	@ 0x74
 800af5c:	f000 f868 	bl	800b030 <memset>
  }
  pHandle->Speed_Buffer_Index = 0U;
 800af60:	2100      	movs	r1, #0
 800af62:	f884 10f4 	strb.w	r1, [r4, #244]	@ 0xf4
  pHandle->SpeedBufferOldestEl = (int16_t)0;
 800af66:	f8a4 110c 	strh.w	r1, [r4, #268]	@ 0x10c
    PID_SetIntegralTerm(& pHandle->PIRegulator, (int32_t)0);
 800af6a:	f104 0034 	add.w	r0, r4, #52	@ 0x34
}
 800af6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    PID_SetIntegralTerm(& pHandle->PIRegulator, (int32_t)0);
 800af72:	f7fe bcc1 	b.w	80098f8 <PID_SetIntegralTerm>
 800af76:	bf00      	nop

0800af78 <STO_PLL_Init>:
{
 800af78:	b510      	push	{r4, lr}
    pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 800af7a:	f890 1116 	ldrb.w	r1, [r0, #278]	@ 0x116
    htempk = (int16_t)(C6_COMP_CONST1 / pHandle->hF2);
 800af7e:	4b19      	ldr	r3, [pc, #100]	@ (800afe4 <STO_PLL_Init+0x6c>)
 800af80:	f9b0 e02e 	ldrsh.w	lr, [r0, #46]	@ 0x2e
    pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 800af84:	f880 10f6 	strb.w	r1, [r0, #246]	@ 0xf6
    pHandle->EnableDualCheck = true;
 800af88:	2201      	movs	r2, #1
    pHandle->F3POW2 = 0U;
 800af8a:	2100      	movs	r1, #0
    htempk = (int16_t)(C6_COMP_CONST1 / pHandle->hF2);
 800af8c:	fb93 f3fe 	sdiv	r3, r3, lr
 800af90:	b21b      	sxth	r3, r3
{
 800af92:	4604      	mov	r4, r0
    pHandle->EnableDualCheck = true;
 800af94:	f880 2104 	strb.w	r2, [r0, #260]	@ 0x104
    pHandle->F3POW2 = 0U;
 800af98:	8641      	strh	r1, [r0, #50]	@ 0x32
    while (htempk != 0)
 800af9a:	b30b      	cbz	r3, 800afe0 <STO_PLL_Init+0x68>
    wAux = ((int32_t)1);
 800af9c:	4611      	mov	r1, r2
      htempk /= ((int16_t)2);
 800af9e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    while (htempk != 0)
 800afa2:	f102 0c01 	add.w	ip, r2, #1
 800afa6:	105b      	asrs	r3, r3, #1
 800afa8:	4610      	mov	r0, r2
      wAux *= ((int32_t)2);
 800afaa:	ea4f 0141 	mov.w	r1, r1, lsl #1
    while (htempk != 0)
 800afae:	fa1f f28c 	uxth.w	r2, ip
 800afb2:	d1f4      	bne.n	800af9e <STO_PLL_Init+0x26>
    pHandle->hF3 = (int16_t)wAux;
 800afb4:	b20a      	sxth	r2, r1
 800afb6:	8660      	strh	r0, [r4, #50]	@ 0x32
    wAux = ((int32_t)(pHandle->hF2)) * pHandle->hF3;
 800afb8:	fb0e f102 	mul.w	r1, lr, r2
    pHandle->hC6 = (int16_t)(wAux / C6_COMP_CONST2);
 800afbc:	480a      	ldr	r0, [pc, #40]	@ (800afe8 <STO_PLL_Init+0x70>)
    pHandle->hF3 = (int16_t)wAux;
 800afbe:	8622      	strh	r2, [r4, #48]	@ 0x30
    pHandle->hC6 = (int16_t)(wAux / C6_COMP_CONST2);
 800afc0:	17cb      	asrs	r3, r1, #31
 800afc2:	fb80 0101 	smull	r0, r1, r0, r1
 800afc6:	ebc3 2321 	rsb	r3, r3, r1, asr #8
 800afca:	8563      	strh	r3, [r4, #42]	@ 0x2a
    STO_PLL_Clear(pHandle);
 800afcc:	4620      	mov	r0, r4
 800afce:	f7ff ffad 	bl	800af2c <STO_PLL_Clear>
    PID_HandleInit(&pHandle->PIRegulator);
 800afd2:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 800afd6:	f7fe fc7b 	bl	80098d0 <PID_HandleInit>
    pHandle->_Super.hMecAccelUnitP = 0;
 800afda:	2300      	movs	r3, #0
 800afdc:	8263      	strh	r3, [r4, #18]
}
 800afde:	bd10      	pop	{r4, pc}
 800afe0:	4671      	mov	r1, lr
 800afe2:	e7eb      	b.n	800afbc <STO_PLL_Init+0x44>
 800afe4:	000fea5e 	.word	0x000fea5e
 800afe8:	06488dc5 	.word	0x06488dc5

0800afec <STO_PLL_GetEstimatedBemf>:
    vaux.beta = pHandle->hBemf_beta_est;
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
  return (vaux);
}
 800afec:	6f00      	ldr	r0, [r0, #112]	@ 0x70
{
 800afee:	b082      	sub	sp, #8
}
 800aff0:	b002      	add	sp, #8
 800aff2:	4770      	bx	lr

0800aff4 <STO_PLL_GetEstimatedCurrent>:
  * @brief  Exports from @p pHandle the stator current alpha-beta as estimated by state observer.
  * 
  * @retval alphabeta_t State observer estimated stator current Ialpha-beta.
  */
__weak alphabeta_t STO_PLL_GetEstimatedCurrent(STO_PLL_Handle_t *pHandle)
{
 800aff4:	4603      	mov	r3, r0
  iaux.beta = (int16_t)(pHandle->Ibeta_est / pHandle->hF1);
#endif
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
  return (iaux);
 800aff6:	2000      	movs	r0, #0
  iaux.alpha = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 800aff8:	f8b3 111c 	ldrh.w	r1, [r3, #284]	@ 0x11c
  iaux.beta = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
 800affc:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
  iaux.alpha = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 800b000:	410a      	asrs	r2, r1
  return (iaux);
 800b002:	410b      	asrs	r3, r1
 800b004:	b292      	uxth	r2, r2
 800b006:	f362 000f 	bfi	r0, r2, #0, #16
 800b00a:	b29b      	uxth	r3, r3
{
 800b00c:	b082      	sub	sp, #8
  return (iaux);
 800b00e:	f363 401f 	bfi	r0, r3, #16, #16
}
 800b012:	b002      	add	sp, #8
 800b014:	4770      	bx	lr
 800b016:	bf00      	nop

0800b018 <STO_PLL_GetObserverGains>:
    /* Nothing to do */
  }
  else
  {
#endif
    *phC2 = pHandle->hC2;
 800b018:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 800b01c:	800b      	strh	r3, [r1, #0]
    *phC4 = pHandle->hC4;
 800b01e:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	@ 0x26
 800b022:	8013      	strh	r3, [r2, #0]
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800b024:	4770      	bx	lr
 800b026:	bf00      	nop

0800b028 <STO_PLL_SetObserverGains>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hC2 = hhC1;
 800b028:	8441      	strh	r1, [r0, #34]	@ 0x22
    pHandle->hC4 = hhC2;
 800b02a:	84c2      	strh	r2, [r0, #38]	@ 0x26
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800b02c:	4770      	bx	lr
 800b02e:	bf00      	nop

0800b030 <memset>:
 800b030:	4402      	add	r2, r0
 800b032:	4603      	mov	r3, r0
 800b034:	4293      	cmp	r3, r2
 800b036:	d100      	bne.n	800b03a <memset+0xa>
 800b038:	4770      	bx	lr
 800b03a:	f803 1b01 	strb.w	r1, [r3], #1
 800b03e:	e7f9      	b.n	800b034 <memset+0x4>

0800b040 <__libc_init_array>:
 800b040:	b570      	push	{r4, r5, r6, lr}
 800b042:	4d0d      	ldr	r5, [pc, #52]	@ (800b078 <__libc_init_array+0x38>)
 800b044:	4c0d      	ldr	r4, [pc, #52]	@ (800b07c <__libc_init_array+0x3c>)
 800b046:	1b64      	subs	r4, r4, r5
 800b048:	10a4      	asrs	r4, r4, #2
 800b04a:	2600      	movs	r6, #0
 800b04c:	42a6      	cmp	r6, r4
 800b04e:	d109      	bne.n	800b064 <__libc_init_array+0x24>
 800b050:	4d0b      	ldr	r5, [pc, #44]	@ (800b080 <__libc_init_array+0x40>)
 800b052:	4c0c      	ldr	r4, [pc, #48]	@ (800b084 <__libc_init_array+0x44>)
 800b054:	f000 f826 	bl	800b0a4 <_init>
 800b058:	1b64      	subs	r4, r4, r5
 800b05a:	10a4      	asrs	r4, r4, #2
 800b05c:	2600      	movs	r6, #0
 800b05e:	42a6      	cmp	r6, r4
 800b060:	d105      	bne.n	800b06e <__libc_init_array+0x2e>
 800b062:	bd70      	pop	{r4, r5, r6, pc}
 800b064:	f855 3b04 	ldr.w	r3, [r5], #4
 800b068:	4798      	blx	r3
 800b06a:	3601      	adds	r6, #1
 800b06c:	e7ee      	b.n	800b04c <__libc_init_array+0xc>
 800b06e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b072:	4798      	blx	r3
 800b074:	3601      	adds	r6, #1
 800b076:	e7f2      	b.n	800b05e <__libc_init_array+0x1e>
 800b078:	0800b37c 	.word	0x0800b37c
 800b07c:	0800b37c 	.word	0x0800b37c
 800b080:	0800b37c 	.word	0x0800b37c
 800b084:	0800b380 	.word	0x0800b380

0800b088 <memcpy>:
 800b088:	440a      	add	r2, r1
 800b08a:	4291      	cmp	r1, r2
 800b08c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b090:	d100      	bne.n	800b094 <memcpy+0xc>
 800b092:	4770      	bx	lr
 800b094:	b510      	push	{r4, lr}
 800b096:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b09a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b09e:	4291      	cmp	r1, r2
 800b0a0:	d1f9      	bne.n	800b096 <memcpy+0xe>
 800b0a2:	bd10      	pop	{r4, pc}

0800b0a4 <_init>:
 800b0a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0a6:	bf00      	nop
 800b0a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0aa:	bc08      	pop	{r3}
 800b0ac:	469e      	mov	lr, r3
 800b0ae:	4770      	bx	lr

0800b0b0 <_fini>:
 800b0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0b2:	bf00      	nop
 800b0b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0b6:	bc08      	pop	{r3}
 800b0b8:	469e      	mov	lr, r3
 800b0ba:	4770      	bx	lr
